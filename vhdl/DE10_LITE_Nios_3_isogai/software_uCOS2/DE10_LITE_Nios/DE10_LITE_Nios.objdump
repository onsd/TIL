
DE10_LITE_Nios.elf:     file format elf32-littlenios2
DE10_LITE_Nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020230

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x0000da64 memsz 0x0000da64 flags r-x
    LOAD off    0x0000f000 vaddr 0x00000000 paddr 0x0402da84 align 2**12
         filesz 0x00001c74 memsz 0x00009050 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d854  04020230  04020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000180  00000000  0402da84  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00000180  0402dc04  0000f180  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073dc  00001c74  0402f6f8  00010c74  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00009050  00009050  00010c74  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  0402f6f8  0402f6f8  00010c74  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  00010c74  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b90  00000000  00000000  00010cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001fbbc  00000000  00000000  00011850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007ae6  00000000  00000000  0003140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008f22  00000000  00000000  00038ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002600  00000000  00000000  00041e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003901  00000000  00000000  00044414  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  00047d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0004c7f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  0004c800  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00050cea  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00050cf0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00050cfc  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00050cfd  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00050cfe  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00050d02  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00050d06  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00050d0a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00050d13  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00050d1c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000e  00000000  00000000  00050d25  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000018  00000000  00000000  00050d33  2**0
                  CONTENTS, READONLY
 30 .jdi          00005517  00000000  00000000  00050d4b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000666be  00000000  00000000  00056262  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020230 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000180 l    d  .rwdata	00000000 .rwdata
00001c74 l    d  .bss	00000000 .bss
00009050 l    d  .sdram	00000000 .sdram
0402f6f8 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE10_LITE_Nios_bsp//obj/HAL/src/crt0.o
04020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
040204f4 l     F .text	00000008 __fp_unlock
04020508 l     F .text	0000019c __sinit.part.1
040206a4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000180 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
04023194 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
040232a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040232d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
040233c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
040234b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0402359c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
04023770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001be8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
040239e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00001bec l     O .rwdata	00000004 lockid
00001c94 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00001bf0 l     O .rwdata	00000004 lockid
00001c9c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0402541c l     F .text	00000048 OS_InitMisc
04025464 l     F .text	0000006c OS_InitRdyList
040255d0 l     F .text	000000e4 OS_InitTCBList
0402533c l     F .text	000000e0 OS_InitEventList
040254d0 l     F .text	00000080 OS_InitTaskIdle
04025550 l     F .text	00000080 OS_InitTaskStat
04025840 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
04027550 l     F .text	000000f4 OS_FlagTaskRdy
04027310 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0402b628 l     F .text	00000034 alt_dev_reg
00000b54 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0402b9a4 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0402bc48 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0402c424 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0402c664 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0402cac4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0402cc24 l     F .text	0000003c alt_get_errno
0402cc60 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001d00 g     O .bss	00000004 alt_instruction_exception_handler
00001c3e g     O .rwdata	00000002 OSTaskNameSize
04022f64 g     F .text	00000054 _isatty_r
040236b4 g     F .text	000000bc alt_main
04020388 g     F .text	000000c0 _puts_r
00008f50 g     O .bss	00000100 alt_irq
04022c8c g     F .text	00000060 _lseek_r
04027d70 g     F .text	000000d8 OS_MemInit
0402dc04 g       *ABS*	00000000 __flash_rwdata_start
0402b5c8 g     F .text	00000060 OSTimeSet
04024090 g     F .text	00000610 OSEventPendMulti
00009050 g       *ABS*	00000000 __alt_heap_start
0402d29c g     F .text	00000024 OSTaskCreateHook
00001d2c g     O .bss	00002000 task1_stk
00001c16 g     O .rwdata	00000002 OSMboxEn
040246f8 g     F .text	0000004c OSIntEnter
04022240 g     F .text	0000005c __sseek
04020854 g     F .text	00000010 __sinit
00001c26 g     O .rwdata	00000002 OSQEn
040206ac g     F .text	00000078 __sfmoreglue
04023d64 g     F .text	000000cc __malloc_unlock
0402d304 g     F .text	00000020 OSTaskStatHook
00001ca4 g     O .bss	00000001 OSLockNesting
00001c64 g     O .rwdata	00000002 OSDataSize
00001ca5 g     O .bss	00000001 OSRunning
0402192c g     F .text	0000015c memmove
0402d344 g     F .text	00000020 OSInitHookBegin
00001c5c g     O .rwdata	00000002 OSTmrSize
0402083c g     F .text	00000018 _cleanup
00001ca8 g     O .bss	00000004 OSIdleCtr
0402d04c g     F .text	00000024 altera_nios2_gen2_irq_init
0402d11c g       .text	00000000 OSStartTsk
04025b70 g     F .text	000002d4 OS_TCBInit
04020000 g     F .entry	0000000c __reset
00001c62 g     O .rwdata	00000002 OSTmrWheelTblSize
04020020 g       *ABS*	00000000 __flash_exceptions_start
00001c02 g     O .rwdata	00000002 OSEventSize
00001cac g     O .bss	00000001 OSPrioHighRdy
04022f08 g     F .text	0000005c _fstat_r
0402d2c0 g     F .text	00000024 OSTaskDelHook
00001c80 g     O .bss	00000004 errno
040221bc g     F .text	00000008 __seofread
0402d0fc g       .text	00000000 OSStartHighRdy
0402a048 g     F .text	000001e4 OSTaskCreateExt
04026e58 g     F .text	00000060 OSFlagPendGetFlagsRdy
00001c42 g     O .rwdata	00000002 OSTaskStatStkSize
04025fd4 g     F .text	00000308 OSFlagAccept
040283b4 g     F .text	000000b8 OSQFlush
04027e48 g     F .text	00000140 OSQAccept
00001c8c g     O .bss	00000004 alt_argv
00009bc0 g       *ABS*	00000000 _gp
04029e9c g     F .text	000001ac OSTaskCreate
040299ac g     F .text	000004f0 OSTaskChangePrio
00001ca0 g     O .bss	00000004 alt_heapsem
04025e44 g     F .text	00000190 OSDebugInit
0402a22c g     F .text	00000344 OSTaskDel
000009d4 g     O .rwdata	00000180 alt_fd_list
00005d2c g     O .bss	00000370 OSFlagTbl
0402511c g     F .text	000000b8 OS_EventTaskRemove
0402d3c8 g     F .text	00000090 alt_find_dev
040217e4 g     F .text	00000148 memcpy
00001c2c g     O .rwdata	00000002 OSRdyTblSize
040204fc g     F .text	0000000c _cleanup_r
0402cba8 g     F .text	0000007c alt_io_redirect
0402da84 g       *ABS*	00000000 __DTOR_END__
04020448 g     F .text	00000014 puts
0402d654 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04023e30 g     F .text	00000120 OSEventNameGet
00001c10 g     O .rwdata	00000002 OSFlagMax
04024744 g     F .text	000000f8 OSIntExit
00001c4a g     O .rwdata	00000002 OSTCBSize
00001cad g     O .bss	00000001 OSPrioCur
0402bea4 g     F .text	000002bc altera_avalon_jtag_uart_read
040230b0 g     F .text	00000064 .hidden __udivsi3
04023404 g     F .text	000000ac isatty
00001c30 g     O .rwdata	00000002 OSStkWidth
00001c24 g     O .rwdata	00000002 OSPtrSize
00001c04 g     O .rwdata	00000002 OSEventTblSize
0402d070 g       .text	00000000 OSCtxSw
00001c7c g     O .bss	00000004 __malloc_top_pad
00001cb0 g     O .bss	00000004 OSTCBList
00001c84 g     O .bss	00000004 alt_fd_list_lock
040208a4 g     F .text	000004c8 __sfvwrite_r
0000609c g     O .bss	00000c30 OSMemTbl
00001cb4 g     O .bss	00000001 OSTickStepState
04022114 g     F .text	00000054 _sbrk_r
00001c28 g     O .rwdata	00000002 OSQMax
00006ccc g     O .bss	00000800 OSTaskStatStk
040279ac g     F .text	000000f0 OSMemNameGet
00001c08 g     O .rwdata	00000002 OSFlagEn
04022ea8 g     F .text	00000060 _read_r
00001c4e g     O .rwdata	00000002 OSTimeTickHookEn
04028864 g     F .text	00000168 OSQPost
04027644 g     F .text	000000a4 OS_FlagUnlink
00001be0 g     O .rwdata	00000004 alt_max_fd
04025708 g     F .text	00000068 OS_MemCopy
04025770 g     F .text	000000d0 OS_Sched
040224ac g     F .text	000000f0 _fclose_r
040278bc g     F .text	000000f0 OSMemGet
0402a858 g     F .text	000001b4 OSTaskNameSet
04022828 g     F .text	00000030 fflush
00001c78 g     O .bss	00000004 __malloc_max_sbrked_mem
00001cb8 g     O .bss	00000004 OSCtxSwCtr
0402d324 g     F .text	00000020 OSTimeTickHook
00001c12 g     O .rwdata	00000002 OSFlagNameSize
040251d4 g     F .text	00000100 OS_EventTaskRemoveMulti
04024fcc g     F .text	00000150 OS_EventTaskWaitMulti
00001c2a g     O .rwdata	00000002 OSQSize
040235d8 g     F .text	000000dc lseek
04029314 g     F .text	0000020c OSSemPend
00001bc0 g     O .rwdata	00000004 _global_impure_ptr
04021bb0 g     F .text	00000564 _realloc_r
00001c14 g     O .rwdata	00000002 OSLowestPrio
00009050 g       *ABS*	00000000 __bss_end
0402c9d4 g     F .text	000000f0 alt_iic_isr_register
0402d3a4 g     F .text	00000024 OSTCBInitHook
00001c5a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0402cf44 g     F .text	00000108 alt_tick
00001bfc g     O .rwdata	00000002 OSEventEn
00001c56 g     O .rwdata	00000002 OSTmrCfgNameSize
04020874 g     F .text	00000018 __fp_lock_all
0402c988 g     F .text	0000004c alt_ic_irq_enabled
04027470 g     F .text	000000e0 OS_FlagInit
0402cea8 g     F .text	0000009c alt_alarm_stop
00001c38 g     O .rwdata	00000002 OSTaskIdleStkSize
00001cf4 g     O .bss	00000004 alt_irq_active
04028f4c g     F .text	000000b0 OSSemAccept
04027bb0 g     F .text	000000d8 OSMemPut
040276e8 g     F .text	000001d4 OSMemCreate
00001cbc g     O .bss	00000004 OSIdleCtrMax
040200fc g     F .exceptions	000000d4 alt_irq_handler
000009ac g     O .rwdata	00000028 alt_dev_null
00001c4c g     O .rwdata	00000002 OSTicksPerSec
0402d070 g       .text	00000000 OSIntCtxSw
0402c644 g     F .text	00000020 alt_dcache_flush_all
00001cc0 g     O .bss	00000004 OSTCBFreeList
00001c74 g       *ABS*	00000000 __ram_rwdata_end
04029520 g     F .text	0000016c OSSemPendAbort
00001bd8 g     O .rwdata	00000008 alt_dev_list
04023a20 g     F .text	00000100 write
00001c50 g     O .rwdata	00000002 OSVersionNbr
00000180 g       *ABS*	00000000 __ram_rodata_end
04023310 g     F .text	000000b8 fstat
00001bf8 g     O .rwdata	00000004 OSEndiannessTest
04023114 g     F .text	00000058 .hidden __umodsi3
00001c0a g     O .rwdata	00000002 OSFlagGrpSize
00009050 g       *ABS*	00000000 end
0402b85c g     F .text	00000148 altera_avalon_jtag_uart_init
040259d8 g     F .text	000000cc OS_TaskStat
040201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0402da84 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0402c49c g     F .text	0000007c alt_avalon_timer_sc_init
0402c160 g     F .text	000002c4 altera_avalon_jtag_uart_write
04020864 g     F .text	00000004 __sfp_lock_acquire
04021700 g     F .text	000000e4 memchr
040256b4 g     F .text	00000054 OS_MemClr
0402d140 g     F .text	0000015c OSTaskStkInit
0402026c g     F .text	00000038 task1
0402297c g     F .text	00000310 _free_r
04024d24 g     F .text	00000198 OS_EventTaskRdy
0402d8d0 g     F .text	00000180 __call_exitprocs
00001cc4 g     O .bss	00000001 OSCPUUsage
00001bc8 g     O .rwdata	00000004 __malloc_sbrk_base
04020230 g     F .text	0000003c _start
040202a4 g     F .text	00000038 task2
00001cf8 g     O .bss	00000004 _alt_tick_rate
0402846c g     F .text	0000028c OSQPend
0402b118 g     F .text	00000104 OSTimeDly
00001cfc g     O .bss	00000004 _alt_nticks
040237ac g     F .text	00000104 read
0402b694 g     F .text	00000064 alt_sys_init
0402d7b8 g     F .text	00000118 __register_exitproc
00001cc5 g     O .bss	00000001 OSTaskCtr
0402b21c g     F .text	0000017c OSTimeDlyHMSM
0402bd4c g     F .text	00000068 altera_avalon_jtag_uart_close
0402316c g     F .text	00000028 .hidden __mulsi3
00000180 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001d04 g     O .bss	00000028 __malloc_current_mallinfo
00001bfe g     O .rwdata	00000002 OSEventMax
0402968c g     F .text	00000110 OSSemPost
040248c8 g     F .text	000000dc OSSchedUnlock
0402b6f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0402d560 g     F .text	000000f4 alt_get_fd
00001cc8 g     O .bss	00000004 OSMemFreeList
04024a14 g     F .text	000000b0 OSStatInit
0402724c g     F .text	000000c4 OSFlagQuery
00001c34 g     O .rwdata	00000002 OSTaskCreateExtEn
04022458 g     F .text	00000054 _close_r
0402d73c g     F .text	0000007c memcmp
04024d04 g     F .text	00000020 OS_Dummy
0402b7b8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00009050 g       *ABS*	00000000 __alt_stack_base
0402b808 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04022304 g     F .text	00000154 __swsetup_r
000074cc g     O .bss	000001e0 OSQTbl
04020724 g     F .text	00000118 __sfp
000005a4 g     O .rwdata	00000408 __malloc_av_
04020870 g     F .text	00000004 __sinit_lock_release
00001ccc g     O .bss	00000004 OSTCBHighRdy
04022168 g     F .text	00000054 __sread
00001cd0 g     O .bss	00000004 OSQFreeList
0402d458 g     F .text	00000108 alt_find_file
0402c6a0 g     F .text	000000a4 alt_dev_llist_insert
04023c44 g     F .text	00000120 __malloc_lock
04023934 g     F .text	000000b0 sbrk
04023f50 g     F .text	00000140 OSEventNameSet
040227cc g     F .text	0000005c _fflush_r
00001cd4 g     O .bss	00000001 OSRdyGrp
00001c74 g       *ABS*	00000000 __bss_start
04021a88 g     F .text	00000128 memset
040202dc g     F .text	000000ac main
00001c90 g     O .bss	00000004 alt_envp
00001c74 g     O .bss	00000004 __malloc_max_total_mem
0402b758 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000004c g     O .rodata	00000100 OSUnMapTbl
00001c2e g     O .rwdata	00000002 OSSemEn
04026eb8 g     F .text	00000394 OSFlagPost
0402229c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0402259c g     F .text	00000014 fclose
04024ebc g     F .text	00000110 OS_EventTaskWait
00003d2c g     O .bss	00002000 task2_stk
04025aa4 g     F .text	000000cc OS_TaskStatStkChk
0402a570 g     F .text	00000150 OSTaskDelReq
04020ef4 g     F .text	0000080c _malloc_r
00001be4 g     O .rwdata	00000004 alt_errno
040249a4 g     F .text	00000070 OSStart
04023be4 g     F .text	00000060 __env_unlock
04020d6c g     F .text	000000c4 _fwalk
0402aa0c g     F .text	000001d4 OSTaskResume
04027c88 g     F .text	000000e8 OSMemQuery
00001c40 g     O .rwdata	00000002 OSTaskStatEn
00001c1a g     O .rwdata	00000002 OSMemMax
040289cc g     F .text	00000170 OSQPostFront
04022fb8 g     F .text	00000084 .hidden __divsi3
00001cd5 g     O .bss	00000003 OSRdyTbl
00001bf4 g     O .rwdata	00000002 OSDebugEn
04022858 g     F .text	00000124 _malloc_trim_r
0402da84 g       *ABS*	00000000 __CTOR_END__
00001c0c g     O .rwdata	00000002 OSFlagNodeSize
00001c54 g     O .rwdata	00000002 OSTmrCfgMax
04027f88 g     F .text	000001ac OSQCreate
0402a6c0 g     F .text	00000198 OSTaskNameGet
0402da84 g       *ABS*	00000000 __flash_rodata_start
04028b3c g     F .text	0000020c OSQPostOpt
04024ac4 g     F .text	00000220 OSTimeTick
00001c3c g     O .rwdata	00000002 OSTaskMax
0402da84 g       *ABS*	00000000 __DTOR_LIST__
04028ffc g     F .text	000000d8 OSSemCreate
00001c60 g     O .rwdata	00000002 OSTmrWheelSize
00001c36 g     O .rwdata	00000002 OSTaskDelEn
0402979c g     F .text	00000110 OSSemQuery
04028134 g     F .text	00000280 OSQDel
040286f8 g     F .text	0000016c OSQPendAbort
0402b65c g     F .text	00000038 alt_irq_init
040238b0 g     F .text	00000084 alt_release_fd
0402d6f0 g     F .text	00000014 atexit
040222a4 g     F .text	00000060 _write_r
0402483c g     F .text	0000008c OSSchedLock
040262dc g     F .text	00000108 OSFlagCreate
00001bc4 g     O .rwdata	00000004 _impure_ptr
00001c88 g     O .bss	00000004 alt_argc
040225b0 g     F .text	0000021c __sflush_r
0402c7a4 g     F .text	00000060 _do_dtors
00001c06 g     O .rwdata	00000002 OSEventMultiEn
040263e4 g     F .text	00000248 OSFlagDel
00001cd8 g     O .bss	00000004 OSEventFreeList
04020020 g       .exceptions	00000000 alt_irq_entry
040268a0 g     F .text	000005b8 OSFlagPend
00001c52 g     O .rwdata	00000002 OSTmrEn
0402088c g     F .text	00000018 __fp_unlock_all
00001bd0 g     O .rwdata	00000008 alt_fs_list
040258b4 g     F .text	00000074 OS_StrCopy
00001c1c g     O .rwdata	00000002 OSMemNameSize
0402d364 g     F .text	00000020 OSInitHookEnd
04020020 g       *ABS*	00000000 __ram_exceptions_start
00001c48 g     O .rwdata	00000002 OSTCBPrioTblMax
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00001c44 g     O .rwdata	00000002 OSTaskStatStkChkEn
0402c824 g     F .text	00000050 alt_ic_isr_register
00001c18 g     O .rwdata	00000002 OSMemEn
00001c22 g     O .rwdata	00000002 OSMutexEn
00001c74 g       *ABS*	00000000 _edata
00009050 g       *ABS*	00000000 _end
00001cdc g     O .bss	00000001 OSIntNesting
04020230 g       *ABS*	00000000 __ram_exceptions_end
0402bdb4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0402b398 g     F .text	000001d4 OSTimeDlyResume
04026754 g     F .text	0000014c OSFlagNameSet
0402abe0 g     F .text	000001c0 OSTaskStkChk
0402c8fc g     F .text	0000008c alt_ic_irq_disable
00001c1e g     O .rwdata	00000002 OSMemSize
040221c4 g     F .text	0000007c __swrite
00001bcc g     O .rwdata	00000004 __malloc_trim_threshold
00001ce0 g     O .bss	00000004 OSTCBCur
0402d704 g     F .text	00000038 exit
00001c20 g     O .rwdata	00000002 OSMemTblSize
04020e30 g     F .text	000000c4 _fwalk_reent
0402303c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
04020868 g     F .text	00000004 __sfp_lock_release
040246a0 g     F .text	00000058 OSInit
00000000 g       *ABS*	00000000 __alt_mem_sdram
0402af84 g     F .text	00000124 OSTaskQuery
04028ea4 g     F .text	000000a8 OS_QInit
04025928 g     F .text	00000054 OS_StrLen
04027a9c g     F .text	00000114 OSMemNameSet
00001c3a g     O .rwdata	00000002 OSTaskProfileEn
00001ce4 g     O .bss	00000004 OSTime
000076ac g     O .bss	00000800 OSTaskIdleStk
0402da50 g     F .text	00000034 _exit
0402c518 g     F .text	0000012c alt_alarm_start
0402662c g     F .text	00000128 OSFlagNameGet
0402b56c g     F .text	0000005c OSTimeGet
04022cec g     F .text	000001bc __smakebuf_r
0402045c g     F .text	00000098 strlen
0402d2e4 g     F .text	00000020 OSTaskSwHook
0402cd4c g     F .text	0000015c open
00007eac g     O .bss	00000b40 OSEventTbl
000089ec g     O .bss	00000510 OSTCBTbl
040298ac g     F .text	00000100 OSSemSet
0402c804 g     F .text	00000020 alt_icache_flush_all
00001c68 g     O .rwdata	00000004 alt_priority_mask
040290d4 g     F .text	00000240 OSSemDel
00001ce8 g     O .bss	00000004 OSFlagFreeList
0402c874 g     F .text	00000088 alt_ic_irq_enable
00001c00 g     O .rwdata	00000002 OSEventNameSize
00001cec g     O .bss	00000001 OSStatRdy
00008efc g     O .bss	00000054 OSTCBPrioTbl
04023b20 g     F .text	000000c4 __env_lock
00001c46 g     O .rwdata	00000002 OSTaskSwHookEn
00001c6c g     O .rwdata	00000008 alt_alarm_list
00001c0e g     O .rwdata	00000002 OSFlagWidth
0402c744 g     F .text	00000060 _do_ctors
040231d0 g     F .text	000000d8 close
00001c98 g     O .bss	00000004 alt_envsem
00001cf0 g     O .bss	00000004 OSIdleCtrRun
04024ce4 g     F .text	00000020 OSVersion
00001c58 g     O .rwdata	00000002 OSTmrCfgWheelSize
04023518 g     F .text	00000084 alt_load
0402b0a8 g     F .text	00000070 OS_TaskStkClr
00001c32 g     O .rwdata	00000002 OSTaskCreateEn
040252d4 g     F .text	00000068 OS_EventWaitListInit
0402d384 g     F .text	00000020 OSTaskIdleHook
0402086c g     F .text	00000004 __sinit_lock_acquire
0402ada0 g     F .text	000001e4 OSTaskSuspend
0402597c g     F .text	0000005c OS_TaskIdle
00001c5e g     O .rwdata	00000002 OSTmrTblSize
04028d48 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

04020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020000:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020004:	08408c14 	ori	at,at,560
    jmp r1
 4020008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	40246f80 	call	40246f8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	00800074 	movhi	r2,1
 4020140:	10a3d404 	addi	r2,r2,-28848
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	00800074 	movhi	r2,1
 4020158:	10a3d404 	addi	r2,r2,-28848
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__flash_rwdata_start+0xffff2528>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__flash_rwdata_start+0xffff251c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	40247440 	call	4024744 <OSIntExit>
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40201e4:	00bfffc4 	movi	r2,-1
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40201f0:	d0a05017 	ldw	r2,-32448(gp)
 40201f4:	10000726 	beq	r2,zero,4020214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40201f8:	d0a05017 	ldw	r2,-32448(gp)
 40201fc:	e0fffd17 	ldw	r3,-12(fp)
 4020200:	e1bffe17 	ldw	r6,-8(fp)
 4020204:	e17fff17 	ldw	r5,-4(fp)
 4020208:	1809883a 	mov	r4,r3
 402020c:	103ee83a 	callr	r2
 4020210:	00000206 	br	402021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4020218:	0005883a 	mov	r2,zero
}
 402021c:	e037883a 	mov	sp,fp
 4020220:	dfc00117 	ldw	ra,4(sp)
 4020224:	df000017 	ldw	fp,0(sp)
 4020228:	dec00204 	addi	sp,sp,8
 402022c:	f800283a 	ret

Disassembly of section .text:

04020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4020234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4020238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 402023c:	d6a6f014 	ori	gp,gp,39872
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4020244:	10871d14 	ori	r2,r2,7284

    movhi r3, %hi(__bss_end)
 4020248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 402024c:	18e41414 	ori	r3,r3,36944

    beq r2, r3, 1f
 4020250:	10c00326 	beq	r2,r3,4020260 <_start+0x30>

0:
    stw zero, (r2)
 4020254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4020258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 402025c:	10fffd36 	bltu	r2,r3,4020254 <__flash_rwdata_start+0xffff2650>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020260:	40235180 	call	4023518 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020264:	40236b40 	call	40236b4 <alt_main>

04020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4020268:	003fff06 	br	4020268 <__flash_rwdata_start+0xffff2664>

0402026c <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
 402026c:	defffd04 	addi	sp,sp,-12
 4020270:	dfc00215 	stw	ra,8(sp)
 4020274:	df000115 	stw	fp,4(sp)
 4020278:	df000104 	addi	fp,sp,4
 402027c:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
 4020280:	01000034 	movhi	r4,0
 4020284:	21000004 	addi	r4,r4,0
 4020288:	40204480 	call	4020448 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
 402028c:	000f883a 	mov	r7,zero
 4020290:	018000c4 	movi	r6,3
 4020294:	000b883a 	mov	r5,zero
 4020298:	0009883a 	mov	r4,zero
 402029c:	402b21c0 	call	402b21c <OSTimeDlyHMSM>
  }
 40202a0:	003ff706 	br	4020280 <__flash_rwdata_start+0xffff267c>

040202a4 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
 40202a4:	defffd04 	addi	sp,sp,-12
 40202a8:	dfc00215 	stw	ra,8(sp)
 40202ac:	df000115 	stw	fp,4(sp)
 40202b0:	df000104 	addi	fp,sp,4
 40202b4:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
 40202b8:	01000034 	movhi	r4,0
 40202bc:	21000504 	addi	r4,r4,20
 40202c0:	40204480 	call	4020448 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
 40202c4:	000f883a 	mov	r7,zero
 40202c8:	018000c4 	movi	r6,3
 40202cc:	000b883a 	mov	r5,zero
 40202d0:	0009883a 	mov	r4,zero
 40202d4:	402b21c0 	call	402b21c <OSTimeDlyHMSM>
  }
 40202d8:	003ff706 	br	40202b8 <__flash_rwdata_start+0xffff26b4>

040202dc <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
 40202dc:	defff904 	addi	sp,sp,-28
 40202e0:	dfc00615 	stw	ra,24(sp)
 40202e4:	df000515 	stw	fp,20(sp)
 40202e8:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
 40202ec:	d8000415 	stw	zero,16(sp)
 40202f0:	d8000315 	stw	zero,12(sp)
 40202f4:	00820004 	movi	r2,2048
 40202f8:	d8800215 	stw	r2,8(sp)
 40202fc:	00800034 	movhi	r2,0
 4020300:	10874b04 	addi	r2,r2,7468
 4020304:	d8800115 	stw	r2,4(sp)
 4020308:	00800044 	movi	r2,1
 402030c:	d8800015 	stw	r2,0(sp)
 4020310:	01c00044 	movi	r7,1
 4020314:	01800034 	movhi	r6,0
 4020318:	318f4a04 	addi	r6,r6,15656
 402031c:	000b883a 	mov	r5,zero
 4020320:	010100b4 	movhi	r4,1026
 4020324:	21009b04 	addi	r4,r4,620
 4020328:	402a0480 	call	402a048 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
 402032c:	d8000415 	stw	zero,16(sp)
 4020330:	d8000315 	stw	zero,12(sp)
 4020334:	00820004 	movi	r2,2048
 4020338:	d8800215 	stw	r2,8(sp)
 402033c:	00800034 	movhi	r2,0
 4020340:	108f4b04 	addi	r2,r2,15660
 4020344:	d8800115 	stw	r2,4(sp)
 4020348:	00800084 	movi	r2,2
 402034c:	d8800015 	stw	r2,0(sp)
 4020350:	01c00084 	movi	r7,2
 4020354:	01800034 	movhi	r6,0
 4020358:	31974a04 	addi	r6,r6,23848
 402035c:	000b883a 	mov	r5,zero
 4020360:	010100b4 	movhi	r4,1026
 4020364:	2100a904 	addi	r4,r4,676
 4020368:	402a0480 	call	402a048 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
 402036c:	40249a40 	call	40249a4 <OSStart>
  return 0;
 4020370:	0005883a 	mov	r2,zero
}
 4020374:	e037883a 	mov	sp,fp
 4020378:	dfc00117 	ldw	ra,4(sp)
 402037c:	df000017 	ldw	fp,0(sp)
 4020380:	dec00204 	addi	sp,sp,8
 4020384:	f800283a 	ret

04020388 <_puts_r>:
 4020388:	defff604 	addi	sp,sp,-40
 402038c:	dc000715 	stw	r16,28(sp)
 4020390:	2021883a 	mov	r16,r4
 4020394:	2809883a 	mov	r4,r5
 4020398:	dc400815 	stw	r17,32(sp)
 402039c:	dfc00915 	stw	ra,36(sp)
 40203a0:	2823883a 	mov	r17,r5
 40203a4:	402045c0 	call	402045c <strlen>
 40203a8:	10c00044 	addi	r3,r2,1
 40203ac:	d8800115 	stw	r2,4(sp)
 40203b0:	00800034 	movhi	r2,0
 40203b4:	10800a04 	addi	r2,r2,40
 40203b8:	d8800215 	stw	r2,8(sp)
 40203bc:	00800044 	movi	r2,1
 40203c0:	d8800315 	stw	r2,12(sp)
 40203c4:	00800084 	movi	r2,2
 40203c8:	dc400015 	stw	r17,0(sp)
 40203cc:	d8c00615 	stw	r3,24(sp)
 40203d0:	dec00415 	stw	sp,16(sp)
 40203d4:	d8800515 	stw	r2,20(sp)
 40203d8:	80000226 	beq	r16,zero,40203e4 <_puts_r+0x5c>
 40203dc:	80800e17 	ldw	r2,56(r16)
 40203e0:	10001426 	beq	r2,zero,4020434 <_puts_r+0xac>
 40203e4:	81400217 	ldw	r5,8(r16)
 40203e8:	2880030b 	ldhu	r2,12(r5)
 40203ec:	10c8000c 	andi	r3,r2,8192
 40203f0:	1800061e 	bne	r3,zero,402040c <_puts_r+0x84>
 40203f4:	29001917 	ldw	r4,100(r5)
 40203f8:	00f7ffc4 	movi	r3,-8193
 40203fc:	10880014 	ori	r2,r2,8192
 4020400:	20c6703a 	and	r3,r4,r3
 4020404:	2880030d 	sth	r2,12(r5)
 4020408:	28c01915 	stw	r3,100(r5)
 402040c:	d9800404 	addi	r6,sp,16
 4020410:	8009883a 	mov	r4,r16
 4020414:	40208a40 	call	40208a4 <__sfvwrite_r>
 4020418:	1000091e 	bne	r2,zero,4020440 <_puts_r+0xb8>
 402041c:	00800284 	movi	r2,10
 4020420:	dfc00917 	ldw	ra,36(sp)
 4020424:	dc400817 	ldw	r17,32(sp)
 4020428:	dc000717 	ldw	r16,28(sp)
 402042c:	dec00a04 	addi	sp,sp,40
 4020430:	f800283a 	ret
 4020434:	8009883a 	mov	r4,r16
 4020438:	40208540 	call	4020854 <__sinit>
 402043c:	003fe906 	br	40203e4 <__flash_rwdata_start+0xffff27e0>
 4020440:	00bfffc4 	movi	r2,-1
 4020444:	003ff606 	br	4020420 <__flash_rwdata_start+0xffff281c>

04020448 <puts>:
 4020448:	00800034 	movhi	r2,0
 402044c:	1086f104 	addi	r2,r2,7108
 4020450:	200b883a 	mov	r5,r4
 4020454:	11000017 	ldw	r4,0(r2)
 4020458:	40203881 	jmpi	4020388 <_puts_r>

0402045c <strlen>:
 402045c:	208000cc 	andi	r2,r4,3
 4020460:	10002026 	beq	r2,zero,40204e4 <strlen+0x88>
 4020464:	20800007 	ldb	r2,0(r4)
 4020468:	10002026 	beq	r2,zero,40204ec <strlen+0x90>
 402046c:	2005883a 	mov	r2,r4
 4020470:	00000206 	br	402047c <strlen+0x20>
 4020474:	10c00007 	ldb	r3,0(r2)
 4020478:	18001826 	beq	r3,zero,40204dc <strlen+0x80>
 402047c:	10800044 	addi	r2,r2,1
 4020480:	10c000cc 	andi	r3,r2,3
 4020484:	183ffb1e 	bne	r3,zero,4020474 <__flash_rwdata_start+0xffff2870>
 4020488:	10c00017 	ldw	r3,0(r2)
 402048c:	01ffbff4 	movhi	r7,65279
 4020490:	39ffbfc4 	addi	r7,r7,-257
 4020494:	00ca303a 	nor	r5,zero,r3
 4020498:	01a02074 	movhi	r6,32897
 402049c:	19c7883a 	add	r3,r3,r7
 40204a0:	31a02004 	addi	r6,r6,-32640
 40204a4:	1946703a 	and	r3,r3,r5
 40204a8:	1986703a 	and	r3,r3,r6
 40204ac:	1800091e 	bne	r3,zero,40204d4 <strlen+0x78>
 40204b0:	10800104 	addi	r2,r2,4
 40204b4:	10c00017 	ldw	r3,0(r2)
 40204b8:	19cb883a 	add	r5,r3,r7
 40204bc:	00c6303a 	nor	r3,zero,r3
 40204c0:	28c6703a 	and	r3,r5,r3
 40204c4:	1986703a 	and	r3,r3,r6
 40204c8:	183ff926 	beq	r3,zero,40204b0 <__flash_rwdata_start+0xffff28ac>
 40204cc:	00000106 	br	40204d4 <strlen+0x78>
 40204d0:	10800044 	addi	r2,r2,1
 40204d4:	10c00007 	ldb	r3,0(r2)
 40204d8:	183ffd1e 	bne	r3,zero,40204d0 <__flash_rwdata_start+0xffff28cc>
 40204dc:	1105c83a 	sub	r2,r2,r4
 40204e0:	f800283a 	ret
 40204e4:	2005883a 	mov	r2,r4
 40204e8:	003fe706 	br	4020488 <__flash_rwdata_start+0xffff2884>
 40204ec:	0005883a 	mov	r2,zero
 40204f0:	f800283a 	ret

040204f4 <__fp_unlock>:
 40204f4:	0005883a 	mov	r2,zero
 40204f8:	f800283a 	ret

040204fc <_cleanup_r>:
 40204fc:	014100b4 	movhi	r5,1026
 4020500:	29492b04 	addi	r5,r5,9388
 4020504:	4020e301 	jmpi	4020e30 <_fwalk_reent>

04020508 <__sinit.part.1>:
 4020508:	defff704 	addi	sp,sp,-36
 402050c:	00c100b4 	movhi	r3,1026
 4020510:	dfc00815 	stw	ra,32(sp)
 4020514:	ddc00715 	stw	r23,28(sp)
 4020518:	dd800615 	stw	r22,24(sp)
 402051c:	dd400515 	stw	r21,20(sp)
 4020520:	dd000415 	stw	r20,16(sp)
 4020524:	dcc00315 	stw	r19,12(sp)
 4020528:	dc800215 	stw	r18,8(sp)
 402052c:	dc400115 	stw	r17,4(sp)
 4020530:	dc000015 	stw	r16,0(sp)
 4020534:	18c13f04 	addi	r3,r3,1276
 4020538:	24000117 	ldw	r16,4(r4)
 402053c:	20c00f15 	stw	r3,60(r4)
 4020540:	2080bb04 	addi	r2,r4,748
 4020544:	00c000c4 	movi	r3,3
 4020548:	20c0b915 	stw	r3,740(r4)
 402054c:	2080ba15 	stw	r2,744(r4)
 4020550:	2000b815 	stw	zero,736(r4)
 4020554:	05c00204 	movi	r23,8
 4020558:	00800104 	movi	r2,4
 402055c:	2025883a 	mov	r18,r4
 4020560:	b80d883a 	mov	r6,r23
 4020564:	81001704 	addi	r4,r16,92
 4020568:	000b883a 	mov	r5,zero
 402056c:	80000015 	stw	zero,0(r16)
 4020570:	80000115 	stw	zero,4(r16)
 4020574:	80000215 	stw	zero,8(r16)
 4020578:	8080030d 	sth	r2,12(r16)
 402057c:	80001915 	stw	zero,100(r16)
 4020580:	8000038d 	sth	zero,14(r16)
 4020584:	80000415 	stw	zero,16(r16)
 4020588:	80000515 	stw	zero,20(r16)
 402058c:	80000615 	stw	zero,24(r16)
 4020590:	4021a880 	call	4021a88 <memset>
 4020594:	058100b4 	movhi	r22,1026
 4020598:	94400217 	ldw	r17,8(r18)
 402059c:	054100b4 	movhi	r21,1026
 40205a0:	050100b4 	movhi	r20,1026
 40205a4:	04c100b4 	movhi	r19,1026
 40205a8:	b5885a04 	addi	r22,r22,8552
 40205ac:	ad487104 	addi	r21,r21,8644
 40205b0:	a5089004 	addi	r20,r20,8768
 40205b4:	9cc8a704 	addi	r19,r19,8860
 40205b8:	85800815 	stw	r22,32(r16)
 40205bc:	85400915 	stw	r21,36(r16)
 40205c0:	85000a15 	stw	r20,40(r16)
 40205c4:	84c00b15 	stw	r19,44(r16)
 40205c8:	84000715 	stw	r16,28(r16)
 40205cc:	00800284 	movi	r2,10
 40205d0:	8880030d 	sth	r2,12(r17)
 40205d4:	00800044 	movi	r2,1
 40205d8:	b80d883a 	mov	r6,r23
 40205dc:	89001704 	addi	r4,r17,92
 40205e0:	000b883a 	mov	r5,zero
 40205e4:	88000015 	stw	zero,0(r17)
 40205e8:	88000115 	stw	zero,4(r17)
 40205ec:	88000215 	stw	zero,8(r17)
 40205f0:	88001915 	stw	zero,100(r17)
 40205f4:	8880038d 	sth	r2,14(r17)
 40205f8:	88000415 	stw	zero,16(r17)
 40205fc:	88000515 	stw	zero,20(r17)
 4020600:	88000615 	stw	zero,24(r17)
 4020604:	4021a880 	call	4021a88 <memset>
 4020608:	94000317 	ldw	r16,12(r18)
 402060c:	00800484 	movi	r2,18
 4020610:	8c400715 	stw	r17,28(r17)
 4020614:	8d800815 	stw	r22,32(r17)
 4020618:	8d400915 	stw	r21,36(r17)
 402061c:	8d000a15 	stw	r20,40(r17)
 4020620:	8cc00b15 	stw	r19,44(r17)
 4020624:	8080030d 	sth	r2,12(r16)
 4020628:	00800084 	movi	r2,2
 402062c:	80000015 	stw	zero,0(r16)
 4020630:	80000115 	stw	zero,4(r16)
 4020634:	80000215 	stw	zero,8(r16)
 4020638:	80001915 	stw	zero,100(r16)
 402063c:	8080038d 	sth	r2,14(r16)
 4020640:	80000415 	stw	zero,16(r16)
 4020644:	80000515 	stw	zero,20(r16)
 4020648:	80000615 	stw	zero,24(r16)
 402064c:	b80d883a 	mov	r6,r23
 4020650:	000b883a 	mov	r5,zero
 4020654:	81001704 	addi	r4,r16,92
 4020658:	4021a880 	call	4021a88 <memset>
 402065c:	00800044 	movi	r2,1
 4020660:	84000715 	stw	r16,28(r16)
 4020664:	85800815 	stw	r22,32(r16)
 4020668:	85400915 	stw	r21,36(r16)
 402066c:	85000a15 	stw	r20,40(r16)
 4020670:	84c00b15 	stw	r19,44(r16)
 4020674:	90800e15 	stw	r2,56(r18)
 4020678:	dfc00817 	ldw	ra,32(sp)
 402067c:	ddc00717 	ldw	r23,28(sp)
 4020680:	dd800617 	ldw	r22,24(sp)
 4020684:	dd400517 	ldw	r21,20(sp)
 4020688:	dd000417 	ldw	r20,16(sp)
 402068c:	dcc00317 	ldw	r19,12(sp)
 4020690:	dc800217 	ldw	r18,8(sp)
 4020694:	dc400117 	ldw	r17,4(sp)
 4020698:	dc000017 	ldw	r16,0(sp)
 402069c:	dec00904 	addi	sp,sp,36
 40206a0:	f800283a 	ret

040206a4 <__fp_lock>:
 40206a4:	0005883a 	mov	r2,zero
 40206a8:	f800283a 	ret

040206ac <__sfmoreglue>:
 40206ac:	defffc04 	addi	sp,sp,-16
 40206b0:	dc800215 	stw	r18,8(sp)
 40206b4:	2825883a 	mov	r18,r5
 40206b8:	dc000015 	stw	r16,0(sp)
 40206bc:	01401a04 	movi	r5,104
 40206c0:	2021883a 	mov	r16,r4
 40206c4:	913fffc4 	addi	r4,r18,-1
 40206c8:	dfc00315 	stw	ra,12(sp)
 40206cc:	dc400115 	stw	r17,4(sp)
 40206d0:	402316c0 	call	402316c <__mulsi3>
 40206d4:	8009883a 	mov	r4,r16
 40206d8:	11401d04 	addi	r5,r2,116
 40206dc:	1023883a 	mov	r17,r2
 40206e0:	4020ef40 	call	4020ef4 <_malloc_r>
 40206e4:	1021883a 	mov	r16,r2
 40206e8:	10000726 	beq	r2,zero,4020708 <__sfmoreglue+0x5c>
 40206ec:	11000304 	addi	r4,r2,12
 40206f0:	10000015 	stw	zero,0(r2)
 40206f4:	14800115 	stw	r18,4(r2)
 40206f8:	11000215 	stw	r4,8(r2)
 40206fc:	89801a04 	addi	r6,r17,104
 4020700:	000b883a 	mov	r5,zero
 4020704:	4021a880 	call	4021a88 <memset>
 4020708:	8005883a 	mov	r2,r16
 402070c:	dfc00317 	ldw	ra,12(sp)
 4020710:	dc800217 	ldw	r18,8(sp)
 4020714:	dc400117 	ldw	r17,4(sp)
 4020718:	dc000017 	ldw	r16,0(sp)
 402071c:	dec00404 	addi	sp,sp,16
 4020720:	f800283a 	ret

04020724 <__sfp>:
 4020724:	defffb04 	addi	sp,sp,-20
 4020728:	dc000015 	stw	r16,0(sp)
 402072c:	04000034 	movhi	r16,0
 4020730:	8406f004 	addi	r16,r16,7104
 4020734:	dcc00315 	stw	r19,12(sp)
 4020738:	2027883a 	mov	r19,r4
 402073c:	81000017 	ldw	r4,0(r16)
 4020740:	dfc00415 	stw	ra,16(sp)
 4020744:	dc800215 	stw	r18,8(sp)
 4020748:	20800e17 	ldw	r2,56(r4)
 402074c:	dc400115 	stw	r17,4(sp)
 4020750:	1000021e 	bne	r2,zero,402075c <__sfp+0x38>
 4020754:	40205080 	call	4020508 <__sinit.part.1>
 4020758:	81000017 	ldw	r4,0(r16)
 402075c:	2480b804 	addi	r18,r4,736
 4020760:	047fffc4 	movi	r17,-1
 4020764:	91000117 	ldw	r4,4(r18)
 4020768:	94000217 	ldw	r16,8(r18)
 402076c:	213fffc4 	addi	r4,r4,-1
 4020770:	20000a16 	blt	r4,zero,402079c <__sfp+0x78>
 4020774:	8080030f 	ldh	r2,12(r16)
 4020778:	10000c26 	beq	r2,zero,40207ac <__sfp+0x88>
 402077c:	80c01d04 	addi	r3,r16,116
 4020780:	00000206 	br	402078c <__sfp+0x68>
 4020784:	18bfe60f 	ldh	r2,-104(r3)
 4020788:	10000826 	beq	r2,zero,40207ac <__sfp+0x88>
 402078c:	213fffc4 	addi	r4,r4,-1
 4020790:	1c3ffd04 	addi	r16,r3,-12
 4020794:	18c01a04 	addi	r3,r3,104
 4020798:	247ffa1e 	bne	r4,r17,4020784 <__flash_rwdata_start+0xffff2b80>
 402079c:	90800017 	ldw	r2,0(r18)
 40207a0:	10001d26 	beq	r2,zero,4020818 <__sfp+0xf4>
 40207a4:	1025883a 	mov	r18,r2
 40207a8:	003fee06 	br	4020764 <__flash_rwdata_start+0xffff2b60>
 40207ac:	00bfffc4 	movi	r2,-1
 40207b0:	8080038d 	sth	r2,14(r16)
 40207b4:	00800044 	movi	r2,1
 40207b8:	8080030d 	sth	r2,12(r16)
 40207bc:	80001915 	stw	zero,100(r16)
 40207c0:	80000015 	stw	zero,0(r16)
 40207c4:	80000215 	stw	zero,8(r16)
 40207c8:	80000115 	stw	zero,4(r16)
 40207cc:	80000415 	stw	zero,16(r16)
 40207d0:	80000515 	stw	zero,20(r16)
 40207d4:	80000615 	stw	zero,24(r16)
 40207d8:	01800204 	movi	r6,8
 40207dc:	000b883a 	mov	r5,zero
 40207e0:	81001704 	addi	r4,r16,92
 40207e4:	4021a880 	call	4021a88 <memset>
 40207e8:	8005883a 	mov	r2,r16
 40207ec:	80000c15 	stw	zero,48(r16)
 40207f0:	80000d15 	stw	zero,52(r16)
 40207f4:	80001115 	stw	zero,68(r16)
 40207f8:	80001215 	stw	zero,72(r16)
 40207fc:	dfc00417 	ldw	ra,16(sp)
 4020800:	dcc00317 	ldw	r19,12(sp)
 4020804:	dc800217 	ldw	r18,8(sp)
 4020808:	dc400117 	ldw	r17,4(sp)
 402080c:	dc000017 	ldw	r16,0(sp)
 4020810:	dec00504 	addi	sp,sp,20
 4020814:	f800283a 	ret
 4020818:	01400104 	movi	r5,4
 402081c:	9809883a 	mov	r4,r19
 4020820:	40206ac0 	call	40206ac <__sfmoreglue>
 4020824:	90800015 	stw	r2,0(r18)
 4020828:	103fde1e 	bne	r2,zero,40207a4 <__flash_rwdata_start+0xffff2ba0>
 402082c:	00800304 	movi	r2,12
 4020830:	98800015 	stw	r2,0(r19)
 4020834:	0005883a 	mov	r2,zero
 4020838:	003ff006 	br	40207fc <__flash_rwdata_start+0xffff2bf8>

0402083c <_cleanup>:
 402083c:	00800034 	movhi	r2,0
 4020840:	1086f004 	addi	r2,r2,7104
 4020844:	11000017 	ldw	r4,0(r2)
 4020848:	014100b4 	movhi	r5,1026
 402084c:	29492b04 	addi	r5,r5,9388
 4020850:	4020e301 	jmpi	4020e30 <_fwalk_reent>

04020854 <__sinit>:
 4020854:	20800e17 	ldw	r2,56(r4)
 4020858:	10000126 	beq	r2,zero,4020860 <__sinit+0xc>
 402085c:	f800283a 	ret
 4020860:	40205081 	jmpi	4020508 <__sinit.part.1>

04020864 <__sfp_lock_acquire>:
 4020864:	f800283a 	ret

04020868 <__sfp_lock_release>:
 4020868:	f800283a 	ret

0402086c <__sinit_lock_acquire>:
 402086c:	f800283a 	ret

04020870 <__sinit_lock_release>:
 4020870:	f800283a 	ret

04020874 <__fp_lock_all>:
 4020874:	00800034 	movhi	r2,0
 4020878:	1086f104 	addi	r2,r2,7108
 402087c:	11000017 	ldw	r4,0(r2)
 4020880:	014100b4 	movhi	r5,1026
 4020884:	2941a904 	addi	r5,r5,1700
 4020888:	4020d6c1 	jmpi	4020d6c <_fwalk>

0402088c <__fp_unlock_all>:
 402088c:	00800034 	movhi	r2,0
 4020890:	1086f104 	addi	r2,r2,7108
 4020894:	11000017 	ldw	r4,0(r2)
 4020898:	014100b4 	movhi	r5,1026
 402089c:	29413d04 	addi	r5,r5,1268
 40208a0:	4020d6c1 	jmpi	4020d6c <_fwalk>

040208a4 <__sfvwrite_r>:
 40208a4:	30800217 	ldw	r2,8(r6)
 40208a8:	10006726 	beq	r2,zero,4020a48 <__sfvwrite_r+0x1a4>
 40208ac:	28c0030b 	ldhu	r3,12(r5)
 40208b0:	defff404 	addi	sp,sp,-48
 40208b4:	dd400715 	stw	r21,28(sp)
 40208b8:	dd000615 	stw	r20,24(sp)
 40208bc:	dc000215 	stw	r16,8(sp)
 40208c0:	dfc00b15 	stw	ra,44(sp)
 40208c4:	df000a15 	stw	fp,40(sp)
 40208c8:	ddc00915 	stw	r23,36(sp)
 40208cc:	dd800815 	stw	r22,32(sp)
 40208d0:	dcc00515 	stw	r19,20(sp)
 40208d4:	dc800415 	stw	r18,16(sp)
 40208d8:	dc400315 	stw	r17,12(sp)
 40208dc:	1880020c 	andi	r2,r3,8
 40208e0:	2821883a 	mov	r16,r5
 40208e4:	202b883a 	mov	r21,r4
 40208e8:	3029883a 	mov	r20,r6
 40208ec:	10002726 	beq	r2,zero,402098c <__sfvwrite_r+0xe8>
 40208f0:	28800417 	ldw	r2,16(r5)
 40208f4:	10002526 	beq	r2,zero,402098c <__sfvwrite_r+0xe8>
 40208f8:	1880008c 	andi	r2,r3,2
 40208fc:	a4400017 	ldw	r17,0(r20)
 4020900:	10002a26 	beq	r2,zero,40209ac <__sfvwrite_r+0x108>
 4020904:	05a00034 	movhi	r22,32768
 4020908:	0027883a 	mov	r19,zero
 402090c:	0025883a 	mov	r18,zero
 4020910:	b5bf0004 	addi	r22,r22,-1024
 4020914:	980d883a 	mov	r6,r19
 4020918:	a809883a 	mov	r4,r21
 402091c:	90004626 	beq	r18,zero,4020a38 <__sfvwrite_r+0x194>
 4020920:	900f883a 	mov	r7,r18
 4020924:	b480022e 	bgeu	r22,r18,4020930 <__sfvwrite_r+0x8c>
 4020928:	01e00034 	movhi	r7,32768
 402092c:	39ff0004 	addi	r7,r7,-1024
 4020930:	80800917 	ldw	r2,36(r16)
 4020934:	81400717 	ldw	r5,28(r16)
 4020938:	103ee83a 	callr	r2
 402093c:	00805a0e 	bge	zero,r2,4020aa8 <__sfvwrite_r+0x204>
 4020940:	a0c00217 	ldw	r3,8(r20)
 4020944:	98a7883a 	add	r19,r19,r2
 4020948:	90a5c83a 	sub	r18,r18,r2
 402094c:	1885c83a 	sub	r2,r3,r2
 4020950:	a0800215 	stw	r2,8(r20)
 4020954:	103fef1e 	bne	r2,zero,4020914 <__flash_rwdata_start+0xffff2d10>
 4020958:	0005883a 	mov	r2,zero
 402095c:	dfc00b17 	ldw	ra,44(sp)
 4020960:	df000a17 	ldw	fp,40(sp)
 4020964:	ddc00917 	ldw	r23,36(sp)
 4020968:	dd800817 	ldw	r22,32(sp)
 402096c:	dd400717 	ldw	r21,28(sp)
 4020970:	dd000617 	ldw	r20,24(sp)
 4020974:	dcc00517 	ldw	r19,20(sp)
 4020978:	dc800417 	ldw	r18,16(sp)
 402097c:	dc400317 	ldw	r17,12(sp)
 4020980:	dc000217 	ldw	r16,8(sp)
 4020984:	dec00c04 	addi	sp,sp,48
 4020988:	f800283a 	ret
 402098c:	800b883a 	mov	r5,r16
 4020990:	a809883a 	mov	r4,r21
 4020994:	40223040 	call	4022304 <__swsetup_r>
 4020998:	1000ee1e 	bne	r2,zero,4020d54 <__sfvwrite_r+0x4b0>
 402099c:	80c0030b 	ldhu	r3,12(r16)
 40209a0:	a4400017 	ldw	r17,0(r20)
 40209a4:	1880008c 	andi	r2,r3,2
 40209a8:	103fd61e 	bne	r2,zero,4020904 <__flash_rwdata_start+0xffff2d00>
 40209ac:	1880004c 	andi	r2,r3,1
 40209b0:	1000421e 	bne	r2,zero,4020abc <__sfvwrite_r+0x218>
 40209b4:	0039883a 	mov	fp,zero
 40209b8:	0025883a 	mov	r18,zero
 40209bc:	90001a26 	beq	r18,zero,4020a28 <__sfvwrite_r+0x184>
 40209c0:	1880800c 	andi	r2,r3,512
 40209c4:	84c00217 	ldw	r19,8(r16)
 40209c8:	10002126 	beq	r2,zero,4020a50 <__sfvwrite_r+0x1ac>
 40209cc:	982f883a 	mov	r23,r19
 40209d0:	94c09636 	bltu	r18,r19,4020c2c <__sfvwrite_r+0x388>
 40209d4:	1881200c 	andi	r2,r3,1152
 40209d8:	1000a11e 	bne	r2,zero,4020c60 <__sfvwrite_r+0x3bc>
 40209dc:	81000017 	ldw	r4,0(r16)
 40209e0:	b80d883a 	mov	r6,r23
 40209e4:	e00b883a 	mov	r5,fp
 40209e8:	402192c0 	call	402192c <memmove>
 40209ec:	80c00217 	ldw	r3,8(r16)
 40209f0:	81000017 	ldw	r4,0(r16)
 40209f4:	9005883a 	mov	r2,r18
 40209f8:	1ce7c83a 	sub	r19,r3,r19
 40209fc:	25cf883a 	add	r7,r4,r23
 4020a00:	84c00215 	stw	r19,8(r16)
 4020a04:	81c00015 	stw	r7,0(r16)
 4020a08:	a0c00217 	ldw	r3,8(r20)
 4020a0c:	e0b9883a 	add	fp,fp,r2
 4020a10:	90a5c83a 	sub	r18,r18,r2
 4020a14:	18a7c83a 	sub	r19,r3,r2
 4020a18:	a4c00215 	stw	r19,8(r20)
 4020a1c:	983fce26 	beq	r19,zero,4020958 <__flash_rwdata_start+0xffff2d54>
 4020a20:	80c0030b 	ldhu	r3,12(r16)
 4020a24:	903fe61e 	bne	r18,zero,40209c0 <__flash_rwdata_start+0xffff2dbc>
 4020a28:	8f000017 	ldw	fp,0(r17)
 4020a2c:	8c800117 	ldw	r18,4(r17)
 4020a30:	8c400204 	addi	r17,r17,8
 4020a34:	003fe106 	br	40209bc <__flash_rwdata_start+0xffff2db8>
 4020a38:	8cc00017 	ldw	r19,0(r17)
 4020a3c:	8c800117 	ldw	r18,4(r17)
 4020a40:	8c400204 	addi	r17,r17,8
 4020a44:	003fb306 	br	4020914 <__flash_rwdata_start+0xffff2d10>
 4020a48:	0005883a 	mov	r2,zero
 4020a4c:	f800283a 	ret
 4020a50:	81000017 	ldw	r4,0(r16)
 4020a54:	80800417 	ldw	r2,16(r16)
 4020a58:	11005a36 	bltu	r2,r4,4020bc4 <__sfvwrite_r+0x320>
 4020a5c:	85c00517 	ldw	r23,20(r16)
 4020a60:	95c05836 	bltu	r18,r23,4020bc4 <__sfvwrite_r+0x320>
 4020a64:	00a00034 	movhi	r2,32768
 4020a68:	10bfffc4 	addi	r2,r2,-1
 4020a6c:	9009883a 	mov	r4,r18
 4020a70:	1480012e 	bgeu	r2,r18,4020a78 <__sfvwrite_r+0x1d4>
 4020a74:	1009883a 	mov	r4,r2
 4020a78:	b80b883a 	mov	r5,r23
 4020a7c:	4022fb80 	call	4022fb8 <__divsi3>
 4020a80:	b80b883a 	mov	r5,r23
 4020a84:	1009883a 	mov	r4,r2
 4020a88:	402316c0 	call	402316c <__mulsi3>
 4020a8c:	81400717 	ldw	r5,28(r16)
 4020a90:	80c00917 	ldw	r3,36(r16)
 4020a94:	100f883a 	mov	r7,r2
 4020a98:	e00d883a 	mov	r6,fp
 4020a9c:	a809883a 	mov	r4,r21
 4020aa0:	183ee83a 	callr	r3
 4020aa4:	00bfd816 	blt	zero,r2,4020a08 <__flash_rwdata_start+0xffff2e04>
 4020aa8:	8080030b 	ldhu	r2,12(r16)
 4020aac:	10801014 	ori	r2,r2,64
 4020ab0:	8080030d 	sth	r2,12(r16)
 4020ab4:	00bfffc4 	movi	r2,-1
 4020ab8:	003fa806 	br	402095c <__flash_rwdata_start+0xffff2d58>
 4020abc:	0027883a 	mov	r19,zero
 4020ac0:	0011883a 	mov	r8,zero
 4020ac4:	0039883a 	mov	fp,zero
 4020ac8:	0025883a 	mov	r18,zero
 4020acc:	90001f26 	beq	r18,zero,4020b4c <__sfvwrite_r+0x2a8>
 4020ad0:	40005a26 	beq	r8,zero,4020c3c <__sfvwrite_r+0x398>
 4020ad4:	982d883a 	mov	r22,r19
 4020ad8:	94c0012e 	bgeu	r18,r19,4020ae0 <__sfvwrite_r+0x23c>
 4020adc:	902d883a 	mov	r22,r18
 4020ae0:	81000017 	ldw	r4,0(r16)
 4020ae4:	80800417 	ldw	r2,16(r16)
 4020ae8:	b02f883a 	mov	r23,r22
 4020aec:	81c00517 	ldw	r7,20(r16)
 4020af0:	1100032e 	bgeu	r2,r4,4020b00 <__sfvwrite_r+0x25c>
 4020af4:	80c00217 	ldw	r3,8(r16)
 4020af8:	38c7883a 	add	r3,r7,r3
 4020afc:	1d801816 	blt	r3,r22,4020b60 <__sfvwrite_r+0x2bc>
 4020b00:	b1c03e16 	blt	r22,r7,4020bfc <__sfvwrite_r+0x358>
 4020b04:	80800917 	ldw	r2,36(r16)
 4020b08:	81400717 	ldw	r5,28(r16)
 4020b0c:	e00d883a 	mov	r6,fp
 4020b10:	da000115 	stw	r8,4(sp)
 4020b14:	a809883a 	mov	r4,r21
 4020b18:	103ee83a 	callr	r2
 4020b1c:	102f883a 	mov	r23,r2
 4020b20:	da000117 	ldw	r8,4(sp)
 4020b24:	00bfe00e 	bge	zero,r2,4020aa8 <__flash_rwdata_start+0xffff2ea4>
 4020b28:	9de7c83a 	sub	r19,r19,r23
 4020b2c:	98001f26 	beq	r19,zero,4020bac <__sfvwrite_r+0x308>
 4020b30:	a0800217 	ldw	r2,8(r20)
 4020b34:	e5f9883a 	add	fp,fp,r23
 4020b38:	95e5c83a 	sub	r18,r18,r23
 4020b3c:	15efc83a 	sub	r23,r2,r23
 4020b40:	a5c00215 	stw	r23,8(r20)
 4020b44:	b83f8426 	beq	r23,zero,4020958 <__flash_rwdata_start+0xffff2d54>
 4020b48:	903fe11e 	bne	r18,zero,4020ad0 <__flash_rwdata_start+0xffff2ecc>
 4020b4c:	8f000017 	ldw	fp,0(r17)
 4020b50:	8c800117 	ldw	r18,4(r17)
 4020b54:	0011883a 	mov	r8,zero
 4020b58:	8c400204 	addi	r17,r17,8
 4020b5c:	003fdb06 	br	4020acc <__flash_rwdata_start+0xffff2ec8>
 4020b60:	180d883a 	mov	r6,r3
 4020b64:	e00b883a 	mov	r5,fp
 4020b68:	da000115 	stw	r8,4(sp)
 4020b6c:	d8c00015 	stw	r3,0(sp)
 4020b70:	402192c0 	call	402192c <memmove>
 4020b74:	d8c00017 	ldw	r3,0(sp)
 4020b78:	80800017 	ldw	r2,0(r16)
 4020b7c:	800b883a 	mov	r5,r16
 4020b80:	a809883a 	mov	r4,r21
 4020b84:	10c5883a 	add	r2,r2,r3
 4020b88:	80800015 	stw	r2,0(r16)
 4020b8c:	d8c00015 	stw	r3,0(sp)
 4020b90:	40227cc0 	call	40227cc <_fflush_r>
 4020b94:	d8c00017 	ldw	r3,0(sp)
 4020b98:	da000117 	ldw	r8,4(sp)
 4020b9c:	103fc21e 	bne	r2,zero,4020aa8 <__flash_rwdata_start+0xffff2ea4>
 4020ba0:	182f883a 	mov	r23,r3
 4020ba4:	9de7c83a 	sub	r19,r19,r23
 4020ba8:	983fe11e 	bne	r19,zero,4020b30 <__flash_rwdata_start+0xffff2f2c>
 4020bac:	800b883a 	mov	r5,r16
 4020bb0:	a809883a 	mov	r4,r21
 4020bb4:	40227cc0 	call	40227cc <_fflush_r>
 4020bb8:	103fbb1e 	bne	r2,zero,4020aa8 <__flash_rwdata_start+0xffff2ea4>
 4020bbc:	0011883a 	mov	r8,zero
 4020bc0:	003fdb06 	br	4020b30 <__flash_rwdata_start+0xffff2f2c>
 4020bc4:	94c0012e 	bgeu	r18,r19,4020bcc <__sfvwrite_r+0x328>
 4020bc8:	9027883a 	mov	r19,r18
 4020bcc:	980d883a 	mov	r6,r19
 4020bd0:	e00b883a 	mov	r5,fp
 4020bd4:	402192c0 	call	402192c <memmove>
 4020bd8:	80800217 	ldw	r2,8(r16)
 4020bdc:	80c00017 	ldw	r3,0(r16)
 4020be0:	14c5c83a 	sub	r2,r2,r19
 4020be4:	1cc7883a 	add	r3,r3,r19
 4020be8:	80800215 	stw	r2,8(r16)
 4020bec:	80c00015 	stw	r3,0(r16)
 4020bf0:	10004326 	beq	r2,zero,4020d00 <__sfvwrite_r+0x45c>
 4020bf4:	9805883a 	mov	r2,r19
 4020bf8:	003f8306 	br	4020a08 <__flash_rwdata_start+0xffff2e04>
 4020bfc:	b00d883a 	mov	r6,r22
 4020c00:	e00b883a 	mov	r5,fp
 4020c04:	da000115 	stw	r8,4(sp)
 4020c08:	402192c0 	call	402192c <memmove>
 4020c0c:	80800217 	ldw	r2,8(r16)
 4020c10:	80c00017 	ldw	r3,0(r16)
 4020c14:	da000117 	ldw	r8,4(sp)
 4020c18:	1585c83a 	sub	r2,r2,r22
 4020c1c:	1dad883a 	add	r22,r3,r22
 4020c20:	80800215 	stw	r2,8(r16)
 4020c24:	85800015 	stw	r22,0(r16)
 4020c28:	003fbf06 	br	4020b28 <__flash_rwdata_start+0xffff2f24>
 4020c2c:	81000017 	ldw	r4,0(r16)
 4020c30:	9027883a 	mov	r19,r18
 4020c34:	902f883a 	mov	r23,r18
 4020c38:	003f6906 	br	40209e0 <__flash_rwdata_start+0xffff2ddc>
 4020c3c:	900d883a 	mov	r6,r18
 4020c40:	01400284 	movi	r5,10
 4020c44:	e009883a 	mov	r4,fp
 4020c48:	40217000 	call	4021700 <memchr>
 4020c4c:	10003e26 	beq	r2,zero,4020d48 <__sfvwrite_r+0x4a4>
 4020c50:	10800044 	addi	r2,r2,1
 4020c54:	1727c83a 	sub	r19,r2,fp
 4020c58:	02000044 	movi	r8,1
 4020c5c:	003f9d06 	br	4020ad4 <__flash_rwdata_start+0xffff2ed0>
 4020c60:	80800517 	ldw	r2,20(r16)
 4020c64:	81400417 	ldw	r5,16(r16)
 4020c68:	81c00017 	ldw	r7,0(r16)
 4020c6c:	10a7883a 	add	r19,r2,r2
 4020c70:	9885883a 	add	r2,r19,r2
 4020c74:	1026d7fa 	srli	r19,r2,31
 4020c78:	396dc83a 	sub	r22,r7,r5
 4020c7c:	b1000044 	addi	r4,r22,1
 4020c80:	9885883a 	add	r2,r19,r2
 4020c84:	1027d07a 	srai	r19,r2,1
 4020c88:	2485883a 	add	r2,r4,r18
 4020c8c:	980d883a 	mov	r6,r19
 4020c90:	9880022e 	bgeu	r19,r2,4020c9c <__sfvwrite_r+0x3f8>
 4020c94:	1027883a 	mov	r19,r2
 4020c98:	100d883a 	mov	r6,r2
 4020c9c:	18c1000c 	andi	r3,r3,1024
 4020ca0:	18001c26 	beq	r3,zero,4020d14 <__sfvwrite_r+0x470>
 4020ca4:	300b883a 	mov	r5,r6
 4020ca8:	a809883a 	mov	r4,r21
 4020cac:	4020ef40 	call	4020ef4 <_malloc_r>
 4020cb0:	102f883a 	mov	r23,r2
 4020cb4:	10002926 	beq	r2,zero,4020d5c <__sfvwrite_r+0x4b8>
 4020cb8:	81400417 	ldw	r5,16(r16)
 4020cbc:	b00d883a 	mov	r6,r22
 4020cc0:	1009883a 	mov	r4,r2
 4020cc4:	40217e40 	call	40217e4 <memcpy>
 4020cc8:	8080030b 	ldhu	r2,12(r16)
 4020ccc:	00fedfc4 	movi	r3,-1153
 4020cd0:	10c4703a 	and	r2,r2,r3
 4020cd4:	10802014 	ori	r2,r2,128
 4020cd8:	8080030d 	sth	r2,12(r16)
 4020cdc:	bd89883a 	add	r4,r23,r22
 4020ce0:	9d8fc83a 	sub	r7,r19,r22
 4020ce4:	85c00415 	stw	r23,16(r16)
 4020ce8:	84c00515 	stw	r19,20(r16)
 4020cec:	81000015 	stw	r4,0(r16)
 4020cf0:	9027883a 	mov	r19,r18
 4020cf4:	81c00215 	stw	r7,8(r16)
 4020cf8:	902f883a 	mov	r23,r18
 4020cfc:	003f3806 	br	40209e0 <__flash_rwdata_start+0xffff2ddc>
 4020d00:	800b883a 	mov	r5,r16
 4020d04:	a809883a 	mov	r4,r21
 4020d08:	40227cc0 	call	40227cc <_fflush_r>
 4020d0c:	103fb926 	beq	r2,zero,4020bf4 <__flash_rwdata_start+0xffff2ff0>
 4020d10:	003f6506 	br	4020aa8 <__flash_rwdata_start+0xffff2ea4>
 4020d14:	a809883a 	mov	r4,r21
 4020d18:	4021bb00 	call	4021bb0 <_realloc_r>
 4020d1c:	102f883a 	mov	r23,r2
 4020d20:	103fee1e 	bne	r2,zero,4020cdc <__flash_rwdata_start+0xffff30d8>
 4020d24:	81400417 	ldw	r5,16(r16)
 4020d28:	a809883a 	mov	r4,r21
 4020d2c:	402297c0 	call	402297c <_free_r>
 4020d30:	8080030b 	ldhu	r2,12(r16)
 4020d34:	00ffdfc4 	movi	r3,-129
 4020d38:	1884703a 	and	r2,r3,r2
 4020d3c:	00c00304 	movi	r3,12
 4020d40:	a8c00015 	stw	r3,0(r21)
 4020d44:	003f5906 	br	4020aac <__flash_rwdata_start+0xffff2ea8>
 4020d48:	94c00044 	addi	r19,r18,1
 4020d4c:	02000044 	movi	r8,1
 4020d50:	003f6006 	br	4020ad4 <__flash_rwdata_start+0xffff2ed0>
 4020d54:	00bfffc4 	movi	r2,-1
 4020d58:	003f0006 	br	402095c <__flash_rwdata_start+0xffff2d58>
 4020d5c:	00800304 	movi	r2,12
 4020d60:	a8800015 	stw	r2,0(r21)
 4020d64:	8080030b 	ldhu	r2,12(r16)
 4020d68:	003f5006 	br	4020aac <__flash_rwdata_start+0xffff2ea8>

04020d6c <_fwalk>:
 4020d6c:	defff704 	addi	sp,sp,-36
 4020d70:	dd000415 	stw	r20,16(sp)
 4020d74:	dfc00815 	stw	ra,32(sp)
 4020d78:	ddc00715 	stw	r23,28(sp)
 4020d7c:	dd800615 	stw	r22,24(sp)
 4020d80:	dd400515 	stw	r21,20(sp)
 4020d84:	dcc00315 	stw	r19,12(sp)
 4020d88:	dc800215 	stw	r18,8(sp)
 4020d8c:	dc400115 	stw	r17,4(sp)
 4020d90:	dc000015 	stw	r16,0(sp)
 4020d94:	2500b804 	addi	r20,r4,736
 4020d98:	a0002326 	beq	r20,zero,4020e28 <_fwalk+0xbc>
 4020d9c:	282b883a 	mov	r21,r5
 4020da0:	002f883a 	mov	r23,zero
 4020da4:	05800044 	movi	r22,1
 4020da8:	04ffffc4 	movi	r19,-1
 4020dac:	a4400117 	ldw	r17,4(r20)
 4020db0:	a4800217 	ldw	r18,8(r20)
 4020db4:	8c7fffc4 	addi	r17,r17,-1
 4020db8:	88000d16 	blt	r17,zero,4020df0 <_fwalk+0x84>
 4020dbc:	94000304 	addi	r16,r18,12
 4020dc0:	94800384 	addi	r18,r18,14
 4020dc4:	8080000b 	ldhu	r2,0(r16)
 4020dc8:	8c7fffc4 	addi	r17,r17,-1
 4020dcc:	813ffd04 	addi	r4,r16,-12
 4020dd0:	b080042e 	bgeu	r22,r2,4020de4 <_fwalk+0x78>
 4020dd4:	9080000f 	ldh	r2,0(r18)
 4020dd8:	14c00226 	beq	r2,r19,4020de4 <_fwalk+0x78>
 4020ddc:	a83ee83a 	callr	r21
 4020de0:	b8aeb03a 	or	r23,r23,r2
 4020de4:	84001a04 	addi	r16,r16,104
 4020de8:	94801a04 	addi	r18,r18,104
 4020dec:	8cfff51e 	bne	r17,r19,4020dc4 <__flash_rwdata_start+0xffff31c0>
 4020df0:	a5000017 	ldw	r20,0(r20)
 4020df4:	a03fed1e 	bne	r20,zero,4020dac <__flash_rwdata_start+0xffff31a8>
 4020df8:	b805883a 	mov	r2,r23
 4020dfc:	dfc00817 	ldw	ra,32(sp)
 4020e00:	ddc00717 	ldw	r23,28(sp)
 4020e04:	dd800617 	ldw	r22,24(sp)
 4020e08:	dd400517 	ldw	r21,20(sp)
 4020e0c:	dd000417 	ldw	r20,16(sp)
 4020e10:	dcc00317 	ldw	r19,12(sp)
 4020e14:	dc800217 	ldw	r18,8(sp)
 4020e18:	dc400117 	ldw	r17,4(sp)
 4020e1c:	dc000017 	ldw	r16,0(sp)
 4020e20:	dec00904 	addi	sp,sp,36
 4020e24:	f800283a 	ret
 4020e28:	002f883a 	mov	r23,zero
 4020e2c:	003ff206 	br	4020df8 <__flash_rwdata_start+0xffff31f4>

04020e30 <_fwalk_reent>:
 4020e30:	defff704 	addi	sp,sp,-36
 4020e34:	dd000415 	stw	r20,16(sp)
 4020e38:	dfc00815 	stw	ra,32(sp)
 4020e3c:	ddc00715 	stw	r23,28(sp)
 4020e40:	dd800615 	stw	r22,24(sp)
 4020e44:	dd400515 	stw	r21,20(sp)
 4020e48:	dcc00315 	stw	r19,12(sp)
 4020e4c:	dc800215 	stw	r18,8(sp)
 4020e50:	dc400115 	stw	r17,4(sp)
 4020e54:	dc000015 	stw	r16,0(sp)
 4020e58:	2500b804 	addi	r20,r4,736
 4020e5c:	a0002326 	beq	r20,zero,4020eec <_fwalk_reent+0xbc>
 4020e60:	282b883a 	mov	r21,r5
 4020e64:	2027883a 	mov	r19,r4
 4020e68:	002f883a 	mov	r23,zero
 4020e6c:	05800044 	movi	r22,1
 4020e70:	04bfffc4 	movi	r18,-1
 4020e74:	a4400117 	ldw	r17,4(r20)
 4020e78:	a4000217 	ldw	r16,8(r20)
 4020e7c:	8c7fffc4 	addi	r17,r17,-1
 4020e80:	88000c16 	blt	r17,zero,4020eb4 <_fwalk_reent+0x84>
 4020e84:	84000304 	addi	r16,r16,12
 4020e88:	8080000b 	ldhu	r2,0(r16)
 4020e8c:	8c7fffc4 	addi	r17,r17,-1
 4020e90:	817ffd04 	addi	r5,r16,-12
 4020e94:	b080052e 	bgeu	r22,r2,4020eac <_fwalk_reent+0x7c>
 4020e98:	8080008f 	ldh	r2,2(r16)
 4020e9c:	9809883a 	mov	r4,r19
 4020ea0:	14800226 	beq	r2,r18,4020eac <_fwalk_reent+0x7c>
 4020ea4:	a83ee83a 	callr	r21
 4020ea8:	b8aeb03a 	or	r23,r23,r2
 4020eac:	84001a04 	addi	r16,r16,104
 4020eb0:	8cbff51e 	bne	r17,r18,4020e88 <__flash_rwdata_start+0xffff3284>
 4020eb4:	a5000017 	ldw	r20,0(r20)
 4020eb8:	a03fee1e 	bne	r20,zero,4020e74 <__flash_rwdata_start+0xffff3270>
 4020ebc:	b805883a 	mov	r2,r23
 4020ec0:	dfc00817 	ldw	ra,32(sp)
 4020ec4:	ddc00717 	ldw	r23,28(sp)
 4020ec8:	dd800617 	ldw	r22,24(sp)
 4020ecc:	dd400517 	ldw	r21,20(sp)
 4020ed0:	dd000417 	ldw	r20,16(sp)
 4020ed4:	dcc00317 	ldw	r19,12(sp)
 4020ed8:	dc800217 	ldw	r18,8(sp)
 4020edc:	dc400117 	ldw	r17,4(sp)
 4020ee0:	dc000017 	ldw	r16,0(sp)
 4020ee4:	dec00904 	addi	sp,sp,36
 4020ee8:	f800283a 	ret
 4020eec:	002f883a 	mov	r23,zero
 4020ef0:	003ff206 	br	4020ebc <__flash_rwdata_start+0xffff32b8>

04020ef4 <_malloc_r>:
 4020ef4:	defff504 	addi	sp,sp,-44
 4020ef8:	dc800315 	stw	r18,12(sp)
 4020efc:	dfc00a15 	stw	ra,40(sp)
 4020f00:	df000915 	stw	fp,36(sp)
 4020f04:	ddc00815 	stw	r23,32(sp)
 4020f08:	dd800715 	stw	r22,28(sp)
 4020f0c:	dd400615 	stw	r21,24(sp)
 4020f10:	dd000515 	stw	r20,20(sp)
 4020f14:	dcc00415 	stw	r19,16(sp)
 4020f18:	dc400215 	stw	r17,8(sp)
 4020f1c:	dc000115 	stw	r16,4(sp)
 4020f20:	288002c4 	addi	r2,r5,11
 4020f24:	00c00584 	movi	r3,22
 4020f28:	2025883a 	mov	r18,r4
 4020f2c:	18807f2e 	bgeu	r3,r2,402112c <_malloc_r+0x238>
 4020f30:	047ffe04 	movi	r17,-8
 4020f34:	1462703a 	and	r17,r2,r17
 4020f38:	8800a316 	blt	r17,zero,40211c8 <_malloc_r+0x2d4>
 4020f3c:	8940a236 	bltu	r17,r5,40211c8 <_malloc_r+0x2d4>
 4020f40:	4023c440 	call	4023c44 <__malloc_lock>
 4020f44:	00807dc4 	movi	r2,503
 4020f48:	1441e92e 	bgeu	r2,r17,40216f0 <_malloc_r+0x7fc>
 4020f4c:	8804d27a 	srli	r2,r17,9
 4020f50:	1000a126 	beq	r2,zero,40211d8 <_malloc_r+0x2e4>
 4020f54:	00c00104 	movi	r3,4
 4020f58:	18811e36 	bltu	r3,r2,40213d4 <_malloc_r+0x4e0>
 4020f5c:	8804d1ba 	srli	r2,r17,6
 4020f60:	12000e44 	addi	r8,r2,57
 4020f64:	11c00e04 	addi	r7,r2,56
 4020f68:	4209883a 	add	r4,r8,r8
 4020f6c:	04c00034 	movhi	r19,0
 4020f70:	2109883a 	add	r4,r4,r4
 4020f74:	9cc16904 	addi	r19,r19,1444
 4020f78:	2109883a 	add	r4,r4,r4
 4020f7c:	9909883a 	add	r4,r19,r4
 4020f80:	24000117 	ldw	r16,4(r4)
 4020f84:	213ffe04 	addi	r4,r4,-8
 4020f88:	24009726 	beq	r4,r16,40211e8 <_malloc_r+0x2f4>
 4020f8c:	80800117 	ldw	r2,4(r16)
 4020f90:	01bfff04 	movi	r6,-4
 4020f94:	014003c4 	movi	r5,15
 4020f98:	1184703a 	and	r2,r2,r6
 4020f9c:	1447c83a 	sub	r3,r2,r17
 4020fa0:	28c00716 	blt	r5,r3,4020fc0 <_malloc_r+0xcc>
 4020fa4:	1800920e 	bge	r3,zero,40211f0 <_malloc_r+0x2fc>
 4020fa8:	84000317 	ldw	r16,12(r16)
 4020fac:	24008e26 	beq	r4,r16,40211e8 <_malloc_r+0x2f4>
 4020fb0:	80800117 	ldw	r2,4(r16)
 4020fb4:	1184703a 	and	r2,r2,r6
 4020fb8:	1447c83a 	sub	r3,r2,r17
 4020fbc:	28fff90e 	bge	r5,r3,4020fa4 <__flash_rwdata_start+0xffff33a0>
 4020fc0:	3809883a 	mov	r4,r7
 4020fc4:	01800034 	movhi	r6,0
 4020fc8:	9c000417 	ldw	r16,16(r19)
 4020fcc:	31816904 	addi	r6,r6,1444
 4020fd0:	32000204 	addi	r8,r6,8
 4020fd4:	82013426 	beq	r16,r8,40214a8 <_malloc_r+0x5b4>
 4020fd8:	80c00117 	ldw	r3,4(r16)
 4020fdc:	00bfff04 	movi	r2,-4
 4020fe0:	188e703a 	and	r7,r3,r2
 4020fe4:	3c45c83a 	sub	r2,r7,r17
 4020fe8:	00c003c4 	movi	r3,15
 4020fec:	18811f16 	blt	r3,r2,402146c <_malloc_r+0x578>
 4020ff0:	32000515 	stw	r8,20(r6)
 4020ff4:	32000415 	stw	r8,16(r6)
 4020ff8:	10007f0e 	bge	r2,zero,40211f8 <_malloc_r+0x304>
 4020ffc:	00807fc4 	movi	r2,511
 4021000:	11c0fd36 	bltu	r2,r7,40213f8 <_malloc_r+0x504>
 4021004:	3806d0fa 	srli	r3,r7,3
 4021008:	01c00044 	movi	r7,1
 402100c:	30800117 	ldw	r2,4(r6)
 4021010:	19400044 	addi	r5,r3,1
 4021014:	294b883a 	add	r5,r5,r5
 4021018:	1807d0ba 	srai	r3,r3,2
 402101c:	294b883a 	add	r5,r5,r5
 4021020:	294b883a 	add	r5,r5,r5
 4021024:	298b883a 	add	r5,r5,r6
 4021028:	38c6983a 	sll	r3,r7,r3
 402102c:	29c00017 	ldw	r7,0(r5)
 4021030:	2a7ffe04 	addi	r9,r5,-8
 4021034:	1886b03a 	or	r3,r3,r2
 4021038:	82400315 	stw	r9,12(r16)
 402103c:	81c00215 	stw	r7,8(r16)
 4021040:	30c00115 	stw	r3,4(r6)
 4021044:	2c000015 	stw	r16,0(r5)
 4021048:	3c000315 	stw	r16,12(r7)
 402104c:	2005d0ba 	srai	r2,r4,2
 4021050:	01400044 	movi	r5,1
 4021054:	288a983a 	sll	r5,r5,r2
 4021058:	19406f36 	bltu	r3,r5,4021218 <_malloc_r+0x324>
 402105c:	28c4703a 	and	r2,r5,r3
 4021060:	10000a1e 	bne	r2,zero,402108c <_malloc_r+0x198>
 4021064:	00bfff04 	movi	r2,-4
 4021068:	294b883a 	add	r5,r5,r5
 402106c:	2088703a 	and	r4,r4,r2
 4021070:	28c4703a 	and	r2,r5,r3
 4021074:	21000104 	addi	r4,r4,4
 4021078:	1000041e 	bne	r2,zero,402108c <_malloc_r+0x198>
 402107c:	294b883a 	add	r5,r5,r5
 4021080:	28c4703a 	and	r2,r5,r3
 4021084:	21000104 	addi	r4,r4,4
 4021088:	103ffc26 	beq	r2,zero,402107c <__flash_rwdata_start+0xffff3478>
 402108c:	02bfff04 	movi	r10,-4
 4021090:	024003c4 	movi	r9,15
 4021094:	21800044 	addi	r6,r4,1
 4021098:	318d883a 	add	r6,r6,r6
 402109c:	318d883a 	add	r6,r6,r6
 40210a0:	318d883a 	add	r6,r6,r6
 40210a4:	998d883a 	add	r6,r19,r6
 40210a8:	333ffe04 	addi	r12,r6,-8
 40210ac:	2017883a 	mov	r11,r4
 40210b0:	31800104 	addi	r6,r6,4
 40210b4:	34000017 	ldw	r16,0(r6)
 40210b8:	31fffd04 	addi	r7,r6,-12
 40210bc:	81c0041e 	bne	r16,r7,40210d0 <_malloc_r+0x1dc>
 40210c0:	0000fb06 	br	40214b0 <_malloc_r+0x5bc>
 40210c4:	1801030e 	bge	r3,zero,40214d4 <_malloc_r+0x5e0>
 40210c8:	84000317 	ldw	r16,12(r16)
 40210cc:	81c0f826 	beq	r16,r7,40214b0 <_malloc_r+0x5bc>
 40210d0:	80800117 	ldw	r2,4(r16)
 40210d4:	1284703a 	and	r2,r2,r10
 40210d8:	1447c83a 	sub	r3,r2,r17
 40210dc:	48fff90e 	bge	r9,r3,40210c4 <__flash_rwdata_start+0xffff34c0>
 40210e0:	80800317 	ldw	r2,12(r16)
 40210e4:	81000217 	ldw	r4,8(r16)
 40210e8:	89400054 	ori	r5,r17,1
 40210ec:	81400115 	stw	r5,4(r16)
 40210f0:	20800315 	stw	r2,12(r4)
 40210f4:	11000215 	stw	r4,8(r2)
 40210f8:	8463883a 	add	r17,r16,r17
 40210fc:	9c400515 	stw	r17,20(r19)
 4021100:	9c400415 	stw	r17,16(r19)
 4021104:	18800054 	ori	r2,r3,1
 4021108:	88800115 	stw	r2,4(r17)
 402110c:	8a000315 	stw	r8,12(r17)
 4021110:	8a000215 	stw	r8,8(r17)
 4021114:	88e3883a 	add	r17,r17,r3
 4021118:	88c00015 	stw	r3,0(r17)
 402111c:	9009883a 	mov	r4,r18
 4021120:	4023d640 	call	4023d64 <__malloc_unlock>
 4021124:	80800204 	addi	r2,r16,8
 4021128:	00001b06 	br	4021198 <_malloc_r+0x2a4>
 402112c:	04400404 	movi	r17,16
 4021130:	89402536 	bltu	r17,r5,40211c8 <_malloc_r+0x2d4>
 4021134:	4023c440 	call	4023c44 <__malloc_lock>
 4021138:	00800184 	movi	r2,6
 402113c:	01000084 	movi	r4,2
 4021140:	04c00034 	movhi	r19,0
 4021144:	1085883a 	add	r2,r2,r2
 4021148:	9cc16904 	addi	r19,r19,1444
 402114c:	1085883a 	add	r2,r2,r2
 4021150:	9885883a 	add	r2,r19,r2
 4021154:	14000117 	ldw	r16,4(r2)
 4021158:	10fffe04 	addi	r3,r2,-8
 402115c:	80c0d926 	beq	r16,r3,40214c4 <_malloc_r+0x5d0>
 4021160:	80c00117 	ldw	r3,4(r16)
 4021164:	81000317 	ldw	r4,12(r16)
 4021168:	00bfff04 	movi	r2,-4
 402116c:	1884703a 	and	r2,r3,r2
 4021170:	81400217 	ldw	r5,8(r16)
 4021174:	8085883a 	add	r2,r16,r2
 4021178:	10c00117 	ldw	r3,4(r2)
 402117c:	29000315 	stw	r4,12(r5)
 4021180:	21400215 	stw	r5,8(r4)
 4021184:	18c00054 	ori	r3,r3,1
 4021188:	10c00115 	stw	r3,4(r2)
 402118c:	9009883a 	mov	r4,r18
 4021190:	4023d640 	call	4023d64 <__malloc_unlock>
 4021194:	80800204 	addi	r2,r16,8
 4021198:	dfc00a17 	ldw	ra,40(sp)
 402119c:	df000917 	ldw	fp,36(sp)
 40211a0:	ddc00817 	ldw	r23,32(sp)
 40211a4:	dd800717 	ldw	r22,28(sp)
 40211a8:	dd400617 	ldw	r21,24(sp)
 40211ac:	dd000517 	ldw	r20,20(sp)
 40211b0:	dcc00417 	ldw	r19,16(sp)
 40211b4:	dc800317 	ldw	r18,12(sp)
 40211b8:	dc400217 	ldw	r17,8(sp)
 40211bc:	dc000117 	ldw	r16,4(sp)
 40211c0:	dec00b04 	addi	sp,sp,44
 40211c4:	f800283a 	ret
 40211c8:	00800304 	movi	r2,12
 40211cc:	90800015 	stw	r2,0(r18)
 40211d0:	0005883a 	mov	r2,zero
 40211d4:	003ff006 	br	4021198 <__flash_rwdata_start+0xffff3594>
 40211d8:	01002004 	movi	r4,128
 40211dc:	02001004 	movi	r8,64
 40211e0:	01c00fc4 	movi	r7,63
 40211e4:	003f6106 	br	4020f6c <__flash_rwdata_start+0xffff3368>
 40211e8:	4009883a 	mov	r4,r8
 40211ec:	003f7506 	br	4020fc4 <__flash_rwdata_start+0xffff33c0>
 40211f0:	81000317 	ldw	r4,12(r16)
 40211f4:	003fde06 	br	4021170 <__flash_rwdata_start+0xffff356c>
 40211f8:	81c5883a 	add	r2,r16,r7
 40211fc:	11400117 	ldw	r5,4(r2)
 4021200:	9009883a 	mov	r4,r18
 4021204:	29400054 	ori	r5,r5,1
 4021208:	11400115 	stw	r5,4(r2)
 402120c:	4023d640 	call	4023d64 <__malloc_unlock>
 4021210:	80800204 	addi	r2,r16,8
 4021214:	003fe006 	br	4021198 <__flash_rwdata_start+0xffff3594>
 4021218:	9c000217 	ldw	r16,8(r19)
 402121c:	00bfff04 	movi	r2,-4
 4021220:	85800117 	ldw	r22,4(r16)
 4021224:	b0ac703a 	and	r22,r22,r2
 4021228:	b4400336 	bltu	r22,r17,4021238 <_malloc_r+0x344>
 402122c:	b445c83a 	sub	r2,r22,r17
 4021230:	00c003c4 	movi	r3,15
 4021234:	18805d16 	blt	r3,r2,40213ac <_malloc_r+0x4b8>
 4021238:	05c00034 	movhi	r23,0
 402123c:	00800034 	movhi	r2,0
 4021240:	10871f04 	addi	r2,r2,7292
 4021244:	bdc6f204 	addi	r23,r23,7112
 4021248:	15400017 	ldw	r21,0(r2)
 402124c:	b8c00017 	ldw	r3,0(r23)
 4021250:	00bfffc4 	movi	r2,-1
 4021254:	858d883a 	add	r6,r16,r22
 4021258:	8d6b883a 	add	r21,r17,r21
 402125c:	1880ea26 	beq	r3,r2,4021608 <_malloc_r+0x714>
 4021260:	ad4403c4 	addi	r21,r21,4111
 4021264:	00bc0004 	movi	r2,-4096
 4021268:	a8aa703a 	and	r21,r21,r2
 402126c:	a80b883a 	mov	r5,r21
 4021270:	9009883a 	mov	r4,r18
 4021274:	d9800015 	stw	r6,0(sp)
 4021278:	40221140 	call	4022114 <_sbrk_r>
 402127c:	1029883a 	mov	r20,r2
 4021280:	00bfffc4 	movi	r2,-1
 4021284:	d9800017 	ldw	r6,0(sp)
 4021288:	a080e826 	beq	r20,r2,402162c <_malloc_r+0x738>
 402128c:	a180a636 	bltu	r20,r6,4021528 <_malloc_r+0x634>
 4021290:	07000034 	movhi	fp,0
 4021294:	e7074104 	addi	fp,fp,7428
 4021298:	e0800017 	ldw	r2,0(fp)
 402129c:	a887883a 	add	r3,r21,r2
 40212a0:	e0c00015 	stw	r3,0(fp)
 40212a4:	3500e626 	beq	r6,r20,4021640 <_malloc_r+0x74c>
 40212a8:	b9000017 	ldw	r4,0(r23)
 40212ac:	00bfffc4 	movi	r2,-1
 40212b0:	2080ee26 	beq	r4,r2,402166c <_malloc_r+0x778>
 40212b4:	a185c83a 	sub	r2,r20,r6
 40212b8:	10c5883a 	add	r2,r2,r3
 40212bc:	e0800015 	stw	r2,0(fp)
 40212c0:	a0c001cc 	andi	r3,r20,7
 40212c4:	1800bc26 	beq	r3,zero,40215b8 <_malloc_r+0x6c4>
 40212c8:	a0e9c83a 	sub	r20,r20,r3
 40212cc:	00840204 	movi	r2,4104
 40212d0:	a5000204 	addi	r20,r20,8
 40212d4:	10c7c83a 	sub	r3,r2,r3
 40212d8:	a545883a 	add	r2,r20,r21
 40212dc:	1083ffcc 	andi	r2,r2,4095
 40212e0:	18abc83a 	sub	r21,r3,r2
 40212e4:	a80b883a 	mov	r5,r21
 40212e8:	9009883a 	mov	r4,r18
 40212ec:	40221140 	call	4022114 <_sbrk_r>
 40212f0:	00ffffc4 	movi	r3,-1
 40212f4:	10c0e126 	beq	r2,r3,402167c <_malloc_r+0x788>
 40212f8:	1505c83a 	sub	r2,r2,r20
 40212fc:	1545883a 	add	r2,r2,r21
 4021300:	10800054 	ori	r2,r2,1
 4021304:	e0c00017 	ldw	r3,0(fp)
 4021308:	9d000215 	stw	r20,8(r19)
 402130c:	a0800115 	stw	r2,4(r20)
 4021310:	a8c7883a 	add	r3,r21,r3
 4021314:	e0c00015 	stw	r3,0(fp)
 4021318:	84c00e26 	beq	r16,r19,4021354 <_malloc_r+0x460>
 402131c:	018003c4 	movi	r6,15
 4021320:	3580a72e 	bgeu	r6,r22,40215c0 <_malloc_r+0x6cc>
 4021324:	81400117 	ldw	r5,4(r16)
 4021328:	013ffe04 	movi	r4,-8
 402132c:	b0bffd04 	addi	r2,r22,-12
 4021330:	1104703a 	and	r2,r2,r4
 4021334:	2900004c 	andi	r4,r5,1
 4021338:	2088b03a 	or	r4,r4,r2
 402133c:	81000115 	stw	r4,4(r16)
 4021340:	01400144 	movi	r5,5
 4021344:	8089883a 	add	r4,r16,r2
 4021348:	21400115 	stw	r5,4(r4)
 402134c:	21400215 	stw	r5,8(r4)
 4021350:	3080cd36 	bltu	r6,r2,4021688 <_malloc_r+0x794>
 4021354:	00800034 	movhi	r2,0
 4021358:	10871e04 	addi	r2,r2,7288
 402135c:	11000017 	ldw	r4,0(r2)
 4021360:	20c0012e 	bgeu	r4,r3,4021368 <_malloc_r+0x474>
 4021364:	10c00015 	stw	r3,0(r2)
 4021368:	00800034 	movhi	r2,0
 402136c:	10871d04 	addi	r2,r2,7284
 4021370:	11000017 	ldw	r4,0(r2)
 4021374:	9c000217 	ldw	r16,8(r19)
 4021378:	20c0012e 	bgeu	r4,r3,4021380 <_malloc_r+0x48c>
 402137c:	10c00015 	stw	r3,0(r2)
 4021380:	80c00117 	ldw	r3,4(r16)
 4021384:	00bfff04 	movi	r2,-4
 4021388:	1886703a 	and	r3,r3,r2
 402138c:	1c45c83a 	sub	r2,r3,r17
 4021390:	1c400236 	bltu	r3,r17,402139c <_malloc_r+0x4a8>
 4021394:	00c003c4 	movi	r3,15
 4021398:	18800416 	blt	r3,r2,40213ac <_malloc_r+0x4b8>
 402139c:	9009883a 	mov	r4,r18
 40213a0:	4023d640 	call	4023d64 <__malloc_unlock>
 40213a4:	0005883a 	mov	r2,zero
 40213a8:	003f7b06 	br	4021198 <__flash_rwdata_start+0xffff3594>
 40213ac:	88c00054 	ori	r3,r17,1
 40213b0:	80c00115 	stw	r3,4(r16)
 40213b4:	8463883a 	add	r17,r16,r17
 40213b8:	10800054 	ori	r2,r2,1
 40213bc:	9c400215 	stw	r17,8(r19)
 40213c0:	88800115 	stw	r2,4(r17)
 40213c4:	9009883a 	mov	r4,r18
 40213c8:	4023d640 	call	4023d64 <__malloc_unlock>
 40213cc:	80800204 	addi	r2,r16,8
 40213d0:	003f7106 	br	4021198 <__flash_rwdata_start+0xffff3594>
 40213d4:	00c00504 	movi	r3,20
 40213d8:	18804a2e 	bgeu	r3,r2,4021504 <_malloc_r+0x610>
 40213dc:	00c01504 	movi	r3,84
 40213e0:	18806e36 	bltu	r3,r2,402159c <_malloc_r+0x6a8>
 40213e4:	8804d33a 	srli	r2,r17,12
 40213e8:	12001bc4 	addi	r8,r2,111
 40213ec:	11c01b84 	addi	r7,r2,110
 40213f0:	4209883a 	add	r4,r8,r8
 40213f4:	003edd06 	br	4020f6c <__flash_rwdata_start+0xffff3368>
 40213f8:	3804d27a 	srli	r2,r7,9
 40213fc:	00c00104 	movi	r3,4
 4021400:	1880442e 	bgeu	r3,r2,4021514 <_malloc_r+0x620>
 4021404:	00c00504 	movi	r3,20
 4021408:	18808136 	bltu	r3,r2,4021610 <_malloc_r+0x71c>
 402140c:	11401704 	addi	r5,r2,92
 4021410:	10c016c4 	addi	r3,r2,91
 4021414:	294b883a 	add	r5,r5,r5
 4021418:	294b883a 	add	r5,r5,r5
 402141c:	294b883a 	add	r5,r5,r5
 4021420:	994b883a 	add	r5,r19,r5
 4021424:	28800017 	ldw	r2,0(r5)
 4021428:	01800034 	movhi	r6,0
 402142c:	297ffe04 	addi	r5,r5,-8
 4021430:	31816904 	addi	r6,r6,1444
 4021434:	28806526 	beq	r5,r2,40215cc <_malloc_r+0x6d8>
 4021438:	01bfff04 	movi	r6,-4
 402143c:	10c00117 	ldw	r3,4(r2)
 4021440:	1986703a 	and	r3,r3,r6
 4021444:	38c0022e 	bgeu	r7,r3,4021450 <_malloc_r+0x55c>
 4021448:	10800217 	ldw	r2,8(r2)
 402144c:	28bffb1e 	bne	r5,r2,402143c <__flash_rwdata_start+0xffff3838>
 4021450:	11400317 	ldw	r5,12(r2)
 4021454:	98c00117 	ldw	r3,4(r19)
 4021458:	81400315 	stw	r5,12(r16)
 402145c:	80800215 	stw	r2,8(r16)
 4021460:	2c000215 	stw	r16,8(r5)
 4021464:	14000315 	stw	r16,12(r2)
 4021468:	003ef806 	br	402104c <__flash_rwdata_start+0xffff3448>
 402146c:	88c00054 	ori	r3,r17,1
 4021470:	80c00115 	stw	r3,4(r16)
 4021474:	8463883a 	add	r17,r16,r17
 4021478:	34400515 	stw	r17,20(r6)
 402147c:	34400415 	stw	r17,16(r6)
 4021480:	10c00054 	ori	r3,r2,1
 4021484:	8a000315 	stw	r8,12(r17)
 4021488:	8a000215 	stw	r8,8(r17)
 402148c:	88c00115 	stw	r3,4(r17)
 4021490:	88a3883a 	add	r17,r17,r2
 4021494:	88800015 	stw	r2,0(r17)
 4021498:	9009883a 	mov	r4,r18
 402149c:	4023d640 	call	4023d64 <__malloc_unlock>
 40214a0:	80800204 	addi	r2,r16,8
 40214a4:	003f3c06 	br	4021198 <__flash_rwdata_start+0xffff3594>
 40214a8:	30c00117 	ldw	r3,4(r6)
 40214ac:	003ee706 	br	402104c <__flash_rwdata_start+0xffff3448>
 40214b0:	5ac00044 	addi	r11,r11,1
 40214b4:	588000cc 	andi	r2,r11,3
 40214b8:	31800204 	addi	r6,r6,8
 40214bc:	103efd1e 	bne	r2,zero,40210b4 <__flash_rwdata_start+0xffff34b0>
 40214c0:	00002406 	br	4021554 <_malloc_r+0x660>
 40214c4:	14000317 	ldw	r16,12(r2)
 40214c8:	143f251e 	bne	r2,r16,4021160 <__flash_rwdata_start+0xffff355c>
 40214cc:	21000084 	addi	r4,r4,2
 40214d0:	003ebc06 	br	4020fc4 <__flash_rwdata_start+0xffff33c0>
 40214d4:	8085883a 	add	r2,r16,r2
 40214d8:	10c00117 	ldw	r3,4(r2)
 40214dc:	81000317 	ldw	r4,12(r16)
 40214e0:	81400217 	ldw	r5,8(r16)
 40214e4:	18c00054 	ori	r3,r3,1
 40214e8:	10c00115 	stw	r3,4(r2)
 40214ec:	29000315 	stw	r4,12(r5)
 40214f0:	21400215 	stw	r5,8(r4)
 40214f4:	9009883a 	mov	r4,r18
 40214f8:	4023d640 	call	4023d64 <__malloc_unlock>
 40214fc:	80800204 	addi	r2,r16,8
 4021500:	003f2506 	br	4021198 <__flash_rwdata_start+0xffff3594>
 4021504:	12001704 	addi	r8,r2,92
 4021508:	11c016c4 	addi	r7,r2,91
 402150c:	4209883a 	add	r4,r8,r8
 4021510:	003e9606 	br	4020f6c <__flash_rwdata_start+0xffff3368>
 4021514:	3804d1ba 	srli	r2,r7,6
 4021518:	11400e44 	addi	r5,r2,57
 402151c:	10c00e04 	addi	r3,r2,56
 4021520:	294b883a 	add	r5,r5,r5
 4021524:	003fbc06 	br	4021418 <__flash_rwdata_start+0xffff3814>
 4021528:	84ff5926 	beq	r16,r19,4021290 <__flash_rwdata_start+0xffff368c>
 402152c:	00800034 	movhi	r2,0
 4021530:	10816904 	addi	r2,r2,1444
 4021534:	14000217 	ldw	r16,8(r2)
 4021538:	00bfff04 	movi	r2,-4
 402153c:	80c00117 	ldw	r3,4(r16)
 4021540:	1886703a 	and	r3,r3,r2
 4021544:	003f9106 	br	402138c <__flash_rwdata_start+0xffff3788>
 4021548:	60800217 	ldw	r2,8(r12)
 402154c:	213fffc4 	addi	r4,r4,-1
 4021550:	1300651e 	bne	r2,r12,40216e8 <_malloc_r+0x7f4>
 4021554:	208000cc 	andi	r2,r4,3
 4021558:	633ffe04 	addi	r12,r12,-8
 402155c:	103ffa1e 	bne	r2,zero,4021548 <__flash_rwdata_start+0xffff3944>
 4021560:	98800117 	ldw	r2,4(r19)
 4021564:	0146303a 	nor	r3,zero,r5
 4021568:	1884703a 	and	r2,r3,r2
 402156c:	98800115 	stw	r2,4(r19)
 4021570:	294b883a 	add	r5,r5,r5
 4021574:	117f2836 	bltu	r2,r5,4021218 <__flash_rwdata_start+0xffff3614>
 4021578:	283f2726 	beq	r5,zero,4021218 <__flash_rwdata_start+0xffff3614>
 402157c:	2886703a 	and	r3,r5,r2
 4021580:	5809883a 	mov	r4,r11
 4021584:	183ec31e 	bne	r3,zero,4021094 <__flash_rwdata_start+0xffff3490>
 4021588:	294b883a 	add	r5,r5,r5
 402158c:	2886703a 	and	r3,r5,r2
 4021590:	21000104 	addi	r4,r4,4
 4021594:	183ffc26 	beq	r3,zero,4021588 <__flash_rwdata_start+0xffff3984>
 4021598:	003ebe06 	br	4021094 <__flash_rwdata_start+0xffff3490>
 402159c:	00c05504 	movi	r3,340
 40215a0:	18801236 	bltu	r3,r2,40215ec <_malloc_r+0x6f8>
 40215a4:	8804d3fa 	srli	r2,r17,15
 40215a8:	12001e04 	addi	r8,r2,120
 40215ac:	11c01dc4 	addi	r7,r2,119
 40215b0:	4209883a 	add	r4,r8,r8
 40215b4:	003e6d06 	br	4020f6c <__flash_rwdata_start+0xffff3368>
 40215b8:	00c40004 	movi	r3,4096
 40215bc:	003f4606 	br	40212d8 <__flash_rwdata_start+0xffff36d4>
 40215c0:	00800044 	movi	r2,1
 40215c4:	a0800115 	stw	r2,4(r20)
 40215c8:	003f7406 	br	402139c <__flash_rwdata_start+0xffff3798>
 40215cc:	1805d0ba 	srai	r2,r3,2
 40215d0:	01c00044 	movi	r7,1
 40215d4:	30c00117 	ldw	r3,4(r6)
 40215d8:	388e983a 	sll	r7,r7,r2
 40215dc:	2805883a 	mov	r2,r5
 40215e0:	38c6b03a 	or	r3,r7,r3
 40215e4:	30c00115 	stw	r3,4(r6)
 40215e8:	003f9b06 	br	4021458 <__flash_rwdata_start+0xffff3854>
 40215ec:	00c15504 	movi	r3,1364
 40215f0:	18801a36 	bltu	r3,r2,402165c <_malloc_r+0x768>
 40215f4:	8804d4ba 	srli	r2,r17,18
 40215f8:	12001f44 	addi	r8,r2,125
 40215fc:	11c01f04 	addi	r7,r2,124
 4021600:	4209883a 	add	r4,r8,r8
 4021604:	003e5906 	br	4020f6c <__flash_rwdata_start+0xffff3368>
 4021608:	ad400404 	addi	r21,r21,16
 402160c:	003f1706 	br	402126c <__flash_rwdata_start+0xffff3668>
 4021610:	00c01504 	movi	r3,84
 4021614:	18802336 	bltu	r3,r2,40216a4 <_malloc_r+0x7b0>
 4021618:	3804d33a 	srli	r2,r7,12
 402161c:	11401bc4 	addi	r5,r2,111
 4021620:	10c01b84 	addi	r3,r2,110
 4021624:	294b883a 	add	r5,r5,r5
 4021628:	003f7b06 	br	4021418 <__flash_rwdata_start+0xffff3814>
 402162c:	9c000217 	ldw	r16,8(r19)
 4021630:	00bfff04 	movi	r2,-4
 4021634:	80c00117 	ldw	r3,4(r16)
 4021638:	1886703a 	and	r3,r3,r2
 402163c:	003f5306 	br	402138c <__flash_rwdata_start+0xffff3788>
 4021640:	3083ffcc 	andi	r2,r6,4095
 4021644:	103f181e 	bne	r2,zero,40212a8 <__flash_rwdata_start+0xffff36a4>
 4021648:	99000217 	ldw	r4,8(r19)
 402164c:	b545883a 	add	r2,r22,r21
 4021650:	10800054 	ori	r2,r2,1
 4021654:	20800115 	stw	r2,4(r4)
 4021658:	003f3e06 	br	4021354 <__flash_rwdata_start+0xffff3750>
 402165c:	01003f84 	movi	r4,254
 4021660:	02001fc4 	movi	r8,127
 4021664:	01c01f84 	movi	r7,126
 4021668:	003e4006 	br	4020f6c <__flash_rwdata_start+0xffff3368>
 402166c:	00800034 	movhi	r2,0
 4021670:	1086f204 	addi	r2,r2,7112
 4021674:	15000015 	stw	r20,0(r2)
 4021678:	003f1106 	br	40212c0 <__flash_rwdata_start+0xffff36bc>
 402167c:	00800044 	movi	r2,1
 4021680:	002b883a 	mov	r21,zero
 4021684:	003f1f06 	br	4021304 <__flash_rwdata_start+0xffff3700>
 4021688:	81400204 	addi	r5,r16,8
 402168c:	9009883a 	mov	r4,r18
 4021690:	402297c0 	call	402297c <_free_r>
 4021694:	00800034 	movhi	r2,0
 4021698:	10874104 	addi	r2,r2,7428
 402169c:	10c00017 	ldw	r3,0(r2)
 40216a0:	003f2c06 	br	4021354 <__flash_rwdata_start+0xffff3750>
 40216a4:	00c05504 	movi	r3,340
 40216a8:	18800536 	bltu	r3,r2,40216c0 <_malloc_r+0x7cc>
 40216ac:	3804d3fa 	srli	r2,r7,15
 40216b0:	11401e04 	addi	r5,r2,120
 40216b4:	10c01dc4 	addi	r3,r2,119
 40216b8:	294b883a 	add	r5,r5,r5
 40216bc:	003f5606 	br	4021418 <__flash_rwdata_start+0xffff3814>
 40216c0:	00c15504 	movi	r3,1364
 40216c4:	18800536 	bltu	r3,r2,40216dc <_malloc_r+0x7e8>
 40216c8:	3804d4ba 	srli	r2,r7,18
 40216cc:	11401f44 	addi	r5,r2,125
 40216d0:	10c01f04 	addi	r3,r2,124
 40216d4:	294b883a 	add	r5,r5,r5
 40216d8:	003f4f06 	br	4021418 <__flash_rwdata_start+0xffff3814>
 40216dc:	01403f84 	movi	r5,254
 40216e0:	00c01f84 	movi	r3,126
 40216e4:	003f4c06 	br	4021418 <__flash_rwdata_start+0xffff3814>
 40216e8:	98800117 	ldw	r2,4(r19)
 40216ec:	003fa006 	br	4021570 <__flash_rwdata_start+0xffff396c>
 40216f0:	8808d0fa 	srli	r4,r17,3
 40216f4:	20800044 	addi	r2,r4,1
 40216f8:	1085883a 	add	r2,r2,r2
 40216fc:	003e9006 	br	4021140 <__flash_rwdata_start+0xffff353c>

04021700 <memchr>:
 4021700:	208000cc 	andi	r2,r4,3
 4021704:	280f883a 	mov	r7,r5
 4021708:	10003426 	beq	r2,zero,40217dc <memchr+0xdc>
 402170c:	30bfffc4 	addi	r2,r6,-1
 4021710:	30001a26 	beq	r6,zero,402177c <memchr+0x7c>
 4021714:	20c00003 	ldbu	r3,0(r4)
 4021718:	29803fcc 	andi	r6,r5,255
 402171c:	30c0051e 	bne	r6,r3,4021734 <memchr+0x34>
 4021720:	00001806 	br	4021784 <memchr+0x84>
 4021724:	10001526 	beq	r2,zero,402177c <memchr+0x7c>
 4021728:	20c00003 	ldbu	r3,0(r4)
 402172c:	10bfffc4 	addi	r2,r2,-1
 4021730:	30c01426 	beq	r6,r3,4021784 <memchr+0x84>
 4021734:	21000044 	addi	r4,r4,1
 4021738:	20c000cc 	andi	r3,r4,3
 402173c:	183ff91e 	bne	r3,zero,4021724 <__flash_rwdata_start+0xffff3b20>
 4021740:	020000c4 	movi	r8,3
 4021744:	40801136 	bltu	r8,r2,402178c <memchr+0x8c>
 4021748:	10000c26 	beq	r2,zero,402177c <memchr+0x7c>
 402174c:	20c00003 	ldbu	r3,0(r4)
 4021750:	29403fcc 	andi	r5,r5,255
 4021754:	28c00b26 	beq	r5,r3,4021784 <memchr+0x84>
 4021758:	20c00044 	addi	r3,r4,1
 402175c:	39803fcc 	andi	r6,r7,255
 4021760:	2089883a 	add	r4,r4,r2
 4021764:	00000306 	br	4021774 <memchr+0x74>
 4021768:	18c00044 	addi	r3,r3,1
 402176c:	197fffc3 	ldbu	r5,-1(r3)
 4021770:	31400526 	beq	r6,r5,4021788 <memchr+0x88>
 4021774:	1805883a 	mov	r2,r3
 4021778:	20fffb1e 	bne	r4,r3,4021768 <__flash_rwdata_start+0xffff3b64>
 402177c:	0005883a 	mov	r2,zero
 4021780:	f800283a 	ret
 4021784:	2005883a 	mov	r2,r4
 4021788:	f800283a 	ret
 402178c:	28c03fcc 	andi	r3,r5,255
 4021790:	1812923a 	slli	r9,r3,8
 4021794:	02ffbff4 	movhi	r11,65279
 4021798:	02a02074 	movhi	r10,32897
 402179c:	48d2b03a 	or	r9,r9,r3
 40217a0:	4806943a 	slli	r3,r9,16
 40217a4:	5affbfc4 	addi	r11,r11,-257
 40217a8:	52a02004 	addi	r10,r10,-32640
 40217ac:	48d2b03a 	or	r9,r9,r3
 40217b0:	20c00017 	ldw	r3,0(r4)
 40217b4:	48c6f03a 	xor	r3,r9,r3
 40217b8:	1acd883a 	add	r6,r3,r11
 40217bc:	00c6303a 	nor	r3,zero,r3
 40217c0:	30c6703a 	and	r3,r6,r3
 40217c4:	1a86703a 	and	r3,r3,r10
 40217c8:	183fe01e 	bne	r3,zero,402174c <__flash_rwdata_start+0xffff3b48>
 40217cc:	10bfff04 	addi	r2,r2,-4
 40217d0:	21000104 	addi	r4,r4,4
 40217d4:	40bff636 	bltu	r8,r2,40217b0 <__flash_rwdata_start+0xffff3bac>
 40217d8:	003fdb06 	br	4021748 <__flash_rwdata_start+0xffff3b44>
 40217dc:	3005883a 	mov	r2,r6
 40217e0:	003fd706 	br	4021740 <__flash_rwdata_start+0xffff3b3c>

040217e4 <memcpy>:
 40217e4:	defffd04 	addi	sp,sp,-12
 40217e8:	dfc00215 	stw	ra,8(sp)
 40217ec:	dc400115 	stw	r17,4(sp)
 40217f0:	dc000015 	stw	r16,0(sp)
 40217f4:	00c003c4 	movi	r3,15
 40217f8:	2005883a 	mov	r2,r4
 40217fc:	1980452e 	bgeu	r3,r6,4021914 <memcpy+0x130>
 4021800:	2906b03a 	or	r3,r5,r4
 4021804:	18c000cc 	andi	r3,r3,3
 4021808:	1800441e 	bne	r3,zero,402191c <memcpy+0x138>
 402180c:	347ffc04 	addi	r17,r6,-16
 4021810:	8822d13a 	srli	r17,r17,4
 4021814:	28c00104 	addi	r3,r5,4
 4021818:	23400104 	addi	r13,r4,4
 402181c:	8820913a 	slli	r16,r17,4
 4021820:	2b000204 	addi	r12,r5,8
 4021824:	22c00204 	addi	r11,r4,8
 4021828:	84000504 	addi	r16,r16,20
 402182c:	2a800304 	addi	r10,r5,12
 4021830:	22400304 	addi	r9,r4,12
 4021834:	2c21883a 	add	r16,r5,r16
 4021838:	2811883a 	mov	r8,r5
 402183c:	200f883a 	mov	r7,r4
 4021840:	41000017 	ldw	r4,0(r8)
 4021844:	1fc00017 	ldw	ra,0(r3)
 4021848:	63c00017 	ldw	r15,0(r12)
 402184c:	39000015 	stw	r4,0(r7)
 4021850:	53800017 	ldw	r14,0(r10)
 4021854:	6fc00015 	stw	ra,0(r13)
 4021858:	5bc00015 	stw	r15,0(r11)
 402185c:	4b800015 	stw	r14,0(r9)
 4021860:	18c00404 	addi	r3,r3,16
 4021864:	39c00404 	addi	r7,r7,16
 4021868:	42000404 	addi	r8,r8,16
 402186c:	6b400404 	addi	r13,r13,16
 4021870:	63000404 	addi	r12,r12,16
 4021874:	5ac00404 	addi	r11,r11,16
 4021878:	52800404 	addi	r10,r10,16
 402187c:	4a400404 	addi	r9,r9,16
 4021880:	1c3fef1e 	bne	r3,r16,4021840 <__flash_rwdata_start+0xffff3c3c>
 4021884:	89c00044 	addi	r7,r17,1
 4021888:	380e913a 	slli	r7,r7,4
 402188c:	310003cc 	andi	r4,r6,15
 4021890:	02c000c4 	movi	r11,3
 4021894:	11c7883a 	add	r3,r2,r7
 4021898:	29cb883a 	add	r5,r5,r7
 402189c:	5900212e 	bgeu	r11,r4,4021924 <memcpy+0x140>
 40218a0:	1813883a 	mov	r9,r3
 40218a4:	2811883a 	mov	r8,r5
 40218a8:	200f883a 	mov	r7,r4
 40218ac:	42800017 	ldw	r10,0(r8)
 40218b0:	4a400104 	addi	r9,r9,4
 40218b4:	39ffff04 	addi	r7,r7,-4
 40218b8:	4abfff15 	stw	r10,-4(r9)
 40218bc:	42000104 	addi	r8,r8,4
 40218c0:	59fffa36 	bltu	r11,r7,40218ac <__flash_rwdata_start+0xffff3ca8>
 40218c4:	213fff04 	addi	r4,r4,-4
 40218c8:	2008d0ba 	srli	r4,r4,2
 40218cc:	318000cc 	andi	r6,r6,3
 40218d0:	21000044 	addi	r4,r4,1
 40218d4:	2109883a 	add	r4,r4,r4
 40218d8:	2109883a 	add	r4,r4,r4
 40218dc:	1907883a 	add	r3,r3,r4
 40218e0:	290b883a 	add	r5,r5,r4
 40218e4:	30000626 	beq	r6,zero,4021900 <memcpy+0x11c>
 40218e8:	198d883a 	add	r6,r3,r6
 40218ec:	29c00003 	ldbu	r7,0(r5)
 40218f0:	18c00044 	addi	r3,r3,1
 40218f4:	29400044 	addi	r5,r5,1
 40218f8:	19ffffc5 	stb	r7,-1(r3)
 40218fc:	19bffb1e 	bne	r3,r6,40218ec <__flash_rwdata_start+0xffff3ce8>
 4021900:	dfc00217 	ldw	ra,8(sp)
 4021904:	dc400117 	ldw	r17,4(sp)
 4021908:	dc000017 	ldw	r16,0(sp)
 402190c:	dec00304 	addi	sp,sp,12
 4021910:	f800283a 	ret
 4021914:	2007883a 	mov	r3,r4
 4021918:	003ff206 	br	40218e4 <__flash_rwdata_start+0xffff3ce0>
 402191c:	2007883a 	mov	r3,r4
 4021920:	003ff106 	br	40218e8 <__flash_rwdata_start+0xffff3ce4>
 4021924:	200d883a 	mov	r6,r4
 4021928:	003fee06 	br	40218e4 <__flash_rwdata_start+0xffff3ce0>

0402192c <memmove>:
 402192c:	2005883a 	mov	r2,r4
 4021930:	29000b2e 	bgeu	r5,r4,4021960 <memmove+0x34>
 4021934:	298f883a 	add	r7,r5,r6
 4021938:	21c0092e 	bgeu	r4,r7,4021960 <memmove+0x34>
 402193c:	2187883a 	add	r3,r4,r6
 4021940:	198bc83a 	sub	r5,r3,r6
 4021944:	30004826 	beq	r6,zero,4021a68 <memmove+0x13c>
 4021948:	39ffffc4 	addi	r7,r7,-1
 402194c:	39000003 	ldbu	r4,0(r7)
 4021950:	18ffffc4 	addi	r3,r3,-1
 4021954:	19000005 	stb	r4,0(r3)
 4021958:	28fffb1e 	bne	r5,r3,4021948 <__flash_rwdata_start+0xffff3d44>
 402195c:	f800283a 	ret
 4021960:	00c003c4 	movi	r3,15
 4021964:	1980412e 	bgeu	r3,r6,4021a6c <memmove+0x140>
 4021968:	2886b03a 	or	r3,r5,r2
 402196c:	18c000cc 	andi	r3,r3,3
 4021970:	1800401e 	bne	r3,zero,4021a74 <memmove+0x148>
 4021974:	33fffc04 	addi	r15,r6,-16
 4021978:	781ed13a 	srli	r15,r15,4
 402197c:	28c00104 	addi	r3,r5,4
 4021980:	13400104 	addi	r13,r2,4
 4021984:	781c913a 	slli	r14,r15,4
 4021988:	2b000204 	addi	r12,r5,8
 402198c:	12c00204 	addi	r11,r2,8
 4021990:	73800504 	addi	r14,r14,20
 4021994:	2a800304 	addi	r10,r5,12
 4021998:	12400304 	addi	r9,r2,12
 402199c:	2b9d883a 	add	r14,r5,r14
 40219a0:	2811883a 	mov	r8,r5
 40219a4:	100f883a 	mov	r7,r2
 40219a8:	41000017 	ldw	r4,0(r8)
 40219ac:	39c00404 	addi	r7,r7,16
 40219b0:	18c00404 	addi	r3,r3,16
 40219b4:	393ffc15 	stw	r4,-16(r7)
 40219b8:	193ffc17 	ldw	r4,-16(r3)
 40219bc:	6b400404 	addi	r13,r13,16
 40219c0:	5ac00404 	addi	r11,r11,16
 40219c4:	693ffc15 	stw	r4,-16(r13)
 40219c8:	61000017 	ldw	r4,0(r12)
 40219cc:	4a400404 	addi	r9,r9,16
 40219d0:	42000404 	addi	r8,r8,16
 40219d4:	593ffc15 	stw	r4,-16(r11)
 40219d8:	51000017 	ldw	r4,0(r10)
 40219dc:	63000404 	addi	r12,r12,16
 40219e0:	52800404 	addi	r10,r10,16
 40219e4:	493ffc15 	stw	r4,-16(r9)
 40219e8:	1bbfef1e 	bne	r3,r14,40219a8 <__flash_rwdata_start+0xffff3da4>
 40219ec:	79000044 	addi	r4,r15,1
 40219f0:	2008913a 	slli	r4,r4,4
 40219f4:	328003cc 	andi	r10,r6,15
 40219f8:	02c000c4 	movi	r11,3
 40219fc:	1107883a 	add	r3,r2,r4
 4021a00:	290b883a 	add	r5,r5,r4
 4021a04:	5a801e2e 	bgeu	r11,r10,4021a80 <memmove+0x154>
 4021a08:	1813883a 	mov	r9,r3
 4021a0c:	2811883a 	mov	r8,r5
 4021a10:	500f883a 	mov	r7,r10
 4021a14:	41000017 	ldw	r4,0(r8)
 4021a18:	4a400104 	addi	r9,r9,4
 4021a1c:	39ffff04 	addi	r7,r7,-4
 4021a20:	493fff15 	stw	r4,-4(r9)
 4021a24:	42000104 	addi	r8,r8,4
 4021a28:	59fffa36 	bltu	r11,r7,4021a14 <__flash_rwdata_start+0xffff3e10>
 4021a2c:	513fff04 	addi	r4,r10,-4
 4021a30:	2008d0ba 	srli	r4,r4,2
 4021a34:	318000cc 	andi	r6,r6,3
 4021a38:	21000044 	addi	r4,r4,1
 4021a3c:	2109883a 	add	r4,r4,r4
 4021a40:	2109883a 	add	r4,r4,r4
 4021a44:	1907883a 	add	r3,r3,r4
 4021a48:	290b883a 	add	r5,r5,r4
 4021a4c:	30000b26 	beq	r6,zero,4021a7c <memmove+0x150>
 4021a50:	198d883a 	add	r6,r3,r6
 4021a54:	29c00003 	ldbu	r7,0(r5)
 4021a58:	18c00044 	addi	r3,r3,1
 4021a5c:	29400044 	addi	r5,r5,1
 4021a60:	19ffffc5 	stb	r7,-1(r3)
 4021a64:	19bffb1e 	bne	r3,r6,4021a54 <__flash_rwdata_start+0xffff3e50>
 4021a68:	f800283a 	ret
 4021a6c:	1007883a 	mov	r3,r2
 4021a70:	003ff606 	br	4021a4c <__flash_rwdata_start+0xffff3e48>
 4021a74:	1007883a 	mov	r3,r2
 4021a78:	003ff506 	br	4021a50 <__flash_rwdata_start+0xffff3e4c>
 4021a7c:	f800283a 	ret
 4021a80:	500d883a 	mov	r6,r10
 4021a84:	003ff106 	br	4021a4c <__flash_rwdata_start+0xffff3e48>

04021a88 <memset>:
 4021a88:	20c000cc 	andi	r3,r4,3
 4021a8c:	2005883a 	mov	r2,r4
 4021a90:	18004426 	beq	r3,zero,4021ba4 <memset+0x11c>
 4021a94:	31ffffc4 	addi	r7,r6,-1
 4021a98:	30004026 	beq	r6,zero,4021b9c <memset+0x114>
 4021a9c:	2813883a 	mov	r9,r5
 4021aa0:	200d883a 	mov	r6,r4
 4021aa4:	2007883a 	mov	r3,r4
 4021aa8:	00000406 	br	4021abc <memset+0x34>
 4021aac:	3a3fffc4 	addi	r8,r7,-1
 4021ab0:	31800044 	addi	r6,r6,1
 4021ab4:	38003926 	beq	r7,zero,4021b9c <memset+0x114>
 4021ab8:	400f883a 	mov	r7,r8
 4021abc:	18c00044 	addi	r3,r3,1
 4021ac0:	32400005 	stb	r9,0(r6)
 4021ac4:	1a0000cc 	andi	r8,r3,3
 4021ac8:	403ff81e 	bne	r8,zero,4021aac <__flash_rwdata_start+0xffff3ea8>
 4021acc:	010000c4 	movi	r4,3
 4021ad0:	21c02d2e 	bgeu	r4,r7,4021b88 <memset+0x100>
 4021ad4:	29003fcc 	andi	r4,r5,255
 4021ad8:	200c923a 	slli	r6,r4,8
 4021adc:	3108b03a 	or	r4,r6,r4
 4021ae0:	200c943a 	slli	r6,r4,16
 4021ae4:	218cb03a 	or	r6,r4,r6
 4021ae8:	010003c4 	movi	r4,15
 4021aec:	21c0182e 	bgeu	r4,r7,4021b50 <memset+0xc8>
 4021af0:	3b3ffc04 	addi	r12,r7,-16
 4021af4:	6018d13a 	srli	r12,r12,4
 4021af8:	1a000104 	addi	r8,r3,4
 4021afc:	1ac00204 	addi	r11,r3,8
 4021b00:	6008913a 	slli	r4,r12,4
 4021b04:	1a800304 	addi	r10,r3,12
 4021b08:	1813883a 	mov	r9,r3
 4021b0c:	21000504 	addi	r4,r4,20
 4021b10:	1909883a 	add	r4,r3,r4
 4021b14:	49800015 	stw	r6,0(r9)
 4021b18:	41800015 	stw	r6,0(r8)
 4021b1c:	59800015 	stw	r6,0(r11)
 4021b20:	51800015 	stw	r6,0(r10)
 4021b24:	42000404 	addi	r8,r8,16
 4021b28:	4a400404 	addi	r9,r9,16
 4021b2c:	5ac00404 	addi	r11,r11,16
 4021b30:	52800404 	addi	r10,r10,16
 4021b34:	413ff71e 	bne	r8,r4,4021b14 <__flash_rwdata_start+0xffff3f10>
 4021b38:	63000044 	addi	r12,r12,1
 4021b3c:	6018913a 	slli	r12,r12,4
 4021b40:	39c003cc 	andi	r7,r7,15
 4021b44:	010000c4 	movi	r4,3
 4021b48:	1b07883a 	add	r3,r3,r12
 4021b4c:	21c00e2e 	bgeu	r4,r7,4021b88 <memset+0x100>
 4021b50:	1813883a 	mov	r9,r3
 4021b54:	3811883a 	mov	r8,r7
 4021b58:	010000c4 	movi	r4,3
 4021b5c:	49800015 	stw	r6,0(r9)
 4021b60:	423fff04 	addi	r8,r8,-4
 4021b64:	4a400104 	addi	r9,r9,4
 4021b68:	223ffc36 	bltu	r4,r8,4021b5c <__flash_rwdata_start+0xffff3f58>
 4021b6c:	393fff04 	addi	r4,r7,-4
 4021b70:	2008d0ba 	srli	r4,r4,2
 4021b74:	39c000cc 	andi	r7,r7,3
 4021b78:	21000044 	addi	r4,r4,1
 4021b7c:	2109883a 	add	r4,r4,r4
 4021b80:	2109883a 	add	r4,r4,r4
 4021b84:	1907883a 	add	r3,r3,r4
 4021b88:	38000526 	beq	r7,zero,4021ba0 <memset+0x118>
 4021b8c:	19cf883a 	add	r7,r3,r7
 4021b90:	19400005 	stb	r5,0(r3)
 4021b94:	18c00044 	addi	r3,r3,1
 4021b98:	38fffd1e 	bne	r7,r3,4021b90 <__flash_rwdata_start+0xffff3f8c>
 4021b9c:	f800283a 	ret
 4021ba0:	f800283a 	ret
 4021ba4:	2007883a 	mov	r3,r4
 4021ba8:	300f883a 	mov	r7,r6
 4021bac:	003fc706 	br	4021acc <__flash_rwdata_start+0xffff3ec8>

04021bb0 <_realloc_r>:
 4021bb0:	defff604 	addi	sp,sp,-40
 4021bb4:	dc800215 	stw	r18,8(sp)
 4021bb8:	dfc00915 	stw	ra,36(sp)
 4021bbc:	df000815 	stw	fp,32(sp)
 4021bc0:	ddc00715 	stw	r23,28(sp)
 4021bc4:	dd800615 	stw	r22,24(sp)
 4021bc8:	dd400515 	stw	r21,20(sp)
 4021bcc:	dd000415 	stw	r20,16(sp)
 4021bd0:	dcc00315 	stw	r19,12(sp)
 4021bd4:	dc400115 	stw	r17,4(sp)
 4021bd8:	dc000015 	stw	r16,0(sp)
 4021bdc:	3025883a 	mov	r18,r6
 4021be0:	2800b726 	beq	r5,zero,4021ec0 <_realloc_r+0x310>
 4021be4:	282b883a 	mov	r21,r5
 4021be8:	2029883a 	mov	r20,r4
 4021bec:	4023c440 	call	4023c44 <__malloc_lock>
 4021bf0:	a8bfff17 	ldw	r2,-4(r21)
 4021bf4:	043fff04 	movi	r16,-4
 4021bf8:	90c002c4 	addi	r3,r18,11
 4021bfc:	01000584 	movi	r4,22
 4021c00:	acfffe04 	addi	r19,r21,-8
 4021c04:	1420703a 	and	r16,r2,r16
 4021c08:	20c0332e 	bgeu	r4,r3,4021cd8 <_realloc_r+0x128>
 4021c0c:	047ffe04 	movi	r17,-8
 4021c10:	1c62703a 	and	r17,r3,r17
 4021c14:	8807883a 	mov	r3,r17
 4021c18:	88005816 	blt	r17,zero,4021d7c <_realloc_r+0x1cc>
 4021c1c:	8c805736 	bltu	r17,r18,4021d7c <_realloc_r+0x1cc>
 4021c20:	80c0300e 	bge	r16,r3,4021ce4 <_realloc_r+0x134>
 4021c24:	07000034 	movhi	fp,0
 4021c28:	e7016904 	addi	fp,fp,1444
 4021c2c:	e1c00217 	ldw	r7,8(fp)
 4021c30:	9c09883a 	add	r4,r19,r16
 4021c34:	22000117 	ldw	r8,4(r4)
 4021c38:	21c06326 	beq	r4,r7,4021dc8 <_realloc_r+0x218>
 4021c3c:	017fff84 	movi	r5,-2
 4021c40:	414a703a 	and	r5,r8,r5
 4021c44:	214b883a 	add	r5,r4,r5
 4021c48:	29800117 	ldw	r6,4(r5)
 4021c4c:	3180004c 	andi	r6,r6,1
 4021c50:	30003f26 	beq	r6,zero,4021d50 <_realloc_r+0x1a0>
 4021c54:	1080004c 	andi	r2,r2,1
 4021c58:	10008326 	beq	r2,zero,4021e68 <_realloc_r+0x2b8>
 4021c5c:	900b883a 	mov	r5,r18
 4021c60:	a009883a 	mov	r4,r20
 4021c64:	4020ef40 	call	4020ef4 <_malloc_r>
 4021c68:	1025883a 	mov	r18,r2
 4021c6c:	10011e26 	beq	r2,zero,40220e8 <_realloc_r+0x538>
 4021c70:	a93fff17 	ldw	r4,-4(r21)
 4021c74:	10fffe04 	addi	r3,r2,-8
 4021c78:	00bfff84 	movi	r2,-2
 4021c7c:	2084703a 	and	r2,r4,r2
 4021c80:	9885883a 	add	r2,r19,r2
 4021c84:	1880ee26 	beq	r3,r2,4022040 <_realloc_r+0x490>
 4021c88:	81bfff04 	addi	r6,r16,-4
 4021c8c:	00800904 	movi	r2,36
 4021c90:	1180b836 	bltu	r2,r6,4021f74 <_realloc_r+0x3c4>
 4021c94:	00c004c4 	movi	r3,19
 4021c98:	19809636 	bltu	r3,r6,4021ef4 <_realloc_r+0x344>
 4021c9c:	9005883a 	mov	r2,r18
 4021ca0:	a807883a 	mov	r3,r21
 4021ca4:	19000017 	ldw	r4,0(r3)
 4021ca8:	11000015 	stw	r4,0(r2)
 4021cac:	19000117 	ldw	r4,4(r3)
 4021cb0:	11000115 	stw	r4,4(r2)
 4021cb4:	18c00217 	ldw	r3,8(r3)
 4021cb8:	10c00215 	stw	r3,8(r2)
 4021cbc:	a80b883a 	mov	r5,r21
 4021cc0:	a009883a 	mov	r4,r20
 4021cc4:	402297c0 	call	402297c <_free_r>
 4021cc8:	a009883a 	mov	r4,r20
 4021ccc:	4023d640 	call	4023d64 <__malloc_unlock>
 4021cd0:	9005883a 	mov	r2,r18
 4021cd4:	00001206 	br	4021d20 <_realloc_r+0x170>
 4021cd8:	00c00404 	movi	r3,16
 4021cdc:	1823883a 	mov	r17,r3
 4021ce0:	003fce06 	br	4021c1c <__flash_rwdata_start+0xffff4018>
 4021ce4:	a825883a 	mov	r18,r21
 4021ce8:	8445c83a 	sub	r2,r16,r17
 4021cec:	00c003c4 	movi	r3,15
 4021cf0:	18802636 	bltu	r3,r2,4021d8c <_realloc_r+0x1dc>
 4021cf4:	99800117 	ldw	r6,4(r19)
 4021cf8:	9c07883a 	add	r3,r19,r16
 4021cfc:	3180004c 	andi	r6,r6,1
 4021d00:	3420b03a 	or	r16,r6,r16
 4021d04:	9c000115 	stw	r16,4(r19)
 4021d08:	18800117 	ldw	r2,4(r3)
 4021d0c:	10800054 	ori	r2,r2,1
 4021d10:	18800115 	stw	r2,4(r3)
 4021d14:	a009883a 	mov	r4,r20
 4021d18:	4023d640 	call	4023d64 <__malloc_unlock>
 4021d1c:	9005883a 	mov	r2,r18
 4021d20:	dfc00917 	ldw	ra,36(sp)
 4021d24:	df000817 	ldw	fp,32(sp)
 4021d28:	ddc00717 	ldw	r23,28(sp)
 4021d2c:	dd800617 	ldw	r22,24(sp)
 4021d30:	dd400517 	ldw	r21,20(sp)
 4021d34:	dd000417 	ldw	r20,16(sp)
 4021d38:	dcc00317 	ldw	r19,12(sp)
 4021d3c:	dc800217 	ldw	r18,8(sp)
 4021d40:	dc400117 	ldw	r17,4(sp)
 4021d44:	dc000017 	ldw	r16,0(sp)
 4021d48:	dec00a04 	addi	sp,sp,40
 4021d4c:	f800283a 	ret
 4021d50:	017fff04 	movi	r5,-4
 4021d54:	414a703a 	and	r5,r8,r5
 4021d58:	814d883a 	add	r6,r16,r5
 4021d5c:	30c01f16 	blt	r6,r3,4021ddc <_realloc_r+0x22c>
 4021d60:	20800317 	ldw	r2,12(r4)
 4021d64:	20c00217 	ldw	r3,8(r4)
 4021d68:	a825883a 	mov	r18,r21
 4021d6c:	3021883a 	mov	r16,r6
 4021d70:	18800315 	stw	r2,12(r3)
 4021d74:	10c00215 	stw	r3,8(r2)
 4021d78:	003fdb06 	br	4021ce8 <__flash_rwdata_start+0xffff40e4>
 4021d7c:	00800304 	movi	r2,12
 4021d80:	a0800015 	stw	r2,0(r20)
 4021d84:	0005883a 	mov	r2,zero
 4021d88:	003fe506 	br	4021d20 <__flash_rwdata_start+0xffff411c>
 4021d8c:	98c00117 	ldw	r3,4(r19)
 4021d90:	9c4b883a 	add	r5,r19,r17
 4021d94:	11000054 	ori	r4,r2,1
 4021d98:	18c0004c 	andi	r3,r3,1
 4021d9c:	1c62b03a 	or	r17,r3,r17
 4021da0:	9c400115 	stw	r17,4(r19)
 4021da4:	29000115 	stw	r4,4(r5)
 4021da8:	2885883a 	add	r2,r5,r2
 4021dac:	10c00117 	ldw	r3,4(r2)
 4021db0:	29400204 	addi	r5,r5,8
 4021db4:	a009883a 	mov	r4,r20
 4021db8:	18c00054 	ori	r3,r3,1
 4021dbc:	10c00115 	stw	r3,4(r2)
 4021dc0:	402297c0 	call	402297c <_free_r>
 4021dc4:	003fd306 	br	4021d14 <__flash_rwdata_start+0xffff4110>
 4021dc8:	017fff04 	movi	r5,-4
 4021dcc:	414a703a 	and	r5,r8,r5
 4021dd0:	89800404 	addi	r6,r17,16
 4021dd4:	8151883a 	add	r8,r16,r5
 4021dd8:	4180590e 	bge	r8,r6,4021f40 <_realloc_r+0x390>
 4021ddc:	1080004c 	andi	r2,r2,1
 4021de0:	103f9e1e 	bne	r2,zero,4021c5c <__flash_rwdata_start+0xffff4058>
 4021de4:	adbffe17 	ldw	r22,-8(r21)
 4021de8:	00bfff04 	movi	r2,-4
 4021dec:	9dadc83a 	sub	r22,r19,r22
 4021df0:	b1800117 	ldw	r6,4(r22)
 4021df4:	3084703a 	and	r2,r6,r2
 4021df8:	20002026 	beq	r4,zero,4021e7c <_realloc_r+0x2cc>
 4021dfc:	80af883a 	add	r23,r16,r2
 4021e00:	b96f883a 	add	r23,r23,r5
 4021e04:	21c05f26 	beq	r4,r7,4021f84 <_realloc_r+0x3d4>
 4021e08:	b8c01c16 	blt	r23,r3,4021e7c <_realloc_r+0x2cc>
 4021e0c:	20800317 	ldw	r2,12(r4)
 4021e10:	20c00217 	ldw	r3,8(r4)
 4021e14:	81bfff04 	addi	r6,r16,-4
 4021e18:	01000904 	movi	r4,36
 4021e1c:	18800315 	stw	r2,12(r3)
 4021e20:	10c00215 	stw	r3,8(r2)
 4021e24:	b0c00217 	ldw	r3,8(r22)
 4021e28:	b0800317 	ldw	r2,12(r22)
 4021e2c:	b4800204 	addi	r18,r22,8
 4021e30:	18800315 	stw	r2,12(r3)
 4021e34:	10c00215 	stw	r3,8(r2)
 4021e38:	21801b36 	bltu	r4,r6,4021ea8 <_realloc_r+0x2f8>
 4021e3c:	008004c4 	movi	r2,19
 4021e40:	1180352e 	bgeu	r2,r6,4021f18 <_realloc_r+0x368>
 4021e44:	a8800017 	ldw	r2,0(r21)
 4021e48:	b0800215 	stw	r2,8(r22)
 4021e4c:	a8800117 	ldw	r2,4(r21)
 4021e50:	b0800315 	stw	r2,12(r22)
 4021e54:	008006c4 	movi	r2,27
 4021e58:	11807f36 	bltu	r2,r6,4022058 <_realloc_r+0x4a8>
 4021e5c:	b0800404 	addi	r2,r22,16
 4021e60:	ad400204 	addi	r21,r21,8
 4021e64:	00002d06 	br	4021f1c <_realloc_r+0x36c>
 4021e68:	adbffe17 	ldw	r22,-8(r21)
 4021e6c:	00bfff04 	movi	r2,-4
 4021e70:	9dadc83a 	sub	r22,r19,r22
 4021e74:	b1000117 	ldw	r4,4(r22)
 4021e78:	2084703a 	and	r2,r4,r2
 4021e7c:	b03f7726 	beq	r22,zero,4021c5c <__flash_rwdata_start+0xffff4058>
 4021e80:	80af883a 	add	r23,r16,r2
 4021e84:	b8ff7516 	blt	r23,r3,4021c5c <__flash_rwdata_start+0xffff4058>
 4021e88:	b0800317 	ldw	r2,12(r22)
 4021e8c:	b0c00217 	ldw	r3,8(r22)
 4021e90:	81bfff04 	addi	r6,r16,-4
 4021e94:	01000904 	movi	r4,36
 4021e98:	18800315 	stw	r2,12(r3)
 4021e9c:	10c00215 	stw	r3,8(r2)
 4021ea0:	b4800204 	addi	r18,r22,8
 4021ea4:	21bfe52e 	bgeu	r4,r6,4021e3c <__flash_rwdata_start+0xffff4238>
 4021ea8:	a80b883a 	mov	r5,r21
 4021eac:	9009883a 	mov	r4,r18
 4021eb0:	402192c0 	call	402192c <memmove>
 4021eb4:	b821883a 	mov	r16,r23
 4021eb8:	b027883a 	mov	r19,r22
 4021ebc:	003f8a06 	br	4021ce8 <__flash_rwdata_start+0xffff40e4>
 4021ec0:	300b883a 	mov	r5,r6
 4021ec4:	dfc00917 	ldw	ra,36(sp)
 4021ec8:	df000817 	ldw	fp,32(sp)
 4021ecc:	ddc00717 	ldw	r23,28(sp)
 4021ed0:	dd800617 	ldw	r22,24(sp)
 4021ed4:	dd400517 	ldw	r21,20(sp)
 4021ed8:	dd000417 	ldw	r20,16(sp)
 4021edc:	dcc00317 	ldw	r19,12(sp)
 4021ee0:	dc800217 	ldw	r18,8(sp)
 4021ee4:	dc400117 	ldw	r17,4(sp)
 4021ee8:	dc000017 	ldw	r16,0(sp)
 4021eec:	dec00a04 	addi	sp,sp,40
 4021ef0:	4020ef41 	jmpi	4020ef4 <_malloc_r>
 4021ef4:	a8c00017 	ldw	r3,0(r21)
 4021ef8:	90c00015 	stw	r3,0(r18)
 4021efc:	a8c00117 	ldw	r3,4(r21)
 4021f00:	90c00115 	stw	r3,4(r18)
 4021f04:	00c006c4 	movi	r3,27
 4021f08:	19804536 	bltu	r3,r6,4022020 <_realloc_r+0x470>
 4021f0c:	90800204 	addi	r2,r18,8
 4021f10:	a8c00204 	addi	r3,r21,8
 4021f14:	003f6306 	br	4021ca4 <__flash_rwdata_start+0xffff40a0>
 4021f18:	9005883a 	mov	r2,r18
 4021f1c:	a8c00017 	ldw	r3,0(r21)
 4021f20:	b821883a 	mov	r16,r23
 4021f24:	b027883a 	mov	r19,r22
 4021f28:	10c00015 	stw	r3,0(r2)
 4021f2c:	a8c00117 	ldw	r3,4(r21)
 4021f30:	10c00115 	stw	r3,4(r2)
 4021f34:	a8c00217 	ldw	r3,8(r21)
 4021f38:	10c00215 	stw	r3,8(r2)
 4021f3c:	003f6a06 	br	4021ce8 <__flash_rwdata_start+0xffff40e4>
 4021f40:	9c67883a 	add	r19,r19,r17
 4021f44:	4445c83a 	sub	r2,r8,r17
 4021f48:	e4c00215 	stw	r19,8(fp)
 4021f4c:	10800054 	ori	r2,r2,1
 4021f50:	98800115 	stw	r2,4(r19)
 4021f54:	a8bfff17 	ldw	r2,-4(r21)
 4021f58:	a009883a 	mov	r4,r20
 4021f5c:	1080004c 	andi	r2,r2,1
 4021f60:	1462b03a 	or	r17,r2,r17
 4021f64:	ac7fff15 	stw	r17,-4(r21)
 4021f68:	4023d640 	call	4023d64 <__malloc_unlock>
 4021f6c:	a805883a 	mov	r2,r21
 4021f70:	003f6b06 	br	4021d20 <__flash_rwdata_start+0xffff411c>
 4021f74:	a80b883a 	mov	r5,r21
 4021f78:	9009883a 	mov	r4,r18
 4021f7c:	402192c0 	call	402192c <memmove>
 4021f80:	003f4e06 	br	4021cbc <__flash_rwdata_start+0xffff40b8>
 4021f84:	89000404 	addi	r4,r17,16
 4021f88:	b93fbc16 	blt	r23,r4,4021e7c <__flash_rwdata_start+0xffff4278>
 4021f8c:	b0800317 	ldw	r2,12(r22)
 4021f90:	b0c00217 	ldw	r3,8(r22)
 4021f94:	81bfff04 	addi	r6,r16,-4
 4021f98:	01000904 	movi	r4,36
 4021f9c:	18800315 	stw	r2,12(r3)
 4021fa0:	10c00215 	stw	r3,8(r2)
 4021fa4:	b4800204 	addi	r18,r22,8
 4021fa8:	21804336 	bltu	r4,r6,40220b8 <_realloc_r+0x508>
 4021fac:	008004c4 	movi	r2,19
 4021fb0:	11803f2e 	bgeu	r2,r6,40220b0 <_realloc_r+0x500>
 4021fb4:	a8800017 	ldw	r2,0(r21)
 4021fb8:	b0800215 	stw	r2,8(r22)
 4021fbc:	a8800117 	ldw	r2,4(r21)
 4021fc0:	b0800315 	stw	r2,12(r22)
 4021fc4:	008006c4 	movi	r2,27
 4021fc8:	11803f36 	bltu	r2,r6,40220c8 <_realloc_r+0x518>
 4021fcc:	b0800404 	addi	r2,r22,16
 4021fd0:	ad400204 	addi	r21,r21,8
 4021fd4:	a8c00017 	ldw	r3,0(r21)
 4021fd8:	10c00015 	stw	r3,0(r2)
 4021fdc:	a8c00117 	ldw	r3,4(r21)
 4021fe0:	10c00115 	stw	r3,4(r2)
 4021fe4:	a8c00217 	ldw	r3,8(r21)
 4021fe8:	10c00215 	stw	r3,8(r2)
 4021fec:	b447883a 	add	r3,r22,r17
 4021ff0:	bc45c83a 	sub	r2,r23,r17
 4021ff4:	e0c00215 	stw	r3,8(fp)
 4021ff8:	10800054 	ori	r2,r2,1
 4021ffc:	18800115 	stw	r2,4(r3)
 4022000:	b0800117 	ldw	r2,4(r22)
 4022004:	a009883a 	mov	r4,r20
 4022008:	1080004c 	andi	r2,r2,1
 402200c:	1462b03a 	or	r17,r2,r17
 4022010:	b4400115 	stw	r17,4(r22)
 4022014:	4023d640 	call	4023d64 <__malloc_unlock>
 4022018:	9005883a 	mov	r2,r18
 402201c:	003f4006 	br	4021d20 <__flash_rwdata_start+0xffff411c>
 4022020:	a8c00217 	ldw	r3,8(r21)
 4022024:	90c00215 	stw	r3,8(r18)
 4022028:	a8c00317 	ldw	r3,12(r21)
 402202c:	90c00315 	stw	r3,12(r18)
 4022030:	30801126 	beq	r6,r2,4022078 <_realloc_r+0x4c8>
 4022034:	90800404 	addi	r2,r18,16
 4022038:	a8c00404 	addi	r3,r21,16
 402203c:	003f1906 	br	4021ca4 <__flash_rwdata_start+0xffff40a0>
 4022040:	90ffff17 	ldw	r3,-4(r18)
 4022044:	00bfff04 	movi	r2,-4
 4022048:	a825883a 	mov	r18,r21
 402204c:	1884703a 	and	r2,r3,r2
 4022050:	80a1883a 	add	r16,r16,r2
 4022054:	003f2406 	br	4021ce8 <__flash_rwdata_start+0xffff40e4>
 4022058:	a8800217 	ldw	r2,8(r21)
 402205c:	b0800415 	stw	r2,16(r22)
 4022060:	a8800317 	ldw	r2,12(r21)
 4022064:	b0800515 	stw	r2,20(r22)
 4022068:	31000a26 	beq	r6,r4,4022094 <_realloc_r+0x4e4>
 402206c:	b0800604 	addi	r2,r22,24
 4022070:	ad400404 	addi	r21,r21,16
 4022074:	003fa906 	br	4021f1c <__flash_rwdata_start+0xffff4318>
 4022078:	a9000417 	ldw	r4,16(r21)
 402207c:	90800604 	addi	r2,r18,24
 4022080:	a8c00604 	addi	r3,r21,24
 4022084:	91000415 	stw	r4,16(r18)
 4022088:	a9000517 	ldw	r4,20(r21)
 402208c:	91000515 	stw	r4,20(r18)
 4022090:	003f0406 	br	4021ca4 <__flash_rwdata_start+0xffff40a0>
 4022094:	a8c00417 	ldw	r3,16(r21)
 4022098:	ad400604 	addi	r21,r21,24
 402209c:	b0800804 	addi	r2,r22,32
 40220a0:	b0c00615 	stw	r3,24(r22)
 40220a4:	a8ffff17 	ldw	r3,-4(r21)
 40220a8:	b0c00715 	stw	r3,28(r22)
 40220ac:	003f9b06 	br	4021f1c <__flash_rwdata_start+0xffff4318>
 40220b0:	9005883a 	mov	r2,r18
 40220b4:	003fc706 	br	4021fd4 <__flash_rwdata_start+0xffff43d0>
 40220b8:	a80b883a 	mov	r5,r21
 40220bc:	9009883a 	mov	r4,r18
 40220c0:	402192c0 	call	402192c <memmove>
 40220c4:	003fc906 	br	4021fec <__flash_rwdata_start+0xffff43e8>
 40220c8:	a8800217 	ldw	r2,8(r21)
 40220cc:	b0800415 	stw	r2,16(r22)
 40220d0:	a8800317 	ldw	r2,12(r21)
 40220d4:	b0800515 	stw	r2,20(r22)
 40220d8:	31000726 	beq	r6,r4,40220f8 <_realloc_r+0x548>
 40220dc:	b0800604 	addi	r2,r22,24
 40220e0:	ad400404 	addi	r21,r21,16
 40220e4:	003fbb06 	br	4021fd4 <__flash_rwdata_start+0xffff43d0>
 40220e8:	a009883a 	mov	r4,r20
 40220ec:	4023d640 	call	4023d64 <__malloc_unlock>
 40220f0:	0005883a 	mov	r2,zero
 40220f4:	003f0a06 	br	4021d20 <__flash_rwdata_start+0xffff411c>
 40220f8:	a8c00417 	ldw	r3,16(r21)
 40220fc:	ad400604 	addi	r21,r21,24
 4022100:	b0800804 	addi	r2,r22,32
 4022104:	b0c00615 	stw	r3,24(r22)
 4022108:	a8ffff17 	ldw	r3,-4(r21)
 402210c:	b0c00715 	stw	r3,28(r22)
 4022110:	003fb006 	br	4021fd4 <__flash_rwdata_start+0xffff43d0>

04022114 <_sbrk_r>:
 4022114:	defffd04 	addi	sp,sp,-12
 4022118:	dc000015 	stw	r16,0(sp)
 402211c:	04000034 	movhi	r16,0
 4022120:	dc400115 	stw	r17,4(sp)
 4022124:	84072004 	addi	r16,r16,7296
 4022128:	2023883a 	mov	r17,r4
 402212c:	2809883a 	mov	r4,r5
 4022130:	dfc00215 	stw	ra,8(sp)
 4022134:	80000015 	stw	zero,0(r16)
 4022138:	40239340 	call	4023934 <sbrk>
 402213c:	00ffffc4 	movi	r3,-1
 4022140:	10c00526 	beq	r2,r3,4022158 <_sbrk_r+0x44>
 4022144:	dfc00217 	ldw	ra,8(sp)
 4022148:	dc400117 	ldw	r17,4(sp)
 402214c:	dc000017 	ldw	r16,0(sp)
 4022150:	dec00304 	addi	sp,sp,12
 4022154:	f800283a 	ret
 4022158:	80c00017 	ldw	r3,0(r16)
 402215c:	183ff926 	beq	r3,zero,4022144 <__flash_rwdata_start+0xffff4540>
 4022160:	88c00015 	stw	r3,0(r17)
 4022164:	003ff706 	br	4022144 <__flash_rwdata_start+0xffff4540>

04022168 <__sread>:
 4022168:	defffe04 	addi	sp,sp,-8
 402216c:	dc000015 	stw	r16,0(sp)
 4022170:	2821883a 	mov	r16,r5
 4022174:	2940038f 	ldh	r5,14(r5)
 4022178:	dfc00115 	stw	ra,4(sp)
 402217c:	4022ea80 	call	4022ea8 <_read_r>
 4022180:	10000716 	blt	r2,zero,40221a0 <__sread+0x38>
 4022184:	80c01417 	ldw	r3,80(r16)
 4022188:	1887883a 	add	r3,r3,r2
 402218c:	80c01415 	stw	r3,80(r16)
 4022190:	dfc00117 	ldw	ra,4(sp)
 4022194:	dc000017 	ldw	r16,0(sp)
 4022198:	dec00204 	addi	sp,sp,8
 402219c:	f800283a 	ret
 40221a0:	80c0030b 	ldhu	r3,12(r16)
 40221a4:	18fbffcc 	andi	r3,r3,61439
 40221a8:	80c0030d 	sth	r3,12(r16)
 40221ac:	dfc00117 	ldw	ra,4(sp)
 40221b0:	dc000017 	ldw	r16,0(sp)
 40221b4:	dec00204 	addi	sp,sp,8
 40221b8:	f800283a 	ret

040221bc <__seofread>:
 40221bc:	0005883a 	mov	r2,zero
 40221c0:	f800283a 	ret

040221c4 <__swrite>:
 40221c4:	2880030b 	ldhu	r2,12(r5)
 40221c8:	defffb04 	addi	sp,sp,-20
 40221cc:	dcc00315 	stw	r19,12(sp)
 40221d0:	dc800215 	stw	r18,8(sp)
 40221d4:	dc400115 	stw	r17,4(sp)
 40221d8:	dc000015 	stw	r16,0(sp)
 40221dc:	dfc00415 	stw	ra,16(sp)
 40221e0:	10c0400c 	andi	r3,r2,256
 40221e4:	2821883a 	mov	r16,r5
 40221e8:	2023883a 	mov	r17,r4
 40221ec:	3025883a 	mov	r18,r6
 40221f0:	3827883a 	mov	r19,r7
 40221f4:	18000526 	beq	r3,zero,402220c <__swrite+0x48>
 40221f8:	2940038f 	ldh	r5,14(r5)
 40221fc:	01c00084 	movi	r7,2
 4022200:	000d883a 	mov	r6,zero
 4022204:	4022c8c0 	call	4022c8c <_lseek_r>
 4022208:	8080030b 	ldhu	r2,12(r16)
 402220c:	8140038f 	ldh	r5,14(r16)
 4022210:	10bbffcc 	andi	r2,r2,61439
 4022214:	980f883a 	mov	r7,r19
 4022218:	900d883a 	mov	r6,r18
 402221c:	8809883a 	mov	r4,r17
 4022220:	8080030d 	sth	r2,12(r16)
 4022224:	dfc00417 	ldw	ra,16(sp)
 4022228:	dcc00317 	ldw	r19,12(sp)
 402222c:	dc800217 	ldw	r18,8(sp)
 4022230:	dc400117 	ldw	r17,4(sp)
 4022234:	dc000017 	ldw	r16,0(sp)
 4022238:	dec00504 	addi	sp,sp,20
 402223c:	40222a41 	jmpi	40222a4 <_write_r>

04022240 <__sseek>:
 4022240:	defffe04 	addi	sp,sp,-8
 4022244:	dc000015 	stw	r16,0(sp)
 4022248:	2821883a 	mov	r16,r5
 402224c:	2940038f 	ldh	r5,14(r5)
 4022250:	dfc00115 	stw	ra,4(sp)
 4022254:	4022c8c0 	call	4022c8c <_lseek_r>
 4022258:	00ffffc4 	movi	r3,-1
 402225c:	10c00826 	beq	r2,r3,4022280 <__sseek+0x40>
 4022260:	80c0030b 	ldhu	r3,12(r16)
 4022264:	80801415 	stw	r2,80(r16)
 4022268:	18c40014 	ori	r3,r3,4096
 402226c:	80c0030d 	sth	r3,12(r16)
 4022270:	dfc00117 	ldw	ra,4(sp)
 4022274:	dc000017 	ldw	r16,0(sp)
 4022278:	dec00204 	addi	sp,sp,8
 402227c:	f800283a 	ret
 4022280:	80c0030b 	ldhu	r3,12(r16)
 4022284:	18fbffcc 	andi	r3,r3,61439
 4022288:	80c0030d 	sth	r3,12(r16)
 402228c:	dfc00117 	ldw	ra,4(sp)
 4022290:	dc000017 	ldw	r16,0(sp)
 4022294:	dec00204 	addi	sp,sp,8
 4022298:	f800283a 	ret

0402229c <__sclose>:
 402229c:	2940038f 	ldh	r5,14(r5)
 40222a0:	40224581 	jmpi	4022458 <_close_r>

040222a4 <_write_r>:
 40222a4:	defffd04 	addi	sp,sp,-12
 40222a8:	2805883a 	mov	r2,r5
 40222ac:	dc000015 	stw	r16,0(sp)
 40222b0:	04000034 	movhi	r16,0
 40222b4:	dc400115 	stw	r17,4(sp)
 40222b8:	300b883a 	mov	r5,r6
 40222bc:	84072004 	addi	r16,r16,7296
 40222c0:	2023883a 	mov	r17,r4
 40222c4:	380d883a 	mov	r6,r7
 40222c8:	1009883a 	mov	r4,r2
 40222cc:	dfc00215 	stw	ra,8(sp)
 40222d0:	80000015 	stw	zero,0(r16)
 40222d4:	4023a200 	call	4023a20 <write>
 40222d8:	00ffffc4 	movi	r3,-1
 40222dc:	10c00526 	beq	r2,r3,40222f4 <_write_r+0x50>
 40222e0:	dfc00217 	ldw	ra,8(sp)
 40222e4:	dc400117 	ldw	r17,4(sp)
 40222e8:	dc000017 	ldw	r16,0(sp)
 40222ec:	dec00304 	addi	sp,sp,12
 40222f0:	f800283a 	ret
 40222f4:	80c00017 	ldw	r3,0(r16)
 40222f8:	183ff926 	beq	r3,zero,40222e0 <__flash_rwdata_start+0xffff46dc>
 40222fc:	88c00015 	stw	r3,0(r17)
 4022300:	003ff706 	br	40222e0 <__flash_rwdata_start+0xffff46dc>

04022304 <__swsetup_r>:
 4022304:	00800034 	movhi	r2,0
 4022308:	defffd04 	addi	sp,sp,-12
 402230c:	1086f104 	addi	r2,r2,7108
 4022310:	dc400115 	stw	r17,4(sp)
 4022314:	2023883a 	mov	r17,r4
 4022318:	11000017 	ldw	r4,0(r2)
 402231c:	dc000015 	stw	r16,0(sp)
 4022320:	dfc00215 	stw	ra,8(sp)
 4022324:	2821883a 	mov	r16,r5
 4022328:	20000226 	beq	r4,zero,4022334 <__swsetup_r+0x30>
 402232c:	20800e17 	ldw	r2,56(r4)
 4022330:	10003126 	beq	r2,zero,40223f8 <__swsetup_r+0xf4>
 4022334:	8080030b 	ldhu	r2,12(r16)
 4022338:	10c0020c 	andi	r3,r2,8
 402233c:	1009883a 	mov	r4,r2
 4022340:	18000f26 	beq	r3,zero,4022380 <__swsetup_r+0x7c>
 4022344:	80c00417 	ldw	r3,16(r16)
 4022348:	18001526 	beq	r3,zero,40223a0 <__swsetup_r+0x9c>
 402234c:	1100004c 	andi	r4,r2,1
 4022350:	20001c1e 	bne	r4,zero,40223c4 <__swsetup_r+0xc0>
 4022354:	1080008c 	andi	r2,r2,2
 4022358:	1000291e 	bne	r2,zero,4022400 <__swsetup_r+0xfc>
 402235c:	80800517 	ldw	r2,20(r16)
 4022360:	80800215 	stw	r2,8(r16)
 4022364:	18001c26 	beq	r3,zero,40223d8 <__swsetup_r+0xd4>
 4022368:	0005883a 	mov	r2,zero
 402236c:	dfc00217 	ldw	ra,8(sp)
 4022370:	dc400117 	ldw	r17,4(sp)
 4022374:	dc000017 	ldw	r16,0(sp)
 4022378:	dec00304 	addi	sp,sp,12
 402237c:	f800283a 	ret
 4022380:	2080040c 	andi	r2,r4,16
 4022384:	10002e26 	beq	r2,zero,4022440 <__swsetup_r+0x13c>
 4022388:	2080010c 	andi	r2,r4,4
 402238c:	10001e1e 	bne	r2,zero,4022408 <__swsetup_r+0x104>
 4022390:	80c00417 	ldw	r3,16(r16)
 4022394:	20800214 	ori	r2,r4,8
 4022398:	8080030d 	sth	r2,12(r16)
 402239c:	183feb1e 	bne	r3,zero,402234c <__flash_rwdata_start+0xffff4748>
 40223a0:	1100a00c 	andi	r4,r2,640
 40223a4:	01408004 	movi	r5,512
 40223a8:	217fe826 	beq	r4,r5,402234c <__flash_rwdata_start+0xffff4748>
 40223ac:	800b883a 	mov	r5,r16
 40223b0:	8809883a 	mov	r4,r17
 40223b4:	4022cec0 	call	4022cec <__smakebuf_r>
 40223b8:	8080030b 	ldhu	r2,12(r16)
 40223bc:	80c00417 	ldw	r3,16(r16)
 40223c0:	003fe206 	br	402234c <__flash_rwdata_start+0xffff4748>
 40223c4:	80800517 	ldw	r2,20(r16)
 40223c8:	80000215 	stw	zero,8(r16)
 40223cc:	0085c83a 	sub	r2,zero,r2
 40223d0:	80800615 	stw	r2,24(r16)
 40223d4:	183fe41e 	bne	r3,zero,4022368 <__flash_rwdata_start+0xffff4764>
 40223d8:	80c0030b 	ldhu	r3,12(r16)
 40223dc:	0005883a 	mov	r2,zero
 40223e0:	1900200c 	andi	r4,r3,128
 40223e4:	203fe126 	beq	r4,zero,402236c <__flash_rwdata_start+0xffff4768>
 40223e8:	18c01014 	ori	r3,r3,64
 40223ec:	80c0030d 	sth	r3,12(r16)
 40223f0:	00bfffc4 	movi	r2,-1
 40223f4:	003fdd06 	br	402236c <__flash_rwdata_start+0xffff4768>
 40223f8:	40208540 	call	4020854 <__sinit>
 40223fc:	003fcd06 	br	4022334 <__flash_rwdata_start+0xffff4730>
 4022400:	0005883a 	mov	r2,zero
 4022404:	003fd606 	br	4022360 <__flash_rwdata_start+0xffff475c>
 4022408:	81400c17 	ldw	r5,48(r16)
 402240c:	28000626 	beq	r5,zero,4022428 <__swsetup_r+0x124>
 4022410:	80801004 	addi	r2,r16,64
 4022414:	28800326 	beq	r5,r2,4022424 <__swsetup_r+0x120>
 4022418:	8809883a 	mov	r4,r17
 402241c:	402297c0 	call	402297c <_free_r>
 4022420:	8100030b 	ldhu	r4,12(r16)
 4022424:	80000c15 	stw	zero,48(r16)
 4022428:	80c00417 	ldw	r3,16(r16)
 402242c:	00bff6c4 	movi	r2,-37
 4022430:	1108703a 	and	r4,r2,r4
 4022434:	80000115 	stw	zero,4(r16)
 4022438:	80c00015 	stw	r3,0(r16)
 402243c:	003fd506 	br	4022394 <__flash_rwdata_start+0xffff4790>
 4022440:	00800244 	movi	r2,9
 4022444:	88800015 	stw	r2,0(r17)
 4022448:	20801014 	ori	r2,r4,64
 402244c:	8080030d 	sth	r2,12(r16)
 4022450:	00bfffc4 	movi	r2,-1
 4022454:	003fc506 	br	402236c <__flash_rwdata_start+0xffff4768>

04022458 <_close_r>:
 4022458:	defffd04 	addi	sp,sp,-12
 402245c:	dc000015 	stw	r16,0(sp)
 4022460:	04000034 	movhi	r16,0
 4022464:	dc400115 	stw	r17,4(sp)
 4022468:	84072004 	addi	r16,r16,7296
 402246c:	2023883a 	mov	r17,r4
 4022470:	2809883a 	mov	r4,r5
 4022474:	dfc00215 	stw	ra,8(sp)
 4022478:	80000015 	stw	zero,0(r16)
 402247c:	40231d00 	call	40231d0 <close>
 4022480:	00ffffc4 	movi	r3,-1
 4022484:	10c00526 	beq	r2,r3,402249c <_close_r+0x44>
 4022488:	dfc00217 	ldw	ra,8(sp)
 402248c:	dc400117 	ldw	r17,4(sp)
 4022490:	dc000017 	ldw	r16,0(sp)
 4022494:	dec00304 	addi	sp,sp,12
 4022498:	f800283a 	ret
 402249c:	80c00017 	ldw	r3,0(r16)
 40224a0:	183ff926 	beq	r3,zero,4022488 <__flash_rwdata_start+0xffff4884>
 40224a4:	88c00015 	stw	r3,0(r17)
 40224a8:	003ff706 	br	4022488 <__flash_rwdata_start+0xffff4884>

040224ac <_fclose_r>:
 40224ac:	28003926 	beq	r5,zero,4022594 <_fclose_r+0xe8>
 40224b0:	defffc04 	addi	sp,sp,-16
 40224b4:	dc400115 	stw	r17,4(sp)
 40224b8:	dc000015 	stw	r16,0(sp)
 40224bc:	dfc00315 	stw	ra,12(sp)
 40224c0:	dc800215 	stw	r18,8(sp)
 40224c4:	2023883a 	mov	r17,r4
 40224c8:	2821883a 	mov	r16,r5
 40224cc:	20000226 	beq	r4,zero,40224d8 <_fclose_r+0x2c>
 40224d0:	20800e17 	ldw	r2,56(r4)
 40224d4:	10002726 	beq	r2,zero,4022574 <_fclose_r+0xc8>
 40224d8:	8080030f 	ldh	r2,12(r16)
 40224dc:	1000071e 	bne	r2,zero,40224fc <_fclose_r+0x50>
 40224e0:	0005883a 	mov	r2,zero
 40224e4:	dfc00317 	ldw	ra,12(sp)
 40224e8:	dc800217 	ldw	r18,8(sp)
 40224ec:	dc400117 	ldw	r17,4(sp)
 40224f0:	dc000017 	ldw	r16,0(sp)
 40224f4:	dec00404 	addi	sp,sp,16
 40224f8:	f800283a 	ret
 40224fc:	800b883a 	mov	r5,r16
 4022500:	8809883a 	mov	r4,r17
 4022504:	40225b00 	call	40225b0 <__sflush_r>
 4022508:	1025883a 	mov	r18,r2
 402250c:	80800b17 	ldw	r2,44(r16)
 4022510:	10000426 	beq	r2,zero,4022524 <_fclose_r+0x78>
 4022514:	81400717 	ldw	r5,28(r16)
 4022518:	8809883a 	mov	r4,r17
 402251c:	103ee83a 	callr	r2
 4022520:	10001616 	blt	r2,zero,402257c <_fclose_r+0xd0>
 4022524:	8080030b 	ldhu	r2,12(r16)
 4022528:	1080200c 	andi	r2,r2,128
 402252c:	1000151e 	bne	r2,zero,4022584 <_fclose_r+0xd8>
 4022530:	81400c17 	ldw	r5,48(r16)
 4022534:	28000526 	beq	r5,zero,402254c <_fclose_r+0xa0>
 4022538:	80801004 	addi	r2,r16,64
 402253c:	28800226 	beq	r5,r2,4022548 <_fclose_r+0x9c>
 4022540:	8809883a 	mov	r4,r17
 4022544:	402297c0 	call	402297c <_free_r>
 4022548:	80000c15 	stw	zero,48(r16)
 402254c:	81401117 	ldw	r5,68(r16)
 4022550:	28000326 	beq	r5,zero,4022560 <_fclose_r+0xb4>
 4022554:	8809883a 	mov	r4,r17
 4022558:	402297c0 	call	402297c <_free_r>
 402255c:	80001115 	stw	zero,68(r16)
 4022560:	40208640 	call	4020864 <__sfp_lock_acquire>
 4022564:	8000030d 	sth	zero,12(r16)
 4022568:	40208680 	call	4020868 <__sfp_lock_release>
 402256c:	9005883a 	mov	r2,r18
 4022570:	003fdc06 	br	40224e4 <__flash_rwdata_start+0xffff48e0>
 4022574:	40208540 	call	4020854 <__sinit>
 4022578:	003fd706 	br	40224d8 <__flash_rwdata_start+0xffff48d4>
 402257c:	04bfffc4 	movi	r18,-1
 4022580:	003fe806 	br	4022524 <__flash_rwdata_start+0xffff4920>
 4022584:	81400417 	ldw	r5,16(r16)
 4022588:	8809883a 	mov	r4,r17
 402258c:	402297c0 	call	402297c <_free_r>
 4022590:	003fe706 	br	4022530 <__flash_rwdata_start+0xffff492c>
 4022594:	0005883a 	mov	r2,zero
 4022598:	f800283a 	ret

0402259c <fclose>:
 402259c:	00800034 	movhi	r2,0
 40225a0:	1086f104 	addi	r2,r2,7108
 40225a4:	200b883a 	mov	r5,r4
 40225a8:	11000017 	ldw	r4,0(r2)
 40225ac:	40224ac1 	jmpi	40224ac <_fclose_r>

040225b0 <__sflush_r>:
 40225b0:	2880030b 	ldhu	r2,12(r5)
 40225b4:	defffb04 	addi	sp,sp,-20
 40225b8:	dcc00315 	stw	r19,12(sp)
 40225bc:	dc400115 	stw	r17,4(sp)
 40225c0:	dfc00415 	stw	ra,16(sp)
 40225c4:	dc800215 	stw	r18,8(sp)
 40225c8:	dc000015 	stw	r16,0(sp)
 40225cc:	10c0020c 	andi	r3,r2,8
 40225d0:	2823883a 	mov	r17,r5
 40225d4:	2027883a 	mov	r19,r4
 40225d8:	1800311e 	bne	r3,zero,40226a0 <__sflush_r+0xf0>
 40225dc:	28c00117 	ldw	r3,4(r5)
 40225e0:	10820014 	ori	r2,r2,2048
 40225e4:	2880030d 	sth	r2,12(r5)
 40225e8:	00c04b0e 	bge	zero,r3,4022718 <__sflush_r+0x168>
 40225ec:	8a000a17 	ldw	r8,40(r17)
 40225f0:	40002326 	beq	r8,zero,4022680 <__sflush_r+0xd0>
 40225f4:	9c000017 	ldw	r16,0(r19)
 40225f8:	10c4000c 	andi	r3,r2,4096
 40225fc:	98000015 	stw	zero,0(r19)
 4022600:	18004826 	beq	r3,zero,4022724 <__sflush_r+0x174>
 4022604:	89801417 	ldw	r6,80(r17)
 4022608:	10c0010c 	andi	r3,r2,4
 402260c:	18000626 	beq	r3,zero,4022628 <__sflush_r+0x78>
 4022610:	88c00117 	ldw	r3,4(r17)
 4022614:	88800c17 	ldw	r2,48(r17)
 4022618:	30cdc83a 	sub	r6,r6,r3
 402261c:	10000226 	beq	r2,zero,4022628 <__sflush_r+0x78>
 4022620:	88800f17 	ldw	r2,60(r17)
 4022624:	308dc83a 	sub	r6,r6,r2
 4022628:	89400717 	ldw	r5,28(r17)
 402262c:	000f883a 	mov	r7,zero
 4022630:	9809883a 	mov	r4,r19
 4022634:	403ee83a 	callr	r8
 4022638:	00ffffc4 	movi	r3,-1
 402263c:	10c04426 	beq	r2,r3,4022750 <__sflush_r+0x1a0>
 4022640:	88c0030b 	ldhu	r3,12(r17)
 4022644:	89000417 	ldw	r4,16(r17)
 4022648:	88000115 	stw	zero,4(r17)
 402264c:	197dffcc 	andi	r5,r3,63487
 4022650:	8940030d 	sth	r5,12(r17)
 4022654:	89000015 	stw	r4,0(r17)
 4022658:	18c4000c 	andi	r3,r3,4096
 402265c:	18002c1e 	bne	r3,zero,4022710 <__sflush_r+0x160>
 4022660:	89400c17 	ldw	r5,48(r17)
 4022664:	9c000015 	stw	r16,0(r19)
 4022668:	28000526 	beq	r5,zero,4022680 <__sflush_r+0xd0>
 402266c:	88801004 	addi	r2,r17,64
 4022670:	28800226 	beq	r5,r2,402267c <__sflush_r+0xcc>
 4022674:	9809883a 	mov	r4,r19
 4022678:	402297c0 	call	402297c <_free_r>
 402267c:	88000c15 	stw	zero,48(r17)
 4022680:	0005883a 	mov	r2,zero
 4022684:	dfc00417 	ldw	ra,16(sp)
 4022688:	dcc00317 	ldw	r19,12(sp)
 402268c:	dc800217 	ldw	r18,8(sp)
 4022690:	dc400117 	ldw	r17,4(sp)
 4022694:	dc000017 	ldw	r16,0(sp)
 4022698:	dec00504 	addi	sp,sp,20
 402269c:	f800283a 	ret
 40226a0:	2c800417 	ldw	r18,16(r5)
 40226a4:	903ff626 	beq	r18,zero,4022680 <__flash_rwdata_start+0xffff4a7c>
 40226a8:	2c000017 	ldw	r16,0(r5)
 40226ac:	108000cc 	andi	r2,r2,3
 40226b0:	2c800015 	stw	r18,0(r5)
 40226b4:	84a1c83a 	sub	r16,r16,r18
 40226b8:	1000131e 	bne	r2,zero,4022708 <__sflush_r+0x158>
 40226bc:	28800517 	ldw	r2,20(r5)
 40226c0:	88800215 	stw	r2,8(r17)
 40226c4:	04000316 	blt	zero,r16,40226d4 <__sflush_r+0x124>
 40226c8:	003fed06 	br	4022680 <__flash_rwdata_start+0xffff4a7c>
 40226cc:	90a5883a 	add	r18,r18,r2
 40226d0:	043feb0e 	bge	zero,r16,4022680 <__flash_rwdata_start+0xffff4a7c>
 40226d4:	88800917 	ldw	r2,36(r17)
 40226d8:	89400717 	ldw	r5,28(r17)
 40226dc:	800f883a 	mov	r7,r16
 40226e0:	900d883a 	mov	r6,r18
 40226e4:	9809883a 	mov	r4,r19
 40226e8:	103ee83a 	callr	r2
 40226ec:	80a1c83a 	sub	r16,r16,r2
 40226f0:	00bff616 	blt	zero,r2,40226cc <__flash_rwdata_start+0xffff4ac8>
 40226f4:	88c0030b 	ldhu	r3,12(r17)
 40226f8:	00bfffc4 	movi	r2,-1
 40226fc:	18c01014 	ori	r3,r3,64
 4022700:	88c0030d 	sth	r3,12(r17)
 4022704:	003fdf06 	br	4022684 <__flash_rwdata_start+0xffff4a80>
 4022708:	0005883a 	mov	r2,zero
 402270c:	003fec06 	br	40226c0 <__flash_rwdata_start+0xffff4abc>
 4022710:	88801415 	stw	r2,80(r17)
 4022714:	003fd206 	br	4022660 <__flash_rwdata_start+0xffff4a5c>
 4022718:	28c00f17 	ldw	r3,60(r5)
 402271c:	00ffb316 	blt	zero,r3,40225ec <__flash_rwdata_start+0xffff49e8>
 4022720:	003fd706 	br	4022680 <__flash_rwdata_start+0xffff4a7c>
 4022724:	89400717 	ldw	r5,28(r17)
 4022728:	000d883a 	mov	r6,zero
 402272c:	01c00044 	movi	r7,1
 4022730:	9809883a 	mov	r4,r19
 4022734:	403ee83a 	callr	r8
 4022738:	100d883a 	mov	r6,r2
 402273c:	00bfffc4 	movi	r2,-1
 4022740:	30801426 	beq	r6,r2,4022794 <__sflush_r+0x1e4>
 4022744:	8880030b 	ldhu	r2,12(r17)
 4022748:	8a000a17 	ldw	r8,40(r17)
 402274c:	003fae06 	br	4022608 <__flash_rwdata_start+0xffff4a04>
 4022750:	98c00017 	ldw	r3,0(r19)
 4022754:	183fba26 	beq	r3,zero,4022640 <__flash_rwdata_start+0xffff4a3c>
 4022758:	01000744 	movi	r4,29
 402275c:	19000626 	beq	r3,r4,4022778 <__sflush_r+0x1c8>
 4022760:	01000584 	movi	r4,22
 4022764:	19000426 	beq	r3,r4,4022778 <__sflush_r+0x1c8>
 4022768:	88c0030b 	ldhu	r3,12(r17)
 402276c:	18c01014 	ori	r3,r3,64
 4022770:	88c0030d 	sth	r3,12(r17)
 4022774:	003fc306 	br	4022684 <__flash_rwdata_start+0xffff4a80>
 4022778:	8880030b 	ldhu	r2,12(r17)
 402277c:	88c00417 	ldw	r3,16(r17)
 4022780:	88000115 	stw	zero,4(r17)
 4022784:	10bdffcc 	andi	r2,r2,63487
 4022788:	8880030d 	sth	r2,12(r17)
 402278c:	88c00015 	stw	r3,0(r17)
 4022790:	003fb306 	br	4022660 <__flash_rwdata_start+0xffff4a5c>
 4022794:	98800017 	ldw	r2,0(r19)
 4022798:	103fea26 	beq	r2,zero,4022744 <__flash_rwdata_start+0xffff4b40>
 402279c:	00c00744 	movi	r3,29
 40227a0:	10c00226 	beq	r2,r3,40227ac <__sflush_r+0x1fc>
 40227a4:	00c00584 	movi	r3,22
 40227a8:	10c0031e 	bne	r2,r3,40227b8 <__sflush_r+0x208>
 40227ac:	9c000015 	stw	r16,0(r19)
 40227b0:	0005883a 	mov	r2,zero
 40227b4:	003fb306 	br	4022684 <__flash_rwdata_start+0xffff4a80>
 40227b8:	88c0030b 	ldhu	r3,12(r17)
 40227bc:	3005883a 	mov	r2,r6
 40227c0:	18c01014 	ori	r3,r3,64
 40227c4:	88c0030d 	sth	r3,12(r17)
 40227c8:	003fae06 	br	4022684 <__flash_rwdata_start+0xffff4a80>

040227cc <_fflush_r>:
 40227cc:	defffd04 	addi	sp,sp,-12
 40227d0:	dc000115 	stw	r16,4(sp)
 40227d4:	dfc00215 	stw	ra,8(sp)
 40227d8:	2021883a 	mov	r16,r4
 40227dc:	20000226 	beq	r4,zero,40227e8 <_fflush_r+0x1c>
 40227e0:	20800e17 	ldw	r2,56(r4)
 40227e4:	10000c26 	beq	r2,zero,4022818 <_fflush_r+0x4c>
 40227e8:	2880030f 	ldh	r2,12(r5)
 40227ec:	1000051e 	bne	r2,zero,4022804 <_fflush_r+0x38>
 40227f0:	0005883a 	mov	r2,zero
 40227f4:	dfc00217 	ldw	ra,8(sp)
 40227f8:	dc000117 	ldw	r16,4(sp)
 40227fc:	dec00304 	addi	sp,sp,12
 4022800:	f800283a 	ret
 4022804:	8009883a 	mov	r4,r16
 4022808:	dfc00217 	ldw	ra,8(sp)
 402280c:	dc000117 	ldw	r16,4(sp)
 4022810:	dec00304 	addi	sp,sp,12
 4022814:	40225b01 	jmpi	40225b0 <__sflush_r>
 4022818:	d9400015 	stw	r5,0(sp)
 402281c:	40208540 	call	4020854 <__sinit>
 4022820:	d9400017 	ldw	r5,0(sp)
 4022824:	003ff006 	br	40227e8 <__flash_rwdata_start+0xffff4be4>

04022828 <fflush>:
 4022828:	20000526 	beq	r4,zero,4022840 <fflush+0x18>
 402282c:	00800034 	movhi	r2,0
 4022830:	1086f104 	addi	r2,r2,7108
 4022834:	200b883a 	mov	r5,r4
 4022838:	11000017 	ldw	r4,0(r2)
 402283c:	40227cc1 	jmpi	40227cc <_fflush_r>
 4022840:	00800034 	movhi	r2,0
 4022844:	1086f004 	addi	r2,r2,7104
 4022848:	11000017 	ldw	r4,0(r2)
 402284c:	014100b4 	movhi	r5,1026
 4022850:	2949f304 	addi	r5,r5,10188
 4022854:	4020e301 	jmpi	4020e30 <_fwalk_reent>

04022858 <_malloc_trim_r>:
 4022858:	defffb04 	addi	sp,sp,-20
 402285c:	dcc00315 	stw	r19,12(sp)
 4022860:	04c00034 	movhi	r19,0
 4022864:	dc800215 	stw	r18,8(sp)
 4022868:	dc400115 	stw	r17,4(sp)
 402286c:	dc000015 	stw	r16,0(sp)
 4022870:	dfc00415 	stw	ra,16(sp)
 4022874:	2821883a 	mov	r16,r5
 4022878:	9cc16904 	addi	r19,r19,1444
 402287c:	2025883a 	mov	r18,r4
 4022880:	4023c440 	call	4023c44 <__malloc_lock>
 4022884:	98800217 	ldw	r2,8(r19)
 4022888:	14400117 	ldw	r17,4(r2)
 402288c:	00bfff04 	movi	r2,-4
 4022890:	88a2703a 	and	r17,r17,r2
 4022894:	8c21c83a 	sub	r16,r17,r16
 4022898:	8403fbc4 	addi	r16,r16,4079
 402289c:	8020d33a 	srli	r16,r16,12
 40228a0:	0083ffc4 	movi	r2,4095
 40228a4:	843fffc4 	addi	r16,r16,-1
 40228a8:	8020933a 	slli	r16,r16,12
 40228ac:	1400060e 	bge	r2,r16,40228c8 <_malloc_trim_r+0x70>
 40228b0:	000b883a 	mov	r5,zero
 40228b4:	9009883a 	mov	r4,r18
 40228b8:	40221140 	call	4022114 <_sbrk_r>
 40228bc:	98c00217 	ldw	r3,8(r19)
 40228c0:	1c47883a 	add	r3,r3,r17
 40228c4:	10c00a26 	beq	r2,r3,40228f0 <_malloc_trim_r+0x98>
 40228c8:	9009883a 	mov	r4,r18
 40228cc:	4023d640 	call	4023d64 <__malloc_unlock>
 40228d0:	0005883a 	mov	r2,zero
 40228d4:	dfc00417 	ldw	ra,16(sp)
 40228d8:	dcc00317 	ldw	r19,12(sp)
 40228dc:	dc800217 	ldw	r18,8(sp)
 40228e0:	dc400117 	ldw	r17,4(sp)
 40228e4:	dc000017 	ldw	r16,0(sp)
 40228e8:	dec00504 	addi	sp,sp,20
 40228ec:	f800283a 	ret
 40228f0:	040bc83a 	sub	r5,zero,r16
 40228f4:	9009883a 	mov	r4,r18
 40228f8:	40221140 	call	4022114 <_sbrk_r>
 40228fc:	00ffffc4 	movi	r3,-1
 4022900:	10c00d26 	beq	r2,r3,4022938 <_malloc_trim_r+0xe0>
 4022904:	00c00034 	movhi	r3,0
 4022908:	18c74104 	addi	r3,r3,7428
 402290c:	18800017 	ldw	r2,0(r3)
 4022910:	99000217 	ldw	r4,8(r19)
 4022914:	8c23c83a 	sub	r17,r17,r16
 4022918:	8c400054 	ori	r17,r17,1
 402291c:	1421c83a 	sub	r16,r2,r16
 4022920:	24400115 	stw	r17,4(r4)
 4022924:	9009883a 	mov	r4,r18
 4022928:	1c000015 	stw	r16,0(r3)
 402292c:	4023d640 	call	4023d64 <__malloc_unlock>
 4022930:	00800044 	movi	r2,1
 4022934:	003fe706 	br	40228d4 <__flash_rwdata_start+0xffff4cd0>
 4022938:	000b883a 	mov	r5,zero
 402293c:	9009883a 	mov	r4,r18
 4022940:	40221140 	call	4022114 <_sbrk_r>
 4022944:	99000217 	ldw	r4,8(r19)
 4022948:	014003c4 	movi	r5,15
 402294c:	1107c83a 	sub	r3,r2,r4
 4022950:	28ffdd0e 	bge	r5,r3,40228c8 <__flash_rwdata_start+0xffff4cc4>
 4022954:	01400034 	movhi	r5,0
 4022958:	2946f204 	addi	r5,r5,7112
 402295c:	29400017 	ldw	r5,0(r5)
 4022960:	18c00054 	ori	r3,r3,1
 4022964:	20c00115 	stw	r3,4(r4)
 4022968:	00c00034 	movhi	r3,0
 402296c:	1145c83a 	sub	r2,r2,r5
 4022970:	18c74104 	addi	r3,r3,7428
 4022974:	18800015 	stw	r2,0(r3)
 4022978:	003fd306 	br	40228c8 <__flash_rwdata_start+0xffff4cc4>

0402297c <_free_r>:
 402297c:	28004126 	beq	r5,zero,4022a84 <_free_r+0x108>
 4022980:	defffd04 	addi	sp,sp,-12
 4022984:	dc400115 	stw	r17,4(sp)
 4022988:	dc000015 	stw	r16,0(sp)
 402298c:	2023883a 	mov	r17,r4
 4022990:	2821883a 	mov	r16,r5
 4022994:	dfc00215 	stw	ra,8(sp)
 4022998:	4023c440 	call	4023c44 <__malloc_lock>
 402299c:	81ffff17 	ldw	r7,-4(r16)
 40229a0:	00bfff84 	movi	r2,-2
 40229a4:	01000034 	movhi	r4,0
 40229a8:	81bffe04 	addi	r6,r16,-8
 40229ac:	3884703a 	and	r2,r7,r2
 40229b0:	21016904 	addi	r4,r4,1444
 40229b4:	308b883a 	add	r5,r6,r2
 40229b8:	2a400117 	ldw	r9,4(r5)
 40229bc:	22000217 	ldw	r8,8(r4)
 40229c0:	00ffff04 	movi	r3,-4
 40229c4:	48c6703a 	and	r3,r9,r3
 40229c8:	2a005726 	beq	r5,r8,4022b28 <_free_r+0x1ac>
 40229cc:	28c00115 	stw	r3,4(r5)
 40229d0:	39c0004c 	andi	r7,r7,1
 40229d4:	3800091e 	bne	r7,zero,40229fc <_free_r+0x80>
 40229d8:	823ffe17 	ldw	r8,-8(r16)
 40229dc:	22400204 	addi	r9,r4,8
 40229e0:	320dc83a 	sub	r6,r6,r8
 40229e4:	31c00217 	ldw	r7,8(r6)
 40229e8:	1205883a 	add	r2,r2,r8
 40229ec:	3a406526 	beq	r7,r9,4022b84 <_free_r+0x208>
 40229f0:	32000317 	ldw	r8,12(r6)
 40229f4:	3a000315 	stw	r8,12(r7)
 40229f8:	41c00215 	stw	r7,8(r8)
 40229fc:	28cf883a 	add	r7,r5,r3
 4022a00:	39c00117 	ldw	r7,4(r7)
 4022a04:	39c0004c 	andi	r7,r7,1
 4022a08:	38003a26 	beq	r7,zero,4022af4 <_free_r+0x178>
 4022a0c:	10c00054 	ori	r3,r2,1
 4022a10:	30c00115 	stw	r3,4(r6)
 4022a14:	3087883a 	add	r3,r6,r2
 4022a18:	18800015 	stw	r2,0(r3)
 4022a1c:	00c07fc4 	movi	r3,511
 4022a20:	18801936 	bltu	r3,r2,4022a88 <_free_r+0x10c>
 4022a24:	1004d0fa 	srli	r2,r2,3
 4022a28:	01c00044 	movi	r7,1
 4022a2c:	21400117 	ldw	r5,4(r4)
 4022a30:	10c00044 	addi	r3,r2,1
 4022a34:	18c7883a 	add	r3,r3,r3
 4022a38:	1005d0ba 	srai	r2,r2,2
 4022a3c:	18c7883a 	add	r3,r3,r3
 4022a40:	18c7883a 	add	r3,r3,r3
 4022a44:	1907883a 	add	r3,r3,r4
 4022a48:	3884983a 	sll	r2,r7,r2
 4022a4c:	19c00017 	ldw	r7,0(r3)
 4022a50:	1a3ffe04 	addi	r8,r3,-8
 4022a54:	1144b03a 	or	r2,r2,r5
 4022a58:	32000315 	stw	r8,12(r6)
 4022a5c:	31c00215 	stw	r7,8(r6)
 4022a60:	20800115 	stw	r2,4(r4)
 4022a64:	19800015 	stw	r6,0(r3)
 4022a68:	39800315 	stw	r6,12(r7)
 4022a6c:	8809883a 	mov	r4,r17
 4022a70:	dfc00217 	ldw	ra,8(sp)
 4022a74:	dc400117 	ldw	r17,4(sp)
 4022a78:	dc000017 	ldw	r16,0(sp)
 4022a7c:	dec00304 	addi	sp,sp,12
 4022a80:	4023d641 	jmpi	4023d64 <__malloc_unlock>
 4022a84:	f800283a 	ret
 4022a88:	100ad27a 	srli	r5,r2,9
 4022a8c:	00c00104 	movi	r3,4
 4022a90:	19404a36 	bltu	r3,r5,4022bbc <_free_r+0x240>
 4022a94:	100ad1ba 	srli	r5,r2,6
 4022a98:	28c00e44 	addi	r3,r5,57
 4022a9c:	18c7883a 	add	r3,r3,r3
 4022aa0:	29400e04 	addi	r5,r5,56
 4022aa4:	18c7883a 	add	r3,r3,r3
 4022aa8:	18c7883a 	add	r3,r3,r3
 4022aac:	1909883a 	add	r4,r3,r4
 4022ab0:	20c00017 	ldw	r3,0(r4)
 4022ab4:	01c00034 	movhi	r7,0
 4022ab8:	213ffe04 	addi	r4,r4,-8
 4022abc:	39c16904 	addi	r7,r7,1444
 4022ac0:	20c04426 	beq	r4,r3,4022bd4 <_free_r+0x258>
 4022ac4:	01ffff04 	movi	r7,-4
 4022ac8:	19400117 	ldw	r5,4(r3)
 4022acc:	29ca703a 	and	r5,r5,r7
 4022ad0:	1140022e 	bgeu	r2,r5,4022adc <_free_r+0x160>
 4022ad4:	18c00217 	ldw	r3,8(r3)
 4022ad8:	20fffb1e 	bne	r4,r3,4022ac8 <__flash_rwdata_start+0xffff4ec4>
 4022adc:	19000317 	ldw	r4,12(r3)
 4022ae0:	31000315 	stw	r4,12(r6)
 4022ae4:	30c00215 	stw	r3,8(r6)
 4022ae8:	21800215 	stw	r6,8(r4)
 4022aec:	19800315 	stw	r6,12(r3)
 4022af0:	003fde06 	br	4022a6c <__flash_rwdata_start+0xffff4e68>
 4022af4:	29c00217 	ldw	r7,8(r5)
 4022af8:	10c5883a 	add	r2,r2,r3
 4022afc:	00c00034 	movhi	r3,0
 4022b00:	18c16b04 	addi	r3,r3,1452
 4022b04:	38c03b26 	beq	r7,r3,4022bf4 <_free_r+0x278>
 4022b08:	2a000317 	ldw	r8,12(r5)
 4022b0c:	11400054 	ori	r5,r2,1
 4022b10:	3087883a 	add	r3,r6,r2
 4022b14:	3a000315 	stw	r8,12(r7)
 4022b18:	41c00215 	stw	r7,8(r8)
 4022b1c:	31400115 	stw	r5,4(r6)
 4022b20:	18800015 	stw	r2,0(r3)
 4022b24:	003fbd06 	br	4022a1c <__flash_rwdata_start+0xffff4e18>
 4022b28:	39c0004c 	andi	r7,r7,1
 4022b2c:	10c5883a 	add	r2,r2,r3
 4022b30:	3800071e 	bne	r7,zero,4022b50 <_free_r+0x1d4>
 4022b34:	81fffe17 	ldw	r7,-8(r16)
 4022b38:	31cdc83a 	sub	r6,r6,r7
 4022b3c:	30c00317 	ldw	r3,12(r6)
 4022b40:	31400217 	ldw	r5,8(r6)
 4022b44:	11c5883a 	add	r2,r2,r7
 4022b48:	28c00315 	stw	r3,12(r5)
 4022b4c:	19400215 	stw	r5,8(r3)
 4022b50:	10c00054 	ori	r3,r2,1
 4022b54:	30c00115 	stw	r3,4(r6)
 4022b58:	00c00034 	movhi	r3,0
 4022b5c:	18c6f304 	addi	r3,r3,7116
 4022b60:	18c00017 	ldw	r3,0(r3)
 4022b64:	21800215 	stw	r6,8(r4)
 4022b68:	10ffc036 	bltu	r2,r3,4022a6c <__flash_rwdata_start+0xffff4e68>
 4022b6c:	00800034 	movhi	r2,0
 4022b70:	10871f04 	addi	r2,r2,7292
 4022b74:	11400017 	ldw	r5,0(r2)
 4022b78:	8809883a 	mov	r4,r17
 4022b7c:	40228580 	call	4022858 <_malloc_trim_r>
 4022b80:	003fba06 	br	4022a6c <__flash_rwdata_start+0xffff4e68>
 4022b84:	28c9883a 	add	r4,r5,r3
 4022b88:	21000117 	ldw	r4,4(r4)
 4022b8c:	2100004c 	andi	r4,r4,1
 4022b90:	2000391e 	bne	r4,zero,4022c78 <_free_r+0x2fc>
 4022b94:	29c00217 	ldw	r7,8(r5)
 4022b98:	29000317 	ldw	r4,12(r5)
 4022b9c:	1885883a 	add	r2,r3,r2
 4022ba0:	10c00054 	ori	r3,r2,1
 4022ba4:	39000315 	stw	r4,12(r7)
 4022ba8:	21c00215 	stw	r7,8(r4)
 4022bac:	30c00115 	stw	r3,4(r6)
 4022bb0:	308d883a 	add	r6,r6,r2
 4022bb4:	30800015 	stw	r2,0(r6)
 4022bb8:	003fac06 	br	4022a6c <__flash_rwdata_start+0xffff4e68>
 4022bbc:	00c00504 	movi	r3,20
 4022bc0:	19401536 	bltu	r3,r5,4022c18 <_free_r+0x29c>
 4022bc4:	28c01704 	addi	r3,r5,92
 4022bc8:	18c7883a 	add	r3,r3,r3
 4022bcc:	294016c4 	addi	r5,r5,91
 4022bd0:	003fb406 	br	4022aa4 <__flash_rwdata_start+0xffff4ea0>
 4022bd4:	280bd0ba 	srai	r5,r5,2
 4022bd8:	00c00044 	movi	r3,1
 4022bdc:	38800117 	ldw	r2,4(r7)
 4022be0:	194a983a 	sll	r5,r3,r5
 4022be4:	2007883a 	mov	r3,r4
 4022be8:	2884b03a 	or	r2,r5,r2
 4022bec:	38800115 	stw	r2,4(r7)
 4022bf0:	003fbb06 	br	4022ae0 <__flash_rwdata_start+0xffff4edc>
 4022bf4:	21800515 	stw	r6,20(r4)
 4022bf8:	21800415 	stw	r6,16(r4)
 4022bfc:	10c00054 	ori	r3,r2,1
 4022c00:	31c00315 	stw	r7,12(r6)
 4022c04:	31c00215 	stw	r7,8(r6)
 4022c08:	30c00115 	stw	r3,4(r6)
 4022c0c:	308d883a 	add	r6,r6,r2
 4022c10:	30800015 	stw	r2,0(r6)
 4022c14:	003f9506 	br	4022a6c <__flash_rwdata_start+0xffff4e68>
 4022c18:	00c01504 	movi	r3,84
 4022c1c:	19400536 	bltu	r3,r5,4022c34 <_free_r+0x2b8>
 4022c20:	100ad33a 	srli	r5,r2,12
 4022c24:	28c01bc4 	addi	r3,r5,111
 4022c28:	18c7883a 	add	r3,r3,r3
 4022c2c:	29401b84 	addi	r5,r5,110
 4022c30:	003f9c06 	br	4022aa4 <__flash_rwdata_start+0xffff4ea0>
 4022c34:	00c05504 	movi	r3,340
 4022c38:	19400536 	bltu	r3,r5,4022c50 <_free_r+0x2d4>
 4022c3c:	100ad3fa 	srli	r5,r2,15
 4022c40:	28c01e04 	addi	r3,r5,120
 4022c44:	18c7883a 	add	r3,r3,r3
 4022c48:	29401dc4 	addi	r5,r5,119
 4022c4c:	003f9506 	br	4022aa4 <__flash_rwdata_start+0xffff4ea0>
 4022c50:	00c15504 	movi	r3,1364
 4022c54:	19400536 	bltu	r3,r5,4022c6c <_free_r+0x2f0>
 4022c58:	100ad4ba 	srli	r5,r2,18
 4022c5c:	28c01f44 	addi	r3,r5,125
 4022c60:	18c7883a 	add	r3,r3,r3
 4022c64:	29401f04 	addi	r5,r5,124
 4022c68:	003f8e06 	br	4022aa4 <__flash_rwdata_start+0xffff4ea0>
 4022c6c:	00c03f84 	movi	r3,254
 4022c70:	01401f84 	movi	r5,126
 4022c74:	003f8b06 	br	4022aa4 <__flash_rwdata_start+0xffff4ea0>
 4022c78:	10c00054 	ori	r3,r2,1
 4022c7c:	30c00115 	stw	r3,4(r6)
 4022c80:	308d883a 	add	r6,r6,r2
 4022c84:	30800015 	stw	r2,0(r6)
 4022c88:	003f7806 	br	4022a6c <__flash_rwdata_start+0xffff4e68>

04022c8c <_lseek_r>:
 4022c8c:	defffd04 	addi	sp,sp,-12
 4022c90:	2805883a 	mov	r2,r5
 4022c94:	dc000015 	stw	r16,0(sp)
 4022c98:	04000034 	movhi	r16,0
 4022c9c:	dc400115 	stw	r17,4(sp)
 4022ca0:	300b883a 	mov	r5,r6
 4022ca4:	84072004 	addi	r16,r16,7296
 4022ca8:	2023883a 	mov	r17,r4
 4022cac:	380d883a 	mov	r6,r7
 4022cb0:	1009883a 	mov	r4,r2
 4022cb4:	dfc00215 	stw	ra,8(sp)
 4022cb8:	80000015 	stw	zero,0(r16)
 4022cbc:	40235d80 	call	40235d8 <lseek>
 4022cc0:	00ffffc4 	movi	r3,-1
 4022cc4:	10c00526 	beq	r2,r3,4022cdc <_lseek_r+0x50>
 4022cc8:	dfc00217 	ldw	ra,8(sp)
 4022ccc:	dc400117 	ldw	r17,4(sp)
 4022cd0:	dc000017 	ldw	r16,0(sp)
 4022cd4:	dec00304 	addi	sp,sp,12
 4022cd8:	f800283a 	ret
 4022cdc:	80c00017 	ldw	r3,0(r16)
 4022ce0:	183ff926 	beq	r3,zero,4022cc8 <__flash_rwdata_start+0xffff50c4>
 4022ce4:	88c00015 	stw	r3,0(r17)
 4022ce8:	003ff706 	br	4022cc8 <__flash_rwdata_start+0xffff50c4>

04022cec <__smakebuf_r>:
 4022cec:	2880030b 	ldhu	r2,12(r5)
 4022cf0:	10c0008c 	andi	r3,r2,2
 4022cf4:	1800411e 	bne	r3,zero,4022dfc <__smakebuf_r+0x110>
 4022cf8:	deffec04 	addi	sp,sp,-80
 4022cfc:	dc000f15 	stw	r16,60(sp)
 4022d00:	2821883a 	mov	r16,r5
 4022d04:	2940038f 	ldh	r5,14(r5)
 4022d08:	dc401015 	stw	r17,64(sp)
 4022d0c:	dfc01315 	stw	ra,76(sp)
 4022d10:	dcc01215 	stw	r19,72(sp)
 4022d14:	dc801115 	stw	r18,68(sp)
 4022d18:	2023883a 	mov	r17,r4
 4022d1c:	28001c16 	blt	r5,zero,4022d90 <__smakebuf_r+0xa4>
 4022d20:	d80d883a 	mov	r6,sp
 4022d24:	4022f080 	call	4022f08 <_fstat_r>
 4022d28:	10001816 	blt	r2,zero,4022d8c <__smakebuf_r+0xa0>
 4022d2c:	d8800117 	ldw	r2,4(sp)
 4022d30:	00e00014 	movui	r3,32768
 4022d34:	10bc000c 	andi	r2,r2,61440
 4022d38:	14c80020 	cmpeqi	r19,r2,8192
 4022d3c:	10c03726 	beq	r2,r3,4022e1c <__smakebuf_r+0x130>
 4022d40:	80c0030b 	ldhu	r3,12(r16)
 4022d44:	18c20014 	ori	r3,r3,2048
 4022d48:	80c0030d 	sth	r3,12(r16)
 4022d4c:	00c80004 	movi	r3,8192
 4022d50:	10c0521e 	bne	r2,r3,4022e9c <__smakebuf_r+0x1b0>
 4022d54:	8140038f 	ldh	r5,14(r16)
 4022d58:	8809883a 	mov	r4,r17
 4022d5c:	4022f640 	call	4022f64 <_isatty_r>
 4022d60:	10004c26 	beq	r2,zero,4022e94 <__smakebuf_r+0x1a8>
 4022d64:	8080030b 	ldhu	r2,12(r16)
 4022d68:	80c010c4 	addi	r3,r16,67
 4022d6c:	80c00015 	stw	r3,0(r16)
 4022d70:	10800054 	ori	r2,r2,1
 4022d74:	8080030d 	sth	r2,12(r16)
 4022d78:	00800044 	movi	r2,1
 4022d7c:	80c00415 	stw	r3,16(r16)
 4022d80:	80800515 	stw	r2,20(r16)
 4022d84:	04810004 	movi	r18,1024
 4022d88:	00000706 	br	4022da8 <__smakebuf_r+0xbc>
 4022d8c:	8080030b 	ldhu	r2,12(r16)
 4022d90:	10c0200c 	andi	r3,r2,128
 4022d94:	18001f1e 	bne	r3,zero,4022e14 <__smakebuf_r+0x128>
 4022d98:	04810004 	movi	r18,1024
 4022d9c:	10820014 	ori	r2,r2,2048
 4022da0:	8080030d 	sth	r2,12(r16)
 4022da4:	0027883a 	mov	r19,zero
 4022da8:	900b883a 	mov	r5,r18
 4022dac:	8809883a 	mov	r4,r17
 4022db0:	4020ef40 	call	4020ef4 <_malloc_r>
 4022db4:	10002c26 	beq	r2,zero,4022e68 <__smakebuf_r+0x17c>
 4022db8:	80c0030b 	ldhu	r3,12(r16)
 4022dbc:	010100b4 	movhi	r4,1026
 4022dc0:	21013f04 	addi	r4,r4,1276
 4022dc4:	89000f15 	stw	r4,60(r17)
 4022dc8:	18c02014 	ori	r3,r3,128
 4022dcc:	80c0030d 	sth	r3,12(r16)
 4022dd0:	80800015 	stw	r2,0(r16)
 4022dd4:	80800415 	stw	r2,16(r16)
 4022dd8:	84800515 	stw	r18,20(r16)
 4022ddc:	98001a1e 	bne	r19,zero,4022e48 <__smakebuf_r+0x15c>
 4022de0:	dfc01317 	ldw	ra,76(sp)
 4022de4:	dcc01217 	ldw	r19,72(sp)
 4022de8:	dc801117 	ldw	r18,68(sp)
 4022dec:	dc401017 	ldw	r17,64(sp)
 4022df0:	dc000f17 	ldw	r16,60(sp)
 4022df4:	dec01404 	addi	sp,sp,80
 4022df8:	f800283a 	ret
 4022dfc:	288010c4 	addi	r2,r5,67
 4022e00:	28800015 	stw	r2,0(r5)
 4022e04:	28800415 	stw	r2,16(r5)
 4022e08:	00800044 	movi	r2,1
 4022e0c:	28800515 	stw	r2,20(r5)
 4022e10:	f800283a 	ret
 4022e14:	04801004 	movi	r18,64
 4022e18:	003fe006 	br	4022d9c <__flash_rwdata_start+0xffff5198>
 4022e1c:	81000a17 	ldw	r4,40(r16)
 4022e20:	00c100b4 	movhi	r3,1026
 4022e24:	18c89004 	addi	r3,r3,8768
 4022e28:	20ffc51e 	bne	r4,r3,4022d40 <__flash_rwdata_start+0xffff513c>
 4022e2c:	8080030b 	ldhu	r2,12(r16)
 4022e30:	04810004 	movi	r18,1024
 4022e34:	84801315 	stw	r18,76(r16)
 4022e38:	1484b03a 	or	r2,r2,r18
 4022e3c:	8080030d 	sth	r2,12(r16)
 4022e40:	0027883a 	mov	r19,zero
 4022e44:	003fd806 	br	4022da8 <__flash_rwdata_start+0xffff51a4>
 4022e48:	8140038f 	ldh	r5,14(r16)
 4022e4c:	8809883a 	mov	r4,r17
 4022e50:	4022f640 	call	4022f64 <_isatty_r>
 4022e54:	103fe226 	beq	r2,zero,4022de0 <__flash_rwdata_start+0xffff51dc>
 4022e58:	8080030b 	ldhu	r2,12(r16)
 4022e5c:	10800054 	ori	r2,r2,1
 4022e60:	8080030d 	sth	r2,12(r16)
 4022e64:	003fde06 	br	4022de0 <__flash_rwdata_start+0xffff51dc>
 4022e68:	8080030b 	ldhu	r2,12(r16)
 4022e6c:	10c0800c 	andi	r3,r2,512
 4022e70:	183fdb1e 	bne	r3,zero,4022de0 <__flash_rwdata_start+0xffff51dc>
 4022e74:	10800094 	ori	r2,r2,2
 4022e78:	80c010c4 	addi	r3,r16,67
 4022e7c:	8080030d 	sth	r2,12(r16)
 4022e80:	00800044 	movi	r2,1
 4022e84:	80c00015 	stw	r3,0(r16)
 4022e88:	80c00415 	stw	r3,16(r16)
 4022e8c:	80800515 	stw	r2,20(r16)
 4022e90:	003fd306 	br	4022de0 <__flash_rwdata_start+0xffff51dc>
 4022e94:	04810004 	movi	r18,1024
 4022e98:	003fc306 	br	4022da8 <__flash_rwdata_start+0xffff51a4>
 4022e9c:	0027883a 	mov	r19,zero
 4022ea0:	04810004 	movi	r18,1024
 4022ea4:	003fc006 	br	4022da8 <__flash_rwdata_start+0xffff51a4>

04022ea8 <_read_r>:
 4022ea8:	defffd04 	addi	sp,sp,-12
 4022eac:	2805883a 	mov	r2,r5
 4022eb0:	dc000015 	stw	r16,0(sp)
 4022eb4:	04000034 	movhi	r16,0
 4022eb8:	dc400115 	stw	r17,4(sp)
 4022ebc:	300b883a 	mov	r5,r6
 4022ec0:	84072004 	addi	r16,r16,7296
 4022ec4:	2023883a 	mov	r17,r4
 4022ec8:	380d883a 	mov	r6,r7
 4022ecc:	1009883a 	mov	r4,r2
 4022ed0:	dfc00215 	stw	ra,8(sp)
 4022ed4:	80000015 	stw	zero,0(r16)
 4022ed8:	40237ac0 	call	40237ac <read>
 4022edc:	00ffffc4 	movi	r3,-1
 4022ee0:	10c00526 	beq	r2,r3,4022ef8 <_read_r+0x50>
 4022ee4:	dfc00217 	ldw	ra,8(sp)
 4022ee8:	dc400117 	ldw	r17,4(sp)
 4022eec:	dc000017 	ldw	r16,0(sp)
 4022ef0:	dec00304 	addi	sp,sp,12
 4022ef4:	f800283a 	ret
 4022ef8:	80c00017 	ldw	r3,0(r16)
 4022efc:	183ff926 	beq	r3,zero,4022ee4 <__flash_rwdata_start+0xffff52e0>
 4022f00:	88c00015 	stw	r3,0(r17)
 4022f04:	003ff706 	br	4022ee4 <__flash_rwdata_start+0xffff52e0>

04022f08 <_fstat_r>:
 4022f08:	defffd04 	addi	sp,sp,-12
 4022f0c:	2805883a 	mov	r2,r5
 4022f10:	dc000015 	stw	r16,0(sp)
 4022f14:	04000034 	movhi	r16,0
 4022f18:	dc400115 	stw	r17,4(sp)
 4022f1c:	84072004 	addi	r16,r16,7296
 4022f20:	2023883a 	mov	r17,r4
 4022f24:	300b883a 	mov	r5,r6
 4022f28:	1009883a 	mov	r4,r2
 4022f2c:	dfc00215 	stw	ra,8(sp)
 4022f30:	80000015 	stw	zero,0(r16)
 4022f34:	40233100 	call	4023310 <fstat>
 4022f38:	00ffffc4 	movi	r3,-1
 4022f3c:	10c00526 	beq	r2,r3,4022f54 <_fstat_r+0x4c>
 4022f40:	dfc00217 	ldw	ra,8(sp)
 4022f44:	dc400117 	ldw	r17,4(sp)
 4022f48:	dc000017 	ldw	r16,0(sp)
 4022f4c:	dec00304 	addi	sp,sp,12
 4022f50:	f800283a 	ret
 4022f54:	80c00017 	ldw	r3,0(r16)
 4022f58:	183ff926 	beq	r3,zero,4022f40 <__flash_rwdata_start+0xffff533c>
 4022f5c:	88c00015 	stw	r3,0(r17)
 4022f60:	003ff706 	br	4022f40 <__flash_rwdata_start+0xffff533c>

04022f64 <_isatty_r>:
 4022f64:	defffd04 	addi	sp,sp,-12
 4022f68:	dc000015 	stw	r16,0(sp)
 4022f6c:	04000034 	movhi	r16,0
 4022f70:	dc400115 	stw	r17,4(sp)
 4022f74:	84072004 	addi	r16,r16,7296
 4022f78:	2023883a 	mov	r17,r4
 4022f7c:	2809883a 	mov	r4,r5
 4022f80:	dfc00215 	stw	ra,8(sp)
 4022f84:	80000015 	stw	zero,0(r16)
 4022f88:	40234040 	call	4023404 <isatty>
 4022f8c:	00ffffc4 	movi	r3,-1
 4022f90:	10c00526 	beq	r2,r3,4022fa8 <_isatty_r+0x44>
 4022f94:	dfc00217 	ldw	ra,8(sp)
 4022f98:	dc400117 	ldw	r17,4(sp)
 4022f9c:	dc000017 	ldw	r16,0(sp)
 4022fa0:	dec00304 	addi	sp,sp,12
 4022fa4:	f800283a 	ret
 4022fa8:	80c00017 	ldw	r3,0(r16)
 4022fac:	183ff926 	beq	r3,zero,4022f94 <__flash_rwdata_start+0xffff5390>
 4022fb0:	88c00015 	stw	r3,0(r17)
 4022fb4:	003ff706 	br	4022f94 <__flash_rwdata_start+0xffff5390>

04022fb8 <__divsi3>:
 4022fb8:	20001b16 	blt	r4,zero,4023028 <__divsi3+0x70>
 4022fbc:	000f883a 	mov	r7,zero
 4022fc0:	28001616 	blt	r5,zero,402301c <__divsi3+0x64>
 4022fc4:	200d883a 	mov	r6,r4
 4022fc8:	29001a2e 	bgeu	r5,r4,4023034 <__divsi3+0x7c>
 4022fcc:	00800804 	movi	r2,32
 4022fd0:	00c00044 	movi	r3,1
 4022fd4:	00000106 	br	4022fdc <__divsi3+0x24>
 4022fd8:	10000d26 	beq	r2,zero,4023010 <__divsi3+0x58>
 4022fdc:	294b883a 	add	r5,r5,r5
 4022fe0:	10bfffc4 	addi	r2,r2,-1
 4022fe4:	18c7883a 	add	r3,r3,r3
 4022fe8:	293ffb36 	bltu	r5,r4,4022fd8 <__flash_rwdata_start+0xffff53d4>
 4022fec:	0005883a 	mov	r2,zero
 4022ff0:	18000726 	beq	r3,zero,4023010 <__divsi3+0x58>
 4022ff4:	0005883a 	mov	r2,zero
 4022ff8:	31400236 	bltu	r6,r5,4023004 <__divsi3+0x4c>
 4022ffc:	314dc83a 	sub	r6,r6,r5
 4023000:	10c4b03a 	or	r2,r2,r3
 4023004:	1806d07a 	srli	r3,r3,1
 4023008:	280ad07a 	srli	r5,r5,1
 402300c:	183ffa1e 	bne	r3,zero,4022ff8 <__flash_rwdata_start+0xffff53f4>
 4023010:	38000126 	beq	r7,zero,4023018 <__divsi3+0x60>
 4023014:	0085c83a 	sub	r2,zero,r2
 4023018:	f800283a 	ret
 402301c:	014bc83a 	sub	r5,zero,r5
 4023020:	39c0005c 	xori	r7,r7,1
 4023024:	003fe706 	br	4022fc4 <__flash_rwdata_start+0xffff53c0>
 4023028:	0109c83a 	sub	r4,zero,r4
 402302c:	01c00044 	movi	r7,1
 4023030:	003fe306 	br	4022fc0 <__flash_rwdata_start+0xffff53bc>
 4023034:	00c00044 	movi	r3,1
 4023038:	003fee06 	br	4022ff4 <__flash_rwdata_start+0xffff53f0>

0402303c <__modsi3>:
 402303c:	20001716 	blt	r4,zero,402309c <__modsi3+0x60>
 4023040:	000f883a 	mov	r7,zero
 4023044:	2005883a 	mov	r2,r4
 4023048:	28001216 	blt	r5,zero,4023094 <__modsi3+0x58>
 402304c:	2900162e 	bgeu	r5,r4,40230a8 <__modsi3+0x6c>
 4023050:	01800804 	movi	r6,32
 4023054:	00c00044 	movi	r3,1
 4023058:	00000106 	br	4023060 <__modsi3+0x24>
 402305c:	30000a26 	beq	r6,zero,4023088 <__modsi3+0x4c>
 4023060:	294b883a 	add	r5,r5,r5
 4023064:	31bfffc4 	addi	r6,r6,-1
 4023068:	18c7883a 	add	r3,r3,r3
 402306c:	293ffb36 	bltu	r5,r4,402305c <__flash_rwdata_start+0xffff5458>
 4023070:	18000526 	beq	r3,zero,4023088 <__modsi3+0x4c>
 4023074:	1806d07a 	srli	r3,r3,1
 4023078:	11400136 	bltu	r2,r5,4023080 <__modsi3+0x44>
 402307c:	1145c83a 	sub	r2,r2,r5
 4023080:	280ad07a 	srli	r5,r5,1
 4023084:	183ffb1e 	bne	r3,zero,4023074 <__flash_rwdata_start+0xffff5470>
 4023088:	38000126 	beq	r7,zero,4023090 <__modsi3+0x54>
 402308c:	0085c83a 	sub	r2,zero,r2
 4023090:	f800283a 	ret
 4023094:	014bc83a 	sub	r5,zero,r5
 4023098:	003fec06 	br	402304c <__flash_rwdata_start+0xffff5448>
 402309c:	0109c83a 	sub	r4,zero,r4
 40230a0:	01c00044 	movi	r7,1
 40230a4:	003fe706 	br	4023044 <__flash_rwdata_start+0xffff5440>
 40230a8:	00c00044 	movi	r3,1
 40230ac:	003ff106 	br	4023074 <__flash_rwdata_start+0xffff5470>

040230b0 <__udivsi3>:
 40230b0:	200d883a 	mov	r6,r4
 40230b4:	2900152e 	bgeu	r5,r4,402310c <__udivsi3+0x5c>
 40230b8:	28001416 	blt	r5,zero,402310c <__udivsi3+0x5c>
 40230bc:	00800804 	movi	r2,32
 40230c0:	00c00044 	movi	r3,1
 40230c4:	00000206 	br	40230d0 <__udivsi3+0x20>
 40230c8:	10000e26 	beq	r2,zero,4023104 <__udivsi3+0x54>
 40230cc:	28000516 	blt	r5,zero,40230e4 <__udivsi3+0x34>
 40230d0:	294b883a 	add	r5,r5,r5
 40230d4:	10bfffc4 	addi	r2,r2,-1
 40230d8:	18c7883a 	add	r3,r3,r3
 40230dc:	293ffa36 	bltu	r5,r4,40230c8 <__flash_rwdata_start+0xffff54c4>
 40230e0:	18000826 	beq	r3,zero,4023104 <__udivsi3+0x54>
 40230e4:	0005883a 	mov	r2,zero
 40230e8:	31400236 	bltu	r6,r5,40230f4 <__udivsi3+0x44>
 40230ec:	314dc83a 	sub	r6,r6,r5
 40230f0:	10c4b03a 	or	r2,r2,r3
 40230f4:	1806d07a 	srli	r3,r3,1
 40230f8:	280ad07a 	srli	r5,r5,1
 40230fc:	183ffa1e 	bne	r3,zero,40230e8 <__flash_rwdata_start+0xffff54e4>
 4023100:	f800283a 	ret
 4023104:	0005883a 	mov	r2,zero
 4023108:	f800283a 	ret
 402310c:	00c00044 	movi	r3,1
 4023110:	003ff406 	br	40230e4 <__flash_rwdata_start+0xffff54e0>

04023114 <__umodsi3>:
 4023114:	2005883a 	mov	r2,r4
 4023118:	2900122e 	bgeu	r5,r4,4023164 <__umodsi3+0x50>
 402311c:	28001116 	blt	r5,zero,4023164 <__umodsi3+0x50>
 4023120:	01800804 	movi	r6,32
 4023124:	00c00044 	movi	r3,1
 4023128:	00000206 	br	4023134 <__umodsi3+0x20>
 402312c:	30000c26 	beq	r6,zero,4023160 <__umodsi3+0x4c>
 4023130:	28000516 	blt	r5,zero,4023148 <__umodsi3+0x34>
 4023134:	294b883a 	add	r5,r5,r5
 4023138:	31bfffc4 	addi	r6,r6,-1
 402313c:	18c7883a 	add	r3,r3,r3
 4023140:	293ffa36 	bltu	r5,r4,402312c <__flash_rwdata_start+0xffff5528>
 4023144:	18000626 	beq	r3,zero,4023160 <__umodsi3+0x4c>
 4023148:	1806d07a 	srli	r3,r3,1
 402314c:	11400136 	bltu	r2,r5,4023154 <__umodsi3+0x40>
 4023150:	1145c83a 	sub	r2,r2,r5
 4023154:	280ad07a 	srli	r5,r5,1
 4023158:	183ffb1e 	bne	r3,zero,4023148 <__flash_rwdata_start+0xffff5544>
 402315c:	f800283a 	ret
 4023160:	f800283a 	ret
 4023164:	00c00044 	movi	r3,1
 4023168:	003ff706 	br	4023148 <__flash_rwdata_start+0xffff5544>

0402316c <__mulsi3>:
 402316c:	0005883a 	mov	r2,zero
 4023170:	20000726 	beq	r4,zero,4023190 <__mulsi3+0x24>
 4023174:	20c0004c 	andi	r3,r4,1
 4023178:	2008d07a 	srli	r4,r4,1
 402317c:	18000126 	beq	r3,zero,4023184 <__mulsi3+0x18>
 4023180:	1145883a 	add	r2,r2,r5
 4023184:	294b883a 	add	r5,r5,r5
 4023188:	203ffa1e 	bne	r4,zero,4023174 <__flash_rwdata_start+0xffff5570>
 402318c:	f800283a 	ret
 4023190:	f800283a 	ret

04023194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023194:	defffe04 	addi	sp,sp,-8
 4023198:	dfc00115 	stw	ra,4(sp)
 402319c:	df000015 	stw	fp,0(sp)
 40231a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40231a4:	d0a00917 	ldw	r2,-32732(gp)
 40231a8:	10000326 	beq	r2,zero,40231b8 <alt_get_errno+0x24>
 40231ac:	d0a00917 	ldw	r2,-32732(gp)
 40231b0:	103ee83a 	callr	r2
 40231b4:	00000106 	br	40231bc <alt_get_errno+0x28>
 40231b8:	d0a03004 	addi	r2,gp,-32576
}
 40231bc:	e037883a 	mov	sp,fp
 40231c0:	dfc00117 	ldw	ra,4(sp)
 40231c4:	df000017 	ldw	fp,0(sp)
 40231c8:	dec00204 	addi	sp,sp,8
 40231cc:	f800283a 	ret

040231d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40231d0:	defffb04 	addi	sp,sp,-20
 40231d4:	dfc00415 	stw	ra,16(sp)
 40231d8:	df000315 	stw	fp,12(sp)
 40231dc:	df000304 	addi	fp,sp,12
 40231e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40231e4:	e0bfff17 	ldw	r2,-4(fp)
 40231e8:	10000816 	blt	r2,zero,402320c <close+0x3c>
 40231ec:	01400304 	movi	r5,12
 40231f0:	e13fff17 	ldw	r4,-4(fp)
 40231f4:	402316c0 	call	402316c <__mulsi3>
 40231f8:	1007883a 	mov	r3,r2
 40231fc:	00800034 	movhi	r2,0
 4023200:	10827504 	addi	r2,r2,2516
 4023204:	1885883a 	add	r2,r3,r2
 4023208:	00000106 	br	4023210 <close+0x40>
 402320c:	0005883a 	mov	r2,zero
 4023210:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4023214:	e0bffd17 	ldw	r2,-12(fp)
 4023218:	10001926 	beq	r2,zero,4023280 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 402321c:	e0bffd17 	ldw	r2,-12(fp)
 4023220:	10800017 	ldw	r2,0(r2)
 4023224:	10800417 	ldw	r2,16(r2)
 4023228:	10000626 	beq	r2,zero,4023244 <close+0x74>
 402322c:	e0bffd17 	ldw	r2,-12(fp)
 4023230:	10800017 	ldw	r2,0(r2)
 4023234:	10800417 	ldw	r2,16(r2)
 4023238:	e13ffd17 	ldw	r4,-12(fp)
 402323c:	103ee83a 	callr	r2
 4023240:	00000106 	br	4023248 <close+0x78>
 4023244:	0005883a 	mov	r2,zero
 4023248:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 402324c:	e13fff17 	ldw	r4,-4(fp)
 4023250:	40238b00 	call	40238b0 <alt_release_fd>
    if (rval < 0)
 4023254:	e0bffe17 	ldw	r2,-8(fp)
 4023258:	1000070e 	bge	r2,zero,4023278 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 402325c:	40231940 	call	4023194 <alt_get_errno>
 4023260:	1007883a 	mov	r3,r2
 4023264:	e0bffe17 	ldw	r2,-8(fp)
 4023268:	0085c83a 	sub	r2,zero,r2
 402326c:	18800015 	stw	r2,0(r3)
      return -1;
 4023270:	00bfffc4 	movi	r2,-1
 4023274:	00000706 	br	4023294 <close+0xc4>
    }
    return 0;
 4023278:	0005883a 	mov	r2,zero
 402327c:	00000506 	br	4023294 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4023280:	40231940 	call	4023194 <alt_get_errno>
 4023284:	1007883a 	mov	r3,r2
 4023288:	00801444 	movi	r2,81
 402328c:	18800015 	stw	r2,0(r3)
    return -1;
 4023290:	00bfffc4 	movi	r2,-1
  }
}
 4023294:	e037883a 	mov	sp,fp
 4023298:	dfc00117 	ldw	ra,4(sp)
 402329c:	df000017 	ldw	fp,0(sp)
 40232a0:	dec00204 	addi	sp,sp,8
 40232a4:	f800283a 	ret

040232a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40232a8:	defffc04 	addi	sp,sp,-16
 40232ac:	df000315 	stw	fp,12(sp)
 40232b0:	df000304 	addi	fp,sp,12
 40232b4:	e13ffd15 	stw	r4,-12(fp)
 40232b8:	e17ffe15 	stw	r5,-8(fp)
 40232bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40232c0:	e0bfff17 	ldw	r2,-4(fp)
}
 40232c4:	e037883a 	mov	sp,fp
 40232c8:	df000017 	ldw	fp,0(sp)
 40232cc:	dec00104 	addi	sp,sp,4
 40232d0:	f800283a 	ret

040232d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40232d4:	defffe04 	addi	sp,sp,-8
 40232d8:	dfc00115 	stw	ra,4(sp)
 40232dc:	df000015 	stw	fp,0(sp)
 40232e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40232e4:	d0a00917 	ldw	r2,-32732(gp)
 40232e8:	10000326 	beq	r2,zero,40232f8 <alt_get_errno+0x24>
 40232ec:	d0a00917 	ldw	r2,-32732(gp)
 40232f0:	103ee83a 	callr	r2
 40232f4:	00000106 	br	40232fc <alt_get_errno+0x28>
 40232f8:	d0a03004 	addi	r2,gp,-32576
}
 40232fc:	e037883a 	mov	sp,fp
 4023300:	dfc00117 	ldw	ra,4(sp)
 4023304:	df000017 	ldw	fp,0(sp)
 4023308:	dec00204 	addi	sp,sp,8
 402330c:	f800283a 	ret

04023310 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4023310:	defffb04 	addi	sp,sp,-20
 4023314:	dfc00415 	stw	ra,16(sp)
 4023318:	df000315 	stw	fp,12(sp)
 402331c:	df000304 	addi	fp,sp,12
 4023320:	e13ffe15 	stw	r4,-8(fp)
 4023324:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4023328:	e0bffe17 	ldw	r2,-8(fp)
 402332c:	10000816 	blt	r2,zero,4023350 <fstat+0x40>
 4023330:	01400304 	movi	r5,12
 4023334:	e13ffe17 	ldw	r4,-8(fp)
 4023338:	402316c0 	call	402316c <__mulsi3>
 402333c:	1007883a 	mov	r3,r2
 4023340:	00800034 	movhi	r2,0
 4023344:	10827504 	addi	r2,r2,2516
 4023348:	1885883a 	add	r2,r3,r2
 402334c:	00000106 	br	4023354 <fstat+0x44>
 4023350:	0005883a 	mov	r2,zero
 4023354:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4023358:	e0bffd17 	ldw	r2,-12(fp)
 402335c:	10001026 	beq	r2,zero,40233a0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4023360:	e0bffd17 	ldw	r2,-12(fp)
 4023364:	10800017 	ldw	r2,0(r2)
 4023368:	10800817 	ldw	r2,32(r2)
 402336c:	10000726 	beq	r2,zero,402338c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 4023370:	e0bffd17 	ldw	r2,-12(fp)
 4023374:	10800017 	ldw	r2,0(r2)
 4023378:	10800817 	ldw	r2,32(r2)
 402337c:	e17fff17 	ldw	r5,-4(fp)
 4023380:	e13ffd17 	ldw	r4,-12(fp)
 4023384:	103ee83a 	callr	r2
 4023388:	00000a06 	br	40233b4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 402338c:	e0bfff17 	ldw	r2,-4(fp)
 4023390:	00c80004 	movi	r3,8192
 4023394:	10c00115 	stw	r3,4(r2)
      return 0;
 4023398:	0005883a 	mov	r2,zero
 402339c:	00000506 	br	40233b4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40233a0:	40232d40 	call	40232d4 <alt_get_errno>
 40233a4:	1007883a 	mov	r3,r2
 40233a8:	00801444 	movi	r2,81
 40233ac:	18800015 	stw	r2,0(r3)
    return -1;
 40233b0:	00bfffc4 	movi	r2,-1
  }
}
 40233b4:	e037883a 	mov	sp,fp
 40233b8:	dfc00117 	ldw	ra,4(sp)
 40233bc:	df000017 	ldw	fp,0(sp)
 40233c0:	dec00204 	addi	sp,sp,8
 40233c4:	f800283a 	ret

040233c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40233c8:	defffe04 	addi	sp,sp,-8
 40233cc:	dfc00115 	stw	ra,4(sp)
 40233d0:	df000015 	stw	fp,0(sp)
 40233d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40233d8:	d0a00917 	ldw	r2,-32732(gp)
 40233dc:	10000326 	beq	r2,zero,40233ec <alt_get_errno+0x24>
 40233e0:	d0a00917 	ldw	r2,-32732(gp)
 40233e4:	103ee83a 	callr	r2
 40233e8:	00000106 	br	40233f0 <alt_get_errno+0x28>
 40233ec:	d0a03004 	addi	r2,gp,-32576
}
 40233f0:	e037883a 	mov	sp,fp
 40233f4:	dfc00117 	ldw	ra,4(sp)
 40233f8:	df000017 	ldw	fp,0(sp)
 40233fc:	dec00204 	addi	sp,sp,8
 4023400:	f800283a 	ret

04023404 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4023404:	deffed04 	addi	sp,sp,-76
 4023408:	dfc01215 	stw	ra,72(sp)
 402340c:	df001115 	stw	fp,68(sp)
 4023410:	df001104 	addi	fp,sp,68
 4023414:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4023418:	e0bfff17 	ldw	r2,-4(fp)
 402341c:	10000816 	blt	r2,zero,4023440 <isatty+0x3c>
 4023420:	01400304 	movi	r5,12
 4023424:	e13fff17 	ldw	r4,-4(fp)
 4023428:	402316c0 	call	402316c <__mulsi3>
 402342c:	1007883a 	mov	r3,r2
 4023430:	00800034 	movhi	r2,0
 4023434:	10827504 	addi	r2,r2,2516
 4023438:	1885883a 	add	r2,r3,r2
 402343c:	00000106 	br	4023444 <isatty+0x40>
 4023440:	0005883a 	mov	r2,zero
 4023444:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4023448:	e0bfef17 	ldw	r2,-68(fp)
 402344c:	10000e26 	beq	r2,zero,4023488 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4023450:	e0bfef17 	ldw	r2,-68(fp)
 4023454:	10800017 	ldw	r2,0(r2)
 4023458:	10800817 	ldw	r2,32(r2)
 402345c:	1000021e 	bne	r2,zero,4023468 <isatty+0x64>
    {
      return 1;
 4023460:	00800044 	movi	r2,1
 4023464:	00000d06 	br	402349c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4023468:	e0bff004 	addi	r2,fp,-64
 402346c:	100b883a 	mov	r5,r2
 4023470:	e13fff17 	ldw	r4,-4(fp)
 4023474:	40233100 	call	4023310 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4023478:	e0bff117 	ldw	r2,-60(fp)
 402347c:	10880020 	cmpeqi	r2,r2,8192
 4023480:	10803fcc 	andi	r2,r2,255
 4023484:	00000506 	br	402349c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4023488:	40233c80 	call	40233c8 <alt_get_errno>
 402348c:	1007883a 	mov	r3,r2
 4023490:	00801444 	movi	r2,81
 4023494:	18800015 	stw	r2,0(r3)
    return 0;
 4023498:	0005883a 	mov	r2,zero
  }
}
 402349c:	e037883a 	mov	sp,fp
 40234a0:	dfc00117 	ldw	ra,4(sp)
 40234a4:	df000017 	ldw	fp,0(sp)
 40234a8:	dec00204 	addi	sp,sp,8
 40234ac:	f800283a 	ret

040234b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40234b0:	defffc04 	addi	sp,sp,-16
 40234b4:	df000315 	stw	fp,12(sp)
 40234b8:	df000304 	addi	fp,sp,12
 40234bc:	e13ffd15 	stw	r4,-12(fp)
 40234c0:	e17ffe15 	stw	r5,-8(fp)
 40234c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40234c8:	e0fffe17 	ldw	r3,-8(fp)
 40234cc:	e0bffd17 	ldw	r2,-12(fp)
 40234d0:	18800c26 	beq	r3,r2,4023504 <alt_load_section+0x54>
  {
    while( to != end )
 40234d4:	00000806 	br	40234f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40234d8:	e0bffe17 	ldw	r2,-8(fp)
 40234dc:	10c00104 	addi	r3,r2,4
 40234e0:	e0fffe15 	stw	r3,-8(fp)
 40234e4:	e0fffd17 	ldw	r3,-12(fp)
 40234e8:	19000104 	addi	r4,r3,4
 40234ec:	e13ffd15 	stw	r4,-12(fp)
 40234f0:	18c00017 	ldw	r3,0(r3)
 40234f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40234f8:	e0fffe17 	ldw	r3,-8(fp)
 40234fc:	e0bfff17 	ldw	r2,-4(fp)
 4023500:	18bff51e 	bne	r3,r2,40234d8 <__flash_rwdata_start+0xffff58d4>
    {
      *to++ = *from++;
    }
  }
}
 4023504:	0001883a 	nop
 4023508:	e037883a 	mov	sp,fp
 402350c:	df000017 	ldw	fp,0(sp)
 4023510:	dec00104 	addi	sp,sp,4
 4023514:	f800283a 	ret

04023518 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4023518:	defffe04 	addi	sp,sp,-8
 402351c:	dfc00115 	stw	ra,4(sp)
 4023520:	df000015 	stw	fp,0(sp)
 4023524:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4023528:	01800034 	movhi	r6,0
 402352c:	31871d04 	addi	r6,r6,7284
 4023530:	01400034 	movhi	r5,0
 4023534:	29406004 	addi	r5,r5,384
 4023538:	010100f4 	movhi	r4,1027
 402353c:	21370104 	addi	r4,r4,-9212
 4023540:	40234b00 	call	40234b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4023544:	018100b4 	movhi	r6,1026
 4023548:	31808c04 	addi	r6,r6,560
 402354c:	014100b4 	movhi	r5,1026
 4023550:	29400804 	addi	r5,r5,32
 4023554:	010100b4 	movhi	r4,1026
 4023558:	21000804 	addi	r4,r4,32
 402355c:	40234b00 	call	40234b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4023560:	01800034 	movhi	r6,0
 4023564:	31806004 	addi	r6,r6,384
 4023568:	01400034 	movhi	r5,0
 402356c:	29400004 	addi	r5,r5,0
 4023570:	010100f4 	movhi	r4,1027
 4023574:	2136a104 	addi	r4,r4,-9596
 4023578:	40234b00 	call	40234b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 402357c:	402c6440 	call	402c644 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4023580:	402c8040 	call	402c804 <alt_icache_flush_all>
}
 4023584:	0001883a 	nop
 4023588:	e037883a 	mov	sp,fp
 402358c:	dfc00117 	ldw	ra,4(sp)
 4023590:	df000017 	ldw	fp,0(sp)
 4023594:	dec00204 	addi	sp,sp,8
 4023598:	f800283a 	ret

0402359c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402359c:	defffe04 	addi	sp,sp,-8
 40235a0:	dfc00115 	stw	ra,4(sp)
 40235a4:	df000015 	stw	fp,0(sp)
 40235a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40235ac:	d0a00917 	ldw	r2,-32732(gp)
 40235b0:	10000326 	beq	r2,zero,40235c0 <alt_get_errno+0x24>
 40235b4:	d0a00917 	ldw	r2,-32732(gp)
 40235b8:	103ee83a 	callr	r2
 40235bc:	00000106 	br	40235c4 <alt_get_errno+0x28>
 40235c0:	d0a03004 	addi	r2,gp,-32576
}
 40235c4:	e037883a 	mov	sp,fp
 40235c8:	dfc00117 	ldw	ra,4(sp)
 40235cc:	df000017 	ldw	fp,0(sp)
 40235d0:	dec00204 	addi	sp,sp,8
 40235d4:	f800283a 	ret

040235d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40235d8:	defff904 	addi	sp,sp,-28
 40235dc:	dfc00615 	stw	ra,24(sp)
 40235e0:	df000515 	stw	fp,20(sp)
 40235e4:	df000504 	addi	fp,sp,20
 40235e8:	e13ffd15 	stw	r4,-12(fp)
 40235ec:	e17ffe15 	stw	r5,-8(fp)
 40235f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40235f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40235f8:	e0bffd17 	ldw	r2,-12(fp)
 40235fc:	10000816 	blt	r2,zero,4023620 <lseek+0x48>
 4023600:	01400304 	movi	r5,12
 4023604:	e13ffd17 	ldw	r4,-12(fp)
 4023608:	402316c0 	call	402316c <__mulsi3>
 402360c:	1007883a 	mov	r3,r2
 4023610:	00800034 	movhi	r2,0
 4023614:	10827504 	addi	r2,r2,2516
 4023618:	1885883a 	add	r2,r3,r2
 402361c:	00000106 	br	4023624 <lseek+0x4c>
 4023620:	0005883a 	mov	r2,zero
 4023624:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4023628:	e0bffc17 	ldw	r2,-16(fp)
 402362c:	10001026 	beq	r2,zero,4023670 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4023630:	e0bffc17 	ldw	r2,-16(fp)
 4023634:	10800017 	ldw	r2,0(r2)
 4023638:	10800717 	ldw	r2,28(r2)
 402363c:	10000926 	beq	r2,zero,4023664 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4023640:	e0bffc17 	ldw	r2,-16(fp)
 4023644:	10800017 	ldw	r2,0(r2)
 4023648:	10800717 	ldw	r2,28(r2)
 402364c:	e1bfff17 	ldw	r6,-4(fp)
 4023650:	e17ffe17 	ldw	r5,-8(fp)
 4023654:	e13ffc17 	ldw	r4,-16(fp)
 4023658:	103ee83a 	callr	r2
 402365c:	e0bffb15 	stw	r2,-20(fp)
 4023660:	00000506 	br	4023678 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4023664:	00bfde84 	movi	r2,-134
 4023668:	e0bffb15 	stw	r2,-20(fp)
 402366c:	00000206 	br	4023678 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 4023670:	00bfebc4 	movi	r2,-81
 4023674:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4023678:	e0bffb17 	ldw	r2,-20(fp)
 402367c:	1000070e 	bge	r2,zero,402369c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 4023680:	402359c0 	call	402359c <alt_get_errno>
 4023684:	1007883a 	mov	r3,r2
 4023688:	e0bffb17 	ldw	r2,-20(fp)
 402368c:	0085c83a 	sub	r2,zero,r2
 4023690:	18800015 	stw	r2,0(r3)
    rc = -1;
 4023694:	00bfffc4 	movi	r2,-1
 4023698:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 402369c:	e0bffb17 	ldw	r2,-20(fp)
}
 40236a0:	e037883a 	mov	sp,fp
 40236a4:	dfc00117 	ldw	ra,4(sp)
 40236a8:	df000017 	ldw	fp,0(sp)
 40236ac:	dec00204 	addi	sp,sp,8
 40236b0:	f800283a 	ret

040236b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40236b4:	defff904 	addi	sp,sp,-28
 40236b8:	dfc00615 	stw	ra,24(sp)
 40236bc:	df000515 	stw	fp,20(sp)
 40236c0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40236c4:	0009883a 	mov	r4,zero
 40236c8:	402b65c0 	call	402b65c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40236cc:	40246a00 	call	40246a0 <OSInit>
 40236d0:	01000044 	movi	r4,1
 40236d4:	4028ffc0 	call	4028ffc <OSSemCreate>
 40236d8:	d0a03615 	stw	r2,-32552(gp)
 40236dc:	01000044 	movi	r4,1
 40236e0:	4028ffc0 	call	4028ffc <OSSemCreate>
 40236e4:	d0a03815 	stw	r2,-32544(gp)
 40236e8:	d0a03104 	addi	r2,gp,-32572
 40236ec:	e0bffc15 	stw	r2,-16(fp)
 40236f0:	00800044 	movi	r2,1
 40236f4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 40236f8:	e0bffd0b 	ldhu	r2,-12(fp)
 40236fc:	1009883a 	mov	r4,r2
 4023700:	4028ffc0 	call	4028ffc <OSSemCreate>
 4023704:	1007883a 	mov	r3,r2
 4023708:	e0bffc17 	ldw	r2,-16(fp)
 402370c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4023710:	402b6940 	call	402b694 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4023714:	01800034 	movhi	r6,0
 4023718:	31800f04 	addi	r6,r6,60
 402371c:	01400034 	movhi	r5,0
 4023720:	29400f04 	addi	r5,r5,60
 4023724:	01000034 	movhi	r4,0
 4023728:	21000f04 	addi	r4,r4,60
 402372c:	402cba80 	call	402cba8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4023730:	402c7440 	call	402c744 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4023734:	010100f4 	movhi	r4,1027
 4023738:	2131e904 	addi	r4,r4,-14428
 402373c:	402d6f00 	call	402d6f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4023740:	d0a03217 	ldw	r2,-32568(gp)
 4023744:	d0e03317 	ldw	r3,-32564(gp)
 4023748:	d1203417 	ldw	r4,-32560(gp)
 402374c:	200d883a 	mov	r6,r4
 4023750:	180b883a 	mov	r5,r3
 4023754:	1009883a 	mov	r4,r2
 4023758:	40202dc0 	call	40202dc <main>
 402375c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 4023760:	01000044 	movi	r4,1
 4023764:	40231d00 	call	40231d0 <close>
  exit (result);
 4023768:	e13ffb17 	ldw	r4,-20(fp)
 402376c:	402d7040 	call	402d704 <exit>

04023770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023770:	defffe04 	addi	sp,sp,-8
 4023774:	dfc00115 	stw	ra,4(sp)
 4023778:	df000015 	stw	fp,0(sp)
 402377c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4023780:	d0a00917 	ldw	r2,-32732(gp)
 4023784:	10000326 	beq	r2,zero,4023794 <alt_get_errno+0x24>
 4023788:	d0a00917 	ldw	r2,-32732(gp)
 402378c:	103ee83a 	callr	r2
 4023790:	00000106 	br	4023798 <alt_get_errno+0x28>
 4023794:	d0a03004 	addi	r2,gp,-32576
}
 4023798:	e037883a 	mov	sp,fp
 402379c:	dfc00117 	ldw	ra,4(sp)
 40237a0:	df000017 	ldw	fp,0(sp)
 40237a4:	dec00204 	addi	sp,sp,8
 40237a8:	f800283a 	ret

040237ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40237ac:	defff904 	addi	sp,sp,-28
 40237b0:	dfc00615 	stw	ra,24(sp)
 40237b4:	df000515 	stw	fp,20(sp)
 40237b8:	df000504 	addi	fp,sp,20
 40237bc:	e13ffd15 	stw	r4,-12(fp)
 40237c0:	e17ffe15 	stw	r5,-8(fp)
 40237c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40237c8:	e0bffd17 	ldw	r2,-12(fp)
 40237cc:	10000816 	blt	r2,zero,40237f0 <read+0x44>
 40237d0:	01400304 	movi	r5,12
 40237d4:	e13ffd17 	ldw	r4,-12(fp)
 40237d8:	402316c0 	call	402316c <__mulsi3>
 40237dc:	1007883a 	mov	r3,r2
 40237e0:	00800034 	movhi	r2,0
 40237e4:	10827504 	addi	r2,r2,2516
 40237e8:	1885883a 	add	r2,r3,r2
 40237ec:	00000106 	br	40237f4 <read+0x48>
 40237f0:	0005883a 	mov	r2,zero
 40237f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40237f8:	e0bffb17 	ldw	r2,-20(fp)
 40237fc:	10002226 	beq	r2,zero,4023888 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4023800:	e0bffb17 	ldw	r2,-20(fp)
 4023804:	10800217 	ldw	r2,8(r2)
 4023808:	108000cc 	andi	r2,r2,3
 402380c:	10800060 	cmpeqi	r2,r2,1
 4023810:	1000181e 	bne	r2,zero,4023874 <read+0xc8>
        (fd->dev->read))
 4023814:	e0bffb17 	ldw	r2,-20(fp)
 4023818:	10800017 	ldw	r2,0(r2)
 402381c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4023820:	10001426 	beq	r2,zero,4023874 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4023824:	e0bffb17 	ldw	r2,-20(fp)
 4023828:	10800017 	ldw	r2,0(r2)
 402382c:	10800517 	ldw	r2,20(r2)
 4023830:	e0ffff17 	ldw	r3,-4(fp)
 4023834:	180d883a 	mov	r6,r3
 4023838:	e17ffe17 	ldw	r5,-8(fp)
 402383c:	e13ffb17 	ldw	r4,-20(fp)
 4023840:	103ee83a 	callr	r2
 4023844:	e0bffc15 	stw	r2,-16(fp)
 4023848:	e0bffc17 	ldw	r2,-16(fp)
 402384c:	1000070e 	bge	r2,zero,402386c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 4023850:	40237700 	call	4023770 <alt_get_errno>
 4023854:	1007883a 	mov	r3,r2
 4023858:	e0bffc17 	ldw	r2,-16(fp)
 402385c:	0085c83a 	sub	r2,zero,r2
 4023860:	18800015 	stw	r2,0(r3)
          return -1;
 4023864:	00bfffc4 	movi	r2,-1
 4023868:	00000c06 	br	402389c <read+0xf0>
        }
        return rval;
 402386c:	e0bffc17 	ldw	r2,-16(fp)
 4023870:	00000a06 	br	402389c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4023874:	40237700 	call	4023770 <alt_get_errno>
 4023878:	1007883a 	mov	r3,r2
 402387c:	00800344 	movi	r2,13
 4023880:	18800015 	stw	r2,0(r3)
 4023884:	00000406 	br	4023898 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4023888:	40237700 	call	4023770 <alt_get_errno>
 402388c:	1007883a 	mov	r3,r2
 4023890:	00801444 	movi	r2,81
 4023894:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4023898:	00bfffc4 	movi	r2,-1
}
 402389c:	e037883a 	mov	sp,fp
 40238a0:	dfc00117 	ldw	ra,4(sp)
 40238a4:	df000017 	ldw	fp,0(sp)
 40238a8:	dec00204 	addi	sp,sp,8
 40238ac:	f800283a 	ret

040238b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40238b0:	defffc04 	addi	sp,sp,-16
 40238b4:	dfc00315 	stw	ra,12(sp)
 40238b8:	df000215 	stw	fp,8(sp)
 40238bc:	dc000115 	stw	r16,4(sp)
 40238c0:	df000204 	addi	fp,sp,8
 40238c4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 40238c8:	e0bffe17 	ldw	r2,-8(fp)
 40238cc:	108000d0 	cmplti	r2,r2,3
 40238d0:	1000111e 	bne	r2,zero,4023918 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 40238d4:	04000034 	movhi	r16,0
 40238d8:	84027504 	addi	r16,r16,2516
 40238dc:	e0bffe17 	ldw	r2,-8(fp)
 40238e0:	01400304 	movi	r5,12
 40238e4:	1009883a 	mov	r4,r2
 40238e8:	402316c0 	call	402316c <__mulsi3>
 40238ec:	8085883a 	add	r2,r16,r2
 40238f0:	10800204 	addi	r2,r2,8
 40238f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40238f8:	04000034 	movhi	r16,0
 40238fc:	84027504 	addi	r16,r16,2516
 4023900:	e0bffe17 	ldw	r2,-8(fp)
 4023904:	01400304 	movi	r5,12
 4023908:	1009883a 	mov	r4,r2
 402390c:	402316c0 	call	402316c <__mulsi3>
 4023910:	8085883a 	add	r2,r16,r2
 4023914:	10000015 	stw	zero,0(r2)
  }
}
 4023918:	0001883a 	nop
 402391c:	e6ffff04 	addi	sp,fp,-4
 4023920:	dfc00217 	ldw	ra,8(sp)
 4023924:	df000117 	ldw	fp,4(sp)
 4023928:	dc000017 	ldw	r16,0(sp)
 402392c:	dec00304 	addi	sp,sp,12
 4023930:	f800283a 	ret

04023934 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4023934:	defff904 	addi	sp,sp,-28
 4023938:	df000615 	stw	fp,24(sp)
 402393c:	df000604 	addi	fp,sp,24
 4023940:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023944:	0005303a 	rdctl	r2,status
 4023948:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402394c:	e0fffe17 	ldw	r3,-8(fp)
 4023950:	00bfff84 	movi	r2,-2
 4023954:	1884703a 	and	r2,r3,r2
 4023958:	1001703a 	wrctl	status,r2
  
  return context;
 402395c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4023960:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4023964:	d0a00a17 	ldw	r2,-32728(gp)
 4023968:	10c000c4 	addi	r3,r2,3
 402396c:	00bfff04 	movi	r2,-4
 4023970:	1884703a 	and	r2,r3,r2
 4023974:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4023978:	d0e00a17 	ldw	r3,-32728(gp)
 402397c:	e0bfff17 	ldw	r2,-4(fp)
 4023980:	1887883a 	add	r3,r3,r2
 4023984:	00810034 	movhi	r2,1024
 4023988:	10800004 	addi	r2,r2,0
 402398c:	10c0062e 	bgeu	r2,r3,40239a8 <sbrk+0x74>
 4023990:	e0bffb17 	ldw	r2,-20(fp)
 4023994:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023998:	e0bffa17 	ldw	r2,-24(fp)
 402399c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 40239a0:	00bfffc4 	movi	r2,-1
 40239a4:	00000b06 	br	40239d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 40239a8:	d0a00a17 	ldw	r2,-32728(gp)
 40239ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 40239b0:	d0e00a17 	ldw	r3,-32728(gp)
 40239b4:	e0bfff17 	ldw	r2,-4(fp)
 40239b8:	1885883a 	add	r2,r3,r2
 40239bc:	d0a00a15 	stw	r2,-32728(gp)
 40239c0:	e0bffb17 	ldw	r2,-20(fp)
 40239c4:	e0bffc15 	stw	r2,-16(fp)
 40239c8:	e0bffc17 	ldw	r2,-16(fp)
 40239cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 40239d0:	e0bffd17 	ldw	r2,-12(fp)
} 
 40239d4:	e037883a 	mov	sp,fp
 40239d8:	df000017 	ldw	fp,0(sp)
 40239dc:	dec00104 	addi	sp,sp,4
 40239e0:	f800283a 	ret

040239e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40239e4:	defffe04 	addi	sp,sp,-8
 40239e8:	dfc00115 	stw	ra,4(sp)
 40239ec:	df000015 	stw	fp,0(sp)
 40239f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40239f4:	d0a00917 	ldw	r2,-32732(gp)
 40239f8:	10000326 	beq	r2,zero,4023a08 <alt_get_errno+0x24>
 40239fc:	d0a00917 	ldw	r2,-32732(gp)
 4023a00:	103ee83a 	callr	r2
 4023a04:	00000106 	br	4023a0c <alt_get_errno+0x28>
 4023a08:	d0a03004 	addi	r2,gp,-32576
}
 4023a0c:	e037883a 	mov	sp,fp
 4023a10:	dfc00117 	ldw	ra,4(sp)
 4023a14:	df000017 	ldw	fp,0(sp)
 4023a18:	dec00204 	addi	sp,sp,8
 4023a1c:	f800283a 	ret

04023a20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4023a20:	defff904 	addi	sp,sp,-28
 4023a24:	dfc00615 	stw	ra,24(sp)
 4023a28:	df000515 	stw	fp,20(sp)
 4023a2c:	df000504 	addi	fp,sp,20
 4023a30:	e13ffd15 	stw	r4,-12(fp)
 4023a34:	e17ffe15 	stw	r5,-8(fp)
 4023a38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4023a3c:	e0bffd17 	ldw	r2,-12(fp)
 4023a40:	10000816 	blt	r2,zero,4023a64 <write+0x44>
 4023a44:	01400304 	movi	r5,12
 4023a48:	e13ffd17 	ldw	r4,-12(fp)
 4023a4c:	402316c0 	call	402316c <__mulsi3>
 4023a50:	1007883a 	mov	r3,r2
 4023a54:	00800034 	movhi	r2,0
 4023a58:	10827504 	addi	r2,r2,2516
 4023a5c:	1885883a 	add	r2,r3,r2
 4023a60:	00000106 	br	4023a68 <write+0x48>
 4023a64:	0005883a 	mov	r2,zero
 4023a68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4023a6c:	e0bffb17 	ldw	r2,-20(fp)
 4023a70:	10002126 	beq	r2,zero,4023af8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4023a74:	e0bffb17 	ldw	r2,-20(fp)
 4023a78:	10800217 	ldw	r2,8(r2)
 4023a7c:	108000cc 	andi	r2,r2,3
 4023a80:	10001826 	beq	r2,zero,4023ae4 <write+0xc4>
 4023a84:	e0bffb17 	ldw	r2,-20(fp)
 4023a88:	10800017 	ldw	r2,0(r2)
 4023a8c:	10800617 	ldw	r2,24(r2)
 4023a90:	10001426 	beq	r2,zero,4023ae4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4023a94:	e0bffb17 	ldw	r2,-20(fp)
 4023a98:	10800017 	ldw	r2,0(r2)
 4023a9c:	10800617 	ldw	r2,24(r2)
 4023aa0:	e0ffff17 	ldw	r3,-4(fp)
 4023aa4:	180d883a 	mov	r6,r3
 4023aa8:	e17ffe17 	ldw	r5,-8(fp)
 4023aac:	e13ffb17 	ldw	r4,-20(fp)
 4023ab0:	103ee83a 	callr	r2
 4023ab4:	e0bffc15 	stw	r2,-16(fp)
 4023ab8:	e0bffc17 	ldw	r2,-16(fp)
 4023abc:	1000070e 	bge	r2,zero,4023adc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4023ac0:	40239e40 	call	40239e4 <alt_get_errno>
 4023ac4:	1007883a 	mov	r3,r2
 4023ac8:	e0bffc17 	ldw	r2,-16(fp)
 4023acc:	0085c83a 	sub	r2,zero,r2
 4023ad0:	18800015 	stw	r2,0(r3)
        return -1;
 4023ad4:	00bfffc4 	movi	r2,-1
 4023ad8:	00000c06 	br	4023b0c <write+0xec>
      }
      return rval;
 4023adc:	e0bffc17 	ldw	r2,-16(fp)
 4023ae0:	00000a06 	br	4023b0c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4023ae4:	40239e40 	call	40239e4 <alt_get_errno>
 4023ae8:	1007883a 	mov	r3,r2
 4023aec:	00800344 	movi	r2,13
 4023af0:	18800015 	stw	r2,0(r3)
 4023af4:	00000406 	br	4023b08 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4023af8:	40239e40 	call	40239e4 <alt_get_errno>
 4023afc:	1007883a 	mov	r3,r2
 4023b00:	00801444 	movi	r2,81
 4023b04:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4023b08:	00bfffc4 	movi	r2,-1
}
 4023b0c:	e037883a 	mov	sp,fp
 4023b10:	dfc00117 	ldw	ra,4(sp)
 4023b14:	df000017 	ldw	fp,0(sp)
 4023b18:	dec00204 	addi	sp,sp,8
 4023b1c:	f800283a 	ret

04023b20 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 4023b20:	deffdf04 	addi	sp,sp,-132
 4023b24:	dfc02015 	stw	ra,128(sp)
 4023b28:	df001f15 	stw	fp,124(sp)
 4023b2c:	df001f04 	addi	fp,sp,124
 4023b30:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4023b34:	e0bfe204 	addi	r2,fp,-120
 4023b38:	100b883a 	mov	r5,r2
 4023b3c:	01003fc4 	movi	r4,255
 4023b40:	402af840 	call	402af84 <OSTaskQuery>
 4023b44:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4023b48:	e0bffe83 	ldbu	r2,-6(fp)
 4023b4c:	10803fcc 	andi	r2,r2,255
 4023b50:	10001e1e 	bne	r2,zero,4023bcc <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 4023b54:	e0bfee83 	ldbu	r2,-70(fp)
 4023b58:	10803fcc 	andi	r2,r2,255
 4023b5c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 4023b60:	d0a03617 	ldw	r2,-32552(gp)
 4023b64:	e0fffd04 	addi	r3,fp,-12
 4023b68:	180b883a 	mov	r5,r3
 4023b6c:	1009883a 	mov	r4,r2
 4023b70:	402979c0 	call	402979c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 4023b74:	e0bffe43 	ldbu	r2,-7(fp)
 4023b78:	10803fcc 	andi	r2,r2,255
 4023b7c:	10000726 	beq	r2,zero,4023b9c <__env_lock+0x7c>
 4023b80:	d0a00b17 	ldw	r2,-32724(gp)
 4023b84:	e0ffe117 	ldw	r3,-124(fp)
 4023b88:	1880041e 	bne	r3,r2,4023b9c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 4023b8c:	d0a03517 	ldw	r2,-32556(gp)
 4023b90:	10800044 	addi	r2,r2,1
 4023b94:	d0a03515 	stw	r2,-32556(gp)
 4023b98:	00000a06 	br	4023bc4 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 4023b9c:	d0a03617 	ldw	r2,-32552(gp)
 4023ba0:	e0fffe84 	addi	r3,fp,-6
 4023ba4:	180d883a 	mov	r6,r3
 4023ba8:	000b883a 	mov	r5,zero
 4023bac:	1009883a 	mov	r4,r2
 4023bb0:	40293140 	call	4029314 <OSSemPend>
    locks  = 1;
 4023bb4:	00800044 	movi	r2,1
 4023bb8:	d0a03515 	stw	r2,-32556(gp)
    lockid = id;
 4023bbc:	e0bfe117 	ldw	r2,-124(fp)
 4023bc0:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 4023bc4:	0001883a 	nop
 4023bc8:	00000106 	br	4023bd0 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4023bcc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4023bd0:	e037883a 	mov	sp,fp
 4023bd4:	dfc00117 	ldw	ra,4(sp)
 4023bd8:	df000017 	ldw	fp,0(sp)
 4023bdc:	dec00204 	addi	sp,sp,8
 4023be0:	f800283a 	ret

04023be4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 4023be4:	defffd04 	addi	sp,sp,-12
 4023be8:	dfc00215 	stw	ra,8(sp)
 4023bec:	df000115 	stw	fp,4(sp)
 4023bf0:	df000104 	addi	fp,sp,4
 4023bf4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 4023bf8:	d0a03517 	ldw	r2,-32556(gp)
 4023bfc:	10000b26 	beq	r2,zero,4023c2c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 4023c00:	d0a03517 	ldw	r2,-32556(gp)
 4023c04:	10bfffc4 	addi	r2,r2,-1
 4023c08:	d0a03515 	stw	r2,-32556(gp)
 4023c0c:	d0a03517 	ldw	r2,-32556(gp)
 4023c10:	1000071e 	bne	r2,zero,4023c30 <__env_unlock+0x4c>
  {
    lockid = -1;
 4023c14:	00bfffc4 	movi	r2,-1
 4023c18:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
 4023c1c:	d0a03617 	ldw	r2,-32552(gp)
 4023c20:	1009883a 	mov	r4,r2
 4023c24:	402968c0 	call	402968c <OSSemPost>
 4023c28:	00000106 	br	4023c30 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 4023c2c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4023c30:	e037883a 	mov	sp,fp
 4023c34:	dfc00117 	ldw	ra,4(sp)
 4023c38:	df000017 	ldw	fp,0(sp)
 4023c3c:	dec00204 	addi	sp,sp,8
 4023c40:	f800283a 	ret

04023c44 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 4023c44:	deffdb04 	addi	sp,sp,-148
 4023c48:	dfc02415 	stw	ra,144(sp)
 4023c4c:	df002315 	stw	fp,140(sp)
 4023c50:	df002304 	addi	fp,sp,140
 4023c54:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4023c58:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 4023c5c:	d0a03943 	ldbu	r2,-32539(gp)
 4023c60:	10803fcc 	andi	r2,r2,255
 4023c64:	10800060 	cmpeqi	r2,r2,1
 4023c68:	10003626 	beq	r2,zero,4023d44 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4023c6c:	e0bfe204 	addi	r2,fp,-120
 4023c70:	100b883a 	mov	r5,r2
 4023c74:	01003fc4 	movi	r4,255
 4023c78:	402af840 	call	402af84 <OSTaskQuery>
 4023c7c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4023c80:	e0bffe83 	ldbu	r2,-6(fp)
 4023c84:	10803fcc 	andi	r2,r2,255
 4023c88:	1000301e 	bne	r2,zero,4023d4c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 4023c8c:	e0bfee83 	ldbu	r2,-70(fp)
 4023c90:	10803fcc 	andi	r2,r2,255
 4023c94:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 4023c98:	d0a03817 	ldw	r2,-32544(gp)
 4023c9c:	e0fffd04 	addi	r3,fp,-12
 4023ca0:	180b883a 	mov	r5,r3
 4023ca4:	1009883a 	mov	r4,r2
 4023ca8:	402979c0 	call	402979c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023cac:	0005303a 	rdctl	r2,status
 4023cb0:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023cb4:	e0ffe117 	ldw	r3,-124(fp)
 4023cb8:	00bfff84 	movi	r2,-2
 4023cbc:	1884703a 	and	r2,r3,r2
 4023cc0:	1001703a 	wrctl	status,r2
  
  return context;
 4023cc4:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 4023cc8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 4023ccc:	e0bffd0b 	ldhu	r2,-12(fp)
 4023cd0:	10bfffcc 	andi	r2,r2,65535
 4023cd4:	10000b1e 	bne	r2,zero,4023d04 <__malloc_lock+0xc0>
 4023cd8:	d0a00c17 	ldw	r2,-32720(gp)
 4023cdc:	e0ffde17 	ldw	r3,-136(fp)
 4023ce0:	1880081e 	bne	r3,r2,4023d04 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 4023ce4:	d0a03717 	ldw	r2,-32548(gp)
 4023ce8:	10800044 	addi	r2,r2,1
 4023cec:	d0a03715 	stw	r2,-32548(gp)
 4023cf0:	e0bfdd17 	ldw	r2,-140(fp)
 4023cf4:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023cf8:	e0bfdf17 	ldw	r2,-132(fp)
 4023cfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 4023d00:	00000e06 	br	4023d3c <__malloc_lock+0xf8>
 4023d04:	e0bfdd17 	ldw	r2,-140(fp)
 4023d08:	e0bfe015 	stw	r2,-128(fp)
 4023d0c:	e0bfe017 	ldw	r2,-128(fp)
 4023d10:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 4023d14:	d0a03817 	ldw	r2,-32544(gp)
 4023d18:	e0fffe84 	addi	r3,fp,-6
 4023d1c:	180d883a 	mov	r6,r3
 4023d20:	000b883a 	mov	r5,zero
 4023d24:	1009883a 	mov	r4,r2
 4023d28:	40293140 	call	4029314 <OSSemPend>
    locks  = 1;
 4023d2c:	00800044 	movi	r2,1
 4023d30:	d0a03715 	stw	r2,-32548(gp)
    lockid = id;
 4023d34:	e0bfde17 	ldw	r2,-136(fp)
 4023d38:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 4023d3c:	0001883a 	nop
 4023d40:	00000306 	br	4023d50 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 4023d44:	0001883a 	nop
 4023d48:	00000106 	br	4023d50 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4023d4c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4023d50:	e037883a 	mov	sp,fp
 4023d54:	dfc00117 	ldw	ra,4(sp)
 4023d58:	df000017 	ldw	fp,0(sp)
 4023d5c:	dec00204 	addi	sp,sp,8
 4023d60:	f800283a 	ret

04023d64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4023d64:	defff804 	addi	sp,sp,-32
 4023d68:	dfc00715 	stw	ra,28(sp)
 4023d6c:	df000615 	stw	fp,24(sp)
 4023d70:	df000604 	addi	fp,sp,24
 4023d74:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4023d78:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 4023d7c:	d0a03943 	ldbu	r2,-32539(gp)
 4023d80:	10803fcc 	andi	r2,r2,255
 4023d84:	10800060 	cmpeqi	r2,r2,1
 4023d88:	10002326 	beq	r2,zero,4023e18 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023d8c:	0005303a 	rdctl	r2,status
 4023d90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023d94:	e0fffe17 	ldw	r3,-8(fp)
 4023d98:	00bfff84 	movi	r2,-2
 4023d9c:	1884703a 	and	r2,r3,r2
 4023da0:	1001703a 	wrctl	status,r2
  
  return context;
 4023da4:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 4023da8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 4023dac:	d0a03717 	ldw	r2,-32548(gp)
 4023db0:	1000051e 	bne	r2,zero,4023dc8 <__malloc_unlock+0x64>
 4023db4:	e0bffa17 	ldw	r2,-24(fp)
 4023db8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023dbc:	e0bffb17 	ldw	r2,-20(fp)
 4023dc0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 4023dc4:	00001506 	br	4023e1c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 4023dc8:	d0a03717 	ldw	r2,-32548(gp)
 4023dcc:	10bfffc4 	addi	r2,r2,-1
 4023dd0:	d0a03715 	stw	r2,-32548(gp)
 4023dd4:	d0a03717 	ldw	r2,-32548(gp)
 4023dd8:	10000a1e 	bne	r2,zero,4023e04 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 4023ddc:	00bfffc4 	movi	r2,-1
 4023de0:	d0a00c15 	stw	r2,-32720(gp)
 4023de4:	e0bffa17 	ldw	r2,-24(fp)
 4023de8:	e0bffc15 	stw	r2,-16(fp)
 4023dec:	e0bffc17 	ldw	r2,-16(fp)
 4023df0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 4023df4:	d0a03817 	ldw	r2,-32544(gp)
 4023df8:	1009883a 	mov	r4,r2
 4023dfc:	402968c0 	call	402968c <OSSemPost>
 4023e00:	00000606 	br	4023e1c <__malloc_unlock+0xb8>
 4023e04:	e0bffa17 	ldw	r2,-24(fp)
 4023e08:	e0bffd15 	stw	r2,-12(fp)
 4023e0c:	e0bffd17 	ldw	r2,-12(fp)
 4023e10:	1001703a 	wrctl	status,r2
 4023e14:	00000106 	br	4023e1c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 4023e18:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4023e1c:	e037883a 	mov	sp,fp
 4023e20:	dfc00117 	ldw	ra,4(sp)
 4023e24:	df000017 	ldw	fp,0(sp)
 4023e28:	dec00204 	addi	sp,sp,8
 4023e2c:	f800283a 	ret

04023e30 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4023e30:	defff704 	addi	sp,sp,-36
 4023e34:	dfc00815 	stw	ra,32(sp)
 4023e38:	df000715 	stw	fp,28(sp)
 4023e3c:	df000704 	addi	fp,sp,28
 4023e40:	e13ffd15 	stw	r4,-12(fp)
 4023e44:	e17ffe15 	stw	r5,-8(fp)
 4023e48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4023e4c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4023e50:	e0bfff17 	ldw	r2,-4(fp)
 4023e54:	1000021e 	bne	r2,zero,4023e60 <OSEventNameGet+0x30>
        return (0);
 4023e58:	0005883a 	mov	r2,zero
 4023e5c:	00003706 	br	4023f3c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4023e60:	e0bffd17 	ldw	r2,-12(fp)
 4023e64:	1000051e 	bne	r2,zero,4023e7c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 4023e68:	e0bfff17 	ldw	r2,-4(fp)
 4023e6c:	00c00104 	movi	r3,4
 4023e70:	10c00005 	stb	r3,0(r2)
        return (0);
 4023e74:	0005883a 	mov	r2,zero
 4023e78:	00003006 	br	4023f3c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4023e7c:	e0bffe17 	ldw	r2,-8(fp)
 4023e80:	1000051e 	bne	r2,zero,4023e98 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4023e84:	e0bfff17 	ldw	r2,-4(fp)
 4023e88:	00c00304 	movi	r3,12
 4023e8c:	10c00005 	stb	r3,0(r2)
        return (0);
 4023e90:	0005883a 	mov	r2,zero
 4023e94:	00002906 	br	4023f3c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4023e98:	d0a04703 	ldbu	r2,-32484(gp)
 4023e9c:	10803fcc 	andi	r2,r2,255
 4023ea0:	10000526 	beq	r2,zero,4023eb8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 4023ea4:	e0bfff17 	ldw	r2,-4(fp)
 4023ea8:	00c00444 	movi	r3,17
 4023eac:	10c00005 	stb	r3,0(r2)
        return (0);
 4023eb0:	0005883a 	mov	r2,zero
 4023eb4:	00002106 	br	4023f3c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 4023eb8:	e0bffd17 	ldw	r2,-12(fp)
 4023ebc:	10800003 	ldbu	r2,0(r2)
 4023ec0:	10803fcc 	andi	r2,r2,255
 4023ec4:	10bfffc4 	addi	r2,r2,-1
 4023ec8:	10800128 	cmpgeui	r2,r2,4
 4023ecc:	10000526 	beq	r2,zero,4023ee4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4023ed0:	e0bfff17 	ldw	r2,-4(fp)
 4023ed4:	00c00044 	movi	r3,1
 4023ed8:	10c00005 	stb	r3,0(r2)
             return (0);
 4023edc:	0005883a 	mov	r2,zero
 4023ee0:	00001606 	br	4023f3c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 4023ee4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023ee8:	0005303a 	rdctl	r2,status
 4023eec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023ef0:	e0fffb17 	ldw	r3,-20(fp)
 4023ef4:	00bfff84 	movi	r2,-2
 4023ef8:	1884703a 	and	r2,r3,r2
 4023efc:	1001703a 	wrctl	status,r2
  
  return context;
 4023f00:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 4023f04:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 4023f08:	e0bffd17 	ldw	r2,-12(fp)
 4023f0c:	10800384 	addi	r2,r2,14
 4023f10:	100b883a 	mov	r5,r2
 4023f14:	e13ffe17 	ldw	r4,-8(fp)
 4023f18:	40258b40 	call	40258b4 <OS_StrCopy>
 4023f1c:	e0bffa05 	stb	r2,-24(fp)
 4023f20:	e0bff917 	ldw	r2,-28(fp)
 4023f24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023f28:	e0bffc17 	ldw	r2,-16(fp)
 4023f2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4023f30:	e0bfff17 	ldw	r2,-4(fp)
 4023f34:	10000005 	stb	zero,0(r2)
    return (len);
 4023f38:	e0bffa03 	ldbu	r2,-24(fp)
}
 4023f3c:	e037883a 	mov	sp,fp
 4023f40:	dfc00117 	ldw	ra,4(sp)
 4023f44:	df000017 	ldw	fp,0(sp)
 4023f48:	dec00204 	addi	sp,sp,8
 4023f4c:	f800283a 	ret

04023f50 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4023f50:	defff604 	addi	sp,sp,-40
 4023f54:	dfc00915 	stw	ra,36(sp)
 4023f58:	df000815 	stw	fp,32(sp)
 4023f5c:	df000804 	addi	fp,sp,32
 4023f60:	e13ffd15 	stw	r4,-12(fp)
 4023f64:	e17ffe15 	stw	r5,-8(fp)
 4023f68:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4023f6c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4023f70:	e0bfff17 	ldw	r2,-4(fp)
 4023f74:	10004026 	beq	r2,zero,4024078 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4023f78:	e0bffd17 	ldw	r2,-12(fp)
 4023f7c:	1000041e 	bne	r2,zero,4023f90 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 4023f80:	e0bfff17 	ldw	r2,-4(fp)
 4023f84:	00c00104 	movi	r3,4
 4023f88:	10c00005 	stb	r3,0(r2)
        return;
 4023f8c:	00003b06 	br	402407c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4023f90:	e0bffe17 	ldw	r2,-8(fp)
 4023f94:	1000041e 	bne	r2,zero,4023fa8 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4023f98:	e0bfff17 	ldw	r2,-4(fp)
 4023f9c:	00c00304 	movi	r3,12
 4023fa0:	10c00005 	stb	r3,0(r2)
        return;
 4023fa4:	00003506 	br	402407c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4023fa8:	d0a04703 	ldbu	r2,-32484(gp)
 4023fac:	10803fcc 	andi	r2,r2,255
 4023fb0:	10000426 	beq	r2,zero,4023fc4 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4023fb4:	e0bfff17 	ldw	r2,-4(fp)
 4023fb8:	00c00484 	movi	r3,18
 4023fbc:	10c00005 	stb	r3,0(r2)
        return;
 4023fc0:	00002e06 	br	402407c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 4023fc4:	e0bffd17 	ldw	r2,-12(fp)
 4023fc8:	10800003 	ldbu	r2,0(r2)
 4023fcc:	10803fcc 	andi	r2,r2,255
 4023fd0:	10bfffc4 	addi	r2,r2,-1
 4023fd4:	10800128 	cmpgeui	r2,r2,4
 4023fd8:	10000426 	beq	r2,zero,4023fec <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4023fdc:	e0bfff17 	ldw	r2,-4(fp)
 4023fe0:	00c00044 	movi	r3,1
 4023fe4:	10c00005 	stb	r3,0(r2)
             return;
 4023fe8:	00002406 	br	402407c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 4023fec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023ff0:	0005303a 	rdctl	r2,status
 4023ff4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023ff8:	e0fffc17 	ldw	r3,-16(fp)
 4023ffc:	00bfff84 	movi	r2,-2
 4024000:	1884703a 	and	r2,r3,r2
 4024004:	1001703a 	wrctl	status,r2
  
  return context;
 4024008:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 402400c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 4024010:	e13ffe17 	ldw	r4,-8(fp)
 4024014:	40259280 	call	4025928 <OS_StrLen>
 4024018:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 402401c:	e0bffa03 	ldbu	r2,-24(fp)
 4024020:	10800830 	cmpltui	r2,r2,32
 4024024:	1000081e 	bne	r2,zero,4024048 <OSEventNameSet+0xf8>
 4024028:	e0bff817 	ldw	r2,-32(fp)
 402402c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024030:	e0bff917 	ldw	r2,-28(fp)
 4024034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 4024038:	e0bfff17 	ldw	r2,-4(fp)
 402403c:	00c002c4 	movi	r3,11
 4024040:	10c00005 	stb	r3,0(r2)
        return;
 4024044:	00000d06 	br	402407c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 4024048:	e0bffd17 	ldw	r2,-12(fp)
 402404c:	10800384 	addi	r2,r2,14
 4024050:	e17ffe17 	ldw	r5,-8(fp)
 4024054:	1009883a 	mov	r4,r2
 4024058:	40258b40 	call	40258b4 <OS_StrCopy>
 402405c:	e0bff817 	ldw	r2,-32(fp)
 4024060:	e0bffb15 	stw	r2,-20(fp)
 4024064:	e0bffb17 	ldw	r2,-20(fp)
 4024068:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 402406c:	e0bfff17 	ldw	r2,-4(fp)
 4024070:	10000005 	stb	zero,0(r2)
 4024074:	00000106 	br	402407c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4024078:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 402407c:	e037883a 	mov	sp,fp
 4024080:	dfc00117 	ldw	ra,4(sp)
 4024084:	df000017 	ldw	fp,0(sp)
 4024088:	dec00204 	addi	sp,sp,8
 402408c:	f800283a 	ret

04024090 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 4024090:	deffed04 	addi	sp,sp,-76
 4024094:	dfc01215 	stw	ra,72(sp)
 4024098:	df001115 	stw	fp,68(sp)
 402409c:	df001104 	addi	fp,sp,68
 40240a0:	e13ffc15 	stw	r4,-16(fp)
 40240a4:	e17ffd15 	stw	r5,-12(fp)
 40240a8:	e1bffe15 	stw	r6,-8(fp)
 40240ac:	3805883a 	mov	r2,r7
 40240b0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 40240b4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 40240b8:	e0800217 	ldw	r2,8(fp)
 40240bc:	1000021e 	bne	r2,zero,40240c8 <OSEventPendMulti+0x38>
        return (0);
 40240c0:	0005883a 	mov	r2,zero
 40240c4:	00017106 	br	402468c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 40240c8:	e0bffc17 	ldw	r2,-16(fp)
 40240cc:	1000051e 	bne	r2,zero,40240e4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 40240d0:	e0800217 	ldw	r2,8(fp)
 40240d4:	00c00104 	movi	r3,4
 40240d8:	10c00005 	stb	r3,0(r2)
        return (0);
 40240dc:	0005883a 	mov	r2,zero
 40240e0:	00016a06 	br	402468c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 40240e4:	e0bffd17 	ldw	r2,-12(fp)
 40240e8:	1000051e 	bne	r2,zero,4024100 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 40240ec:	e0800217 	ldw	r2,8(fp)
 40240f0:	00c00104 	movi	r3,4
 40240f4:	10c00005 	stb	r3,0(r2)
        return (0);
 40240f8:	0005883a 	mov	r2,zero
 40240fc:	00016306 	br	402468c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 4024100:	e0bffe17 	ldw	r2,-8(fp)
 4024104:	1000051e 	bne	r2,zero,402411c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 4024108:	e0800217 	ldw	r2,8(fp)
 402410c:	00c00104 	movi	r3,4
 4024110:	10c00005 	stb	r3,0(r2)
        return (0);
 4024114:	0005883a 	mov	r2,zero
 4024118:	00015c06 	br	402468c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 402411c:	e0bffd17 	ldw	r2,-12(fp)
 4024120:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 4024124:	e0bffc17 	ldw	r2,-16(fp)
 4024128:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 402412c:	e0bfef17 	ldw	r2,-68(fp)
 4024130:	10800017 	ldw	r2,0(r2)
 4024134:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 4024138:	00001906 	br	40241a0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 402413c:	e0bff017 	ldw	r2,-64(fp)
 4024140:	10800003 	ldbu	r2,0(r2)
 4024144:	10803fcc 	andi	r2,r2,255
 4024148:	10c000a0 	cmpeqi	r3,r2,2
 402414c:	1800091e 	bne	r3,zero,4024174 <OSEventPendMulti+0xe4>
 4024150:	10c000e0 	cmpeqi	r3,r2,3
 4024154:	1800091e 	bne	r3,zero,402417c <OSEventPendMulti+0xec>
 4024158:	10800060 	cmpeqi	r2,r2,1
 402415c:	1000091e 	bne	r2,zero,4024184 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 4024160:	e0800217 	ldw	r2,8(fp)
 4024164:	00c00044 	movi	r3,1
 4024168:	10c00005 	stb	r3,0(r2)
                 return (0);
 402416c:	0005883a 	mov	r2,zero
 4024170:	00014606 	br	402468c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 4024174:	0001883a 	nop
 4024178:	00000306 	br	4024188 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 402417c:	0001883a 	nop
 4024180:	00000106 	br	4024188 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 4024184:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 4024188:	e0bfef17 	ldw	r2,-68(fp)
 402418c:	10800104 	addi	r2,r2,4
 4024190:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 4024194:	e0bfef17 	ldw	r2,-68(fp)
 4024198:	10800017 	ldw	r2,0(r2)
 402419c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 40241a0:	e0bff017 	ldw	r2,-64(fp)
 40241a4:	103fe51e 	bne	r2,zero,402413c <__flash_rwdata_start+0xffff6538>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 40241a8:	d0a04703 	ldbu	r2,-32484(gp)
 40241ac:	10803fcc 	andi	r2,r2,255
 40241b0:	10000526 	beq	r2,zero,40241c8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 40241b4:	e0800217 	ldw	r2,8(fp)
 40241b8:	00c00084 	movi	r3,2
 40241bc:	10c00005 	stb	r3,0(r2)
        return (0);
 40241c0:	0005883a 	mov	r2,zero
 40241c4:	00013106 	br	402468c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 40241c8:	d0a03903 	ldbu	r2,-32540(gp)
 40241cc:	10803fcc 	andi	r2,r2,255
 40241d0:	10000526 	beq	r2,zero,40241e8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 40241d4:	e0800217 	ldw	r2,8(fp)
 40241d8:	00c00344 	movi	r3,13
 40241dc:	10c00005 	stb	r3,0(r2)
        return (0);
 40241e0:	0005883a 	mov	r2,zero
 40241e4:	00012906 	br	402468c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40241e8:	0005303a 	rdctl	r2,status
 40241ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40241f0:	e0fffb17 	ldw	r3,-20(fp)
 40241f4:	00bfff84 	movi	r2,-2
 40241f8:	1884703a 	and	r2,r3,r2
 40241fc:	1001703a 	wrctl	status,r2
  
  return context;
 4024200:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4024204:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 4024208:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 402420c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 4024210:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 4024214:	e0bffc17 	ldw	r2,-16(fp)
 4024218:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 402421c:	e0bfef17 	ldw	r2,-68(fp)
 4024220:	10800017 	ldw	r2,0(r2)
 4024224:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 4024228:	00008106 	br	4024430 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 402422c:	e0bff017 	ldw	r2,-64(fp)
 4024230:	10800003 	ldbu	r2,0(r2)
 4024234:	10803fcc 	andi	r2,r2,255
 4024238:	10c000a0 	cmpeqi	r3,r2,2
 402423c:	18003c1e 	bne	r3,zero,4024330 <OSEventPendMulti+0x2a0>
 4024240:	10c000e0 	cmpeqi	r3,r2,3
 4024244:	1800031e 	bne	r3,zero,4024254 <OSEventPendMulti+0x1c4>
 4024248:	10800060 	cmpeqi	r2,r2,1
 402424c:	10001e1e 	bne	r2,zero,40242c8 <OSEventPendMulti+0x238>
 4024250:	00006606 	br	40243ec <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 4024254:	e0bff017 	ldw	r2,-64(fp)
 4024258:	1080020b 	ldhu	r2,8(r2)
 402425c:	10bfffcc 	andi	r2,r2,65535
 4024260:	10001526 	beq	r2,zero,40242b8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 4024264:	e0bff017 	ldw	r2,-64(fp)
 4024268:	1080020b 	ldhu	r2,8(r2)
 402426c:	10bfffc4 	addi	r2,r2,-1
 4024270:	1007883a 	mov	r3,r2
 4024274:	e0bff017 	ldw	r2,-64(fp)
 4024278:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 402427c:	e0bffd17 	ldw	r2,-12(fp)
 4024280:	10c00104 	addi	r3,r2,4
 4024284:	e0fffd15 	stw	r3,-12(fp)
 4024288:	e0fff017 	ldw	r3,-64(fp)
 402428c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 4024290:	00800044 	movi	r2,1
 4024294:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 4024298:	e0bffe17 	ldw	r2,-8(fp)
 402429c:	10c00104 	addi	r3,r2,4
 40242a0:	e0fffe15 	stw	r3,-8(fp)
 40242a4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 40242a8:	e0bff18b 	ldhu	r2,-58(fp)
 40242ac:	10800044 	addi	r2,r2,1
 40242b0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 40242b4:	00005806 	br	4024418 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 40242b8:	e0bff203 	ldbu	r2,-56(fp)
 40242bc:	10800054 	ori	r2,r2,1
 40242c0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 40242c4:	00005406 	br	4024418 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 40242c8:	e0bff017 	ldw	r2,-64(fp)
 40242cc:	10800117 	ldw	r2,4(r2)
 40242d0:	10001326 	beq	r2,zero,4024320 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 40242d4:	e0bffe17 	ldw	r2,-8(fp)
 40242d8:	10c00104 	addi	r3,r2,4
 40242dc:	e0fffe15 	stw	r3,-8(fp)
 40242e0:	e0fff017 	ldw	r3,-64(fp)
 40242e4:	18c00117 	ldw	r3,4(r3)
 40242e8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 40242ec:	e0bff017 	ldw	r2,-64(fp)
 40242f0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 40242f4:	e0bffd17 	ldw	r2,-12(fp)
 40242f8:	10c00104 	addi	r3,r2,4
 40242fc:	e0fffd15 	stw	r3,-12(fp)
 4024300:	e0fff017 	ldw	r3,-64(fp)
 4024304:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 4024308:	00800044 	movi	r2,1
 402430c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 4024310:	e0bff18b 	ldhu	r2,-58(fp)
 4024314:	10800044 	addi	r2,r2,1
 4024318:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 402431c:	00003e06 	br	4024418 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 4024320:	e0bff203 	ldbu	r2,-56(fp)
 4024324:	10800094 	ori	r2,r2,2
 4024328:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 402432c:	00003a06 	br	4024418 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 4024330:	e0bff017 	ldw	r2,-64(fp)
 4024334:	10800117 	ldw	r2,4(r2)
 4024338:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 402433c:	e0bff517 	ldw	r2,-44(fp)
 4024340:	1080058b 	ldhu	r2,22(r2)
 4024344:	10bfffcc 	andi	r2,r2,65535
 4024348:	10002426 	beq	r2,zero,40243dc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 402434c:	e0bffe17 	ldw	r2,-8(fp)
 4024350:	10c00104 	addi	r3,r2,4
 4024354:	e0fffe15 	stw	r3,-8(fp)
 4024358:	e0fff517 	ldw	r3,-44(fp)
 402435c:	18c00417 	ldw	r3,16(r3)
 4024360:	19400104 	addi	r5,r3,4
 4024364:	e13ff517 	ldw	r4,-44(fp)
 4024368:	21400415 	stw	r5,16(r4)
 402436c:	18c00017 	ldw	r3,0(r3)
 4024370:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 4024374:	e0bff517 	ldw	r2,-44(fp)
 4024378:	10c00417 	ldw	r3,16(r2)
 402437c:	e0bff517 	ldw	r2,-44(fp)
 4024380:	10800217 	ldw	r2,8(r2)
 4024384:	1880041e 	bne	r3,r2,4024398 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 4024388:	e0bff517 	ldw	r2,-44(fp)
 402438c:	10c00117 	ldw	r3,4(r2)
 4024390:	e0bff517 	ldw	r2,-44(fp)
 4024394:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 4024398:	e0bff517 	ldw	r2,-44(fp)
 402439c:	1080058b 	ldhu	r2,22(r2)
 40243a0:	10bfffc4 	addi	r2,r2,-1
 40243a4:	1007883a 	mov	r3,r2
 40243a8:	e0bff517 	ldw	r2,-44(fp)
 40243ac:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 40243b0:	e0bffd17 	ldw	r2,-12(fp)
 40243b4:	10c00104 	addi	r3,r2,4
 40243b8:	e0fffd15 	stw	r3,-12(fp)
 40243bc:	e0fff017 	ldw	r3,-64(fp)
 40243c0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 40243c4:	00800044 	movi	r2,1
 40243c8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 40243cc:	e0bff18b 	ldhu	r2,-58(fp)
 40243d0:	10800044 	addi	r2,r2,1
 40243d4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 40243d8:	00000f06 	br	4024418 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 40243dc:	e0bff203 	ldbu	r2,-56(fp)
 40243e0:	10800114 	ori	r2,r2,4
 40243e4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 40243e8:	00000b06 	br	4024418 <OSEventPendMulti+0x388>
 40243ec:	e0bff317 	ldw	r2,-52(fp)
 40243f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40243f4:	e0bff417 	ldw	r2,-48(fp)
 40243f8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 40243fc:	e0bffd17 	ldw	r2,-12(fp)
 4024400:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 4024404:	e0800217 	ldw	r2,8(fp)
 4024408:	00c00044 	movi	r3,1
 402440c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 4024410:	e0bff18b 	ldhu	r2,-58(fp)
 4024414:	00009d06 	br	402468c <OSEventPendMulti+0x5fc>
        }
        pevents++;
 4024418:	e0bfef17 	ldw	r2,-68(fp)
 402441c:	10800104 	addi	r2,r2,4
 4024420:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 4024424:	e0bfef17 	ldw	r2,-68(fp)
 4024428:	10800017 	ldw	r2,0(r2)
 402442c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 4024430:	e0bff017 	ldw	r2,-64(fp)
 4024434:	103f7d1e 	bne	r2,zero,402422c <__flash_rwdata_start+0xffff6628>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 4024438:	e0bff103 	ldbu	r2,-60(fp)
 402443c:	10800058 	cmpnei	r2,r2,1
 4024440:	10000a1e 	bne	r2,zero,402446c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 4024444:	e0bffd17 	ldw	r2,-12(fp)
 4024448:	10000015 	stw	zero,0(r2)
 402444c:	e0bff317 	ldw	r2,-52(fp)
 4024450:	e0bff615 	stw	r2,-40(fp)
 4024454:	e0bff617 	ldw	r2,-40(fp)
 4024458:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 402445c:	e0800217 	ldw	r2,8(fp)
 4024460:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 4024464:	e0bff18b 	ldhu	r2,-58(fp)
 4024468:	00008806 	br	402468c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 402446c:	d0a04817 	ldw	r2,-32480(gp)
 4024470:	d0e04817 	ldw	r3,-32480(gp)
 4024474:	19000c03 	ldbu	r4,48(r3)
 4024478:	e0fff203 	ldbu	r3,-56(fp)
 402447c:	20c6b03a 	or	r3,r4,r3
 4024480:	1809883a 	mov	r4,r3
 4024484:	00ffe004 	movi	r3,-128
 4024488:	20c6b03a 	or	r3,r4,r3
 402448c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4024490:	d0a04817 	ldw	r2,-32480(gp)
 4024494:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 4024498:	d0a04817 	ldw	r2,-32480(gp)
 402449c:	e0ffff0b 	ldhu	r3,-4(fp)
 40244a0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 40244a4:	e13ffc17 	ldw	r4,-16(fp)
 40244a8:	4024fcc0 	call	4024fcc <OS_EventTaskWaitMulti>
 40244ac:	e0bff317 	ldw	r2,-52(fp)
 40244b0:	e0bff915 	stw	r2,-28(fp)
 40244b4:	e0bff917 	ldw	r2,-28(fp)
 40244b8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 40244bc:	40257700 	call	4025770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40244c0:	0005303a 	rdctl	r2,status
 40244c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40244c8:	e0fff717 	ldw	r3,-36(fp)
 40244cc:	00bfff84 	movi	r2,-2
 40244d0:	1884703a 	and	r2,r3,r2
 40244d4:	1001703a 	wrctl	status,r2
  
  return context;
 40244d8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 40244dc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 40244e0:	d0a04817 	ldw	r2,-32480(gp)
 40244e4:	10800c43 	ldbu	r2,49(r2)
 40244e8:	10803fcc 	andi	r2,r2,255
 40244ec:	10000226 	beq	r2,zero,40244f8 <OSEventPendMulti+0x468>
 40244f0:	108000a0 	cmpeqi	r2,r2,2
 40244f4:	10001826 	beq	r2,zero,4024558 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 40244f8:	d0a04817 	ldw	r2,-32480(gp)
 40244fc:	10800717 	ldw	r2,28(r2)
 4024500:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 4024504:	e0bff017 	ldw	r2,-64(fp)
 4024508:	10000b26 	beq	r2,zero,4024538 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 402450c:	e0bffd17 	ldw	r2,-12(fp)
 4024510:	10c00104 	addi	r3,r2,4
 4024514:	e0fffd15 	stw	r3,-12(fp)
 4024518:	e0fff017 	ldw	r3,-64(fp)
 402451c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 4024520:	e0bffd17 	ldw	r2,-12(fp)
 4024524:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 4024528:	e0bff18b 	ldhu	r2,-58(fp)
 402452c:	10800044 	addi	r2,r2,1
 4024530:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 4024534:	00000d06 	br	402456c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 4024538:	d0a04817 	ldw	r2,-32480(gp)
 402453c:	00c00044 	movi	r3,1
 4024540:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 4024544:	d0a04817 	ldw	r2,-32480(gp)
 4024548:	e17ffc17 	ldw	r5,-16(fp)
 402454c:	1009883a 	mov	r4,r2
 4024550:	40251d40 	call	40251d4 <OS_EventTaskRemoveMulti>
             }
			 break;
 4024554:	00000506 	br	402456c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 4024558:	d0a04817 	ldw	r2,-32480(gp)
 402455c:	e17ffc17 	ldw	r5,-16(fp)
 4024560:	1009883a 	mov	r4,r2
 4024564:	40251d40 	call	40251d4 <OS_EventTaskRemoveMulti>
             break;
 4024568:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 402456c:	d0a04817 	ldw	r2,-32480(gp)
 4024570:	10800c43 	ldbu	r2,49(r2)
 4024574:	10803fcc 	andi	r2,r2,255
 4024578:	10000326 	beq	r2,zero,4024588 <OSEventPendMulti+0x4f8>
 402457c:	108000a0 	cmpeqi	r2,r2,2
 4024580:	1000231e 	bne	r2,zero,4024610 <OSEventPendMulti+0x580>
 4024584:	00002a06 	br	4024630 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 4024588:	e0bff017 	ldw	r2,-64(fp)
 402458c:	10800003 	ldbu	r2,0(r2)
 4024590:	10803fcc 	andi	r2,r2,255
 4024594:	0080100e 	bge	zero,r2,40245d8 <OSEventPendMulti+0x548>
 4024598:	10c000d0 	cmplti	r3,r2,3
 402459c:	1800071e 	bne	r3,zero,40245bc <OSEventPendMulti+0x52c>
 40245a0:	108000e0 	cmpeqi	r2,r2,3
 40245a4:	10000c26 	beq	r2,zero,40245d8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 40245a8:	e0bffe17 	ldw	r2,-8(fp)
 40245ac:	10c00104 	addi	r3,r2,4
 40245b0:	e0fffe15 	stw	r3,-8(fp)
 40245b4:	10000015 	stw	zero,0(r2)
                      break;
 40245b8:	00001206 	br	4024604 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 40245bc:	e0bffe17 	ldw	r2,-8(fp)
 40245c0:	10c00104 	addi	r3,r2,4
 40245c4:	e0fffe15 	stw	r3,-8(fp)
 40245c8:	d0e04817 	ldw	r3,-32480(gp)
 40245cc:	18c00917 	ldw	r3,36(r3)
 40245d0:	10c00015 	stw	r3,0(r2)
                      break;
 40245d4:	00000b06 	br	4024604 <OSEventPendMulti+0x574>
 40245d8:	e0bff317 	ldw	r2,-52(fp)
 40245dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40245e0:	e0bff817 	ldw	r2,-32(fp)
 40245e4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 40245e8:	e0bffd17 	ldw	r2,-12(fp)
 40245ec:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 40245f0:	e0800217 	ldw	r2,8(fp)
 40245f4:	00c00044 	movi	r3,1
 40245f8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 40245fc:	e0bff18b 	ldhu	r2,-58(fp)
 4024600:	00002206 	br	402468c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 4024604:	e0800217 	ldw	r2,8(fp)
 4024608:	10000005 	stb	zero,0(r2)
             break;
 402460c:	00001006 	br	4024650 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 4024610:	e0bffe17 	ldw	r2,-8(fp)
 4024614:	10c00104 	addi	r3,r2,4
 4024618:	e0fffe15 	stw	r3,-8(fp)
 402461c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 4024620:	e0800217 	ldw	r2,8(fp)
 4024624:	00c00384 	movi	r3,14
 4024628:	10c00005 	stb	r3,0(r2)
             break;
 402462c:	00000806 	br	4024650 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 4024630:	e0bffe17 	ldw	r2,-8(fp)
 4024634:	10c00104 	addi	r3,r2,4
 4024638:	e0fffe15 	stw	r3,-8(fp)
 402463c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 4024640:	e0800217 	ldw	r2,8(fp)
 4024644:	00c00284 	movi	r3,10
 4024648:	10c00005 	stb	r3,0(r2)
             break;
 402464c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 4024650:	d0a04817 	ldw	r2,-32480(gp)
 4024654:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 4024658:	d0a04817 	ldw	r2,-32480(gp)
 402465c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 4024660:	d0a04817 	ldw	r2,-32480(gp)
 4024664:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4024668:	d0a04817 	ldw	r2,-32480(gp)
 402466c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 4024670:	d0a04817 	ldw	r2,-32480(gp)
 4024674:	10000915 	stw	zero,36(r2)
 4024678:	e0bff317 	ldw	r2,-52(fp)
 402467c:	e0bffa15 	stw	r2,-24(fp)
 4024680:	e0bffa17 	ldw	r2,-24(fp)
 4024684:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 4024688:	e0bff18b 	ldhu	r2,-58(fp)
}
 402468c:	e037883a 	mov	sp,fp
 4024690:	dfc00117 	ldw	ra,4(sp)
 4024694:	df000017 	ldw	fp,0(sp)
 4024698:	dec00204 	addi	sp,sp,8
 402469c:	f800283a 	ret

040246a0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 40246a0:	defffe04 	addi	sp,sp,-8
 40246a4:	dfc00115 	stw	ra,4(sp)
 40246a8:	df000015 	stw	fp,0(sp)
 40246ac:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 40246b0:	402d3440 	call	402d344 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 40246b4:	402541c0 	call	402541c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 40246b8:	40254640 	call	4025464 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 40246bc:	40255d00 	call	40255d0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 40246c0:	402533c0 	call	402533c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 40246c4:	40274700 	call	4027470 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 40246c8:	4027d700 	call	4027d70 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 40246cc:	4028ea40 	call	4028ea4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 40246d0:	40254d00 	call	40254d0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 40246d4:	40255500 	call	4025550 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 40246d8:	402d3640 	call	402d364 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 40246dc:	4025e440 	call	4025e44 <OSDebugInit>
#endif
}
 40246e0:	0001883a 	nop
 40246e4:	e037883a 	mov	sp,fp
 40246e8:	dfc00117 	ldw	ra,4(sp)
 40246ec:	df000017 	ldw	fp,0(sp)
 40246f0:	dec00204 	addi	sp,sp,8
 40246f4:	f800283a 	ret

040246f8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 40246f8:	deffff04 	addi	sp,sp,-4
 40246fc:	df000015 	stw	fp,0(sp)
 4024700:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 4024704:	d0a03943 	ldbu	r2,-32539(gp)
 4024708:	10803fcc 	andi	r2,r2,255
 402470c:	10800058 	cmpnei	r2,r2,1
 4024710:	1000071e 	bne	r2,zero,4024730 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 4024714:	d0a04703 	ldbu	r2,-32484(gp)
 4024718:	10803fcc 	andi	r2,r2,255
 402471c:	10803fe0 	cmpeqi	r2,r2,255
 4024720:	1000031e 	bne	r2,zero,4024730 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 4024724:	d0a04703 	ldbu	r2,-32484(gp)
 4024728:	10800044 	addi	r2,r2,1
 402472c:	d0a04705 	stb	r2,-32484(gp)
        }
    }
}
 4024730:	0001883a 	nop
 4024734:	e037883a 	mov	sp,fp
 4024738:	df000017 	ldw	fp,0(sp)
 402473c:	dec00104 	addi	sp,sp,4
 4024740:	f800283a 	ret

04024744 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 4024744:	defffb04 	addi	sp,sp,-20
 4024748:	dfc00415 	stw	ra,16(sp)
 402474c:	df000315 	stw	fp,12(sp)
 4024750:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4024754:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 4024758:	d0a03943 	ldbu	r2,-32539(gp)
 402475c:	10803fcc 	andi	r2,r2,255
 4024760:	10800058 	cmpnei	r2,r2,1
 4024764:	10002f1e 	bne	r2,zero,4024824 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024768:	0005303a 	rdctl	r2,status
 402476c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024770:	e0ffff17 	ldw	r3,-4(fp)
 4024774:	00bfff84 	movi	r2,-2
 4024778:	1884703a 	and	r2,r3,r2
 402477c:	1001703a 	wrctl	status,r2
  
  return context;
 4024780:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4024784:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 4024788:	d0a04703 	ldbu	r2,-32484(gp)
 402478c:	10803fcc 	andi	r2,r2,255
 4024790:	10000326 	beq	r2,zero,40247a0 <OSIntExit+0x5c>
            OSIntNesting--;
 4024794:	d0a04703 	ldbu	r2,-32484(gp)
 4024798:	10bfffc4 	addi	r2,r2,-1
 402479c:	d0a04705 	stb	r2,-32484(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 40247a0:	d0a04703 	ldbu	r2,-32484(gp)
 40247a4:	10803fcc 	andi	r2,r2,255
 40247a8:	10001a1e 	bne	r2,zero,4024814 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 40247ac:	d0a03903 	ldbu	r2,-32540(gp)
 40247b0:	10803fcc 	andi	r2,r2,255
 40247b4:	1000171e 	bne	r2,zero,4024814 <OSIntExit+0xd0>
                OS_SchedNew();
 40247b8:	40258400 	call	4025840 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 40247bc:	d0e03b03 	ldbu	r3,-32532(gp)
 40247c0:	d0a03b43 	ldbu	r2,-32531(gp)
 40247c4:	18c03fcc 	andi	r3,r3,255
 40247c8:	10803fcc 	andi	r2,r2,255
 40247cc:	18801126 	beq	r3,r2,4024814 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 40247d0:	d0a03b03 	ldbu	r2,-32532(gp)
 40247d4:	10c03fcc 	andi	r3,r2,255
 40247d8:	00800074 	movhi	r2,1
 40247dc:	10a3bf04 	addi	r2,r2,-28932
 40247e0:	18c7883a 	add	r3,r3,r3
 40247e4:	18c7883a 	add	r3,r3,r3
 40247e8:	10c5883a 	add	r2,r2,r3
 40247ec:	10800017 	ldw	r2,0(r2)
 40247f0:	d0a04315 	stw	r2,-32500(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 40247f4:	d0a04317 	ldw	r2,-32500(gp)
 40247f8:	10c00e17 	ldw	r3,56(r2)
 40247fc:	18c00044 	addi	r3,r3,1
 4024800:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 4024804:	d0a03e17 	ldw	r2,-32520(gp)
 4024808:	10800044 	addi	r2,r2,1
 402480c:	d0a03e15 	stw	r2,-32520(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 4024810:	402d0700 	call	402d070 <OSCtxSw>
 4024814:	e0bffd17 	ldw	r2,-12(fp)
 4024818:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402481c:	e0bffe17 	ldw	r2,-8(fp)
 4024820:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 4024824:	0001883a 	nop
 4024828:	e037883a 	mov	sp,fp
 402482c:	dfc00117 	ldw	ra,4(sp)
 4024830:	df000017 	ldw	fp,0(sp)
 4024834:	dec00204 	addi	sp,sp,8
 4024838:	f800283a 	ret

0402483c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 402483c:	defffc04 	addi	sp,sp,-16
 4024840:	df000315 	stw	fp,12(sp)
 4024844:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4024848:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 402484c:	d0a03943 	ldbu	r2,-32539(gp)
 4024850:	10803fcc 	andi	r2,r2,255
 4024854:	10800058 	cmpnei	r2,r2,1
 4024858:	1000161e 	bne	r2,zero,40248b4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402485c:	0005303a 	rdctl	r2,status
 4024860:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024864:	e0ffff17 	ldw	r3,-4(fp)
 4024868:	00bfff84 	movi	r2,-2
 402486c:	1884703a 	and	r2,r3,r2
 4024870:	1001703a 	wrctl	status,r2
  
  return context;
 4024874:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4024878:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 402487c:	d0a04703 	ldbu	r2,-32484(gp)
 4024880:	10803fcc 	andi	r2,r2,255
 4024884:	1000071e 	bne	r2,zero,40248a4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 4024888:	d0a03903 	ldbu	r2,-32540(gp)
 402488c:	10803fcc 	andi	r2,r2,255
 4024890:	10803fe0 	cmpeqi	r2,r2,255
 4024894:	1000031e 	bne	r2,zero,40248a4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 4024898:	d0a03903 	ldbu	r2,-32540(gp)
 402489c:	10800044 	addi	r2,r2,1
 40248a0:	d0a03905 	stb	r2,-32540(gp)
 40248a4:	e0bffd17 	ldw	r2,-12(fp)
 40248a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40248ac:	e0bffe17 	ldw	r2,-8(fp)
 40248b0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 40248b4:	0001883a 	nop
 40248b8:	e037883a 	mov	sp,fp
 40248bc:	df000017 	ldw	fp,0(sp)
 40248c0:	dec00104 	addi	sp,sp,4
 40248c4:	f800283a 	ret

040248c8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 40248c8:	defff804 	addi	sp,sp,-32
 40248cc:	dfc00715 	stw	ra,28(sp)
 40248d0:	df000615 	stw	fp,24(sp)
 40248d4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40248d8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 40248dc:	d0a03943 	ldbu	r2,-32539(gp)
 40248e0:	10803fcc 	andi	r2,r2,255
 40248e4:	10800058 	cmpnei	r2,r2,1
 40248e8:	1000281e 	bne	r2,zero,402498c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40248ec:	0005303a 	rdctl	r2,status
 40248f0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40248f4:	e0ffff17 	ldw	r3,-4(fp)
 40248f8:	00bfff84 	movi	r2,-2
 40248fc:	1884703a 	and	r2,r3,r2
 4024900:	1001703a 	wrctl	status,r2
  
  return context;
 4024904:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4024908:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 402490c:	d0a03903 	ldbu	r2,-32540(gp)
 4024910:	10803fcc 	andi	r2,r2,255
 4024914:	10001926 	beq	r2,zero,402497c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 4024918:	d0a03903 	ldbu	r2,-32540(gp)
 402491c:	10bfffc4 	addi	r2,r2,-1
 4024920:	d0a03905 	stb	r2,-32540(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 4024924:	d0a03903 	ldbu	r2,-32540(gp)
 4024928:	10803fcc 	andi	r2,r2,255
 402492c:	10000e1e 	bne	r2,zero,4024968 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 4024930:	d0a04703 	ldbu	r2,-32484(gp)
 4024934:	10803fcc 	andi	r2,r2,255
 4024938:	1000061e 	bne	r2,zero,4024954 <OSSchedUnlock+0x8c>
 402493c:	e0bffa17 	ldw	r2,-24(fp)
 4024940:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024944:	e0bffb17 	ldw	r2,-20(fp)
 4024948:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 402494c:	40257700 	call	4025770 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 4024950:	00000e06 	br	402498c <OSSchedUnlock+0xc4>
 4024954:	e0bffa17 	ldw	r2,-24(fp)
 4024958:	e0bffc15 	stw	r2,-16(fp)
 402495c:	e0bffc17 	ldw	r2,-16(fp)
 4024960:	1001703a 	wrctl	status,r2
 4024964:	00000906 	br	402498c <OSSchedUnlock+0xc4>
 4024968:	e0bffa17 	ldw	r2,-24(fp)
 402496c:	e0bffd15 	stw	r2,-12(fp)
 4024970:	e0bffd17 	ldw	r2,-12(fp)
 4024974:	1001703a 	wrctl	status,r2
 4024978:	00000406 	br	402498c <OSSchedUnlock+0xc4>
 402497c:	e0bffa17 	ldw	r2,-24(fp)
 4024980:	e0bffe15 	stw	r2,-8(fp)
 4024984:	e0bffe17 	ldw	r2,-8(fp)
 4024988:	1001703a 	wrctl	status,r2
 402498c:	0001883a 	nop
 4024990:	e037883a 	mov	sp,fp
 4024994:	dfc00117 	ldw	ra,4(sp)
 4024998:	df000017 	ldw	fp,0(sp)
 402499c:	dec00204 	addi	sp,sp,8
 40249a0:	f800283a 	ret

040249a4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 40249a4:	defffe04 	addi	sp,sp,-8
 40249a8:	dfc00115 	stw	ra,4(sp)
 40249ac:	df000015 	stw	fp,0(sp)
 40249b0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 40249b4:	d0a03943 	ldbu	r2,-32539(gp)
 40249b8:	10803fcc 	andi	r2,r2,255
 40249bc:	10000f1e 	bne	r2,zero,40249fc <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 40249c0:	40258400 	call	4025840 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 40249c4:	d0a03b03 	ldbu	r2,-32532(gp)
 40249c8:	d0a03b45 	stb	r2,-32531(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 40249cc:	d0a03b03 	ldbu	r2,-32532(gp)
 40249d0:	10c03fcc 	andi	r3,r2,255
 40249d4:	00800074 	movhi	r2,1
 40249d8:	10a3bf04 	addi	r2,r2,-28932
 40249dc:	18c7883a 	add	r3,r3,r3
 40249e0:	18c7883a 	add	r3,r3,r3
 40249e4:	10c5883a 	add	r2,r2,r3
 40249e8:	10800017 	ldw	r2,0(r2)
 40249ec:	d0a04315 	stw	r2,-32500(gp)
        OSTCBCur      = OSTCBHighRdy;
 40249f0:	d0a04317 	ldw	r2,-32500(gp)
 40249f4:	d0a04815 	stw	r2,-32480(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 40249f8:	402d0fc0 	call	402d0fc <OSStartHighRdy>
    }
}
 40249fc:	0001883a 	nop
 4024a00:	e037883a 	mov	sp,fp
 4024a04:	dfc00117 	ldw	ra,4(sp)
 4024a08:	df000017 	ldw	fp,0(sp)
 4024a0c:	dec00204 	addi	sp,sp,8
 4024a10:	f800283a 	ret

04024a14 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 4024a14:	defff904 	addi	sp,sp,-28
 4024a18:	dfc00615 	stw	ra,24(sp)
 4024a1c:	df000515 	stw	fp,20(sp)
 4024a20:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4024a24:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 4024a28:	01000084 	movi	r4,2
 4024a2c:	402b1180 	call	402b118 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024a30:	0005303a 	rdctl	r2,status
 4024a34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024a38:	e0fffc17 	ldw	r3,-16(fp)
 4024a3c:	00bfff84 	movi	r2,-2
 4024a40:	1884703a 	and	r2,r3,r2
 4024a44:	1001703a 	wrctl	status,r2
  
  return context;
 4024a48:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 4024a4c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 4024a50:	d0203a15 	stw	zero,-32536(gp)
 4024a54:	e0bffb17 	ldw	r2,-20(fp)
 4024a58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024a5c:	e0bffd17 	ldw	r2,-12(fp)
 4024a60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 4024a64:	01001904 	movi	r4,100
 4024a68:	402b1180 	call	402b118 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024a6c:	0005303a 	rdctl	r2,status
 4024a70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024a74:	e0fffe17 	ldw	r3,-8(fp)
 4024a78:	00bfff84 	movi	r2,-2
 4024a7c:	1884703a 	and	r2,r3,r2
 4024a80:	1001703a 	wrctl	status,r2
  
  return context;
 4024a84:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 4024a88:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 4024a8c:	d0a03a17 	ldw	r2,-32536(gp)
 4024a90:	d0a03f15 	stw	r2,-32516(gp)
    OSStatRdy    = OS_TRUE;
 4024a94:	00800044 	movi	r2,1
 4024a98:	d0a04b05 	stb	r2,-32468(gp)
 4024a9c:	e0bffb17 	ldw	r2,-20(fp)
 4024aa0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024aa4:	e0bfff17 	ldw	r2,-4(fp)
 4024aa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4024aac:	0001883a 	nop
 4024ab0:	e037883a 	mov	sp,fp
 4024ab4:	dfc00117 	ldw	ra,4(sp)
 4024ab8:	df000017 	ldw	fp,0(sp)
 4024abc:	dec00204 	addi	sp,sp,8
 4024ac0:	f800283a 	ret

04024ac4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 4024ac4:	defff704 	addi	sp,sp,-36
 4024ac8:	dfc00815 	stw	ra,32(sp)
 4024acc:	df000715 	stw	fp,28(sp)
 4024ad0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4024ad4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 4024ad8:	402d3240 	call	402d324 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024adc:	0005303a 	rdctl	r2,status
 4024ae0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024ae4:	e0fffd17 	ldw	r3,-12(fp)
 4024ae8:	00bfff84 	movi	r2,-2
 4024aec:	1884703a 	and	r2,r3,r2
 4024af0:	1001703a 	wrctl	status,r2
  
  return context;
 4024af4:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 4024af8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 4024afc:	d0a04917 	ldw	r2,-32476(gp)
 4024b00:	10800044 	addi	r2,r2,1
 4024b04:	d0a04915 	stw	r2,-32476(gp)
 4024b08:	e0bffb17 	ldw	r2,-20(fp)
 4024b0c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024b10:	e0bfff17 	ldw	r2,-4(fp)
 4024b14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 4024b18:	d0a03943 	ldbu	r2,-32539(gp)
 4024b1c:	10803fcc 	andi	r2,r2,255
 4024b20:	10800058 	cmpnei	r2,r2,1
 4024b24:	10006a1e 	bne	r2,zero,4024cd0 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 4024b28:	d0a03d03 	ldbu	r2,-32524(gp)
 4024b2c:	10803fcc 	andi	r2,r2,255
 4024b30:	10c00060 	cmpeqi	r3,r2,1
 4024b34:	1800061e 	bne	r3,zero,4024b50 <OSTimeTick+0x8c>
 4024b38:	10c000a0 	cmpeqi	r3,r2,2
 4024b3c:	1800061e 	bne	r3,zero,4024b58 <OSTimeTick+0x94>
 4024b40:	10000a1e 	bne	r2,zero,4024b6c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 4024b44:	00800044 	movi	r2,1
 4024b48:	e0bffa05 	stb	r2,-24(fp)
                 break;
 4024b4c:	00000b06 	br	4024b7c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 4024b50:	e03ffa05 	stb	zero,-24(fp)
                 break;
 4024b54:	00000906 	br	4024b7c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 4024b58:	00800044 	movi	r2,1
 4024b5c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 4024b60:	00800044 	movi	r2,1
 4024b64:	d0a03d05 	stb	r2,-32524(gp)
                 break;
 4024b68:	00000406 	br	4024b7c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 4024b6c:	00800044 	movi	r2,1
 4024b70:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 4024b74:	d0203d05 	stb	zero,-32524(gp)
                 break;
 4024b78:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 4024b7c:	e0bffa03 	ldbu	r2,-24(fp)
 4024b80:	10005226 	beq	r2,zero,4024ccc <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 4024b84:	d0a03c17 	ldw	r2,-32528(gp)
 4024b88:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4024b8c:	00004906 	br	4024cb4 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024b90:	0005303a 	rdctl	r2,status
 4024b94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024b98:	e0fffc17 	ldw	r3,-16(fp)
 4024b9c:	00bfff84 	movi	r2,-2
 4024ba0:	1884703a 	and	r2,r3,r2
 4024ba4:	1001703a 	wrctl	status,r2
  
  return context;
 4024ba8:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 4024bac:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 4024bb0:	e0bff917 	ldw	r2,-28(fp)
 4024bb4:	10800b8b 	ldhu	r2,46(r2)
 4024bb8:	10bfffcc 	andi	r2,r2,65535
 4024bbc:	10003626 	beq	r2,zero,4024c98 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 4024bc0:	e0bff917 	ldw	r2,-28(fp)
 4024bc4:	10800b8b 	ldhu	r2,46(r2)
 4024bc8:	10bfffc4 	addi	r2,r2,-1
 4024bcc:	1007883a 	mov	r3,r2
 4024bd0:	e0bff917 	ldw	r2,-28(fp)
 4024bd4:	10c00b8d 	sth	r3,46(r2)
 4024bd8:	e0bff917 	ldw	r2,-28(fp)
 4024bdc:	10800b8b 	ldhu	r2,46(r2)
 4024be0:	10bfffcc 	andi	r2,r2,65535
 4024be4:	10002c1e 	bne	r2,zero,4024c98 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 4024be8:	e0bff917 	ldw	r2,-28(fp)
 4024bec:	10800c03 	ldbu	r2,48(r2)
 4024bf0:	10803fcc 	andi	r2,r2,255
 4024bf4:	10800dcc 	andi	r2,r2,55
 4024bf8:	10000b26 	beq	r2,zero,4024c28 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 4024bfc:	e0bff917 	ldw	r2,-28(fp)
 4024c00:	10c00c03 	ldbu	r3,48(r2)
 4024c04:	00bff204 	movi	r2,-56
 4024c08:	1884703a 	and	r2,r3,r2
 4024c0c:	1007883a 	mov	r3,r2
 4024c10:	e0bff917 	ldw	r2,-28(fp)
 4024c14:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 4024c18:	e0bff917 	ldw	r2,-28(fp)
 4024c1c:	00c00044 	movi	r3,1
 4024c20:	10c00c45 	stb	r3,49(r2)
 4024c24:	00000206 	br	4024c30 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 4024c28:	e0bff917 	ldw	r2,-28(fp)
 4024c2c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 4024c30:	e0bff917 	ldw	r2,-28(fp)
 4024c34:	10800c03 	ldbu	r2,48(r2)
 4024c38:	10803fcc 	andi	r2,r2,255
 4024c3c:	1080020c 	andi	r2,r2,8
 4024c40:	1000151e 	bne	r2,zero,4024c98 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 4024c44:	e0bff917 	ldw	r2,-28(fp)
 4024c48:	10c00d83 	ldbu	r3,54(r2)
 4024c4c:	d0a04503 	ldbu	r2,-32492(gp)
 4024c50:	1884b03a 	or	r2,r3,r2
 4024c54:	d0a04505 	stb	r2,-32492(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4024c58:	e0bff917 	ldw	r2,-28(fp)
 4024c5c:	10800d03 	ldbu	r2,52(r2)
 4024c60:	10c03fcc 	andi	r3,r2,255
 4024c64:	e0bff917 	ldw	r2,-28(fp)
 4024c68:	10800d03 	ldbu	r2,52(r2)
 4024c6c:	11003fcc 	andi	r4,r2,255
 4024c70:	d0a04544 	addi	r2,gp,-32491
 4024c74:	2085883a 	add	r2,r4,r2
 4024c78:	11000003 	ldbu	r4,0(r2)
 4024c7c:	e0bff917 	ldw	r2,-28(fp)
 4024c80:	10800d43 	ldbu	r2,53(r2)
 4024c84:	2084b03a 	or	r2,r4,r2
 4024c88:	1009883a 	mov	r4,r2
 4024c8c:	d0a04544 	addi	r2,gp,-32491
 4024c90:	1885883a 	add	r2,r3,r2
 4024c94:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 4024c98:	e0bff917 	ldw	r2,-28(fp)
 4024c9c:	10800517 	ldw	r2,20(r2)
 4024ca0:	e0bff915 	stw	r2,-28(fp)
 4024ca4:	e0bffb17 	ldw	r2,-20(fp)
 4024ca8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024cac:	e0bffe17 	ldw	r2,-8(fp)
 4024cb0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4024cb4:	e0bff917 	ldw	r2,-28(fp)
 4024cb8:	10800c83 	ldbu	r2,50(r2)
 4024cbc:	10803fcc 	andi	r2,r2,255
 4024cc0:	10800518 	cmpnei	r2,r2,20
 4024cc4:	103fb21e 	bne	r2,zero,4024b90 <__flash_rwdata_start+0xffff6f8c>
 4024cc8:	00000106 	br	4024cd0 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 4024ccc:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 4024cd0:	e037883a 	mov	sp,fp
 4024cd4:	dfc00117 	ldw	ra,4(sp)
 4024cd8:	df000017 	ldw	fp,0(sp)
 4024cdc:	dec00204 	addi	sp,sp,8
 4024ce0:	f800283a 	ret

04024ce4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 4024ce4:	deffff04 	addi	sp,sp,-4
 4024ce8:	df000015 	stw	fp,0(sp)
 4024cec:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 4024cf0:	00804784 	movi	r2,286
}
 4024cf4:	e037883a 	mov	sp,fp
 4024cf8:	df000017 	ldw	fp,0(sp)
 4024cfc:	dec00104 	addi	sp,sp,4
 4024d00:	f800283a 	ret

04024d04 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 4024d04:	deffff04 	addi	sp,sp,-4
 4024d08:	df000015 	stw	fp,0(sp)
 4024d0c:	d839883a 	mov	fp,sp
}
 4024d10:	0001883a 	nop
 4024d14:	e037883a 	mov	sp,fp
 4024d18:	df000017 	ldw	fp,0(sp)
 4024d1c:	dec00104 	addi	sp,sp,4
 4024d20:	f800283a 	ret

04024d24 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 4024d24:	defff804 	addi	sp,sp,-32
 4024d28:	dfc00715 	stw	ra,28(sp)
 4024d2c:	df000615 	stw	fp,24(sp)
 4024d30:	df000604 	addi	fp,sp,24
 4024d34:	e13ffc15 	stw	r4,-16(fp)
 4024d38:	e17ffd15 	stw	r5,-12(fp)
 4024d3c:	3007883a 	mov	r3,r6
 4024d40:	3805883a 	mov	r2,r7
 4024d44:	e0fffe05 	stb	r3,-8(fp)
 4024d48:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 4024d4c:	e0bffc17 	ldw	r2,-16(fp)
 4024d50:	10800283 	ldbu	r2,10(r2)
 4024d54:	10c03fcc 	andi	r3,r2,255
 4024d58:	00800034 	movhi	r2,0
 4024d5c:	10801304 	addi	r2,r2,76
 4024d60:	10c5883a 	add	r2,r2,r3
 4024d64:	10800003 	ldbu	r2,0(r2)
 4024d68:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 4024d6c:	e0bffa03 	ldbu	r2,-24(fp)
 4024d70:	e0fffc17 	ldw	r3,-16(fp)
 4024d74:	1885883a 	add	r2,r3,r2
 4024d78:	108002c4 	addi	r2,r2,11
 4024d7c:	10800003 	ldbu	r2,0(r2)
 4024d80:	10c03fcc 	andi	r3,r2,255
 4024d84:	00800034 	movhi	r2,0
 4024d88:	10801304 	addi	r2,r2,76
 4024d8c:	10c5883a 	add	r2,r2,r3
 4024d90:	10800003 	ldbu	r2,0(r2)
 4024d94:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 4024d98:	e0bffa03 	ldbu	r2,-24(fp)
 4024d9c:	100490fa 	slli	r2,r2,3
 4024da0:	1007883a 	mov	r3,r2
 4024da4:	e0bffa43 	ldbu	r2,-23(fp)
 4024da8:	1885883a 	add	r2,r3,r2
 4024dac:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 4024db0:	e0fffa83 	ldbu	r3,-22(fp)
 4024db4:	00800074 	movhi	r2,1
 4024db8:	10a3bf04 	addi	r2,r2,-28932
 4024dbc:	18c7883a 	add	r3,r3,r3
 4024dc0:	18c7883a 	add	r3,r3,r3
 4024dc4:	10c5883a 	add	r2,r2,r3
 4024dc8:	10800017 	ldw	r2,0(r2)
 4024dcc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 4024dd0:	e0bffb17 	ldw	r2,-20(fp)
 4024dd4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 4024dd8:	e0bffb17 	ldw	r2,-20(fp)
 4024ddc:	e0fffd17 	ldw	r3,-12(fp)
 4024de0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 4024de4:	e0bffb17 	ldw	r2,-20(fp)
 4024de8:	10800c03 	ldbu	r2,48(r2)
 4024dec:	1007883a 	mov	r3,r2
 4024df0:	e0bffe03 	ldbu	r2,-8(fp)
 4024df4:	0084303a 	nor	r2,zero,r2
 4024df8:	1884703a 	and	r2,r3,r2
 4024dfc:	1007883a 	mov	r3,r2
 4024e00:	e0bffb17 	ldw	r2,-20(fp)
 4024e04:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 4024e08:	e0bffb17 	ldw	r2,-20(fp)
 4024e0c:	e0ffff03 	ldbu	r3,-4(fp)
 4024e10:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 4024e14:	e0bffb17 	ldw	r2,-20(fp)
 4024e18:	10800c03 	ldbu	r2,48(r2)
 4024e1c:	10803fcc 	andi	r2,r2,255
 4024e20:	1080020c 	andi	r2,r2,8
 4024e24:	1000111e 	bne	r2,zero,4024e6c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 4024e28:	e0bffb17 	ldw	r2,-20(fp)
 4024e2c:	10c00d83 	ldbu	r3,54(r2)
 4024e30:	d0a04503 	ldbu	r2,-32492(gp)
 4024e34:	1884b03a 	or	r2,r3,r2
 4024e38:	d0a04505 	stb	r2,-32492(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 4024e3c:	e0fffa03 	ldbu	r3,-24(fp)
 4024e40:	e13ffa03 	ldbu	r4,-24(fp)
 4024e44:	d0a04544 	addi	r2,gp,-32491
 4024e48:	2085883a 	add	r2,r4,r2
 4024e4c:	11000003 	ldbu	r4,0(r2)
 4024e50:	e0bffb17 	ldw	r2,-20(fp)
 4024e54:	10800d43 	ldbu	r2,53(r2)
 4024e58:	2084b03a 	or	r2,r4,r2
 4024e5c:	1009883a 	mov	r4,r2
 4024e60:	d0a04544 	addi	r2,gp,-32491
 4024e64:	1885883a 	add	r2,r3,r2
 4024e68:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 4024e6c:	e17ffc17 	ldw	r5,-16(fp)
 4024e70:	e13ffb17 	ldw	r4,-20(fp)
 4024e74:	402511c0 	call	402511c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 4024e78:	e0bffb17 	ldw	r2,-20(fp)
 4024e7c:	10800817 	ldw	r2,32(r2)
 4024e80:	10000826 	beq	r2,zero,4024ea4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 4024e84:	e0bffb17 	ldw	r2,-20(fp)
 4024e88:	10800817 	ldw	r2,32(r2)
 4024e8c:	100b883a 	mov	r5,r2
 4024e90:	e13ffb17 	ldw	r4,-20(fp)
 4024e94:	40251d40 	call	40251d4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 4024e98:	e0bffb17 	ldw	r2,-20(fp)
 4024e9c:	e0fffc17 	ldw	r3,-16(fp)
 4024ea0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 4024ea4:	e0bffa83 	ldbu	r2,-22(fp)
}
 4024ea8:	e037883a 	mov	sp,fp
 4024eac:	dfc00117 	ldw	ra,4(sp)
 4024eb0:	df000017 	ldw	fp,0(sp)
 4024eb4:	dec00204 	addi	sp,sp,8
 4024eb8:	f800283a 	ret

04024ebc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 4024ebc:	defffd04 	addi	sp,sp,-12
 4024ec0:	df000215 	stw	fp,8(sp)
 4024ec4:	df000204 	addi	fp,sp,8
 4024ec8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 4024ecc:	d0a04817 	ldw	r2,-32480(gp)
 4024ed0:	e0ffff17 	ldw	r3,-4(fp)
 4024ed4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 4024ed8:	d0a04817 	ldw	r2,-32480(gp)
 4024edc:	10800d03 	ldbu	r2,52(r2)
 4024ee0:	10803fcc 	andi	r2,r2,255
 4024ee4:	d0e04817 	ldw	r3,-32480(gp)
 4024ee8:	18c00d03 	ldbu	r3,52(r3)
 4024eec:	18c03fcc 	andi	r3,r3,255
 4024ef0:	e13fff17 	ldw	r4,-4(fp)
 4024ef4:	20c7883a 	add	r3,r4,r3
 4024ef8:	18c002c4 	addi	r3,r3,11
 4024efc:	19000003 	ldbu	r4,0(r3)
 4024f00:	d0e04817 	ldw	r3,-32480(gp)
 4024f04:	18c00d43 	ldbu	r3,53(r3)
 4024f08:	20c6b03a 	or	r3,r4,r3
 4024f0c:	1809883a 	mov	r4,r3
 4024f10:	e0ffff17 	ldw	r3,-4(fp)
 4024f14:	1885883a 	add	r2,r3,r2
 4024f18:	108002c4 	addi	r2,r2,11
 4024f1c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 4024f20:	e0bfff17 	ldw	r2,-4(fp)
 4024f24:	10c00283 	ldbu	r3,10(r2)
 4024f28:	d0a04817 	ldw	r2,-32480(gp)
 4024f2c:	10800d83 	ldbu	r2,54(r2)
 4024f30:	1884b03a 	or	r2,r3,r2
 4024f34:	1007883a 	mov	r3,r2
 4024f38:	e0bfff17 	ldw	r2,-4(fp)
 4024f3c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 4024f40:	d0a04817 	ldw	r2,-32480(gp)
 4024f44:	10800d03 	ldbu	r2,52(r2)
 4024f48:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 4024f4c:	e0fffe03 	ldbu	r3,-8(fp)
 4024f50:	e13ffe03 	ldbu	r4,-8(fp)
 4024f54:	d0a04544 	addi	r2,gp,-32491
 4024f58:	2085883a 	add	r2,r4,r2
 4024f5c:	10800003 	ldbu	r2,0(r2)
 4024f60:	1009883a 	mov	r4,r2
 4024f64:	d0a04817 	ldw	r2,-32480(gp)
 4024f68:	10800d43 	ldbu	r2,53(r2)
 4024f6c:	0084303a 	nor	r2,zero,r2
 4024f70:	2084703a 	and	r2,r4,r2
 4024f74:	1009883a 	mov	r4,r2
 4024f78:	d0a04544 	addi	r2,gp,-32491
 4024f7c:	1885883a 	add	r2,r3,r2
 4024f80:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4024f84:	e0fffe03 	ldbu	r3,-8(fp)
 4024f88:	d0a04544 	addi	r2,gp,-32491
 4024f8c:	1885883a 	add	r2,r3,r2
 4024f90:	10800003 	ldbu	r2,0(r2)
 4024f94:	10803fcc 	andi	r2,r2,255
 4024f98:	1000071e 	bne	r2,zero,4024fb8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4024f9c:	d0a04817 	ldw	r2,-32480(gp)
 4024fa0:	10800d83 	ldbu	r2,54(r2)
 4024fa4:	0084303a 	nor	r2,zero,r2
 4024fa8:	1007883a 	mov	r3,r2
 4024fac:	d0a04503 	ldbu	r2,-32492(gp)
 4024fb0:	1884703a 	and	r2,r3,r2
 4024fb4:	d0a04505 	stb	r2,-32492(gp)
    }
}
 4024fb8:	0001883a 	nop
 4024fbc:	e037883a 	mov	sp,fp
 4024fc0:	df000017 	ldw	fp,0(sp)
 4024fc4:	dec00104 	addi	sp,sp,4
 4024fc8:	f800283a 	ret

04024fcc <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 4024fcc:	defffb04 	addi	sp,sp,-20
 4024fd0:	df000415 	stw	fp,16(sp)
 4024fd4:	df000404 	addi	fp,sp,16
 4024fd8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 4024fdc:	d0a04817 	ldw	r2,-32480(gp)
 4024fe0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 4024fe4:	d0a04817 	ldw	r2,-32480(gp)
 4024fe8:	e0ffff17 	ldw	r3,-4(fp)
 4024fec:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 4024ff0:	e0bfff17 	ldw	r2,-4(fp)
 4024ff4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 4024ff8:	e0bffc17 	ldw	r2,-16(fp)
 4024ffc:	10800017 	ldw	r2,0(r2)
 4025000:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4025004:	00002006 	br	4025088 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 4025008:	d0a04817 	ldw	r2,-32480(gp)
 402500c:	10800d03 	ldbu	r2,52(r2)
 4025010:	10803fcc 	andi	r2,r2,255
 4025014:	d0e04817 	ldw	r3,-32480(gp)
 4025018:	18c00d03 	ldbu	r3,52(r3)
 402501c:	18c03fcc 	andi	r3,r3,255
 4025020:	e13ffd17 	ldw	r4,-12(fp)
 4025024:	20c7883a 	add	r3,r4,r3
 4025028:	18c002c4 	addi	r3,r3,11
 402502c:	19000003 	ldbu	r4,0(r3)
 4025030:	d0e04817 	ldw	r3,-32480(gp)
 4025034:	18c00d43 	ldbu	r3,53(r3)
 4025038:	20c6b03a 	or	r3,r4,r3
 402503c:	1809883a 	mov	r4,r3
 4025040:	e0fffd17 	ldw	r3,-12(fp)
 4025044:	1885883a 	add	r2,r3,r2
 4025048:	108002c4 	addi	r2,r2,11
 402504c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 4025050:	e0bffd17 	ldw	r2,-12(fp)
 4025054:	10c00283 	ldbu	r3,10(r2)
 4025058:	d0a04817 	ldw	r2,-32480(gp)
 402505c:	10800d83 	ldbu	r2,54(r2)
 4025060:	1884b03a 	or	r2,r3,r2
 4025064:	1007883a 	mov	r3,r2
 4025068:	e0bffd17 	ldw	r2,-12(fp)
 402506c:	10c00285 	stb	r3,10(r2)
        pevents++;
 4025070:	e0bffc17 	ldw	r2,-16(fp)
 4025074:	10800104 	addi	r2,r2,4
 4025078:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 402507c:	e0bffc17 	ldw	r2,-16(fp)
 4025080:	10800017 	ldw	r2,0(r2)
 4025084:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4025088:	e0bffd17 	ldw	r2,-12(fp)
 402508c:	103fde1e 	bne	r2,zero,4025008 <__flash_rwdata_start+0xffff7404>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 4025090:	d0a04817 	ldw	r2,-32480(gp)
 4025094:	10800d03 	ldbu	r2,52(r2)
 4025098:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 402509c:	e0fffe03 	ldbu	r3,-8(fp)
 40250a0:	e13ffe03 	ldbu	r4,-8(fp)
 40250a4:	d0a04544 	addi	r2,gp,-32491
 40250a8:	2085883a 	add	r2,r4,r2
 40250ac:	10800003 	ldbu	r2,0(r2)
 40250b0:	1009883a 	mov	r4,r2
 40250b4:	d0a04817 	ldw	r2,-32480(gp)
 40250b8:	10800d43 	ldbu	r2,53(r2)
 40250bc:	0084303a 	nor	r2,zero,r2
 40250c0:	2084703a 	and	r2,r4,r2
 40250c4:	1009883a 	mov	r4,r2
 40250c8:	d0a04544 	addi	r2,gp,-32491
 40250cc:	1885883a 	add	r2,r3,r2
 40250d0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 40250d4:	e0fffe03 	ldbu	r3,-8(fp)
 40250d8:	d0a04544 	addi	r2,gp,-32491
 40250dc:	1885883a 	add	r2,r3,r2
 40250e0:	10800003 	ldbu	r2,0(r2)
 40250e4:	10803fcc 	andi	r2,r2,255
 40250e8:	1000071e 	bne	r2,zero,4025108 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 40250ec:	d0a04817 	ldw	r2,-32480(gp)
 40250f0:	10800d83 	ldbu	r2,54(r2)
 40250f4:	0084303a 	nor	r2,zero,r2
 40250f8:	1007883a 	mov	r3,r2
 40250fc:	d0a04503 	ldbu	r2,-32492(gp)
 4025100:	1884703a 	and	r2,r3,r2
 4025104:	d0a04505 	stb	r2,-32492(gp)
    }
}
 4025108:	0001883a 	nop
 402510c:	e037883a 	mov	sp,fp
 4025110:	df000017 	ldw	fp,0(sp)
 4025114:	dec00104 	addi	sp,sp,4
 4025118:	f800283a 	ret

0402511c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 402511c:	defffc04 	addi	sp,sp,-16
 4025120:	df000315 	stw	fp,12(sp)
 4025124:	df000304 	addi	fp,sp,12
 4025128:	e13ffe15 	stw	r4,-8(fp)
 402512c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 4025130:	e0bffe17 	ldw	r2,-8(fp)
 4025134:	10800d03 	ldbu	r2,52(r2)
 4025138:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 402513c:	e0bffd03 	ldbu	r2,-12(fp)
 4025140:	e0fffd03 	ldbu	r3,-12(fp)
 4025144:	e13fff17 	ldw	r4,-4(fp)
 4025148:	20c7883a 	add	r3,r4,r3
 402514c:	18c002c4 	addi	r3,r3,11
 4025150:	18c00003 	ldbu	r3,0(r3)
 4025154:	1809883a 	mov	r4,r3
 4025158:	e0fffe17 	ldw	r3,-8(fp)
 402515c:	18c00d43 	ldbu	r3,53(r3)
 4025160:	00c6303a 	nor	r3,zero,r3
 4025164:	20c6703a 	and	r3,r4,r3
 4025168:	1809883a 	mov	r4,r3
 402516c:	e0ffff17 	ldw	r3,-4(fp)
 4025170:	1885883a 	add	r2,r3,r2
 4025174:	108002c4 	addi	r2,r2,11
 4025178:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 402517c:	e0bffd03 	ldbu	r2,-12(fp)
 4025180:	e0ffff17 	ldw	r3,-4(fp)
 4025184:	1885883a 	add	r2,r3,r2
 4025188:	108002c4 	addi	r2,r2,11
 402518c:	10800003 	ldbu	r2,0(r2)
 4025190:	10803fcc 	andi	r2,r2,255
 4025194:	10000a1e 	bne	r2,zero,40251c0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 4025198:	e0bfff17 	ldw	r2,-4(fp)
 402519c:	10800283 	ldbu	r2,10(r2)
 40251a0:	1007883a 	mov	r3,r2
 40251a4:	e0bffe17 	ldw	r2,-8(fp)
 40251a8:	10800d83 	ldbu	r2,54(r2)
 40251ac:	0084303a 	nor	r2,zero,r2
 40251b0:	1884703a 	and	r2,r3,r2
 40251b4:	1007883a 	mov	r3,r2
 40251b8:	e0bfff17 	ldw	r2,-4(fp)
 40251bc:	10c00285 	stb	r3,10(r2)
    }
}
 40251c0:	0001883a 	nop
 40251c4:	e037883a 	mov	sp,fp
 40251c8:	df000017 	ldw	fp,0(sp)
 40251cc:	dec00104 	addi	sp,sp,4
 40251d0:	f800283a 	ret

040251d4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 40251d4:	defffa04 	addi	sp,sp,-24
 40251d8:	df000515 	stw	fp,20(sp)
 40251dc:	df000504 	addi	fp,sp,20
 40251e0:	e13ffe15 	stw	r4,-8(fp)
 40251e4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 40251e8:	e0bffe17 	ldw	r2,-8(fp)
 40251ec:	10800d03 	ldbu	r2,52(r2)
 40251f0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 40251f4:	e0bffe17 	ldw	r2,-8(fp)
 40251f8:	10800d83 	ldbu	r2,54(r2)
 40251fc:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 4025200:	e0bffe17 	ldw	r2,-8(fp)
 4025204:	10800d43 	ldbu	r2,53(r2)
 4025208:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 402520c:	e0bfff17 	ldw	r2,-4(fp)
 4025210:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 4025214:	e0bffb17 	ldw	r2,-20(fp)
 4025218:	10800017 	ldw	r2,0(r2)
 402521c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 4025220:	00002506 	br	40252b8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 4025224:	e0bffd03 	ldbu	r2,-12(fp)
 4025228:	e0fffd03 	ldbu	r3,-12(fp)
 402522c:	e13ffc17 	ldw	r4,-16(fp)
 4025230:	20c7883a 	add	r3,r4,r3
 4025234:	18c002c4 	addi	r3,r3,11
 4025238:	18c00003 	ldbu	r3,0(r3)
 402523c:	1809883a 	mov	r4,r3
 4025240:	e0fffd83 	ldbu	r3,-10(fp)
 4025244:	00c6303a 	nor	r3,zero,r3
 4025248:	20c6703a 	and	r3,r4,r3
 402524c:	1809883a 	mov	r4,r3
 4025250:	e0fffc17 	ldw	r3,-16(fp)
 4025254:	1885883a 	add	r2,r3,r2
 4025258:	108002c4 	addi	r2,r2,11
 402525c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 4025260:	e0bffd03 	ldbu	r2,-12(fp)
 4025264:	e0fffc17 	ldw	r3,-16(fp)
 4025268:	1885883a 	add	r2,r3,r2
 402526c:	108002c4 	addi	r2,r2,11
 4025270:	10800003 	ldbu	r2,0(r2)
 4025274:	10803fcc 	andi	r2,r2,255
 4025278:	1000091e 	bne	r2,zero,40252a0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 402527c:	e0bffc17 	ldw	r2,-16(fp)
 4025280:	10800283 	ldbu	r2,10(r2)
 4025284:	1007883a 	mov	r3,r2
 4025288:	e0bffd43 	ldbu	r2,-11(fp)
 402528c:	0084303a 	nor	r2,zero,r2
 4025290:	1884703a 	and	r2,r3,r2
 4025294:	1007883a 	mov	r3,r2
 4025298:	e0bffc17 	ldw	r2,-16(fp)
 402529c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 40252a0:	e0bffb17 	ldw	r2,-20(fp)
 40252a4:	10800104 	addi	r2,r2,4
 40252a8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 40252ac:	e0bffb17 	ldw	r2,-20(fp)
 40252b0:	10800017 	ldw	r2,0(r2)
 40252b4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 40252b8:	e0bffc17 	ldw	r2,-16(fp)
 40252bc:	103fd91e 	bne	r2,zero,4025224 <__flash_rwdata_start+0xffff7620>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 40252c0:	0001883a 	nop
 40252c4:	e037883a 	mov	sp,fp
 40252c8:	df000017 	ldw	fp,0(sp)
 40252cc:	dec00104 	addi	sp,sp,4
 40252d0:	f800283a 	ret

040252d4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 40252d4:	defffc04 	addi	sp,sp,-16
 40252d8:	df000315 	stw	fp,12(sp)
 40252dc:	df000304 	addi	fp,sp,12
 40252e0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 40252e4:	e0bfff17 	ldw	r2,-4(fp)
 40252e8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 40252ec:	e0bfff17 	ldw	r2,-4(fp)
 40252f0:	108002c4 	addi	r2,r2,11
 40252f4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40252f8:	e03ffe05 	stb	zero,-8(fp)
 40252fc:	00000706 	br	402531c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 4025300:	e0bffd17 	ldw	r2,-12(fp)
 4025304:	10c00044 	addi	r3,r2,1
 4025308:	e0fffd15 	stw	r3,-12(fp)
 402530c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4025310:	e0bffe03 	ldbu	r2,-8(fp)
 4025314:	10800044 	addi	r2,r2,1
 4025318:	e0bffe05 	stb	r2,-8(fp)
 402531c:	e0bffe03 	ldbu	r2,-8(fp)
 4025320:	108000f0 	cmpltui	r2,r2,3
 4025324:	103ff61e 	bne	r2,zero,4025300 <__flash_rwdata_start+0xffff76fc>
        *ptbl++ = 0;
    }
}
 4025328:	0001883a 	nop
 402532c:	e037883a 	mov	sp,fp
 4025330:	df000017 	ldw	fp,0(sp)
 4025334:	dec00104 	addi	sp,sp,4
 4025338:	f800283a 	ret

0402533c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 402533c:	defffb04 	addi	sp,sp,-20
 4025340:	dfc00415 	stw	ra,16(sp)
 4025344:	df000315 	stw	fp,12(sp)
 4025348:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 402534c:	0142d004 	movi	r5,2880
 4025350:	01000034 	movhi	r4,0
 4025354:	211fab04 	addi	r4,r4,32428
 4025358:	40256b40 	call	40256b4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 402535c:	00800034 	movhi	r2,0
 4025360:	109fab04 	addi	r2,r2,32428
 4025364:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 4025368:	00800034 	movhi	r2,0
 402536c:	109fb704 	addi	r2,r2,32476
 4025370:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4025374:	e03ffd0d 	sth	zero,-12(fp)
 4025378:	00001306 	br	40253c8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 402537c:	e0bffe17 	ldw	r2,-8(fp)
 4025380:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 4025384:	e0bffe17 	ldw	r2,-8(fp)
 4025388:	e0ffff17 	ldw	r3,-4(fp)
 402538c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 4025390:	e0bffe17 	ldw	r2,-8(fp)
 4025394:	00c00fc4 	movi	r3,63
 4025398:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 402539c:	e0bffe17 	ldw	r2,-8(fp)
 40253a0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 40253a4:	e0bffe17 	ldw	r2,-8(fp)
 40253a8:	10800c04 	addi	r2,r2,48
 40253ac:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 40253b0:	e0bfff17 	ldw	r2,-4(fp)
 40253b4:	10800c04 	addi	r2,r2,48
 40253b8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 40253bc:	e0bffd0b 	ldhu	r2,-12(fp)
 40253c0:	10800044 	addi	r2,r2,1
 40253c4:	e0bffd0d 	sth	r2,-12(fp)
 40253c8:	e0bffd0b 	ldhu	r2,-12(fp)
 40253cc:	10800ef0 	cmpltui	r2,r2,59
 40253d0:	103fea1e 	bne	r2,zero,402537c <__flash_rwdata_start+0xffff7778>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 40253d4:	e0bffe17 	ldw	r2,-8(fp)
 40253d8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 40253dc:	e0bffe17 	ldw	r2,-8(fp)
 40253e0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 40253e4:	e0bffe17 	ldw	r2,-8(fp)
 40253e8:	00c00fc4 	movi	r3,63
 40253ec:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 40253f0:	e0bffe17 	ldw	r2,-8(fp)
 40253f4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 40253f8:	00800034 	movhi	r2,0
 40253fc:	109fab04 	addi	r2,r2,32428
 4025400:	d0a04615 	stw	r2,-32488(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 4025404:	0001883a 	nop
 4025408:	e037883a 	mov	sp,fp
 402540c:	dfc00117 	ldw	ra,4(sp)
 4025410:	df000017 	ldw	fp,0(sp)
 4025414:	dec00204 	addi	sp,sp,8
 4025418:	f800283a 	ret

0402541c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 402541c:	deffff04 	addi	sp,sp,-4
 4025420:	df000015 	stw	fp,0(sp)
 4025424:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 4025428:	d0204915 	stw	zero,-32476(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 402542c:	d0204705 	stb	zero,-32484(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 4025430:	d0203905 	stb	zero,-32540(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 4025434:	d0204145 	stb	zero,-32507(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 4025438:	d0203945 	stb	zero,-32539(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 402543c:	d0203e15 	stw	zero,-32520(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 4025440:	d0203a15 	stw	zero,-32536(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 4025444:	d0204c15 	stw	zero,-32464(gp)
    OSIdleCtrMax  = 0L;
 4025448:	d0203f15 	stw	zero,-32516(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 402544c:	d0204b05 	stb	zero,-32468(gp)
#endif
}
 4025450:	0001883a 	nop
 4025454:	e037883a 	mov	sp,fp
 4025458:	df000017 	ldw	fp,0(sp)
 402545c:	dec00104 	addi	sp,sp,4
 4025460:	f800283a 	ret

04025464 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 4025464:	defffd04 	addi	sp,sp,-12
 4025468:	df000215 	stw	fp,8(sp)
 402546c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 4025470:	d0204505 	stb	zero,-32492(gp)
    prdytbl       = &OSRdyTbl[0];
 4025474:	d0a04544 	addi	r2,gp,-32491
 4025478:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 402547c:	e03ffe05 	stb	zero,-8(fp)
 4025480:	00000706 	br	40254a0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 4025484:	e0bfff17 	ldw	r2,-4(fp)
 4025488:	10c00044 	addi	r3,r2,1
 402548c:	e0ffff15 	stw	r3,-4(fp)
 4025490:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 4025494:	e0bffe03 	ldbu	r2,-8(fp)
 4025498:	10800044 	addi	r2,r2,1
 402549c:	e0bffe05 	stb	r2,-8(fp)
 40254a0:	e0bffe03 	ldbu	r2,-8(fp)
 40254a4:	108000f0 	cmpltui	r2,r2,3
 40254a8:	103ff61e 	bne	r2,zero,4025484 <__flash_rwdata_start+0xffff7880>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 40254ac:	d0203b45 	stb	zero,-32531(gp)
    OSPrioHighRdy = 0;
 40254b0:	d0203b05 	stb	zero,-32532(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 40254b4:	d0204315 	stw	zero,-32500(gp)
    OSTCBCur      = (OS_TCB *)0;
 40254b8:	d0204815 	stw	zero,-32480(gp)
}
 40254bc:	0001883a 	nop
 40254c0:	e037883a 	mov	sp,fp
 40254c4:	df000017 	ldw	fp,0(sp)
 40254c8:	dec00104 	addi	sp,sp,4
 40254cc:	f800283a 	ret

040254d0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 40254d0:	defff804 	addi	sp,sp,-32
 40254d4:	dfc00715 	stw	ra,28(sp)
 40254d8:	df000615 	stw	fp,24(sp)
 40254dc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 40254e0:	008000c4 	movi	r2,3
 40254e4:	d8800415 	stw	r2,16(sp)
 40254e8:	d8000315 	stw	zero,12(sp)
 40254ec:	00808004 	movi	r2,512
 40254f0:	d8800215 	stw	r2,8(sp)
 40254f4:	00800034 	movhi	r2,0
 40254f8:	109dab04 	addi	r2,r2,30380
 40254fc:	d8800115 	stw	r2,4(sp)
 4025500:	00bfffd4 	movui	r2,65535
 4025504:	d8800015 	stw	r2,0(sp)
 4025508:	01c00504 	movi	r7,20
 402550c:	01800034 	movhi	r6,0
 4025510:	319faa04 	addi	r6,r6,32424
 4025514:	000b883a 	mov	r5,zero
 4025518:	010100b4 	movhi	r4,1026
 402551c:	21165f04 	addi	r4,r4,22908
 4025520:	402a0480 	call	402a048 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 4025524:	e1bfff04 	addi	r6,fp,-4
 4025528:	01400034 	movhi	r5,0
 402552c:	29405304 	addi	r5,r5,332
 4025530:	01000504 	movi	r4,20
 4025534:	402a8580 	call	402a858 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 4025538:	0001883a 	nop
 402553c:	e037883a 	mov	sp,fp
 4025540:	dfc00117 	ldw	ra,4(sp)
 4025544:	df000017 	ldw	fp,0(sp)
 4025548:	dec00204 	addi	sp,sp,8
 402554c:	f800283a 	ret

04025550 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 4025550:	defff804 	addi	sp,sp,-32
 4025554:	dfc00715 	stw	ra,28(sp)
 4025558:	df000615 	stw	fp,24(sp)
 402555c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 4025560:	008000c4 	movi	r2,3
 4025564:	d8800415 	stw	r2,16(sp)
 4025568:	d8000315 	stw	zero,12(sp)
 402556c:	00808004 	movi	r2,512
 4025570:	d8800215 	stw	r2,8(sp)
 4025574:	00800034 	movhi	r2,0
 4025578:	109b3304 	addi	r2,r2,27852
 402557c:	d8800115 	stw	r2,4(sp)
 4025580:	00bfff94 	movui	r2,65534
 4025584:	d8800015 	stw	r2,0(sp)
 4025588:	01c004c4 	movi	r7,19
 402558c:	01800034 	movhi	r6,0
 4025590:	319d3204 	addi	r6,r6,29896
 4025594:	000b883a 	mov	r5,zero
 4025598:	010100b4 	movhi	r4,1026
 402559c:	21167604 	addi	r4,r4,23000
 40255a0:	402a0480 	call	402a048 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 40255a4:	e1bfff04 	addi	r6,fp,-4
 40255a8:	01400034 	movhi	r5,0
 40255ac:	29405704 	addi	r5,r5,348
 40255b0:	010004c4 	movi	r4,19
 40255b4:	402a8580 	call	402a858 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 40255b8:	0001883a 	nop
 40255bc:	e037883a 	mov	sp,fp
 40255c0:	dfc00117 	ldw	ra,4(sp)
 40255c4:	df000017 	ldw	fp,0(sp)
 40255c8:	dec00204 	addi	sp,sp,8
 40255cc:	f800283a 	ret

040255d0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 40255d0:	defffb04 	addi	sp,sp,-20
 40255d4:	dfc00415 	stw	ra,16(sp)
 40255d8:	df000315 	stw	fp,12(sp)
 40255dc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 40255e0:	01414404 	movi	r5,1296
 40255e4:	01000074 	movhi	r4,1
 40255e8:	21227b04 	addi	r4,r4,-30228
 40255ec:	40256b40 	call	40256b4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 40255f0:	01401504 	movi	r5,84
 40255f4:	01000074 	movhi	r4,1
 40255f8:	2123bf04 	addi	r4,r4,-28932
 40255fc:	40256b40 	call	40256b4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 4025600:	00800074 	movhi	r2,1
 4025604:	10a27b04 	addi	r2,r2,-30228
 4025608:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 402560c:	00800074 	movhi	r2,1
 4025610:	10a29604 	addi	r2,r2,-30120
 4025614:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 4025618:	e03ffd05 	stb	zero,-12(fp)
 402561c:	00001106 	br	4025664 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 4025620:	e0bffe17 	ldw	r2,-8(fp)
 4025624:	e0ffff17 	ldw	r3,-4(fp)
 4025628:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 402562c:	e0bffe17 	ldw	r2,-8(fp)
 4025630:	00c00fc4 	movi	r3,63
 4025634:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4025638:	e0bffe17 	ldw	r2,-8(fp)
 402563c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 4025640:	e0bffe17 	ldw	r2,-8(fp)
 4025644:	10801b04 	addi	r2,r2,108
 4025648:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 402564c:	e0bfff17 	ldw	r2,-4(fp)
 4025650:	10801b04 	addi	r2,r2,108
 4025654:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 4025658:	e0bffd03 	ldbu	r2,-12(fp)
 402565c:	10800044 	addi	r2,r2,1
 4025660:	e0bffd05 	stb	r2,-12(fp)
 4025664:	e0bffd03 	ldbu	r2,-12(fp)
 4025668:	108002f0 	cmpltui	r2,r2,11
 402566c:	103fec1e 	bne	r2,zero,4025620 <__flash_rwdata_start+0xffff7a1c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 4025670:	e0bffe17 	ldw	r2,-8(fp)
 4025674:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 4025678:	e0bffe17 	ldw	r2,-8(fp)
 402567c:	00c00fc4 	movi	r3,63
 4025680:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4025684:	e0bffe17 	ldw	r2,-8(fp)
 4025688:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 402568c:	d0203c15 	stw	zero,-32528(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 4025690:	00800074 	movhi	r2,1
 4025694:	10a27b04 	addi	r2,r2,-30228
 4025698:	d0a04015 	stw	r2,-32512(gp)
}
 402569c:	0001883a 	nop
 40256a0:	e037883a 	mov	sp,fp
 40256a4:	dfc00117 	ldw	ra,4(sp)
 40256a8:	df000017 	ldw	fp,0(sp)
 40256ac:	dec00204 	addi	sp,sp,8
 40256b0:	f800283a 	ret

040256b4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 40256b4:	defffd04 	addi	sp,sp,-12
 40256b8:	df000215 	stw	fp,8(sp)
 40256bc:	df000204 	addi	fp,sp,8
 40256c0:	e13ffe15 	stw	r4,-8(fp)
 40256c4:	2805883a 	mov	r2,r5
 40256c8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 40256cc:	00000706 	br	40256ec <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 40256d0:	e0bffe17 	ldw	r2,-8(fp)
 40256d4:	10c00044 	addi	r3,r2,1
 40256d8:	e0fffe15 	stw	r3,-8(fp)
 40256dc:	10000005 	stb	zero,0(r2)
        size--;
 40256e0:	e0bfff0b 	ldhu	r2,-4(fp)
 40256e4:	10bfffc4 	addi	r2,r2,-1
 40256e8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 40256ec:	e0bfff0b 	ldhu	r2,-4(fp)
 40256f0:	103ff71e 	bne	r2,zero,40256d0 <__flash_rwdata_start+0xffff7acc>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 40256f4:	0001883a 	nop
 40256f8:	e037883a 	mov	sp,fp
 40256fc:	df000017 	ldw	fp,0(sp)
 4025700:	dec00104 	addi	sp,sp,4
 4025704:	f800283a 	ret

04025708 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 4025708:	defffc04 	addi	sp,sp,-16
 402570c:	df000315 	stw	fp,12(sp)
 4025710:	df000304 	addi	fp,sp,12
 4025714:	e13ffd15 	stw	r4,-12(fp)
 4025718:	e17ffe15 	stw	r5,-8(fp)
 402571c:	3005883a 	mov	r2,r6
 4025720:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 4025724:	00000b06 	br	4025754 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 4025728:	e0bffd17 	ldw	r2,-12(fp)
 402572c:	10c00044 	addi	r3,r2,1
 4025730:	e0fffd15 	stw	r3,-12(fp)
 4025734:	e0fffe17 	ldw	r3,-8(fp)
 4025738:	19000044 	addi	r4,r3,1
 402573c:	e13ffe15 	stw	r4,-8(fp)
 4025740:	18c00003 	ldbu	r3,0(r3)
 4025744:	10c00005 	stb	r3,0(r2)
        size--;
 4025748:	e0bfff0b 	ldhu	r2,-4(fp)
 402574c:	10bfffc4 	addi	r2,r2,-1
 4025750:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 4025754:	e0bfff0b 	ldhu	r2,-4(fp)
 4025758:	103ff31e 	bne	r2,zero,4025728 <__flash_rwdata_start+0xffff7b24>
        *pdest++ = *psrc++;
        size--;
    }
}
 402575c:	0001883a 	nop
 4025760:	e037883a 	mov	sp,fp
 4025764:	df000017 	ldw	fp,0(sp)
 4025768:	dec00104 	addi	sp,sp,4
 402576c:	f800283a 	ret

04025770 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 4025770:	defffb04 	addi	sp,sp,-20
 4025774:	dfc00415 	stw	ra,16(sp)
 4025778:	df000315 	stw	fp,12(sp)
 402577c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4025780:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4025784:	0005303a 	rdctl	r2,status
 4025788:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402578c:	e0ffff17 	ldw	r3,-4(fp)
 4025790:	00bfff84 	movi	r2,-2
 4025794:	1884703a 	and	r2,r3,r2
 4025798:	1001703a 	wrctl	status,r2
  
  return context;
 402579c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 40257a0:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 40257a4:	d0a04703 	ldbu	r2,-32484(gp)
 40257a8:	10803fcc 	andi	r2,r2,255
 40257ac:	10001a1e 	bne	r2,zero,4025818 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 40257b0:	d0a03903 	ldbu	r2,-32540(gp)
 40257b4:	10803fcc 	andi	r2,r2,255
 40257b8:	1000171e 	bne	r2,zero,4025818 <OS_Sched+0xa8>
            OS_SchedNew();
 40257bc:	40258400 	call	4025840 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 40257c0:	d0e03b03 	ldbu	r3,-32532(gp)
 40257c4:	d0a03b43 	ldbu	r2,-32531(gp)
 40257c8:	18c03fcc 	andi	r3,r3,255
 40257cc:	10803fcc 	andi	r2,r2,255
 40257d0:	18801126 	beq	r3,r2,4025818 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 40257d4:	d0a03b03 	ldbu	r2,-32532(gp)
 40257d8:	10c03fcc 	andi	r3,r2,255
 40257dc:	00800074 	movhi	r2,1
 40257e0:	10a3bf04 	addi	r2,r2,-28932
 40257e4:	18c7883a 	add	r3,r3,r3
 40257e8:	18c7883a 	add	r3,r3,r3
 40257ec:	10c5883a 	add	r2,r2,r3
 40257f0:	10800017 	ldw	r2,0(r2)
 40257f4:	d0a04315 	stw	r2,-32500(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 40257f8:	d0a04317 	ldw	r2,-32500(gp)
 40257fc:	10c00e17 	ldw	r3,56(r2)
 4025800:	18c00044 	addi	r3,r3,1
 4025804:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 4025808:	d0a03e17 	ldw	r2,-32520(gp)
 402580c:	10800044 	addi	r2,r2,1
 4025810:	d0a03e15 	stw	r2,-32520(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 4025814:	402d0700 	call	402d070 <OSCtxSw>
 4025818:	e0bffd17 	ldw	r2,-12(fp)
 402581c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4025820:	e0bffe17 	ldw	r2,-8(fp)
 4025824:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 4025828:	0001883a 	nop
 402582c:	e037883a 	mov	sp,fp
 4025830:	dfc00117 	ldw	ra,4(sp)
 4025834:	df000017 	ldw	fp,0(sp)
 4025838:	dec00204 	addi	sp,sp,8
 402583c:	f800283a 	ret

04025840 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 4025840:	defffe04 	addi	sp,sp,-8
 4025844:	df000115 	stw	fp,4(sp)
 4025848:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 402584c:	d0a04503 	ldbu	r2,-32492(gp)
 4025850:	10c03fcc 	andi	r3,r2,255
 4025854:	00800034 	movhi	r2,0
 4025858:	10801304 	addi	r2,r2,76
 402585c:	10c5883a 	add	r2,r2,r3
 4025860:	10800003 	ldbu	r2,0(r2)
 4025864:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 4025868:	e0bfff03 	ldbu	r2,-4(fp)
 402586c:	100490fa 	slli	r2,r2,3
 4025870:	1009883a 	mov	r4,r2
 4025874:	e0ffff03 	ldbu	r3,-4(fp)
 4025878:	d0a04544 	addi	r2,gp,-32491
 402587c:	1885883a 	add	r2,r3,r2
 4025880:	10800003 	ldbu	r2,0(r2)
 4025884:	10c03fcc 	andi	r3,r2,255
 4025888:	00800034 	movhi	r2,0
 402588c:	10801304 	addi	r2,r2,76
 4025890:	10c5883a 	add	r2,r2,r3
 4025894:	10800003 	ldbu	r2,0(r2)
 4025898:	2085883a 	add	r2,r4,r2
 402589c:	d0a03b05 	stb	r2,-32532(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 40258a0:	0001883a 	nop
 40258a4:	e037883a 	mov	sp,fp
 40258a8:	df000017 	ldw	fp,0(sp)
 40258ac:	dec00104 	addi	sp,sp,4
 40258b0:	f800283a 	ret

040258b4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 40258b4:	defffc04 	addi	sp,sp,-16
 40258b8:	df000315 	stw	fp,12(sp)
 40258bc:	df000304 	addi	fp,sp,12
 40258c0:	e13ffe15 	stw	r4,-8(fp)
 40258c4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 40258c8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 40258cc:	00000b06 	br	40258fc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 40258d0:	e0bffe17 	ldw	r2,-8(fp)
 40258d4:	10c00044 	addi	r3,r2,1
 40258d8:	e0fffe15 	stw	r3,-8(fp)
 40258dc:	e0ffff17 	ldw	r3,-4(fp)
 40258e0:	19000044 	addi	r4,r3,1
 40258e4:	e13fff15 	stw	r4,-4(fp)
 40258e8:	18c00003 	ldbu	r3,0(r3)
 40258ec:	10c00005 	stb	r3,0(r2)
        len++;
 40258f0:	e0bffd03 	ldbu	r2,-12(fp)
 40258f4:	10800044 	addi	r2,r2,1
 40258f8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 40258fc:	e0bfff17 	ldw	r2,-4(fp)
 4025900:	10800003 	ldbu	r2,0(r2)
 4025904:	10803fcc 	andi	r2,r2,255
 4025908:	103ff11e 	bne	r2,zero,40258d0 <__flash_rwdata_start+0xffff7ccc>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 402590c:	e0bffe17 	ldw	r2,-8(fp)
 4025910:	10000005 	stb	zero,0(r2)
    return (len);
 4025914:	e0bffd03 	ldbu	r2,-12(fp)
}
 4025918:	e037883a 	mov	sp,fp
 402591c:	df000017 	ldw	fp,0(sp)
 4025920:	dec00104 	addi	sp,sp,4
 4025924:	f800283a 	ret

04025928 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 4025928:	defffd04 	addi	sp,sp,-12
 402592c:	df000215 	stw	fp,8(sp)
 4025930:	df000204 	addi	fp,sp,8
 4025934:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 4025938:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 402593c:	00000606 	br	4025958 <OS_StrLen+0x30>
        psrc++;
 4025940:	e0bfff17 	ldw	r2,-4(fp)
 4025944:	10800044 	addi	r2,r2,1
 4025948:	e0bfff15 	stw	r2,-4(fp)
        len++;
 402594c:	e0bffe03 	ldbu	r2,-8(fp)
 4025950:	10800044 	addi	r2,r2,1
 4025954:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 4025958:	e0bfff17 	ldw	r2,-4(fp)
 402595c:	10800003 	ldbu	r2,0(r2)
 4025960:	10803fcc 	andi	r2,r2,255
 4025964:	103ff61e 	bne	r2,zero,4025940 <__flash_rwdata_start+0xffff7d3c>
        psrc++;
        len++;
    }
    return (len);
 4025968:	e0bffe03 	ldbu	r2,-8(fp)
}
 402596c:	e037883a 	mov	sp,fp
 4025970:	df000017 	ldw	fp,0(sp)
 4025974:	dec00104 	addi	sp,sp,4
 4025978:	f800283a 	ret

0402597c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 402597c:	defffa04 	addi	sp,sp,-24
 4025980:	dfc00515 	stw	ra,20(sp)
 4025984:	df000415 	stw	fp,16(sp)
 4025988:	df000404 	addi	fp,sp,16
 402598c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4025990:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4025994:	0005303a 	rdctl	r2,status
 4025998:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402599c:	e0fffd17 	ldw	r3,-12(fp)
 40259a0:	00bfff84 	movi	r2,-2
 40259a4:	1884703a 	and	r2,r3,r2
 40259a8:	1001703a 	wrctl	status,r2
  
  return context;
 40259ac:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 40259b0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 40259b4:	d0a03a17 	ldw	r2,-32536(gp)
 40259b8:	10800044 	addi	r2,r2,1
 40259bc:	d0a03a15 	stw	r2,-32536(gp)
 40259c0:	e0bffc17 	ldw	r2,-16(fp)
 40259c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40259c8:	e0bffe17 	ldw	r2,-8(fp)
 40259cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 40259d0:	402d3840 	call	402d384 <OSTaskIdleHook>
    }
 40259d4:	003fef06 	br	4025994 <__flash_rwdata_start+0xffff7d90>

040259d8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 40259d8:	defffa04 	addi	sp,sp,-24
 40259dc:	dfc00515 	stw	ra,20(sp)
 40259e0:	df000415 	stw	fp,16(sp)
 40259e4:	df000404 	addi	fp,sp,16
 40259e8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40259ec:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 40259f0:	00000206 	br	40259fc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 40259f4:	01003204 	movi	r4,200
 40259f8:	402b1180 	call	402b118 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 40259fc:	d0a04b03 	ldbu	r2,-32468(gp)
 4025a00:	10803fcc 	andi	r2,r2,255
 4025a04:	103ffb26 	beq	r2,zero,40259f4 <__flash_rwdata_start+0xffff7df0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 4025a08:	d0a03f17 	ldw	r2,-32516(gp)
 4025a0c:	01401904 	movi	r5,100
 4025a10:	1009883a 	mov	r4,r2
 4025a14:	40230b00 	call	40230b0 <__udivsi3>
 4025a18:	d0a03f15 	stw	r2,-32516(gp)
    if (OSIdleCtrMax == 0L) {
 4025a1c:	d0a03f17 	ldw	r2,-32516(gp)
 4025a20:	1000031e 	bne	r2,zero,4025a30 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 4025a24:	d0204105 	stb	zero,-32508(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 4025a28:	01003fc4 	movi	r4,255
 4025a2c:	402ada00 	call	402ada0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4025a30:	0005303a 	rdctl	r2,status
 4025a34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4025a38:	e0fffd17 	ldw	r3,-12(fp)
 4025a3c:	00bfff84 	movi	r2,-2
 4025a40:	1884703a 	and	r2,r3,r2
 4025a44:	1001703a 	wrctl	status,r2
  
  return context;
 4025a48:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 4025a4c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 4025a50:	d0a03a17 	ldw	r2,-32536(gp)
 4025a54:	d0a04c15 	stw	r2,-32464(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 4025a58:	d0203a15 	stw	zero,-32536(gp)
 4025a5c:	e0bffc17 	ldw	r2,-16(fp)
 4025a60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4025a64:	e0bffe17 	ldw	r2,-8(fp)
 4025a68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 4025a6c:	d0a04c17 	ldw	r2,-32464(gp)
 4025a70:	d0e03f17 	ldw	r3,-32516(gp)
 4025a74:	180b883a 	mov	r5,r3
 4025a78:	1009883a 	mov	r4,r2
 4025a7c:	40230b00 	call	40230b0 <__udivsi3>
 4025a80:	1007883a 	mov	r3,r2
 4025a84:	00801904 	movi	r2,100
 4025a88:	10c5c83a 	sub	r2,r2,r3
 4025a8c:	d0a04105 	stb	r2,-32508(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 4025a90:	402d3040 	call	402d304 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 4025a94:	4025aa40 	call	4025aa4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 4025a98:	01001904 	movi	r4,100
 4025a9c:	402b1180 	call	402b118 <OSTimeDly>
    }
 4025aa0:	003fe306 	br	4025a30 <__flash_rwdata_start+0xffff7e2c>

04025aa4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 4025aa4:	defffa04 	addi	sp,sp,-24
 4025aa8:	dfc00515 	stw	ra,20(sp)
 4025aac:	df000415 	stw	fp,16(sp)
 4025ab0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4025ab4:	e03ffc05 	stb	zero,-16(fp)
 4025ab8:	00002406 	br	4025b4c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 4025abc:	e0bffc03 	ldbu	r2,-16(fp)
 4025ac0:	e0fffe04 	addi	r3,fp,-8
 4025ac4:	180b883a 	mov	r5,r3
 4025ac8:	1009883a 	mov	r4,r2
 4025acc:	402abe00 	call	402abe0 <OSTaskStkChk>
 4025ad0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 4025ad4:	e0bffc43 	ldbu	r2,-15(fp)
 4025ad8:	1000191e 	bne	r2,zero,4025b40 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 4025adc:	e0fffc03 	ldbu	r3,-16(fp)
 4025ae0:	00800074 	movhi	r2,1
 4025ae4:	10a3bf04 	addi	r2,r2,-28932
 4025ae8:	18c7883a 	add	r3,r3,r3
 4025aec:	18c7883a 	add	r3,r3,r3
 4025af0:	10c5883a 	add	r2,r2,r3
 4025af4:	10800017 	ldw	r2,0(r2)
 4025af8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 4025afc:	e0bffd17 	ldw	r2,-12(fp)
 4025b00:	10000f26 	beq	r2,zero,4025b40 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 4025b04:	e0bffd17 	ldw	r2,-12(fp)
 4025b08:	10800060 	cmpeqi	r2,r2,1
 4025b0c:	10000c1e 	bne	r2,zero,4025b40 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 4025b10:	e0bffd17 	ldw	r2,-12(fp)
 4025b14:	10c00217 	ldw	r3,8(r2)
 4025b18:	e0bffd17 	ldw	r2,-12(fp)
 4025b1c:	10800317 	ldw	r2,12(r2)
 4025b20:	1085883a 	add	r2,r2,r2
 4025b24:	1085883a 	add	r2,r2,r2
 4025b28:	1887883a 	add	r3,r3,r2
 4025b2c:	e0bffd17 	ldw	r2,-12(fp)
 4025b30:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 4025b34:	e0ffff17 	ldw	r3,-4(fp)
 4025b38:	e0bffd17 	ldw	r2,-12(fp)
 4025b3c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4025b40:	e0bffc03 	ldbu	r2,-16(fp)
 4025b44:	10800044 	addi	r2,r2,1
 4025b48:	e0bffc05 	stb	r2,-16(fp)
 4025b4c:	e0bffc03 	ldbu	r2,-16(fp)
 4025b50:	10800570 	cmpltui	r2,r2,21
 4025b54:	103fd91e 	bne	r2,zero,4025abc <__flash_rwdata_start+0xffff7eb8>
#endif
                }
            }
        }
    }
}
 4025b58:	0001883a 	nop
 4025b5c:	e037883a 	mov	sp,fp
 4025b60:	dfc00117 	ldw	ra,4(sp)
 4025b64:	df000017 	ldw	fp,0(sp)
 4025b68:	dec00204 	addi	sp,sp,8
 4025b6c:	f800283a 	ret

04025b70 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 4025b70:	defff204 	addi	sp,sp,-56
 4025b74:	dfc00d15 	stw	ra,52(sp)
 4025b78:	df000c15 	stw	fp,48(sp)
 4025b7c:	df000c04 	addi	fp,sp,48
 4025b80:	e17ffc15 	stw	r5,-16(fp)
 4025b84:	e1bffd15 	stw	r6,-12(fp)
 4025b88:	3807883a 	mov	r3,r7
 4025b8c:	e0800417 	ldw	r2,16(fp)
 4025b90:	e13ffb05 	stb	r4,-20(fp)
 4025b94:	e0fffe0d 	sth	r3,-8(fp)
 4025b98:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4025b9c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4025ba0:	0005303a 	rdctl	r2,status
 4025ba4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4025ba8:	e0fffa17 	ldw	r3,-24(fp)
 4025bac:	00bfff84 	movi	r2,-2
 4025bb0:	1884703a 	and	r2,r3,r2
 4025bb4:	1001703a 	wrctl	status,r2
  
  return context;
 4025bb8:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 4025bbc:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 4025bc0:	d0a04017 	ldw	r2,-32512(gp)
 4025bc4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 4025bc8:	e0bff617 	ldw	r2,-40(fp)
 4025bcc:	10009326 	beq	r2,zero,4025e1c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 4025bd0:	e0bff617 	ldw	r2,-40(fp)
 4025bd4:	10800517 	ldw	r2,20(r2)
 4025bd8:	d0a04015 	stw	r2,-32512(gp)
 4025bdc:	e0bff417 	ldw	r2,-48(fp)
 4025be0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4025be4:	e0bff817 	ldw	r2,-32(fp)
 4025be8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 4025bec:	e0bff617 	ldw	r2,-40(fp)
 4025bf0:	e0fffc17 	ldw	r3,-16(fp)
 4025bf4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 4025bf8:	e0bff617 	ldw	r2,-40(fp)
 4025bfc:	e0fffb03 	ldbu	r3,-20(fp)
 4025c00:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 4025c04:	e0bff617 	ldw	r2,-40(fp)
 4025c08:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 4025c0c:	e0bff617 	ldw	r2,-40(fp)
 4025c10:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 4025c14:	e0bff617 	ldw	r2,-40(fp)
 4025c18:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 4025c1c:	e0bff617 	ldw	r2,-40(fp)
 4025c20:	e0c00317 	ldw	r3,12(fp)
 4025c24:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 4025c28:	e0bff617 	ldw	r2,-40(fp)
 4025c2c:	e0c00217 	ldw	r3,8(fp)
 4025c30:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 4025c34:	e0bff617 	ldw	r2,-40(fp)
 4025c38:	e0fffd17 	ldw	r3,-12(fp)
 4025c3c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 4025c40:	e0bff617 	ldw	r2,-40(fp)
 4025c44:	e0ffff0b 	ldhu	r3,-4(fp)
 4025c48:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 4025c4c:	e0bff617 	ldw	r2,-40(fp)
 4025c50:	e0fffe0b 	ldhu	r3,-8(fp)
 4025c54:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 4025c58:	e0bff617 	ldw	r2,-40(fp)
 4025c5c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 4025c60:	e0bffb03 	ldbu	r2,-20(fp)
 4025c64:	1004d0fa 	srli	r2,r2,3
 4025c68:	1007883a 	mov	r3,r2
 4025c6c:	e0bff617 	ldw	r2,-40(fp)
 4025c70:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 4025c74:	e0bffb03 	ldbu	r2,-20(fp)
 4025c78:	108001cc 	andi	r2,r2,7
 4025c7c:	1007883a 	mov	r3,r2
 4025c80:	e0bff617 	ldw	r2,-40(fp)
 4025c84:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 4025c88:	e0bff617 	ldw	r2,-40(fp)
 4025c8c:	10800d03 	ldbu	r2,52(r2)
 4025c90:	10803fcc 	andi	r2,r2,255
 4025c94:	00c00044 	movi	r3,1
 4025c98:	1884983a 	sll	r2,r3,r2
 4025c9c:	1007883a 	mov	r3,r2
 4025ca0:	e0bff617 	ldw	r2,-40(fp)
 4025ca4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 4025ca8:	e0bff617 	ldw	r2,-40(fp)
 4025cac:	10800cc3 	ldbu	r2,51(r2)
 4025cb0:	10803fcc 	andi	r2,r2,255
 4025cb4:	00c00044 	movi	r3,1
 4025cb8:	1884983a 	sll	r2,r3,r2
 4025cbc:	1007883a 	mov	r3,r2
 4025cc0:	e0bff617 	ldw	r2,-40(fp)
 4025cc4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 4025cc8:	e0bff617 	ldw	r2,-40(fp)
 4025ccc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 4025cd0:	e0bff617 	ldw	r2,-40(fp)
 4025cd4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 4025cd8:	e0bff617 	ldw	r2,-40(fp)
 4025cdc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 4025ce0:	e0bff617 	ldw	r2,-40(fp)
 4025ce4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 4025ce8:	e0bff617 	ldw	r2,-40(fp)
 4025cec:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 4025cf0:	e0bff617 	ldw	r2,-40(fp)
 4025cf4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 4025cf8:	e0bff617 	ldw	r2,-40(fp)
 4025cfc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 4025d00:	e0bff617 	ldw	r2,-40(fp)
 4025d04:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 4025d08:	e0bff617 	ldw	r2,-40(fp)
 4025d0c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 4025d10:	e0bff617 	ldw	r2,-40(fp)
 4025d14:	00c00fc4 	movi	r3,63
 4025d18:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4025d1c:	e0bff617 	ldw	r2,-40(fp)
 4025d20:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 4025d24:	e13ff617 	ldw	r4,-40(fp)
 4025d28:	402d3a40 	call	402d3a4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 4025d2c:	e13ff617 	ldw	r4,-40(fp)
 4025d30:	402d29c0 	call	402d29c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4025d34:	0005303a 	rdctl	r2,status
 4025d38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4025d3c:	e0fff517 	ldw	r3,-44(fp)
 4025d40:	00bfff84 	movi	r2,-2
 4025d44:	1884703a 	and	r2,r3,r2
 4025d48:	1001703a 	wrctl	status,r2
  
  return context;
 4025d4c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 4025d50:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 4025d54:	e0fffb03 	ldbu	r3,-20(fp)
 4025d58:	00800074 	movhi	r2,1
 4025d5c:	10a3bf04 	addi	r2,r2,-28932
 4025d60:	18c7883a 	add	r3,r3,r3
 4025d64:	18c7883a 	add	r3,r3,r3
 4025d68:	10c5883a 	add	r2,r2,r3
 4025d6c:	e0fff617 	ldw	r3,-40(fp)
 4025d70:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 4025d74:	d0e03c17 	ldw	r3,-32528(gp)
 4025d78:	e0bff617 	ldw	r2,-40(fp)
 4025d7c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 4025d80:	e0bff617 	ldw	r2,-40(fp)
 4025d84:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 4025d88:	d0a03c17 	ldw	r2,-32528(gp)
 4025d8c:	10000326 	beq	r2,zero,4025d9c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 4025d90:	d0a03c17 	ldw	r2,-32528(gp)
 4025d94:	e0fff617 	ldw	r3,-40(fp)
 4025d98:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 4025d9c:	e0bff617 	ldw	r2,-40(fp)
 4025da0:	d0a03c15 	stw	r2,-32528(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 4025da4:	e0bff617 	ldw	r2,-40(fp)
 4025da8:	10c00d83 	ldbu	r3,54(r2)
 4025dac:	d0a04503 	ldbu	r2,-32492(gp)
 4025db0:	1884b03a 	or	r2,r3,r2
 4025db4:	d0a04505 	stb	r2,-32492(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4025db8:	e0bff617 	ldw	r2,-40(fp)
 4025dbc:	10800d03 	ldbu	r2,52(r2)
 4025dc0:	10c03fcc 	andi	r3,r2,255
 4025dc4:	e0bff617 	ldw	r2,-40(fp)
 4025dc8:	10800d03 	ldbu	r2,52(r2)
 4025dcc:	11003fcc 	andi	r4,r2,255
 4025dd0:	d0a04544 	addi	r2,gp,-32491
 4025dd4:	2085883a 	add	r2,r4,r2
 4025dd8:	11000003 	ldbu	r4,0(r2)
 4025ddc:	e0bff617 	ldw	r2,-40(fp)
 4025de0:	10800d43 	ldbu	r2,53(r2)
 4025de4:	2084b03a 	or	r2,r4,r2
 4025de8:	1009883a 	mov	r4,r2
 4025dec:	d0a04544 	addi	r2,gp,-32491
 4025df0:	1885883a 	add	r2,r3,r2
 4025df4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 4025df8:	d0a04143 	ldbu	r2,-32507(gp)
 4025dfc:	10800044 	addi	r2,r2,1
 4025e00:	d0a04145 	stb	r2,-32507(gp)
 4025e04:	e0bff417 	ldw	r2,-48(fp)
 4025e08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4025e0c:	e0bff717 	ldw	r2,-36(fp)
 4025e10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4025e14:	0005883a 	mov	r2,zero
 4025e18:	00000506 	br	4025e30 <OS_TCBInit+0x2c0>
 4025e1c:	e0bff417 	ldw	r2,-48(fp)
 4025e20:	e0bff915 	stw	r2,-28(fp)
 4025e24:	e0bff917 	ldw	r2,-28(fp)
 4025e28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 4025e2c:	00801084 	movi	r2,66
}
 4025e30:	e037883a 	mov	sp,fp
 4025e34:	dfc00117 	ldw	ra,4(sp)
 4025e38:	df000017 	ldw	fp,0(sp)
 4025e3c:	dec00204 	addi	sp,sp,8
 4025e40:	f800283a 	ret

04025e44 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 4025e44:	defffe04 	addi	sp,sp,-8
 4025e48:	df000115 	stw	fp,4(sp)
 4025e4c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 4025e50:	d0a00d04 	addi	r2,gp,-32716
 4025e54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 4025e58:	d0a00e04 	addi	r2,gp,-32712
 4025e5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 4025e60:	d0a00f84 	addi	r2,gp,-32706
 4025e64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 4025e68:	d0a01004 	addi	r2,gp,-32704
 4025e6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 4025e70:	d0a00f04 	addi	r2,gp,-32708
 4025e74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 4025e78:	d0a01084 	addi	r2,gp,-32702
 4025e7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 4025e80:	d0a01104 	addi	r2,gp,-32700
 4025e84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 4025e88:	d0a01184 	addi	r2,gp,-32698
 4025e8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 4025e90:	d0a01204 	addi	r2,gp,-32696
 4025e94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 4025e98:	d0a01284 	addi	r2,gp,-32694
 4025e9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 4025ea0:	d0a01304 	addi	r2,gp,-32692
 4025ea4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 4025ea8:	d0a01384 	addi	r2,gp,-32690
 4025eac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 4025eb0:	d0a01404 	addi	r2,gp,-32688
 4025eb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 4025eb8:	d0a01484 	addi	r2,gp,-32686
 4025ebc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 4025ec0:	d0a01504 	addi	r2,gp,-32684
 4025ec4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 4025ec8:	d0a01584 	addi	r2,gp,-32682
 4025ecc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 4025ed0:	d0a01604 	addi	r2,gp,-32680
 4025ed4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 4025ed8:	d0a01684 	addi	r2,gp,-32678
 4025edc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 4025ee0:	d0a01704 	addi	r2,gp,-32676
 4025ee4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 4025ee8:	d0a01784 	addi	r2,gp,-32674
 4025eec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 4025ef0:	d0a01804 	addi	r2,gp,-32672
 4025ef4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 4025ef8:	d0a01884 	addi	r2,gp,-32670
 4025efc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 4025f00:	d0a01904 	addi	r2,gp,-32668
 4025f04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 4025f08:	d0a01984 	addi	r2,gp,-32666
 4025f0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 4025f10:	d0a01a04 	addi	r2,gp,-32664
 4025f14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 4025f18:	d0a01a84 	addi	r2,gp,-32662
 4025f1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 4025f20:	d0a01b04 	addi	r2,gp,-32660
 4025f24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 4025f28:	d0a01b84 	addi	r2,gp,-32658
 4025f2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 4025f30:	d0a01c04 	addi	r2,gp,-32656
 4025f34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 4025f38:	d0a01c84 	addi	r2,gp,-32654
 4025f3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 4025f40:	d0a01d04 	addi	r2,gp,-32652
 4025f44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 4025f48:	d0a01d84 	addi	r2,gp,-32650
 4025f4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 4025f50:	d0a01e04 	addi	r2,gp,-32648
 4025f54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 4025f58:	d0a01e84 	addi	r2,gp,-32646
 4025f5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 4025f60:	d0a01f04 	addi	r2,gp,-32644
 4025f64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 4025f68:	d0a01f84 	addi	r2,gp,-32642
 4025f6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 4025f70:	d0a02004 	addi	r2,gp,-32640
 4025f74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 4025f78:	d0a02084 	addi	r2,gp,-32638
 4025f7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 4025f80:	d0a02104 	addi	r2,gp,-32636
 4025f84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 4025f88:	d0a02184 	addi	r2,gp,-32634
 4025f8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 4025f90:	d0a02204 	addi	r2,gp,-32632
 4025f94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 4025f98:	d0a02284 	addi	r2,gp,-32630
 4025f9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 4025fa0:	d0a02304 	addi	r2,gp,-32628
 4025fa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 4025fa8:	d0a02384 	addi	r2,gp,-32626
 4025fac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 4025fb0:	d0a02404 	addi	r2,gp,-32624
 4025fb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 4025fb8:	d0a02904 	addi	r2,gp,-32604
 4025fbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 4025fc0:	0001883a 	nop
 4025fc4:	e037883a 	mov	sp,fp
 4025fc8:	df000017 	ldw	fp,0(sp)
 4025fcc:	dec00104 	addi	sp,sp,4
 4025fd0:	f800283a 	ret

04025fd4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 4025fd4:	defff204 	addi	sp,sp,-56
 4025fd8:	df000d15 	stw	fp,52(sp)
 4025fdc:	df000d04 	addi	fp,sp,52
 4025fe0:	e13ffc15 	stw	r4,-16(fp)
 4025fe4:	2807883a 	mov	r3,r5
 4025fe8:	3005883a 	mov	r2,r6
 4025fec:	e1ffff15 	stw	r7,-4(fp)
 4025ff0:	e0fffd0d 	sth	r3,-12(fp)
 4025ff4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4025ff8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4025ffc:	e0bfff17 	ldw	r2,-4(fp)
 4026000:	1000021e 	bne	r2,zero,402600c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 4026004:	0005883a 	mov	r2,zero
 4026008:	0000b006 	br	40262cc <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 402600c:	e0bffc17 	ldw	r2,-16(fp)
 4026010:	1000051e 	bne	r2,zero,4026028 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4026014:	e0bfff17 	ldw	r2,-4(fp)
 4026018:	00c01b84 	movi	r3,110
 402601c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4026020:	0005883a 	mov	r2,zero
 4026024:	0000a906 	br	40262cc <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 4026028:	e0bffc17 	ldw	r2,-16(fp)
 402602c:	10800003 	ldbu	r2,0(r2)
 4026030:	10803fcc 	andi	r2,r2,255
 4026034:	10800160 	cmpeqi	r2,r2,5
 4026038:	1000051e 	bne	r2,zero,4026050 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 402603c:	e0bfff17 	ldw	r2,-4(fp)
 4026040:	00c00044 	movi	r3,1
 4026044:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4026048:	0005883a 	mov	r2,zero
 402604c:	00009f06 	br	40262cc <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4026050:	e0fffe03 	ldbu	r3,-8(fp)
 4026054:	00bfe004 	movi	r2,-128
 4026058:	1884703a 	and	r2,r3,r2
 402605c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 4026060:	e0bff503 	ldbu	r2,-44(fp)
 4026064:	10000626 	beq	r2,zero,4026080 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 4026068:	e0bffe03 	ldbu	r2,-8(fp)
 402606c:	10801fcc 	andi	r2,r2,127
 4026070:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 4026074:	00800044 	movi	r2,1
 4026078:	e0bff385 	stb	r2,-50(fp)
 402607c:	00000106 	br	4026084 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 4026080:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 4026084:	e0bfff17 	ldw	r2,-4(fp)
 4026088:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402608c:	0005303a 	rdctl	r2,status
 4026090:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4026094:	e0fffb17 	ldw	r3,-20(fp)
 4026098:	00bfff84 	movi	r2,-2
 402609c:	1884703a 	and	r2,r3,r2
 40260a0:	1001703a 	wrctl	status,r2
  
  return context;
 40260a4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 40260a8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 40260ac:	e0bffe03 	ldbu	r2,-8(fp)
 40260b0:	10c00060 	cmpeqi	r3,r2,1
 40260b4:	18005f1e 	bne	r3,zero,4026234 <OSFlagAccept+0x260>
 40260b8:	10c00088 	cmpgei	r3,r2,2
 40260bc:	1800021e 	bne	r3,zero,40260c8 <OSFlagAccept+0xf4>
 40260c0:	10003f26 	beq	r2,zero,40261c0 <OSFlagAccept+0x1ec>
 40260c4:	00007706 	br	40262a4 <OSFlagAccept+0x2d0>
 40260c8:	10c000a0 	cmpeqi	r3,r2,2
 40260cc:	1800031e 	bne	r3,zero,40260dc <OSFlagAccept+0x108>
 40260d0:	108000e0 	cmpeqi	r2,r2,3
 40260d4:	10001e1e 	bne	r2,zero,4026150 <OSFlagAccept+0x17c>
 40260d8:	00007206 	br	40262a4 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 40260dc:	e0bffc17 	ldw	r2,-16(fp)
 40260e0:	10c0020b 	ldhu	r3,8(r2)
 40260e4:	e0bffd0b 	ldhu	r2,-12(fp)
 40260e8:	1884703a 	and	r2,r3,r2
 40260ec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 40260f0:	e0fff30b 	ldhu	r3,-52(fp)
 40260f4:	e0bffd0b 	ldhu	r2,-12(fp)
 40260f8:	18800d1e 	bne	r3,r2,4026130 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40260fc:	e0bff383 	ldbu	r2,-50(fp)
 4026100:	10800058 	cmpnei	r2,r2,1
 4026104:	10000d1e 	bne	r2,zero,402613c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 4026108:	e0bffc17 	ldw	r2,-16(fp)
 402610c:	1080020b 	ldhu	r2,8(r2)
 4026110:	1007883a 	mov	r3,r2
 4026114:	e0bff30b 	ldhu	r2,-52(fp)
 4026118:	0084303a 	nor	r2,zero,r2
 402611c:	1884703a 	and	r2,r3,r2
 4026120:	1007883a 	mov	r3,r2
 4026124:	e0bffc17 	ldw	r2,-16(fp)
 4026128:	10c0020d 	sth	r3,8(r2)
 402612c:	00000306 	br	402613c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4026130:	e0bfff17 	ldw	r2,-4(fp)
 4026134:	00c01c04 	movi	r3,112
 4026138:	10c00005 	stb	r3,0(r2)
 402613c:	e0bff417 	ldw	r2,-48(fp)
 4026140:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026144:	e0bff617 	ldw	r2,-40(fp)
 4026148:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 402614c:	00005e06 	br	40262c8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 4026150:	e0bffc17 	ldw	r2,-16(fp)
 4026154:	10c0020b 	ldhu	r3,8(r2)
 4026158:	e0bffd0b 	ldhu	r2,-12(fp)
 402615c:	1884703a 	and	r2,r3,r2
 4026160:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4026164:	e0bff30b 	ldhu	r2,-52(fp)
 4026168:	10000d26 	beq	r2,zero,40261a0 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 402616c:	e0bff383 	ldbu	r2,-50(fp)
 4026170:	10800058 	cmpnei	r2,r2,1
 4026174:	10000d1e 	bne	r2,zero,40261ac <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4026178:	e0bffc17 	ldw	r2,-16(fp)
 402617c:	1080020b 	ldhu	r2,8(r2)
 4026180:	1007883a 	mov	r3,r2
 4026184:	e0bff30b 	ldhu	r2,-52(fp)
 4026188:	0084303a 	nor	r2,zero,r2
 402618c:	1884703a 	and	r2,r3,r2
 4026190:	1007883a 	mov	r3,r2
 4026194:	e0bffc17 	ldw	r2,-16(fp)
 4026198:	10c0020d 	sth	r3,8(r2)
 402619c:	00000306 	br	40261ac <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 40261a0:	e0bfff17 	ldw	r2,-4(fp)
 40261a4:	00c01c04 	movi	r3,112
 40261a8:	10c00005 	stb	r3,0(r2)
 40261ac:	e0bff417 	ldw	r2,-48(fp)
 40261b0:	e0bff715 	stw	r2,-36(fp)
 40261b4:	e0bff717 	ldw	r2,-36(fp)
 40261b8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 40261bc:	00004206 	br	40262c8 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 40261c0:	e0bffc17 	ldw	r2,-16(fp)
 40261c4:	1080020b 	ldhu	r2,8(r2)
 40261c8:	0084303a 	nor	r2,zero,r2
 40261cc:	1007883a 	mov	r3,r2
 40261d0:	e0bffd0b 	ldhu	r2,-12(fp)
 40261d4:	1884703a 	and	r2,r3,r2
 40261d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 40261dc:	e0fff30b 	ldhu	r3,-52(fp)
 40261e0:	e0bffd0b 	ldhu	r2,-12(fp)
 40261e4:	18800b1e 	bne	r3,r2,4026214 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40261e8:	e0bff383 	ldbu	r2,-50(fp)
 40261ec:	10800058 	cmpnei	r2,r2,1
 40261f0:	10000b1e 	bne	r2,zero,4026220 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 40261f4:	e0bffc17 	ldw	r2,-16(fp)
 40261f8:	10c0020b 	ldhu	r3,8(r2)
 40261fc:	e0bff30b 	ldhu	r2,-52(fp)
 4026200:	1884b03a 	or	r2,r3,r2
 4026204:	1007883a 	mov	r3,r2
 4026208:	e0bffc17 	ldw	r2,-16(fp)
 402620c:	10c0020d 	sth	r3,8(r2)
 4026210:	00000306 	br	4026220 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4026214:	e0bfff17 	ldw	r2,-4(fp)
 4026218:	00c01c04 	movi	r3,112
 402621c:	10c00005 	stb	r3,0(r2)
 4026220:	e0bff417 	ldw	r2,-48(fp)
 4026224:	e0bff815 	stw	r2,-32(fp)
 4026228:	e0bff817 	ldw	r2,-32(fp)
 402622c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4026230:	00002506 	br	40262c8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4026234:	e0bffc17 	ldw	r2,-16(fp)
 4026238:	1080020b 	ldhu	r2,8(r2)
 402623c:	0084303a 	nor	r2,zero,r2
 4026240:	1007883a 	mov	r3,r2
 4026244:	e0bffd0b 	ldhu	r2,-12(fp)
 4026248:	1884703a 	and	r2,r3,r2
 402624c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4026250:	e0bff30b 	ldhu	r2,-52(fp)
 4026254:	10000b26 	beq	r2,zero,4026284 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4026258:	e0bff383 	ldbu	r2,-50(fp)
 402625c:	10800058 	cmpnei	r2,r2,1
 4026260:	10000b1e 	bne	r2,zero,4026290 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 4026264:	e0bffc17 	ldw	r2,-16(fp)
 4026268:	10c0020b 	ldhu	r3,8(r2)
 402626c:	e0bff30b 	ldhu	r2,-52(fp)
 4026270:	1884b03a 	or	r2,r3,r2
 4026274:	1007883a 	mov	r3,r2
 4026278:	e0bffc17 	ldw	r2,-16(fp)
 402627c:	10c0020d 	sth	r3,8(r2)
 4026280:	00000306 	br	4026290 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4026284:	e0bfff17 	ldw	r2,-4(fp)
 4026288:	00c01c04 	movi	r3,112
 402628c:	10c00005 	stb	r3,0(r2)
 4026290:	e0bff417 	ldw	r2,-48(fp)
 4026294:	e0bff915 	stw	r2,-28(fp)
 4026298:	e0bff917 	ldw	r2,-28(fp)
 402629c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 40262a0:	00000906 	br	40262c8 <OSFlagAccept+0x2f4>
 40262a4:	e0bff417 	ldw	r2,-48(fp)
 40262a8:	e0bffa15 	stw	r2,-24(fp)
 40262ac:	e0bffa17 	ldw	r2,-24(fp)
 40262b0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 40262b4:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 40262b8:	e0bfff17 	ldw	r2,-4(fp)
 40262bc:	00c01bc4 	movi	r3,111
 40262c0:	10c00005 	stb	r3,0(r2)
             break;
 40262c4:	0001883a 	nop
    }
    return (flags_rdy);
 40262c8:	e0bff30b 	ldhu	r2,-52(fp)
}
 40262cc:	e037883a 	mov	sp,fp
 40262d0:	df000017 	ldw	fp,0(sp)
 40262d4:	dec00104 	addi	sp,sp,4
 40262d8:	f800283a 	ret

040262dc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 40262dc:	defff804 	addi	sp,sp,-32
 40262e0:	df000715 	stw	fp,28(sp)
 40262e4:	df000704 	addi	fp,sp,28
 40262e8:	2005883a 	mov	r2,r4
 40262ec:	e17fff15 	stw	r5,-4(fp)
 40262f0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 40262f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 40262f8:	e0bfff17 	ldw	r2,-4(fp)
 40262fc:	1000021e 	bne	r2,zero,4026308 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 4026300:	0005883a 	mov	r2,zero
 4026304:	00003306 	br	40263d4 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 4026308:	d0a04703 	ldbu	r2,-32484(gp)
 402630c:	10803fcc 	andi	r2,r2,255
 4026310:	10000526 	beq	r2,zero,4026328 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 4026314:	e0bfff17 	ldw	r2,-4(fp)
 4026318:	00c00404 	movi	r3,16
 402631c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 4026320:	0005883a 	mov	r2,zero
 4026324:	00002b06 	br	40263d4 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4026328:	0005303a 	rdctl	r2,status
 402632c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4026330:	e0fffd17 	ldw	r3,-12(fp)
 4026334:	00bfff84 	movi	r2,-2
 4026338:	1884703a 	and	r2,r3,r2
 402633c:	1001703a 	wrctl	status,r2
  
  return context;
 4026340:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4026344:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 4026348:	d0a04a17 	ldw	r2,-32472(gp)
 402634c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 4026350:	e0bffb17 	ldw	r2,-20(fp)
 4026354:	10001726 	beq	r2,zero,40263b4 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 4026358:	d0a04a17 	ldw	r2,-32472(gp)
 402635c:	10800117 	ldw	r2,4(r2)
 4026360:	d0a04a15 	stw	r2,-32472(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 4026364:	e0bffb17 	ldw	r2,-20(fp)
 4026368:	00c00144 	movi	r3,5
 402636c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 4026370:	e0bffb17 	ldw	r2,-20(fp)
 4026374:	e0fffe0b 	ldhu	r3,-8(fp)
 4026378:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 402637c:	e0bffb17 	ldw	r2,-20(fp)
 4026380:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 4026384:	e0bffb17 	ldw	r2,-20(fp)
 4026388:	00c00fc4 	movi	r3,63
 402638c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4026390:	e0bffb17 	ldw	r2,-20(fp)
 4026394:	100002c5 	stb	zero,11(r2)
 4026398:	e0bff917 	ldw	r2,-28(fp)
 402639c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40263a0:	e0bffa17 	ldw	r2,-24(fp)
 40263a4:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 40263a8:	e0bfff17 	ldw	r2,-4(fp)
 40263ac:	10000005 	stb	zero,0(r2)
 40263b0:	00000706 	br	40263d0 <OSFlagCreate+0xf4>
 40263b4:	e0bff917 	ldw	r2,-28(fp)
 40263b8:	e0bffc15 	stw	r2,-16(fp)
 40263bc:	e0bffc17 	ldw	r2,-16(fp)
 40263c0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 40263c4:	e0bfff17 	ldw	r2,-4(fp)
 40263c8:	00c01c84 	movi	r3,114
 40263cc:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 40263d0:	e0bffb17 	ldw	r2,-20(fp)
}
 40263d4:	e037883a 	mov	sp,fp
 40263d8:	df000017 	ldw	fp,0(sp)
 40263dc:	dec00104 	addi	sp,sp,4
 40263e0:	f800283a 	ret

040263e4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 40263e4:	defff204 	addi	sp,sp,-56
 40263e8:	dfc00d15 	stw	ra,52(sp)
 40263ec:	df000c15 	stw	fp,48(sp)
 40263f0:	df000c04 	addi	fp,sp,48
 40263f4:	e13ffd15 	stw	r4,-12(fp)
 40263f8:	2805883a 	mov	r2,r5
 40263fc:	e1bfff15 	stw	r6,-4(fp)
 4026400:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4026404:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4026408:	e0bfff17 	ldw	r2,-4(fp)
 402640c:	1000021e 	bne	r2,zero,4026418 <OSFlagDel+0x34>
        return (pgrp);
 4026410:	e0bffd17 	ldw	r2,-12(fp)
 4026414:	00008006 	br	4026618 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4026418:	e0bffd17 	ldw	r2,-12(fp)
 402641c:	1000051e 	bne	r2,zero,4026434 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4026420:	e0bfff17 	ldw	r2,-4(fp)
 4026424:	00c01b84 	movi	r3,110
 4026428:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 402642c:	e0bffd17 	ldw	r2,-12(fp)
 4026430:	00007906 	br	4026618 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4026434:	d0a04703 	ldbu	r2,-32484(gp)
 4026438:	10803fcc 	andi	r2,r2,255
 402643c:	10000526 	beq	r2,zero,4026454 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4026440:	e0bfff17 	ldw	r2,-4(fp)
 4026444:	00c003c4 	movi	r3,15
 4026448:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 402644c:	e0bffd17 	ldw	r2,-12(fp)
 4026450:	00007106 	br	4026618 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 4026454:	e0bffd17 	ldw	r2,-12(fp)
 4026458:	10800003 	ldbu	r2,0(r2)
 402645c:	10803fcc 	andi	r2,r2,255
 4026460:	10800160 	cmpeqi	r2,r2,5
 4026464:	1000051e 	bne	r2,zero,402647c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 4026468:	e0bfff17 	ldw	r2,-4(fp)
 402646c:	00c00044 	movi	r3,1
 4026470:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4026474:	e0bffd17 	ldw	r2,-12(fp)
 4026478:	00006706 	br	4026618 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402647c:	0005303a 	rdctl	r2,status
 4026480:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4026484:	e0fffc17 	ldw	r3,-16(fp)
 4026488:	00bfff84 	movi	r2,-2
 402648c:	1884703a 	and	r2,r3,r2
 4026490:	1001703a 	wrctl	status,r2
  
  return context;
 4026494:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4026498:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 402649c:	e0bffd17 	ldw	r2,-12(fp)
 40264a0:	10800117 	ldw	r2,4(r2)
 40264a4:	10000326 	beq	r2,zero,40264b4 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 40264a8:	00800044 	movi	r2,1
 40264ac:	e0bff405 	stb	r2,-48(fp)
 40264b0:	00000106 	br	40264b8 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 40264b4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 40264b8:	e0bffe03 	ldbu	r2,-8(fp)
 40264bc:	10000326 	beq	r2,zero,40264cc <OSFlagDel+0xe8>
 40264c0:	10800060 	cmpeqi	r2,r2,1
 40264c4:	1000231e 	bne	r2,zero,4026554 <OSFlagDel+0x170>
 40264c8:	00004806 	br	40265ec <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 40264cc:	e0bff403 	ldbu	r2,-48(fp)
 40264d0:	1000161e 	bne	r2,zero,402652c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 40264d4:	e0bffd17 	ldw	r2,-12(fp)
 40264d8:	00c00fc4 	movi	r3,63
 40264dc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 40264e0:	e0bffd17 	ldw	r2,-12(fp)
 40264e4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 40264e8:	e0bffd17 	ldw	r2,-12(fp)
 40264ec:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 40264f0:	d0e04a17 	ldw	r3,-32472(gp)
 40264f4:	e0bffd17 	ldw	r2,-12(fp)
 40264f8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 40264fc:	e0bffd17 	ldw	r2,-12(fp)
 4026500:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 4026504:	e0bffd17 	ldw	r2,-12(fp)
 4026508:	d0a04a15 	stw	r2,-32472(gp)
 402650c:	e0bff717 	ldw	r2,-36(fp)
 4026510:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026514:	e0bff817 	ldw	r2,-32(fp)
 4026518:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 402651c:	e0bfff17 	ldw	r2,-4(fp)
 4026520:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 4026524:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 4026528:	00003a06 	br	4026614 <OSFlagDel+0x230>
 402652c:	e0bff717 	ldw	r2,-36(fp)
 4026530:	e0bff915 	stw	r2,-28(fp)
 4026534:	e0bff917 	ldw	r2,-28(fp)
 4026538:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 402653c:	e0bfff17 	ldw	r2,-4(fp)
 4026540:	00c01244 	movi	r3,73
 4026544:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 4026548:	e0bffd17 	ldw	r2,-12(fp)
 402654c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4026550:	00003006 	br	4026614 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4026554:	e0bffd17 	ldw	r2,-12(fp)
 4026558:	10800117 	ldw	r2,4(r2)
 402655c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 4026560:	00000606 	br	402657c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 4026564:	000b883a 	mov	r5,zero
 4026568:	e13ff517 	ldw	r4,-44(fp)
 402656c:	40275500 	call	4027550 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4026570:	e0bff517 	ldw	r2,-44(fp)
 4026574:	10800017 	ldw	r2,0(r2)
 4026578:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 402657c:	e0bff517 	ldw	r2,-44(fp)
 4026580:	103ff81e 	bne	r2,zero,4026564 <__flash_rwdata_start+0xffff8960>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 4026584:	e0bffd17 	ldw	r2,-12(fp)
 4026588:	00c00fc4 	movi	r3,63
 402658c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4026590:	e0bffd17 	ldw	r2,-12(fp)
 4026594:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4026598:	e0bffd17 	ldw	r2,-12(fp)
 402659c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 40265a0:	d0e04a17 	ldw	r3,-32472(gp)
 40265a4:	e0bffd17 	ldw	r2,-12(fp)
 40265a8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 40265ac:	e0bffd17 	ldw	r2,-12(fp)
 40265b0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 40265b4:	e0bffd17 	ldw	r2,-12(fp)
 40265b8:	d0a04a15 	stw	r2,-32472(gp)
 40265bc:	e0bff717 	ldw	r2,-36(fp)
 40265c0:	e0bffa15 	stw	r2,-24(fp)
 40265c4:	e0bffa17 	ldw	r2,-24(fp)
 40265c8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 40265cc:	e0bff403 	ldbu	r2,-48(fp)
 40265d0:	10800058 	cmpnei	r2,r2,1
 40265d4:	1000011e 	bne	r2,zero,40265dc <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 40265d8:	40257700 	call	4025770 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 40265dc:	e0bfff17 	ldw	r2,-4(fp)
 40265e0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 40265e4:	e03ff615 	stw	zero,-40(fp)
             break;
 40265e8:	00000a06 	br	4026614 <OSFlagDel+0x230>
 40265ec:	e0bff717 	ldw	r2,-36(fp)
 40265f0:	e0bffb15 	stw	r2,-20(fp)
 40265f4:	e0bffb17 	ldw	r2,-20(fp)
 40265f8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 40265fc:	e0bfff17 	ldw	r2,-4(fp)
 4026600:	00c001c4 	movi	r3,7
 4026604:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 4026608:	e0bffd17 	ldw	r2,-12(fp)
 402660c:	e0bff615 	stw	r2,-40(fp)
             break;
 4026610:	0001883a 	nop
    }
    return (pgrp_return);
 4026614:	e0bff617 	ldw	r2,-40(fp)
}
 4026618:	e037883a 	mov	sp,fp
 402661c:	dfc00117 	ldw	ra,4(sp)
 4026620:	df000017 	ldw	fp,0(sp)
 4026624:	dec00204 	addi	sp,sp,8
 4026628:	f800283a 	ret

0402662c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 402662c:	defff604 	addi	sp,sp,-40
 4026630:	dfc00915 	stw	ra,36(sp)
 4026634:	df000815 	stw	fp,32(sp)
 4026638:	df000804 	addi	fp,sp,32
 402663c:	e13ffd15 	stw	r4,-12(fp)
 4026640:	e17ffe15 	stw	r5,-8(fp)
 4026644:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4026648:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 402664c:	e0bfff17 	ldw	r2,-4(fp)
 4026650:	1000021e 	bne	r2,zero,402665c <OSFlagNameGet+0x30>
        return (0);
 4026654:	0005883a 	mov	r2,zero
 4026658:	00003906 	br	4026740 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 402665c:	e0bffd17 	ldw	r2,-12(fp)
 4026660:	1000051e 	bne	r2,zero,4026678 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4026664:	e0bfff17 	ldw	r2,-4(fp)
 4026668:	00c01b84 	movi	r3,110
 402666c:	10c00005 	stb	r3,0(r2)
        return (0);
 4026670:	0005883a 	mov	r2,zero
 4026674:	00003206 	br	4026740 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4026678:	e0bffe17 	ldw	r2,-8(fp)
 402667c:	1000051e 	bne	r2,zero,4026694 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4026680:	e0bfff17 	ldw	r2,-4(fp)
 4026684:	00c00304 	movi	r3,12
 4026688:	10c00005 	stb	r3,0(r2)
        return (0);
 402668c:	0005883a 	mov	r2,zero
 4026690:	00002b06 	br	4026740 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4026694:	d0a04703 	ldbu	r2,-32484(gp)
 4026698:	10803fcc 	andi	r2,r2,255
 402669c:	10000526 	beq	r2,zero,40266b4 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 40266a0:	e0bfff17 	ldw	r2,-4(fp)
 40266a4:	00c00444 	movi	r3,17
 40266a8:	10c00005 	stb	r3,0(r2)
        return (0);
 40266ac:	0005883a 	mov	r2,zero
 40266b0:	00002306 	br	4026740 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40266b4:	0005303a 	rdctl	r2,status
 40266b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40266bc:	e0fffc17 	ldw	r3,-16(fp)
 40266c0:	00bfff84 	movi	r2,-2
 40266c4:	1884703a 	and	r2,r3,r2
 40266c8:	1001703a 	wrctl	status,r2
  
  return context;
 40266cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40266d0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 40266d4:	e0bffd17 	ldw	r2,-12(fp)
 40266d8:	10800003 	ldbu	r2,0(r2)
 40266dc:	10803fcc 	andi	r2,r2,255
 40266e0:	10800160 	cmpeqi	r2,r2,5
 40266e4:	1000091e 	bne	r2,zero,402670c <OSFlagNameGet+0xe0>
 40266e8:	e0bff817 	ldw	r2,-32(fp)
 40266ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40266f0:	e0bff917 	ldw	r2,-28(fp)
 40266f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 40266f8:	e0bfff17 	ldw	r2,-4(fp)
 40266fc:	00c00044 	movi	r3,1
 4026700:	10c00005 	stb	r3,0(r2)
        return (0);
 4026704:	0005883a 	mov	r2,zero
 4026708:	00000d06 	br	4026740 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 402670c:	e0bffd17 	ldw	r2,-12(fp)
 4026710:	10800284 	addi	r2,r2,10
 4026714:	100b883a 	mov	r5,r2
 4026718:	e13ffe17 	ldw	r4,-8(fp)
 402671c:	40258b40 	call	40258b4 <OS_StrCopy>
 4026720:	e0bffb05 	stb	r2,-20(fp)
 4026724:	e0bff817 	ldw	r2,-32(fp)
 4026728:	e0bffa15 	stw	r2,-24(fp)
 402672c:	e0bffa17 	ldw	r2,-24(fp)
 4026730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4026734:	e0bfff17 	ldw	r2,-4(fp)
 4026738:	10000005 	stb	zero,0(r2)
    return (len);
 402673c:	e0bffb03 	ldbu	r2,-20(fp)
}
 4026740:	e037883a 	mov	sp,fp
 4026744:	dfc00117 	ldw	ra,4(sp)
 4026748:	df000017 	ldw	fp,0(sp)
 402674c:	dec00204 	addi	sp,sp,8
 4026750:	f800283a 	ret

04026754 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 4026754:	defff504 	addi	sp,sp,-44
 4026758:	dfc00a15 	stw	ra,40(sp)
 402675c:	df000915 	stw	fp,36(sp)
 4026760:	df000904 	addi	fp,sp,36
 4026764:	e13ffd15 	stw	r4,-12(fp)
 4026768:	e17ffe15 	stw	r5,-8(fp)
 402676c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4026770:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4026774:	e0bfff17 	ldw	r2,-4(fp)
 4026778:	10004326 	beq	r2,zero,4026888 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 402677c:	e0bffd17 	ldw	r2,-12(fp)
 4026780:	1000041e 	bne	r2,zero,4026794 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4026784:	e0bfff17 	ldw	r2,-4(fp)
 4026788:	00c01b84 	movi	r3,110
 402678c:	10c00005 	stb	r3,0(r2)
        return;
 4026790:	00003e06 	br	402688c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4026794:	e0bffe17 	ldw	r2,-8(fp)
 4026798:	1000041e 	bne	r2,zero,40267ac <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 402679c:	e0bfff17 	ldw	r2,-4(fp)
 40267a0:	00c00304 	movi	r3,12
 40267a4:	10c00005 	stb	r3,0(r2)
        return;
 40267a8:	00003806 	br	402688c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40267ac:	d0a04703 	ldbu	r2,-32484(gp)
 40267b0:	10803fcc 	andi	r2,r2,255
 40267b4:	10000426 	beq	r2,zero,40267c8 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 40267b8:	e0bfff17 	ldw	r2,-4(fp)
 40267bc:	00c00484 	movi	r3,18
 40267c0:	10c00005 	stb	r3,0(r2)
        return;
 40267c4:	00003106 	br	402688c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40267c8:	0005303a 	rdctl	r2,status
 40267cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40267d0:	e0fffc17 	ldw	r3,-16(fp)
 40267d4:	00bfff84 	movi	r2,-2
 40267d8:	1884703a 	and	r2,r3,r2
 40267dc:	1001703a 	wrctl	status,r2
  
  return context;
 40267e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40267e4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 40267e8:	e0bffd17 	ldw	r2,-12(fp)
 40267ec:	10800003 	ldbu	r2,0(r2)
 40267f0:	10803fcc 	andi	r2,r2,255
 40267f4:	10800160 	cmpeqi	r2,r2,5
 40267f8:	1000081e 	bne	r2,zero,402681c <OSFlagNameSet+0xc8>
 40267fc:	e0bff717 	ldw	r2,-36(fp)
 4026800:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026804:	e0bff817 	ldw	r2,-32(fp)
 4026808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 402680c:	e0bfff17 	ldw	r2,-4(fp)
 4026810:	00c00044 	movi	r3,1
 4026814:	10c00005 	stb	r3,0(r2)
        return;
 4026818:	00001c06 	br	402688c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 402681c:	e13ffe17 	ldw	r4,-8(fp)
 4026820:	40259280 	call	4025928 <OS_StrLen>
 4026824:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 4026828:	e0bffa03 	ldbu	r2,-24(fp)
 402682c:	10800830 	cmpltui	r2,r2,32
 4026830:	1000081e 	bne	r2,zero,4026854 <OSFlagNameSet+0x100>
 4026834:	e0bff717 	ldw	r2,-36(fp)
 4026838:	e0bff915 	stw	r2,-28(fp)
 402683c:	e0bff917 	ldw	r2,-28(fp)
 4026840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 4026844:	e0bfff17 	ldw	r2,-4(fp)
 4026848:	00c01cc4 	movi	r3,115
 402684c:	10c00005 	stb	r3,0(r2)
        return;
 4026850:	00000e06 	br	402688c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 4026854:	e0bffd17 	ldw	r2,-12(fp)
 4026858:	10800284 	addi	r2,r2,10
 402685c:	e17ffe17 	ldw	r5,-8(fp)
 4026860:	1009883a 	mov	r4,r2
 4026864:	40258b40 	call	40258b4 <OS_StrCopy>
 4026868:	e0bff717 	ldw	r2,-36(fp)
 402686c:	e0bffb15 	stw	r2,-20(fp)
 4026870:	e0bffb17 	ldw	r2,-20(fp)
 4026874:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4026878:	e0bfff17 	ldw	r2,-4(fp)
 402687c:	10000005 	stb	zero,0(r2)
    return;
 4026880:	0001883a 	nop
 4026884:	00000106 	br	402688c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4026888:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 402688c:	e037883a 	mov	sp,fp
 4026890:	dfc00117 	ldw	ra,4(sp)
 4026894:	df000017 	ldw	fp,0(sp)
 4026898:	dec00204 	addi	sp,sp,8
 402689c:	f800283a 	ret

040268a0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 40268a0:	deffe104 	addi	sp,sp,-124
 40268a4:	dfc01e15 	stw	ra,120(sp)
 40268a8:	df001d15 	stw	fp,116(sp)
 40268ac:	df001d04 	addi	fp,sp,116
 40268b0:	e13ffc15 	stw	r4,-16(fp)
 40268b4:	2809883a 	mov	r4,r5
 40268b8:	3007883a 	mov	r3,r6
 40268bc:	3805883a 	mov	r2,r7
 40268c0:	e13ffd0d 	sth	r4,-12(fp)
 40268c4:	e0fffe05 	stb	r3,-8(fp)
 40268c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 40268cc:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40268d0:	e0800217 	ldw	r2,8(fp)
 40268d4:	1000021e 	bne	r2,zero,40268e0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 40268d8:	0005883a 	mov	r2,zero
 40268dc:	00015906 	br	4026e44 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 40268e0:	e0bffc17 	ldw	r2,-16(fp)
 40268e4:	1000051e 	bne	r2,zero,40268fc <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40268e8:	e0800217 	ldw	r2,8(fp)
 40268ec:	00c01b84 	movi	r3,110
 40268f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40268f4:	0005883a 	mov	r2,zero
 40268f8:	00015206 	br	4026e44 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40268fc:	d0a04703 	ldbu	r2,-32484(gp)
 4026900:	10803fcc 	andi	r2,r2,255
 4026904:	10000526 	beq	r2,zero,402691c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 4026908:	e0800217 	ldw	r2,8(fp)
 402690c:	00c00084 	movi	r3,2
 4026910:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4026914:	0005883a 	mov	r2,zero
 4026918:	00014a06 	br	4026e44 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 402691c:	d0a03903 	ldbu	r2,-32540(gp)
 4026920:	10803fcc 	andi	r2,r2,255
 4026924:	10000526 	beq	r2,zero,402693c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 4026928:	e0800217 	ldw	r2,8(fp)
 402692c:	00c00344 	movi	r3,13
 4026930:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4026934:	0005883a 	mov	r2,zero
 4026938:	00014206 	br	4026e44 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 402693c:	e0bffc17 	ldw	r2,-16(fp)
 4026940:	10800003 	ldbu	r2,0(r2)
 4026944:	10803fcc 	andi	r2,r2,255
 4026948:	10800160 	cmpeqi	r2,r2,5
 402694c:	1000051e 	bne	r2,zero,4026964 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 4026950:	e0800217 	ldw	r2,8(fp)
 4026954:	00c00044 	movi	r3,1
 4026958:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 402695c:	0005883a 	mov	r2,zero
 4026960:	00013806 	br	4026e44 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4026964:	e0fffe03 	ldbu	r3,-8(fp)
 4026968:	00bfe004 	movi	r2,-128
 402696c:	1884703a 	and	r2,r3,r2
 4026970:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 4026974:	e0bfe603 	ldbu	r2,-104(fp)
 4026978:	10000626 	beq	r2,zero,4026994 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 402697c:	e0bffe03 	ldbu	r2,-8(fp)
 4026980:	10801fcc 	andi	r2,r2,127
 4026984:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 4026988:	00800044 	movi	r2,1
 402698c:	e0bfe405 	stb	r2,-112(fp)
 4026990:	00000106 	br	4026998 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 4026994:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4026998:	0005303a 	rdctl	r2,status
 402699c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40269a0:	e0fff617 	ldw	r3,-40(fp)
 40269a4:	00bfff84 	movi	r2,-2
 40269a8:	1884703a 	and	r2,r3,r2
 40269ac:	1001703a 	wrctl	status,r2
  
  return context;
 40269b0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 40269b4:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 40269b8:	e0bffe03 	ldbu	r2,-8(fp)
 40269bc:	10c00060 	cmpeqi	r3,r2,1
 40269c0:	1800921e 	bne	r3,zero,4026c0c <OSFlagPend+0x36c>
 40269c4:	10c00088 	cmpgei	r3,r2,2
 40269c8:	1800021e 	bne	r3,zero,40269d4 <OSFlagPend+0x134>
 40269cc:	10006126 	beq	r2,zero,4026b54 <OSFlagPend+0x2b4>
 40269d0:	0000bb06 	br	4026cc0 <OSFlagPend+0x420>
 40269d4:	10c000a0 	cmpeqi	r3,r2,2
 40269d8:	1800031e 	bne	r3,zero,40269e8 <OSFlagPend+0x148>
 40269dc:	108000e0 	cmpeqi	r2,r2,3
 40269e0:	10002f1e 	bne	r2,zero,4026aa0 <OSFlagPend+0x200>
 40269e4:	0000b606 	br	4026cc0 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 40269e8:	e0bffc17 	ldw	r2,-16(fp)
 40269ec:	10c0020b 	ldhu	r3,8(r2)
 40269f0:	e0bffd0b 	ldhu	r2,-12(fp)
 40269f4:	1884703a 	and	r2,r3,r2
 40269f8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 40269fc:	e0ffe80b 	ldhu	r3,-96(fp)
 4026a00:	e0bffd0b 	ldhu	r2,-12(fp)
 4026a04:	1880171e 	bne	r3,r2,4026a64 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4026a08:	e0bfe403 	ldbu	r2,-112(fp)
 4026a0c:	10800058 	cmpnei	r2,r2,1
 4026a10:	1000091e 	bne	r2,zero,4026a38 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 4026a14:	e0bffc17 	ldw	r2,-16(fp)
 4026a18:	1080020b 	ldhu	r2,8(r2)
 4026a1c:	1007883a 	mov	r3,r2
 4026a20:	e0bfe80b 	ldhu	r2,-96(fp)
 4026a24:	0084303a 	nor	r2,zero,r2
 4026a28:	1884703a 	and	r2,r3,r2
 4026a2c:	1007883a 	mov	r3,r2
 4026a30:	e0bffc17 	ldw	r2,-16(fp)
 4026a34:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4026a38:	d0a04817 	ldw	r2,-32480(gp)
 4026a3c:	e0ffe80b 	ldhu	r3,-96(fp)
 4026a40:	10c00b0d 	sth	r3,44(r2)
 4026a44:	e0bfe517 	ldw	r2,-108(fp)
 4026a48:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026a4c:	e0bfe717 	ldw	r2,-100(fp)
 4026a50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4026a54:	e0800217 	ldw	r2,8(fp)
 4026a58:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4026a5c:	e0bfe80b 	ldhu	r2,-96(fp)
 4026a60:	0000f806 	br	4026e44 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4026a64:	e13ffd0b 	ldhu	r4,-12(fp)
 4026a68:	e17ffe03 	ldbu	r5,-8(fp)
 4026a6c:	e0bfff0b 	ldhu	r2,-4(fp)
 4026a70:	e0fff704 	addi	r3,fp,-36
 4026a74:	d8800015 	stw	r2,0(sp)
 4026a78:	280f883a 	mov	r7,r5
 4026a7c:	200d883a 	mov	r6,r4
 4026a80:	180b883a 	mov	r5,r3
 4026a84:	e13ffc17 	ldw	r4,-16(fp)
 4026a88:	40273100 	call	4027310 <OS_FlagBlock>
 4026a8c:	e0bfe517 	ldw	r2,-108(fp)
 4026a90:	e0bfe915 	stw	r2,-92(fp)
 4026a94:	e0bfe917 	ldw	r2,-92(fp)
 4026a98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4026a9c:	00009206 	br	4026ce8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 4026aa0:	e0bffc17 	ldw	r2,-16(fp)
 4026aa4:	10c0020b 	ldhu	r3,8(r2)
 4026aa8:	e0bffd0b 	ldhu	r2,-12(fp)
 4026aac:	1884703a 	and	r2,r3,r2
 4026ab0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4026ab4:	e0bfe80b 	ldhu	r2,-96(fp)
 4026ab8:	10001726 	beq	r2,zero,4026b18 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4026abc:	e0bfe403 	ldbu	r2,-112(fp)
 4026ac0:	10800058 	cmpnei	r2,r2,1
 4026ac4:	1000091e 	bne	r2,zero,4026aec <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4026ac8:	e0bffc17 	ldw	r2,-16(fp)
 4026acc:	1080020b 	ldhu	r2,8(r2)
 4026ad0:	1007883a 	mov	r3,r2
 4026ad4:	e0bfe80b 	ldhu	r2,-96(fp)
 4026ad8:	0084303a 	nor	r2,zero,r2
 4026adc:	1884703a 	and	r2,r3,r2
 4026ae0:	1007883a 	mov	r3,r2
 4026ae4:	e0bffc17 	ldw	r2,-16(fp)
 4026ae8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4026aec:	d0a04817 	ldw	r2,-32480(gp)
 4026af0:	e0ffe80b 	ldhu	r3,-96(fp)
 4026af4:	10c00b0d 	sth	r3,44(r2)
 4026af8:	e0bfe517 	ldw	r2,-108(fp)
 4026afc:	e0bfea15 	stw	r2,-88(fp)
 4026b00:	e0bfea17 	ldw	r2,-88(fp)
 4026b04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4026b08:	e0800217 	ldw	r2,8(fp)
 4026b0c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4026b10:	e0bfe80b 	ldhu	r2,-96(fp)
 4026b14:	0000cb06 	br	4026e44 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4026b18:	e13ffd0b 	ldhu	r4,-12(fp)
 4026b1c:	e17ffe03 	ldbu	r5,-8(fp)
 4026b20:	e0bfff0b 	ldhu	r2,-4(fp)
 4026b24:	e0fff704 	addi	r3,fp,-36
 4026b28:	d8800015 	stw	r2,0(sp)
 4026b2c:	280f883a 	mov	r7,r5
 4026b30:	200d883a 	mov	r6,r4
 4026b34:	180b883a 	mov	r5,r3
 4026b38:	e13ffc17 	ldw	r4,-16(fp)
 4026b3c:	40273100 	call	4027310 <OS_FlagBlock>
 4026b40:	e0bfe517 	ldw	r2,-108(fp)
 4026b44:	e0bfeb15 	stw	r2,-84(fp)
 4026b48:	e0bfeb17 	ldw	r2,-84(fp)
 4026b4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4026b50:	00006506 	br	4026ce8 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4026b54:	e0bffc17 	ldw	r2,-16(fp)
 4026b58:	1080020b 	ldhu	r2,8(r2)
 4026b5c:	0084303a 	nor	r2,zero,r2
 4026b60:	1007883a 	mov	r3,r2
 4026b64:	e0bffd0b 	ldhu	r2,-12(fp)
 4026b68:	1884703a 	and	r2,r3,r2
 4026b6c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4026b70:	e0ffe80b 	ldhu	r3,-96(fp)
 4026b74:	e0bffd0b 	ldhu	r2,-12(fp)
 4026b78:	1880151e 	bne	r3,r2,4026bd0 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4026b7c:	e0bfe403 	ldbu	r2,-112(fp)
 4026b80:	10800058 	cmpnei	r2,r2,1
 4026b84:	1000071e 	bne	r2,zero,4026ba4 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4026b88:	e0bffc17 	ldw	r2,-16(fp)
 4026b8c:	10c0020b 	ldhu	r3,8(r2)
 4026b90:	e0bfe80b 	ldhu	r2,-96(fp)
 4026b94:	1884b03a 	or	r2,r3,r2
 4026b98:	1007883a 	mov	r3,r2
 4026b9c:	e0bffc17 	ldw	r2,-16(fp)
 4026ba0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4026ba4:	d0a04817 	ldw	r2,-32480(gp)
 4026ba8:	e0ffe80b 	ldhu	r3,-96(fp)
 4026bac:	10c00b0d 	sth	r3,44(r2)
 4026bb0:	e0bfe517 	ldw	r2,-108(fp)
 4026bb4:	e0bfec15 	stw	r2,-80(fp)
 4026bb8:	e0bfec17 	ldw	r2,-80(fp)
 4026bbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4026bc0:	e0800217 	ldw	r2,8(fp)
 4026bc4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4026bc8:	e0bfe80b 	ldhu	r2,-96(fp)
 4026bcc:	00009d06 	br	4026e44 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4026bd0:	e13ffd0b 	ldhu	r4,-12(fp)
 4026bd4:	e17ffe03 	ldbu	r5,-8(fp)
 4026bd8:	e0bfff0b 	ldhu	r2,-4(fp)
 4026bdc:	e0fff704 	addi	r3,fp,-36
 4026be0:	d8800015 	stw	r2,0(sp)
 4026be4:	280f883a 	mov	r7,r5
 4026be8:	200d883a 	mov	r6,r4
 4026bec:	180b883a 	mov	r5,r3
 4026bf0:	e13ffc17 	ldw	r4,-16(fp)
 4026bf4:	40273100 	call	4027310 <OS_FlagBlock>
 4026bf8:	e0bfe517 	ldw	r2,-108(fp)
 4026bfc:	e0bfed15 	stw	r2,-76(fp)
 4026c00:	e0bfed17 	ldw	r2,-76(fp)
 4026c04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4026c08:	00003706 	br	4026ce8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4026c0c:	e0bffc17 	ldw	r2,-16(fp)
 4026c10:	1080020b 	ldhu	r2,8(r2)
 4026c14:	0084303a 	nor	r2,zero,r2
 4026c18:	1007883a 	mov	r3,r2
 4026c1c:	e0bffd0b 	ldhu	r2,-12(fp)
 4026c20:	1884703a 	and	r2,r3,r2
 4026c24:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4026c28:	e0bfe80b 	ldhu	r2,-96(fp)
 4026c2c:	10001526 	beq	r2,zero,4026c84 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4026c30:	e0bfe403 	ldbu	r2,-112(fp)
 4026c34:	10800058 	cmpnei	r2,r2,1
 4026c38:	1000071e 	bne	r2,zero,4026c58 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 4026c3c:	e0bffc17 	ldw	r2,-16(fp)
 4026c40:	10c0020b 	ldhu	r3,8(r2)
 4026c44:	e0bfe80b 	ldhu	r2,-96(fp)
 4026c48:	1884b03a 	or	r2,r3,r2
 4026c4c:	1007883a 	mov	r3,r2
 4026c50:	e0bffc17 	ldw	r2,-16(fp)
 4026c54:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4026c58:	d0a04817 	ldw	r2,-32480(gp)
 4026c5c:	e0ffe80b 	ldhu	r3,-96(fp)
 4026c60:	10c00b0d 	sth	r3,44(r2)
 4026c64:	e0bfe517 	ldw	r2,-108(fp)
 4026c68:	e0bfee15 	stw	r2,-72(fp)
 4026c6c:	e0bfee17 	ldw	r2,-72(fp)
 4026c70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4026c74:	e0800217 	ldw	r2,8(fp)
 4026c78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4026c7c:	e0bfe80b 	ldhu	r2,-96(fp)
 4026c80:	00007006 	br	4026e44 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4026c84:	e13ffd0b 	ldhu	r4,-12(fp)
 4026c88:	e17ffe03 	ldbu	r5,-8(fp)
 4026c8c:	e0bfff0b 	ldhu	r2,-4(fp)
 4026c90:	e0fff704 	addi	r3,fp,-36
 4026c94:	d8800015 	stw	r2,0(sp)
 4026c98:	280f883a 	mov	r7,r5
 4026c9c:	200d883a 	mov	r6,r4
 4026ca0:	180b883a 	mov	r5,r3
 4026ca4:	e13ffc17 	ldw	r4,-16(fp)
 4026ca8:	40273100 	call	4027310 <OS_FlagBlock>
 4026cac:	e0bfe517 	ldw	r2,-108(fp)
 4026cb0:	e0bfef15 	stw	r2,-68(fp)
 4026cb4:	e0bfef17 	ldw	r2,-68(fp)
 4026cb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4026cbc:	00000a06 	br	4026ce8 <OSFlagPend+0x448>
 4026cc0:	e0bfe517 	ldw	r2,-108(fp)
 4026cc4:	e0bff015 	stw	r2,-64(fp)
 4026cc8:	e0bff017 	ldw	r2,-64(fp)
 4026ccc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 4026cd0:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 4026cd4:	e0800217 	ldw	r2,8(fp)
 4026cd8:	00c01bc4 	movi	r3,111
 4026cdc:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 4026ce0:	e0bfe80b 	ldhu	r2,-96(fp)
 4026ce4:	00005706 	br	4026e44 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 4026ce8:	40257700 	call	4025770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4026cec:	0005303a 	rdctl	r2,status
 4026cf0:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4026cf4:	e0fff117 	ldw	r3,-60(fp)
 4026cf8:	00bfff84 	movi	r2,-2
 4026cfc:	1884703a 	and	r2,r3,r2
 4026d00:	1001703a 	wrctl	status,r2
  
  return context;
 4026d04:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 4026d08:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 4026d0c:	d0a04817 	ldw	r2,-32480(gp)
 4026d10:	10800c43 	ldbu	r2,49(r2)
 4026d14:	10803fcc 	andi	r2,r2,255
 4026d18:	10001c26 	beq	r2,zero,4026d8c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 4026d1c:	d0a04817 	ldw	r2,-32480(gp)
 4026d20:	10800c43 	ldbu	r2,49(r2)
 4026d24:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4026d28:	d0a04817 	ldw	r2,-32480(gp)
 4026d2c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 4026d30:	e0bff704 	addi	r2,fp,-36
 4026d34:	1009883a 	mov	r4,r2
 4026d38:	40276440 	call	4027644 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 4026d3c:	d0a04817 	ldw	r2,-32480(gp)
 4026d40:	10000c05 	stb	zero,48(r2)
 4026d44:	e0bfe517 	ldw	r2,-108(fp)
 4026d48:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026d4c:	e0bff217 	ldw	r2,-56(fp)
 4026d50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 4026d54:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 4026d58:	e0bff303 	ldbu	r2,-52(fp)
 4026d5c:	108000a0 	cmpeqi	r2,r2,2
 4026d60:	10000426 	beq	r2,zero,4026d74 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 4026d64:	e0800217 	ldw	r2,8(fp)
 4026d68:	00c00384 	movi	r3,14
 4026d6c:	10c00005 	stb	r3,0(r2)
                 break;
 4026d70:	00000406 	br	4026d84 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 4026d74:	e0800217 	ldw	r2,8(fp)
 4026d78:	00c00284 	movi	r3,10
 4026d7c:	10c00005 	stb	r3,0(r2)
                 break;
 4026d80:	0001883a 	nop
        }
        return (flags_rdy);
 4026d84:	e0bfe80b 	ldhu	r2,-96(fp)
 4026d88:	00002e06 	br	4026e44 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 4026d8c:	d0a04817 	ldw	r2,-32480(gp)
 4026d90:	10800b0b 	ldhu	r2,44(r2)
 4026d94:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 4026d98:	e0bfe403 	ldbu	r2,-112(fp)
 4026d9c:	10800058 	cmpnei	r2,r2,1
 4026da0:	1000211e 	bne	r2,zero,4026e28 <OSFlagPend+0x588>
        switch (wait_type) {
 4026da4:	e0bffe03 	ldbu	r2,-8(fp)
 4026da8:	10001616 	blt	r2,zero,4026e04 <OSFlagPend+0x564>
 4026dac:	10c00090 	cmplti	r3,r2,2
 4026db0:	18000c1e 	bne	r3,zero,4026de4 <OSFlagPend+0x544>
 4026db4:	10800108 	cmpgei	r2,r2,4
 4026db8:	1000121e 	bne	r2,zero,4026e04 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 4026dbc:	e0bffc17 	ldw	r2,-16(fp)
 4026dc0:	1080020b 	ldhu	r2,8(r2)
 4026dc4:	1007883a 	mov	r3,r2
 4026dc8:	e0bfe80b 	ldhu	r2,-96(fp)
 4026dcc:	0084303a 	nor	r2,zero,r2
 4026dd0:	1884703a 	and	r2,r3,r2
 4026dd4:	1007883a 	mov	r3,r2
 4026dd8:	e0bffc17 	ldw	r2,-16(fp)
 4026ddc:	10c0020d 	sth	r3,8(r2)
                 break;
 4026de0:	00001106 	br	4026e28 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 4026de4:	e0bffc17 	ldw	r2,-16(fp)
 4026de8:	10c0020b 	ldhu	r3,8(r2)
 4026dec:	e0bfe80b 	ldhu	r2,-96(fp)
 4026df0:	1884b03a 	or	r2,r3,r2
 4026df4:	1007883a 	mov	r3,r2
 4026df8:	e0bffc17 	ldw	r2,-16(fp)
 4026dfc:	10c0020d 	sth	r3,8(r2)
                 break;
 4026e00:	00000906 	br	4026e28 <OSFlagPend+0x588>
 4026e04:	e0bfe517 	ldw	r2,-108(fp)
 4026e08:	e0bff415 	stw	r2,-48(fp)
 4026e0c:	e0bff417 	ldw	r2,-48(fp)
 4026e10:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4026e14:	e0800217 	ldw	r2,8(fp)
 4026e18:	00c01bc4 	movi	r3,111
 4026e1c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4026e20:	0005883a 	mov	r2,zero
 4026e24:	00000706 	br	4026e44 <OSFlagPend+0x5a4>
 4026e28:	e0bfe517 	ldw	r2,-108(fp)
 4026e2c:	e0bff515 	stw	r2,-44(fp)
 4026e30:	e0bff517 	ldw	r2,-44(fp)
 4026e34:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 4026e38:	e0800217 	ldw	r2,8(fp)
 4026e3c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 4026e40:	e0bfe80b 	ldhu	r2,-96(fp)
}
 4026e44:	e037883a 	mov	sp,fp
 4026e48:	dfc00117 	ldw	ra,4(sp)
 4026e4c:	df000017 	ldw	fp,0(sp)
 4026e50:	dec00204 	addi	sp,sp,8
 4026e54:	f800283a 	ret

04026e58 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 4026e58:	defffb04 	addi	sp,sp,-20
 4026e5c:	df000415 	stw	fp,16(sp)
 4026e60:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4026e64:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4026e68:	0005303a 	rdctl	r2,status
 4026e6c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4026e70:	e0fffe17 	ldw	r3,-8(fp)
 4026e74:	00bfff84 	movi	r2,-2
 4026e78:	1884703a 	and	r2,r3,r2
 4026e7c:	1001703a 	wrctl	status,r2
  
  return context;
 4026e80:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 4026e84:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 4026e88:	d0a04817 	ldw	r2,-32480(gp)
 4026e8c:	10800b0b 	ldhu	r2,44(r2)
 4026e90:	e0bffd0d 	sth	r2,-12(fp)
 4026e94:	e0bffc17 	ldw	r2,-16(fp)
 4026e98:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026e9c:	e0bfff17 	ldw	r2,-4(fp)
 4026ea0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 4026ea4:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4026ea8:	e037883a 	mov	sp,fp
 4026eac:	df000017 	ldw	fp,0(sp)
 4026eb0:	dec00104 	addi	sp,sp,4
 4026eb4:	f800283a 	ret

04026eb8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 4026eb8:	deffef04 	addi	sp,sp,-68
 4026ebc:	dfc01015 	stw	ra,64(sp)
 4026ec0:	df000f15 	stw	fp,60(sp)
 4026ec4:	df000f04 	addi	fp,sp,60
 4026ec8:	e13ffc15 	stw	r4,-16(fp)
 4026ecc:	2807883a 	mov	r3,r5
 4026ed0:	3005883a 	mov	r2,r6
 4026ed4:	e1ffff15 	stw	r7,-4(fp)
 4026ed8:	e0fffd0d 	sth	r3,-12(fp)
 4026edc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 4026ee0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4026ee4:	e0bfff17 	ldw	r2,-4(fp)
 4026ee8:	1000021e 	bne	r2,zero,4026ef4 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 4026eec:	0005883a 	mov	r2,zero
 4026ef0:	0000d106 	br	4027238 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 4026ef4:	e0bffc17 	ldw	r2,-16(fp)
 4026ef8:	1000051e 	bne	r2,zero,4026f10 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4026efc:	e0bfff17 	ldw	r2,-4(fp)
 4026f00:	00c01b84 	movi	r3,110
 4026f04:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4026f08:	0005883a 	mov	r2,zero
 4026f0c:	0000ca06 	br	4027238 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 4026f10:	e0bffc17 	ldw	r2,-16(fp)
 4026f14:	10800003 	ldbu	r2,0(r2)
 4026f18:	10803fcc 	andi	r2,r2,255
 4026f1c:	10800160 	cmpeqi	r2,r2,5
 4026f20:	1000051e 	bne	r2,zero,4026f38 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 4026f24:	e0bfff17 	ldw	r2,-4(fp)
 4026f28:	00c00044 	movi	r3,1
 4026f2c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4026f30:	0005883a 	mov	r2,zero
 4026f34:	0000c006 	br	4027238 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4026f38:	0005303a 	rdctl	r2,status
 4026f3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4026f40:	e0fffb17 	ldw	r3,-20(fp)
 4026f44:	00bfff84 	movi	r2,-2
 4026f48:	1884703a 	and	r2,r3,r2
 4026f4c:	1001703a 	wrctl	status,r2
  
  return context;
 4026f50:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4026f54:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 4026f58:	e0bffe03 	ldbu	r2,-8(fp)
 4026f5c:	10000326 	beq	r2,zero,4026f6c <OSFlagPost+0xb4>
 4026f60:	10800060 	cmpeqi	r2,r2,1
 4026f64:	10000b1e 	bne	r2,zero,4026f94 <OSFlagPost+0xdc>
 4026f68:	00001206 	br	4026fb4 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 4026f6c:	e0bffc17 	ldw	r2,-16(fp)
 4026f70:	1080020b 	ldhu	r2,8(r2)
 4026f74:	1007883a 	mov	r3,r2
 4026f78:	e0bffd0b 	ldhu	r2,-12(fp)
 4026f7c:	0084303a 	nor	r2,zero,r2
 4026f80:	1884703a 	and	r2,r3,r2
 4026f84:	1007883a 	mov	r3,r2
 4026f88:	e0bffc17 	ldw	r2,-16(fp)
 4026f8c:	10c0020d 	sth	r3,8(r2)
             break;
 4026f90:	00001106 	br	4026fd8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 4026f94:	e0bffc17 	ldw	r2,-16(fp)
 4026f98:	10c0020b 	ldhu	r3,8(r2)
 4026f9c:	e0bffd0b 	ldhu	r2,-12(fp)
 4026fa0:	1884b03a 	or	r2,r3,r2
 4026fa4:	1007883a 	mov	r3,r2
 4026fa8:	e0bffc17 	ldw	r2,-16(fp)
 4026fac:	10c0020d 	sth	r3,8(r2)
             break;
 4026fb0:	00000906 	br	4026fd8 <OSFlagPost+0x120>
 4026fb4:	e0bff317 	ldw	r2,-52(fp)
 4026fb8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4026fbc:	e0bff417 	ldw	r2,-48(fp)
 4026fc0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 4026fc4:	e0bfff17 	ldw	r2,-4(fp)
 4026fc8:	00c01c44 	movi	r3,113
 4026fcc:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 4026fd0:	0005883a 	mov	r2,zero
 4026fd4:	00009806 	br	4027238 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 4026fd8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4026fdc:	e0bffc17 	ldw	r2,-16(fp)
 4026fe0:	10800117 	ldw	r2,4(r2)
 4026fe4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4026fe8:	00007706 	br	40271c8 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 4026fec:	e0bff117 	ldw	r2,-60(fp)
 4026ff0:	10800483 	ldbu	r2,18(r2)
 4026ff4:	10803fcc 	andi	r2,r2,255
 4026ff8:	10c00060 	cmpeqi	r3,r2,1
 4026ffc:	18004a1e 	bne	r3,zero,4027128 <OSFlagPost+0x270>
 4027000:	10c00088 	cmpgei	r3,r2,2
 4027004:	1800021e 	bne	r3,zero,4027010 <OSFlagPost+0x158>
 4027008:	10002f26 	beq	r2,zero,40270c8 <OSFlagPost+0x210>
 402700c:	00005b06 	br	402717c <OSFlagPost+0x2c4>
 4027010:	10c000a0 	cmpeqi	r3,r2,2
 4027014:	1800031e 	bne	r3,zero,4027024 <OSFlagPost+0x16c>
 4027018:	108000e0 	cmpeqi	r2,r2,3
 402701c:	1000171e 	bne	r2,zero,402707c <OSFlagPost+0x1c4>
 4027020:	00005606 	br	402717c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4027024:	e0bffc17 	ldw	r2,-16(fp)
 4027028:	10c0020b 	ldhu	r3,8(r2)
 402702c:	e0bff117 	ldw	r2,-60(fp)
 4027030:	1080040b 	ldhu	r2,16(r2)
 4027034:	1884703a 	and	r2,r3,r2
 4027038:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 402703c:	e0bff117 	ldw	r2,-60(fp)
 4027040:	1080040b 	ldhu	r2,16(r2)
 4027044:	10ffffcc 	andi	r3,r2,65535
 4027048:	e0bff60b 	ldhu	r2,-40(fp)
 402704c:	1880541e 	bne	r3,r2,40271a0 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4027050:	e0bff60b 	ldhu	r2,-40(fp)
 4027054:	100b883a 	mov	r5,r2
 4027058:	e13ff117 	ldw	r4,-60(fp)
 402705c:	40275500 	call	4027550 <OS_FlagTaskRdy>
 4027060:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4027064:	e0bff683 	ldbu	r2,-38(fp)
 4027068:	10800058 	cmpnei	r2,r2,1
 402706c:	10004c1e 	bne	r2,zero,40271a0 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4027070:	00800044 	movi	r2,1
 4027074:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4027078:	00004906 	br	40271a0 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 402707c:	e0bffc17 	ldw	r2,-16(fp)
 4027080:	10c0020b 	ldhu	r3,8(r2)
 4027084:	e0bff117 	ldw	r2,-60(fp)
 4027088:	1080040b 	ldhu	r2,16(r2)
 402708c:	1884703a 	and	r2,r3,r2
 4027090:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4027094:	e0bff60b 	ldhu	r2,-40(fp)
 4027098:	10004326 	beq	r2,zero,40271a8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 402709c:	e0bff60b 	ldhu	r2,-40(fp)
 40270a0:	100b883a 	mov	r5,r2
 40270a4:	e13ff117 	ldw	r4,-60(fp)
 40270a8:	40275500 	call	4027550 <OS_FlagTaskRdy>
 40270ac:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 40270b0:	e0bff683 	ldbu	r2,-38(fp)
 40270b4:	10800058 	cmpnei	r2,r2,1
 40270b8:	10003b1e 	bne	r2,zero,40271a8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 40270bc:	00800044 	movi	r2,1
 40270c0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 40270c4:	00003806 	br	40271a8 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40270c8:	e0bffc17 	ldw	r2,-16(fp)
 40270cc:	1080020b 	ldhu	r2,8(r2)
 40270d0:	0084303a 	nor	r2,zero,r2
 40270d4:	1007883a 	mov	r3,r2
 40270d8:	e0bff117 	ldw	r2,-60(fp)
 40270dc:	1080040b 	ldhu	r2,16(r2)
 40270e0:	1884703a 	and	r2,r3,r2
 40270e4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 40270e8:	e0bff117 	ldw	r2,-60(fp)
 40270ec:	1080040b 	ldhu	r2,16(r2)
 40270f0:	10ffffcc 	andi	r3,r2,65535
 40270f4:	e0bff60b 	ldhu	r2,-40(fp)
 40270f8:	18802d1e 	bne	r3,r2,40271b0 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 40270fc:	e0bff60b 	ldhu	r2,-40(fp)
 4027100:	100b883a 	mov	r5,r2
 4027104:	e13ff117 	ldw	r4,-60(fp)
 4027108:	40275500 	call	4027550 <OS_FlagTaskRdy>
 402710c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4027110:	e0bff683 	ldbu	r2,-38(fp)
 4027114:	10800058 	cmpnei	r2,r2,1
 4027118:	1000251e 	bne	r2,zero,40271b0 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 402711c:	00800044 	movi	r2,1
 4027120:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4027124:	00002206 	br	40271b0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4027128:	e0bffc17 	ldw	r2,-16(fp)
 402712c:	1080020b 	ldhu	r2,8(r2)
 4027130:	0084303a 	nor	r2,zero,r2
 4027134:	1007883a 	mov	r3,r2
 4027138:	e0bff117 	ldw	r2,-60(fp)
 402713c:	1080040b 	ldhu	r2,16(r2)
 4027140:	1884703a 	and	r2,r3,r2
 4027144:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4027148:	e0bff60b 	ldhu	r2,-40(fp)
 402714c:	10001a26 	beq	r2,zero,40271b8 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4027150:	e0bff60b 	ldhu	r2,-40(fp)
 4027154:	100b883a 	mov	r5,r2
 4027158:	e13ff117 	ldw	r4,-60(fp)
 402715c:	40275500 	call	4027550 <OS_FlagTaskRdy>
 4027160:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4027164:	e0bff683 	ldbu	r2,-38(fp)
 4027168:	10800058 	cmpnei	r2,r2,1
 402716c:	1000121e 	bne	r2,zero,40271b8 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4027170:	00800044 	movi	r2,1
 4027174:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4027178:	00000f06 	br	40271b8 <OSFlagPost+0x300>
 402717c:	e0bff317 	ldw	r2,-52(fp)
 4027180:	e0bff515 	stw	r2,-44(fp)
 4027184:	e0bff517 	ldw	r2,-44(fp)
 4027188:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 402718c:	e0bfff17 	ldw	r2,-4(fp)
 4027190:	00c01bc4 	movi	r3,111
 4027194:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4027198:	0005883a 	mov	r2,zero
 402719c:	00002606 	br	4027238 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 40271a0:	0001883a 	nop
 40271a4:	00000506 	br	40271bc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 40271a8:	0001883a 	nop
 40271ac:	00000306 	br	40271bc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 40271b0:	0001883a 	nop
 40271b4:	00000106 	br	40271bc <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 40271b8:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 40271bc:	e0bff117 	ldw	r2,-60(fp)
 40271c0:	10800017 	ldw	r2,0(r2)
 40271c4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 40271c8:	e0bff117 	ldw	r2,-60(fp)
 40271cc:	103f871e 	bne	r2,zero,4026fec <__flash_rwdata_start+0xffff93e8>
 40271d0:	e0bff317 	ldw	r2,-52(fp)
 40271d4:	e0bff715 	stw	r2,-36(fp)
 40271d8:	e0bff717 	ldw	r2,-36(fp)
 40271dc:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 40271e0:	e0bff203 	ldbu	r2,-56(fp)
 40271e4:	10800058 	cmpnei	r2,r2,1
 40271e8:	1000011e 	bne	r2,zero,40271f0 <OSFlagPost+0x338>
        OS_Sched();
 40271ec:	40257700 	call	4025770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40271f0:	0005303a 	rdctl	r2,status
 40271f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40271f8:	e0fffa17 	ldw	r3,-24(fp)
 40271fc:	00bfff84 	movi	r2,-2
 4027200:	1884703a 	and	r2,r3,r2
 4027204:	1001703a 	wrctl	status,r2
  
  return context;
 4027208:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 402720c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 4027210:	e0bffc17 	ldw	r2,-16(fp)
 4027214:	1080020b 	ldhu	r2,8(r2)
 4027218:	e0bff90d 	sth	r2,-28(fp)
 402721c:	e0bff317 	ldw	r2,-52(fp)
 4027220:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4027224:	e0bff817 	ldw	r2,-32(fp)
 4027228:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 402722c:	e0bfff17 	ldw	r2,-4(fp)
 4027230:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 4027234:	e0bff90b 	ldhu	r2,-28(fp)
}
 4027238:	e037883a 	mov	sp,fp
 402723c:	dfc00117 	ldw	ra,4(sp)
 4027240:	df000017 	ldw	fp,0(sp)
 4027244:	dec00204 	addi	sp,sp,8
 4027248:	f800283a 	ret

0402724c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 402724c:	defff904 	addi	sp,sp,-28
 4027250:	df000615 	stw	fp,24(sp)
 4027254:	df000604 	addi	fp,sp,24
 4027258:	e13ffe15 	stw	r4,-8(fp)
 402725c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 4027260:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 4027264:	e0bfff17 	ldw	r2,-4(fp)
 4027268:	1000021e 	bne	r2,zero,4027274 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 402726c:	0005883a 	mov	r2,zero
 4027270:	00002306 	br	4027300 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 4027274:	e0bffe17 	ldw	r2,-8(fp)
 4027278:	1000051e 	bne	r2,zero,4027290 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 402727c:	e0bfff17 	ldw	r2,-4(fp)
 4027280:	00c01b84 	movi	r3,110
 4027284:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4027288:	0005883a 	mov	r2,zero
 402728c:	00001c06 	br	4027300 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 4027290:	e0bffe17 	ldw	r2,-8(fp)
 4027294:	10800003 	ldbu	r2,0(r2)
 4027298:	10803fcc 	andi	r2,r2,255
 402729c:	10800160 	cmpeqi	r2,r2,5
 40272a0:	1000051e 	bne	r2,zero,40272b8 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 40272a4:	e0bfff17 	ldw	r2,-4(fp)
 40272a8:	00c00044 	movi	r3,1
 40272ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40272b0:	0005883a 	mov	r2,zero
 40272b4:	00001206 	br	4027300 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40272b8:	0005303a 	rdctl	r2,status
 40272bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40272c0:	e0fffc17 	ldw	r3,-16(fp)
 40272c4:	00bfff84 	movi	r2,-2
 40272c8:	1884703a 	and	r2,r3,r2
 40272cc:	1001703a 	wrctl	status,r2
  
  return context;
 40272d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40272d4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 40272d8:	e0bffe17 	ldw	r2,-8(fp)
 40272dc:	1080020b 	ldhu	r2,8(r2)
 40272e0:	e0bffb0d 	sth	r2,-20(fp)
 40272e4:	e0bffa17 	ldw	r2,-24(fp)
 40272e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40272ec:	e0bffd17 	ldw	r2,-12(fp)
 40272f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40272f4:	e0bfff17 	ldw	r2,-4(fp)
 40272f8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 40272fc:	e0bffb0b 	ldhu	r2,-20(fp)
}
 4027300:	e037883a 	mov	sp,fp
 4027304:	df000017 	ldw	fp,0(sp)
 4027308:	dec00104 	addi	sp,sp,4
 402730c:	f800283a 	ret

04027310 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 4027310:	defff804 	addi	sp,sp,-32
 4027314:	df000715 	stw	fp,28(sp)
 4027318:	df000704 	addi	fp,sp,28
 402731c:	e13ffb15 	stw	r4,-20(fp)
 4027320:	e17ffc15 	stw	r5,-16(fp)
 4027324:	3009883a 	mov	r4,r6
 4027328:	3807883a 	mov	r3,r7
 402732c:	e0800117 	ldw	r2,4(fp)
 4027330:	e13ffd0d 	sth	r4,-12(fp)
 4027334:	e0fffe05 	stb	r3,-8(fp)
 4027338:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 402733c:	d0a04817 	ldw	r2,-32480(gp)
 4027340:	d0e04817 	ldw	r3,-32480(gp)
 4027344:	18c00c03 	ldbu	r3,48(r3)
 4027348:	18c00814 	ori	r3,r3,32
 402734c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 4027350:	d0a04817 	ldw	r2,-32480(gp)
 4027354:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 4027358:	d0a04817 	ldw	r2,-32480(gp)
 402735c:	e0ffff0b 	ldhu	r3,-4(fp)
 4027360:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 4027364:	d0a04817 	ldw	r2,-32480(gp)
 4027368:	e0fffc17 	ldw	r3,-16(fp)
 402736c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 4027370:	e0bffc17 	ldw	r2,-16(fp)
 4027374:	e0fffd0b 	ldhu	r3,-12(fp)
 4027378:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 402737c:	e0bffc17 	ldw	r2,-16(fp)
 4027380:	e0fffe03 	ldbu	r3,-8(fp)
 4027384:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 4027388:	d0e04817 	ldw	r3,-32480(gp)
 402738c:	e0bffc17 	ldw	r2,-16(fp)
 4027390:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 4027394:	e0bffb17 	ldw	r2,-20(fp)
 4027398:	10c00117 	ldw	r3,4(r2)
 402739c:	e0bffc17 	ldw	r2,-16(fp)
 40273a0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 40273a4:	e0bffc17 	ldw	r2,-16(fp)
 40273a8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 40273ac:	e0bffc17 	ldw	r2,-16(fp)
 40273b0:	e0fffb17 	ldw	r3,-20(fp)
 40273b4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 40273b8:	e0bffb17 	ldw	r2,-20(fp)
 40273bc:	10800117 	ldw	r2,4(r2)
 40273c0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 40273c4:	e0bff917 	ldw	r2,-28(fp)
 40273c8:	10000326 	beq	r2,zero,40273d8 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 40273cc:	e0bff917 	ldw	r2,-28(fp)
 40273d0:	e0fffc17 	ldw	r3,-16(fp)
 40273d4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 40273d8:	e0bffb17 	ldw	r2,-20(fp)
 40273dc:	e0fffc17 	ldw	r3,-16(fp)
 40273e0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 40273e4:	d0a04817 	ldw	r2,-32480(gp)
 40273e8:	10800d03 	ldbu	r2,52(r2)
 40273ec:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 40273f0:	e0fffa03 	ldbu	r3,-24(fp)
 40273f4:	e13ffa03 	ldbu	r4,-24(fp)
 40273f8:	d0a04544 	addi	r2,gp,-32491
 40273fc:	2085883a 	add	r2,r4,r2
 4027400:	10800003 	ldbu	r2,0(r2)
 4027404:	1009883a 	mov	r4,r2
 4027408:	d0a04817 	ldw	r2,-32480(gp)
 402740c:	10800d43 	ldbu	r2,53(r2)
 4027410:	0084303a 	nor	r2,zero,r2
 4027414:	2084703a 	and	r2,r4,r2
 4027418:	1009883a 	mov	r4,r2
 402741c:	d0a04544 	addi	r2,gp,-32491
 4027420:	1885883a 	add	r2,r3,r2
 4027424:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 4027428:	e0fffa03 	ldbu	r3,-24(fp)
 402742c:	d0a04544 	addi	r2,gp,-32491
 4027430:	1885883a 	add	r2,r3,r2
 4027434:	10800003 	ldbu	r2,0(r2)
 4027438:	10803fcc 	andi	r2,r2,255
 402743c:	1000071e 	bne	r2,zero,402745c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4027440:	d0a04817 	ldw	r2,-32480(gp)
 4027444:	10800d83 	ldbu	r2,54(r2)
 4027448:	0084303a 	nor	r2,zero,r2
 402744c:	1007883a 	mov	r3,r2
 4027450:	d0a04503 	ldbu	r2,-32492(gp)
 4027454:	1884703a 	and	r2,r3,r2
 4027458:	d0a04505 	stb	r2,-32492(gp)
    }
}
 402745c:	0001883a 	nop
 4027460:	e037883a 	mov	sp,fp
 4027464:	df000017 	ldw	fp,0(sp)
 4027468:	dec00104 	addi	sp,sp,4
 402746c:	f800283a 	ret

04027470 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 4027470:	defffb04 	addi	sp,sp,-20
 4027474:	dfc00415 	stw	ra,16(sp)
 4027478:	df000315 	stw	fp,12(sp)
 402747c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 4027480:	0140dc04 	movi	r5,880
 4027484:	01000034 	movhi	r4,0
 4027488:	21174b04 	addi	r4,r4,23852
 402748c:	40256b40 	call	40256b4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 4027490:	00800034 	movhi	r2,0
 4027494:	10974b04 	addi	r2,r2,23852
 4027498:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 402749c:	00800034 	movhi	r2,0
 40274a0:	10975604 	addi	r2,r2,23896
 40274a4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 40274a8:	e03ffd0d 	sth	zero,-12(fp)
 40274ac:	00001306 	br	40274fc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 40274b0:	e0bffe17 	ldw	r2,-8(fp)
 40274b4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 40274b8:	e0bffe17 	ldw	r2,-8(fp)
 40274bc:	e0ffff17 	ldw	r3,-4(fp)
 40274c0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 40274c4:	e0bffe17 	ldw	r2,-8(fp)
 40274c8:	00c00fc4 	movi	r3,63
 40274cc:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 40274d0:	e0bffe17 	ldw	r2,-8(fp)
 40274d4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 40274d8:	e0bffe17 	ldw	r2,-8(fp)
 40274dc:	10800b04 	addi	r2,r2,44
 40274e0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 40274e4:	e0bfff17 	ldw	r2,-4(fp)
 40274e8:	10800b04 	addi	r2,r2,44
 40274ec:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 40274f0:	e0bffd0b 	ldhu	r2,-12(fp)
 40274f4:	10800044 	addi	r2,r2,1
 40274f8:	e0bffd0d 	sth	r2,-12(fp)
 40274fc:	e0bffd0b 	ldhu	r2,-12(fp)
 4027500:	108004f0 	cmpltui	r2,r2,19
 4027504:	103fea1e 	bne	r2,zero,40274b0 <__flash_rwdata_start+0xffff98ac>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4027508:	e0bffe17 	ldw	r2,-8(fp)
 402750c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 4027510:	e0bffe17 	ldw	r2,-8(fp)
 4027514:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 4027518:	e0bffe17 	ldw	r2,-8(fp)
 402751c:	00c00fc4 	movi	r3,63
 4027520:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4027524:	e0bffe17 	ldw	r2,-8(fp)
 4027528:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 402752c:	00800034 	movhi	r2,0
 4027530:	10974b04 	addi	r2,r2,23852
 4027534:	d0a04a15 	stw	r2,-32472(gp)
#endif
}
 4027538:	0001883a 	nop
 402753c:	e037883a 	mov	sp,fp
 4027540:	dfc00117 	ldw	ra,4(sp)
 4027544:	df000017 	ldw	fp,0(sp)
 4027548:	dec00204 	addi	sp,sp,8
 402754c:	f800283a 	ret

04027550 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 4027550:	defffa04 	addi	sp,sp,-24
 4027554:	dfc00515 	stw	ra,20(sp)
 4027558:	df000415 	stw	fp,16(sp)
 402755c:	df000404 	addi	fp,sp,16
 4027560:	e13ffe15 	stw	r4,-8(fp)
 4027564:	2805883a 	mov	r2,r5
 4027568:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 402756c:	e0bffe17 	ldw	r2,-8(fp)
 4027570:	10800217 	ldw	r2,8(r2)
 4027574:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 4027578:	e0bffd17 	ldw	r2,-12(fp)
 402757c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 4027580:	e0bffd17 	ldw	r2,-12(fp)
 4027584:	e0ffff0b 	ldhu	r3,-4(fp)
 4027588:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 402758c:	e0bffd17 	ldw	r2,-12(fp)
 4027590:	10c00c03 	ldbu	r3,48(r2)
 4027594:	00bff7c4 	movi	r2,-33
 4027598:	1884703a 	and	r2,r3,r2
 402759c:	1007883a 	mov	r3,r2
 40275a0:	e0bffd17 	ldw	r2,-12(fp)
 40275a4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 40275a8:	e0bffd17 	ldw	r2,-12(fp)
 40275ac:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 40275b0:	e0bffd17 	ldw	r2,-12(fp)
 40275b4:	10800c03 	ldbu	r2,48(r2)
 40275b8:	10803fcc 	andi	r2,r2,255
 40275bc:	1000181e 	bne	r2,zero,4027620 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 40275c0:	e0bffd17 	ldw	r2,-12(fp)
 40275c4:	10c00d83 	ldbu	r3,54(r2)
 40275c8:	d0a04503 	ldbu	r2,-32492(gp)
 40275cc:	1884b03a 	or	r2,r3,r2
 40275d0:	d0a04505 	stb	r2,-32492(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 40275d4:	e0bffd17 	ldw	r2,-12(fp)
 40275d8:	10800d03 	ldbu	r2,52(r2)
 40275dc:	10c03fcc 	andi	r3,r2,255
 40275e0:	e0bffd17 	ldw	r2,-12(fp)
 40275e4:	10800d03 	ldbu	r2,52(r2)
 40275e8:	11003fcc 	andi	r4,r2,255
 40275ec:	d0a04544 	addi	r2,gp,-32491
 40275f0:	2085883a 	add	r2,r4,r2
 40275f4:	11000003 	ldbu	r4,0(r2)
 40275f8:	e0bffd17 	ldw	r2,-12(fp)
 40275fc:	10800d43 	ldbu	r2,53(r2)
 4027600:	2084b03a 	or	r2,r4,r2
 4027604:	1009883a 	mov	r4,r2
 4027608:	d0a04544 	addi	r2,gp,-32491
 402760c:	1885883a 	add	r2,r3,r2
 4027610:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 4027614:	00800044 	movi	r2,1
 4027618:	e0bffc05 	stb	r2,-16(fp)
 402761c:	00000106 	br	4027624 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 4027620:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 4027624:	e13ffe17 	ldw	r4,-8(fp)
 4027628:	40276440 	call	4027644 <OS_FlagUnlink>
    return (sched);
 402762c:	e0bffc03 	ldbu	r2,-16(fp)
}
 4027630:	e037883a 	mov	sp,fp
 4027634:	dfc00117 	ldw	ra,4(sp)
 4027638:	df000017 	ldw	fp,0(sp)
 402763c:	dec00204 	addi	sp,sp,8
 4027640:	f800283a 	ret

04027644 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 4027644:	defffa04 	addi	sp,sp,-24
 4027648:	df000515 	stw	fp,20(sp)
 402764c:	df000504 	addi	fp,sp,20
 4027650:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 4027654:	e0bfff17 	ldw	r2,-4(fp)
 4027658:	10800117 	ldw	r2,4(r2)
 402765c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4027660:	e0bfff17 	ldw	r2,-4(fp)
 4027664:	10800017 	ldw	r2,0(r2)
 4027668:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 402766c:	e0bffb17 	ldw	r2,-20(fp)
 4027670:	10000b1e 	bne	r2,zero,40276a0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 4027674:	e0bfff17 	ldw	r2,-4(fp)
 4027678:	10800317 	ldw	r2,12(r2)
 402767c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 4027680:	e0bffd17 	ldw	r2,-12(fp)
 4027684:	e0fffc17 	ldw	r3,-16(fp)
 4027688:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 402768c:	e0bffc17 	ldw	r2,-16(fp)
 4027690:	10000b26 	beq	r2,zero,40276c0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 4027694:	e0bffc17 	ldw	r2,-16(fp)
 4027698:	10000115 	stw	zero,4(r2)
 402769c:	00000806 	br	40276c0 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 40276a0:	e0bffb17 	ldw	r2,-20(fp)
 40276a4:	e0fffc17 	ldw	r3,-16(fp)
 40276a8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 40276ac:	e0bffc17 	ldw	r2,-16(fp)
 40276b0:	10000326 	beq	r2,zero,40276c0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 40276b4:	e0bffc17 	ldw	r2,-16(fp)
 40276b8:	e0fffb17 	ldw	r3,-20(fp)
 40276bc:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 40276c0:	e0bfff17 	ldw	r2,-4(fp)
 40276c4:	10800217 	ldw	r2,8(r2)
 40276c8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 40276cc:	e0bffe17 	ldw	r2,-8(fp)
 40276d0:	10000a15 	stw	zero,40(r2)
#endif
}
 40276d4:	0001883a 	nop
 40276d8:	e037883a 	mov	sp,fp
 40276dc:	df000017 	ldw	fp,0(sp)
 40276e0:	dec00104 	addi	sp,sp,4
 40276e4:	f800283a 	ret

040276e8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 40276e8:	defff404 	addi	sp,sp,-48
 40276ec:	df000b15 	stw	fp,44(sp)
 40276f0:	df000b04 	addi	fp,sp,44
 40276f4:	e13ffc15 	stw	r4,-16(fp)
 40276f8:	e17ffd15 	stw	r5,-12(fp)
 40276fc:	e1bffe15 	stw	r6,-8(fp)
 4027700:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4027704:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4027708:	e0bfff17 	ldw	r2,-4(fp)
 402770c:	1000021e 	bne	r2,zero,4027718 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 4027710:	0005883a 	mov	r2,zero
 4027714:	00006506 	br	40278ac <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 4027718:	e0bffc17 	ldw	r2,-16(fp)
 402771c:	1000051e 	bne	r2,zero,4027734 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 4027720:	e0bfff17 	ldw	r2,-4(fp)
 4027724:	00c01884 	movi	r3,98
 4027728:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 402772c:	0005883a 	mov	r2,zero
 4027730:	00005e06 	br	40278ac <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 4027734:	e0bffc17 	ldw	r2,-16(fp)
 4027738:	108000cc 	andi	r2,r2,3
 402773c:	10000526 	beq	r2,zero,4027754 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 4027740:	e0bfff17 	ldw	r2,-4(fp)
 4027744:	00c01884 	movi	r3,98
 4027748:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 402774c:	0005883a 	mov	r2,zero
 4027750:	00005606 	br	40278ac <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 4027754:	e0bffd17 	ldw	r2,-12(fp)
 4027758:	108000a8 	cmpgeui	r2,r2,2
 402775c:	1000051e 	bne	r2,zero,4027774 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 4027760:	e0bfff17 	ldw	r2,-4(fp)
 4027764:	00c016c4 	movi	r3,91
 4027768:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 402776c:	0005883a 	mov	r2,zero
 4027770:	00004e06 	br	40278ac <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 4027774:	e0bffe17 	ldw	r2,-8(fp)
 4027778:	10800128 	cmpgeui	r2,r2,4
 402777c:	1000051e 	bne	r2,zero,4027794 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 4027780:	e0bfff17 	ldw	r2,-4(fp)
 4027784:	00c01704 	movi	r3,92
 4027788:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 402778c:	0005883a 	mov	r2,zero
 4027790:	00004606 	br	40278ac <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4027794:	0005303a 	rdctl	r2,status
 4027798:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402779c:	e0fffb17 	ldw	r3,-20(fp)
 40277a0:	00bfff84 	movi	r2,-2
 40277a4:	1884703a 	and	r2,r3,r2
 40277a8:	1001703a 	wrctl	status,r2
  
  return context;
 40277ac:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40277b0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 40277b4:	d0a04217 	ldw	r2,-32504(gp)
 40277b8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 40277bc:	d0a04217 	ldw	r2,-32504(gp)
 40277c0:	10000326 	beq	r2,zero,40277d0 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 40277c4:	d0a04217 	ldw	r2,-32504(gp)
 40277c8:	10800117 	ldw	r2,4(r2)
 40277cc:	d0a04215 	stw	r2,-32504(gp)
 40277d0:	e0bff817 	ldw	r2,-32(fp)
 40277d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40277d8:	e0bff917 	ldw	r2,-28(fp)
 40277dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 40277e0:	e0bffa17 	ldw	r2,-24(fp)
 40277e4:	1000051e 	bne	r2,zero,40277fc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 40277e8:	e0bfff17 	ldw	r2,-4(fp)
 40277ec:	00c01684 	movi	r3,90
 40277f0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 40277f4:	0005883a 	mov	r2,zero
 40277f8:	00002c06 	br	40278ac <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 40277fc:	e0bffc17 	ldw	r2,-16(fp)
 4027800:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 4027804:	e0fffc17 	ldw	r3,-16(fp)
 4027808:	e0bffe17 	ldw	r2,-8(fp)
 402780c:	1885883a 	add	r2,r3,r2
 4027810:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 4027814:	e03ff715 	stw	zero,-36(fp)
 4027818:	00000c06 	br	402784c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 402781c:	e0bff617 	ldw	r2,-40(fp)
 4027820:	e0fff517 	ldw	r3,-44(fp)
 4027824:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 4027828:	e0bff517 	ldw	r2,-44(fp)
 402782c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 4027830:	e0fff517 	ldw	r3,-44(fp)
 4027834:	e0bffe17 	ldw	r2,-8(fp)
 4027838:	1885883a 	add	r2,r3,r2
 402783c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 4027840:	e0bff717 	ldw	r2,-36(fp)
 4027844:	10800044 	addi	r2,r2,1
 4027848:	e0bff715 	stw	r2,-36(fp)
 402784c:	e0bffd17 	ldw	r2,-12(fp)
 4027850:	10bfffc4 	addi	r2,r2,-1
 4027854:	e0fff717 	ldw	r3,-36(fp)
 4027858:	18bff036 	bltu	r3,r2,402781c <__flash_rwdata_start+0xffff9c18>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 402785c:	e0bff617 	ldw	r2,-40(fp)
 4027860:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 4027864:	e0bffa17 	ldw	r2,-24(fp)
 4027868:	e0fffc17 	ldw	r3,-16(fp)
 402786c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 4027870:	e0bffa17 	ldw	r2,-24(fp)
 4027874:	e0fffc17 	ldw	r3,-16(fp)
 4027878:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 402787c:	e0bffa17 	ldw	r2,-24(fp)
 4027880:	e0fffd17 	ldw	r3,-12(fp)
 4027884:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 4027888:	e0bffa17 	ldw	r2,-24(fp)
 402788c:	e0fffd17 	ldw	r3,-12(fp)
 4027890:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 4027894:	e0bffa17 	ldw	r2,-24(fp)
 4027898:	e0fffe17 	ldw	r3,-8(fp)
 402789c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 40278a0:	e0bfff17 	ldw	r2,-4(fp)
 40278a4:	10000005 	stb	zero,0(r2)
    return (pmem);
 40278a8:	e0bffa17 	ldw	r2,-24(fp)
}
 40278ac:	e037883a 	mov	sp,fp
 40278b0:	df000017 	ldw	fp,0(sp)
 40278b4:	dec00104 	addi	sp,sp,4
 40278b8:	f800283a 	ret

040278bc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 40278bc:	defff804 	addi	sp,sp,-32
 40278c0:	df000715 	stw	fp,28(sp)
 40278c4:	df000704 	addi	fp,sp,28
 40278c8:	e13ffe15 	stw	r4,-8(fp)
 40278cc:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40278d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40278d4:	e0bfff17 	ldw	r2,-4(fp)
 40278d8:	1000021e 	bne	r2,zero,40278e4 <OSMemGet+0x28>
        return ((void *)0);
 40278dc:	0005883a 	mov	r2,zero
 40278e0:	00002e06 	br	402799c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 40278e4:	e0bffe17 	ldw	r2,-8(fp)
 40278e8:	1000051e 	bne	r2,zero,4027900 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 40278ec:	e0bfff17 	ldw	r2,-4(fp)
 40278f0:	00c01804 	movi	r3,96
 40278f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40278f8:	0005883a 	mov	r2,zero
 40278fc:	00002706 	br	402799c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4027900:	0005303a 	rdctl	r2,status
 4027904:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4027908:	e0fffd17 	ldw	r3,-12(fp)
 402790c:	00bfff84 	movi	r2,-2
 4027910:	1884703a 	and	r2,r3,r2
 4027914:	1001703a 	wrctl	status,r2
  
  return context;
 4027918:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 402791c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 4027920:	e0bffe17 	ldw	r2,-8(fp)
 4027924:	10800417 	ldw	r2,16(r2)
 4027928:	10001426 	beq	r2,zero,402797c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 402792c:	e0bffe17 	ldw	r2,-8(fp)
 4027930:	10800117 	ldw	r2,4(r2)
 4027934:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 4027938:	e0bffb17 	ldw	r2,-20(fp)
 402793c:	10c00017 	ldw	r3,0(r2)
 4027940:	e0bffe17 	ldw	r2,-8(fp)
 4027944:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 4027948:	e0bffe17 	ldw	r2,-8(fp)
 402794c:	10800417 	ldw	r2,16(r2)
 4027950:	10ffffc4 	addi	r3,r2,-1
 4027954:	e0bffe17 	ldw	r2,-8(fp)
 4027958:	10c00415 	stw	r3,16(r2)
 402795c:	e0bff917 	ldw	r2,-28(fp)
 4027960:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4027964:	e0bffa17 	ldw	r2,-24(fp)
 4027968:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 402796c:	e0bfff17 	ldw	r2,-4(fp)
 4027970:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 4027974:	e0bffb17 	ldw	r2,-20(fp)
 4027978:	00000806 	br	402799c <OSMemGet+0xe0>
 402797c:	e0bff917 	ldw	r2,-28(fp)
 4027980:	e0bffc15 	stw	r2,-16(fp)
 4027984:	e0bffc17 	ldw	r2,-16(fp)
 4027988:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 402798c:	e0bfff17 	ldw	r2,-4(fp)
 4027990:	00c01744 	movi	r3,93
 4027994:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 4027998:	0005883a 	mov	r2,zero
}
 402799c:	e037883a 	mov	sp,fp
 40279a0:	df000017 	ldw	fp,0(sp)
 40279a4:	dec00104 	addi	sp,sp,4
 40279a8:	f800283a 	ret

040279ac <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 40279ac:	defff704 	addi	sp,sp,-36
 40279b0:	dfc00815 	stw	ra,32(sp)
 40279b4:	df000715 	stw	fp,28(sp)
 40279b8:	df000704 	addi	fp,sp,28
 40279bc:	e13ffd15 	stw	r4,-12(fp)
 40279c0:	e17ffe15 	stw	r5,-8(fp)
 40279c4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40279c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 40279cc:	e0bfff17 	ldw	r2,-4(fp)
 40279d0:	1000021e 	bne	r2,zero,40279dc <OSMemNameGet+0x30>
        return (0);
 40279d4:	0005883a 	mov	r2,zero
 40279d8:	00002b06 	br	4027a88 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 40279dc:	e0bffd17 	ldw	r2,-12(fp)
 40279e0:	1000051e 	bne	r2,zero,40279f8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 40279e4:	e0bfff17 	ldw	r2,-4(fp)
 40279e8:	00c01804 	movi	r3,96
 40279ec:	10c00005 	stb	r3,0(r2)
        return (0);
 40279f0:	0005883a 	mov	r2,zero
 40279f4:	00002406 	br	4027a88 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 40279f8:	e0bffe17 	ldw	r2,-8(fp)
 40279fc:	1000051e 	bne	r2,zero,4027a14 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4027a00:	e0bfff17 	ldw	r2,-4(fp)
 4027a04:	00c00304 	movi	r3,12
 4027a08:	10c00005 	stb	r3,0(r2)
        return (0);
 4027a0c:	0005883a 	mov	r2,zero
 4027a10:	00001d06 	br	4027a88 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4027a14:	d0a04703 	ldbu	r2,-32484(gp)
 4027a18:	10803fcc 	andi	r2,r2,255
 4027a1c:	10000526 	beq	r2,zero,4027a34 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 4027a20:	e0bfff17 	ldw	r2,-4(fp)
 4027a24:	00c00444 	movi	r3,17
 4027a28:	10c00005 	stb	r3,0(r2)
        return (0);
 4027a2c:	0005883a 	mov	r2,zero
 4027a30:	00001506 	br	4027a88 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4027a34:	0005303a 	rdctl	r2,status
 4027a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4027a3c:	e0fffb17 	ldw	r3,-20(fp)
 4027a40:	00bfff84 	movi	r2,-2
 4027a44:	1884703a 	and	r2,r3,r2
 4027a48:	1001703a 	wrctl	status,r2
  
  return context;
 4027a4c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4027a50:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 4027a54:	e0bffd17 	ldw	r2,-12(fp)
 4027a58:	10800504 	addi	r2,r2,20
 4027a5c:	100b883a 	mov	r5,r2
 4027a60:	e13ffe17 	ldw	r4,-8(fp)
 4027a64:	40258b40 	call	40258b4 <OS_StrCopy>
 4027a68:	e0bffa05 	stb	r2,-24(fp)
 4027a6c:	e0bff917 	ldw	r2,-28(fp)
 4027a70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4027a74:	e0bffc17 	ldw	r2,-16(fp)
 4027a78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4027a7c:	e0bfff17 	ldw	r2,-4(fp)
 4027a80:	10000005 	stb	zero,0(r2)
    return (len);
 4027a84:	e0bffa03 	ldbu	r2,-24(fp)
}
 4027a88:	e037883a 	mov	sp,fp
 4027a8c:	dfc00117 	ldw	ra,4(sp)
 4027a90:	df000017 	ldw	fp,0(sp)
 4027a94:	dec00204 	addi	sp,sp,8
 4027a98:	f800283a 	ret

04027a9c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4027a9c:	defff604 	addi	sp,sp,-40
 4027aa0:	dfc00915 	stw	ra,36(sp)
 4027aa4:	df000815 	stw	fp,32(sp)
 4027aa8:	df000804 	addi	fp,sp,32
 4027aac:	e13ffd15 	stw	r4,-12(fp)
 4027ab0:	e17ffe15 	stw	r5,-8(fp)
 4027ab4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4027ab8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4027abc:	e0bfff17 	ldw	r2,-4(fp)
 4027ac0:	10003526 	beq	r2,zero,4027b98 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4027ac4:	e0bffd17 	ldw	r2,-12(fp)
 4027ac8:	1000041e 	bne	r2,zero,4027adc <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4027acc:	e0bfff17 	ldw	r2,-4(fp)
 4027ad0:	00c01804 	movi	r3,96
 4027ad4:	10c00005 	stb	r3,0(r2)
        return;
 4027ad8:	00003006 	br	4027b9c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4027adc:	e0bffe17 	ldw	r2,-8(fp)
 4027ae0:	1000041e 	bne	r2,zero,4027af4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4027ae4:	e0bfff17 	ldw	r2,-4(fp)
 4027ae8:	00c00304 	movi	r3,12
 4027aec:	10c00005 	stb	r3,0(r2)
        return;
 4027af0:	00002a06 	br	4027b9c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4027af4:	d0a04703 	ldbu	r2,-32484(gp)
 4027af8:	10803fcc 	andi	r2,r2,255
 4027afc:	10000426 	beq	r2,zero,4027b10 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4027b00:	e0bfff17 	ldw	r2,-4(fp)
 4027b04:	00c00484 	movi	r3,18
 4027b08:	10c00005 	stb	r3,0(r2)
        return;
 4027b0c:	00002306 	br	4027b9c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4027b10:	0005303a 	rdctl	r2,status
 4027b14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4027b18:	e0fffc17 	ldw	r3,-16(fp)
 4027b1c:	00bfff84 	movi	r2,-2
 4027b20:	1884703a 	and	r2,r3,r2
 4027b24:	1001703a 	wrctl	status,r2
  
  return context;
 4027b28:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4027b2c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 4027b30:	e13ffe17 	ldw	r4,-8(fp)
 4027b34:	40259280 	call	4025928 <OS_StrLen>
 4027b38:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 4027b3c:	e0bffa03 	ldbu	r2,-24(fp)
 4027b40:	10800830 	cmpltui	r2,r2,32
 4027b44:	1000081e 	bne	r2,zero,4027b68 <OSMemNameSet+0xcc>
 4027b48:	e0bff817 	ldw	r2,-32(fp)
 4027b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4027b50:	e0bff917 	ldw	r2,-28(fp)
 4027b54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 4027b58:	e0bfff17 	ldw	r2,-4(fp)
 4027b5c:	00c018c4 	movi	r3,99
 4027b60:	10c00005 	stb	r3,0(r2)
        return;
 4027b64:	00000d06 	br	4027b9c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 4027b68:	e0bffd17 	ldw	r2,-12(fp)
 4027b6c:	10800504 	addi	r2,r2,20
 4027b70:	e17ffe17 	ldw	r5,-8(fp)
 4027b74:	1009883a 	mov	r4,r2
 4027b78:	40258b40 	call	40258b4 <OS_StrCopy>
 4027b7c:	e0bff817 	ldw	r2,-32(fp)
 4027b80:	e0bffb15 	stw	r2,-20(fp)
 4027b84:	e0bffb17 	ldw	r2,-20(fp)
 4027b88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4027b8c:	e0bfff17 	ldw	r2,-4(fp)
 4027b90:	10000005 	stb	zero,0(r2)
 4027b94:	00000106 	br	4027b9c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4027b98:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4027b9c:	e037883a 	mov	sp,fp
 4027ba0:	dfc00117 	ldw	ra,4(sp)
 4027ba4:	df000017 	ldw	fp,0(sp)
 4027ba8:	dec00204 	addi	sp,sp,8
 4027bac:	f800283a 	ret

04027bb0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 4027bb0:	defff904 	addi	sp,sp,-28
 4027bb4:	df000615 	stw	fp,24(sp)
 4027bb8:	df000604 	addi	fp,sp,24
 4027bbc:	e13ffe15 	stw	r4,-8(fp)
 4027bc0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4027bc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4027bc8:	e0bffe17 	ldw	r2,-8(fp)
 4027bcc:	1000021e 	bne	r2,zero,4027bd8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 4027bd0:	00801804 	movi	r2,96
 4027bd4:	00002806 	br	4027c78 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 4027bd8:	e0bfff17 	ldw	r2,-4(fp)
 4027bdc:	1000021e 	bne	r2,zero,4027be8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 4027be0:	008017c4 	movi	r2,95
 4027be4:	00002406 	br	4027c78 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4027be8:	0005303a 	rdctl	r2,status
 4027bec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4027bf0:	e0fffd17 	ldw	r3,-12(fp)
 4027bf4:	00bfff84 	movi	r2,-2
 4027bf8:	1884703a 	and	r2,r3,r2
 4027bfc:	1001703a 	wrctl	status,r2
  
  return context;
 4027c00:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4027c04:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 4027c08:	e0bffe17 	ldw	r2,-8(fp)
 4027c0c:	10c00417 	ldw	r3,16(r2)
 4027c10:	e0bffe17 	ldw	r2,-8(fp)
 4027c14:	10800317 	ldw	r2,12(r2)
 4027c18:	18800636 	bltu	r3,r2,4027c34 <OSMemPut+0x84>
 4027c1c:	e0bffa17 	ldw	r2,-24(fp)
 4027c20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4027c24:	e0bffb17 	ldw	r2,-20(fp)
 4027c28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 4027c2c:	00801784 	movi	r2,94
 4027c30:	00001106 	br	4027c78 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 4027c34:	e0bffe17 	ldw	r2,-8(fp)
 4027c38:	10c00117 	ldw	r3,4(r2)
 4027c3c:	e0bfff17 	ldw	r2,-4(fp)
 4027c40:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 4027c44:	e0bffe17 	ldw	r2,-8(fp)
 4027c48:	e0ffff17 	ldw	r3,-4(fp)
 4027c4c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 4027c50:	e0bffe17 	ldw	r2,-8(fp)
 4027c54:	10800417 	ldw	r2,16(r2)
 4027c58:	10c00044 	addi	r3,r2,1
 4027c5c:	e0bffe17 	ldw	r2,-8(fp)
 4027c60:	10c00415 	stw	r3,16(r2)
 4027c64:	e0bffa17 	ldw	r2,-24(fp)
 4027c68:	e0bffc15 	stw	r2,-16(fp)
 4027c6c:	e0bffc17 	ldw	r2,-16(fp)
 4027c70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 4027c74:	0005883a 	mov	r2,zero
}
 4027c78:	e037883a 	mov	sp,fp
 4027c7c:	df000017 	ldw	fp,0(sp)
 4027c80:	dec00104 	addi	sp,sp,4
 4027c84:	f800283a 	ret

04027c88 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 4027c88:	defffa04 	addi	sp,sp,-24
 4027c8c:	df000515 	stw	fp,20(sp)
 4027c90:	df000504 	addi	fp,sp,20
 4027c94:	e13ffe15 	stw	r4,-8(fp)
 4027c98:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4027c9c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4027ca0:	e0bffe17 	ldw	r2,-8(fp)
 4027ca4:	1000021e 	bne	r2,zero,4027cb0 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 4027ca8:	00801804 	movi	r2,96
 4027cac:	00002c06 	br	4027d60 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 4027cb0:	e0bfff17 	ldw	r2,-4(fp)
 4027cb4:	1000021e 	bne	r2,zero,4027cc0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 4027cb8:	00801844 	movi	r2,97
 4027cbc:	00002806 	br	4027d60 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4027cc0:	0005303a 	rdctl	r2,status
 4027cc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4027cc8:	e0fffc17 	ldw	r3,-16(fp)
 4027ccc:	00bfff84 	movi	r2,-2
 4027cd0:	1884703a 	and	r2,r3,r2
 4027cd4:	1001703a 	wrctl	status,r2
  
  return context;
 4027cd8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4027cdc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 4027ce0:	e0bffe17 	ldw	r2,-8(fp)
 4027ce4:	10c00017 	ldw	r3,0(r2)
 4027ce8:	e0bfff17 	ldw	r2,-4(fp)
 4027cec:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 4027cf0:	e0bffe17 	ldw	r2,-8(fp)
 4027cf4:	10c00117 	ldw	r3,4(r2)
 4027cf8:	e0bfff17 	ldw	r2,-4(fp)
 4027cfc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 4027d00:	e0bffe17 	ldw	r2,-8(fp)
 4027d04:	10c00217 	ldw	r3,8(r2)
 4027d08:	e0bfff17 	ldw	r2,-4(fp)
 4027d0c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 4027d10:	e0bffe17 	ldw	r2,-8(fp)
 4027d14:	10c00317 	ldw	r3,12(r2)
 4027d18:	e0bfff17 	ldw	r2,-4(fp)
 4027d1c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 4027d20:	e0bffe17 	ldw	r2,-8(fp)
 4027d24:	10c00417 	ldw	r3,16(r2)
 4027d28:	e0bfff17 	ldw	r2,-4(fp)
 4027d2c:	10c00415 	stw	r3,16(r2)
 4027d30:	e0bffb17 	ldw	r2,-20(fp)
 4027d34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4027d38:	e0bffd17 	ldw	r2,-12(fp)
 4027d3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 4027d40:	e0bfff17 	ldw	r2,-4(fp)
 4027d44:	10c00317 	ldw	r3,12(r2)
 4027d48:	e0bfff17 	ldw	r2,-4(fp)
 4027d4c:	10800417 	ldw	r2,16(r2)
 4027d50:	1887c83a 	sub	r3,r3,r2
 4027d54:	e0bfff17 	ldw	r2,-4(fp)
 4027d58:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 4027d5c:	0005883a 	mov	r2,zero
}
 4027d60:	e037883a 	mov	sp,fp
 4027d64:	df000017 	ldw	fp,0(sp)
 4027d68:	dec00104 	addi	sp,sp,4
 4027d6c:	f800283a 	ret

04027d70 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 4027d70:	defffc04 	addi	sp,sp,-16
 4027d74:	dfc00315 	stw	ra,12(sp)
 4027d78:	df000215 	stw	fp,8(sp)
 4027d7c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 4027d80:	01430c04 	movi	r5,3120
 4027d84:	01000034 	movhi	r4,0
 4027d88:	21182704 	addi	r4,r4,24732
 4027d8c:	40256b40 	call	40256b4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 4027d90:	00800034 	movhi	r2,0
 4027d94:	10982704 	addi	r2,r2,24732
 4027d98:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4027d9c:	e03fff0d 	sth	zero,-4(fp)
 4027da0:	00001606 	br	4027dfc <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 4027da4:	e0bfff0b 	ldhu	r2,-4(fp)
 4027da8:	10800044 	addi	r2,r2,1
 4027dac:	01400d04 	movi	r5,52
 4027db0:	1009883a 	mov	r4,r2
 4027db4:	402316c0 	call	402316c <__mulsi3>
 4027db8:	1007883a 	mov	r3,r2
 4027dbc:	00800034 	movhi	r2,0
 4027dc0:	10982704 	addi	r2,r2,24732
 4027dc4:	1887883a 	add	r3,r3,r2
 4027dc8:	e0bffe17 	ldw	r2,-8(fp)
 4027dcc:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 4027dd0:	e0bffe17 	ldw	r2,-8(fp)
 4027dd4:	00c00fc4 	movi	r3,63
 4027dd8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 4027ddc:	e0bffe17 	ldw	r2,-8(fp)
 4027de0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 4027de4:	e0bffe17 	ldw	r2,-8(fp)
 4027de8:	10800d04 	addi	r2,r2,52
 4027dec:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4027df0:	e0bfff0b 	ldhu	r2,-4(fp)
 4027df4:	10800044 	addi	r2,r2,1
 4027df8:	e0bfff0d 	sth	r2,-4(fp)
 4027dfc:	e0bfff0b 	ldhu	r2,-4(fp)
 4027e00:	10800ef0 	cmpltui	r2,r2,59
 4027e04:	103fe71e 	bne	r2,zero,4027da4 <__flash_rwdata_start+0xffffa1a0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 4027e08:	e0bffe17 	ldw	r2,-8(fp)
 4027e0c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 4027e10:	e0bffe17 	ldw	r2,-8(fp)
 4027e14:	00c00fc4 	movi	r3,63
 4027e18:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 4027e1c:	e0bffe17 	ldw	r2,-8(fp)
 4027e20:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 4027e24:	00800034 	movhi	r2,0
 4027e28:	10982704 	addi	r2,r2,24732
 4027e2c:	d0a04215 	stw	r2,-32504(gp)
#endif
}
 4027e30:	0001883a 	nop
 4027e34:	e037883a 	mov	sp,fp
 4027e38:	dfc00117 	ldw	ra,4(sp)
 4027e3c:	df000017 	ldw	fp,0(sp)
 4027e40:	dec00204 	addi	sp,sp,8
 4027e44:	f800283a 	ret

04027e48 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 4027e48:	defff804 	addi	sp,sp,-32
 4027e4c:	df000715 	stw	fp,28(sp)
 4027e50:	df000704 	addi	fp,sp,28
 4027e54:	e13ffe15 	stw	r4,-8(fp)
 4027e58:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4027e5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4027e60:	e0bfff17 	ldw	r2,-4(fp)
 4027e64:	1000021e 	bne	r2,zero,4027e70 <OSQAccept+0x28>
        return ((void *)0);
 4027e68:	0005883a 	mov	r2,zero
 4027e6c:	00004206 	br	4027f78 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4027e70:	e0bffe17 	ldw	r2,-8(fp)
 4027e74:	1000051e 	bne	r2,zero,4027e8c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4027e78:	e0bfff17 	ldw	r2,-4(fp)
 4027e7c:	00c00104 	movi	r3,4
 4027e80:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4027e84:	0005883a 	mov	r2,zero
 4027e88:	00003b06 	br	4027f78 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4027e8c:	e0bffe17 	ldw	r2,-8(fp)
 4027e90:	10800003 	ldbu	r2,0(r2)
 4027e94:	10803fcc 	andi	r2,r2,255
 4027e98:	108000a0 	cmpeqi	r2,r2,2
 4027e9c:	1000051e 	bne	r2,zero,4027eb4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4027ea0:	e0bfff17 	ldw	r2,-4(fp)
 4027ea4:	00c00044 	movi	r3,1
 4027ea8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4027eac:	0005883a 	mov	r2,zero
 4027eb0:	00003106 	br	4027f78 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4027eb4:	0005303a 	rdctl	r2,status
 4027eb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4027ebc:	e0fffd17 	ldw	r3,-12(fp)
 4027ec0:	00bfff84 	movi	r2,-2
 4027ec4:	1884703a 	and	r2,r3,r2
 4027ec8:	1001703a 	wrctl	status,r2
  
  return context;
 4027ecc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4027ed0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4027ed4:	e0bffe17 	ldw	r2,-8(fp)
 4027ed8:	10800117 	ldw	r2,4(r2)
 4027edc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4027ee0:	e0bffc17 	ldw	r2,-16(fp)
 4027ee4:	1080058b 	ldhu	r2,22(r2)
 4027ee8:	10bfffcc 	andi	r2,r2,65535
 4027eec:	10001926 	beq	r2,zero,4027f54 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4027ef0:	e0bffc17 	ldw	r2,-16(fp)
 4027ef4:	10800417 	ldw	r2,16(r2)
 4027ef8:	11000104 	addi	r4,r2,4
 4027efc:	e0fffc17 	ldw	r3,-16(fp)
 4027f00:	19000415 	stw	r4,16(r3)
 4027f04:	10800017 	ldw	r2,0(r2)
 4027f08:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4027f0c:	e0bffc17 	ldw	r2,-16(fp)
 4027f10:	1080058b 	ldhu	r2,22(r2)
 4027f14:	10bfffc4 	addi	r2,r2,-1
 4027f18:	1007883a 	mov	r3,r2
 4027f1c:	e0bffc17 	ldw	r2,-16(fp)
 4027f20:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4027f24:	e0bffc17 	ldw	r2,-16(fp)
 4027f28:	10c00417 	ldw	r3,16(r2)
 4027f2c:	e0bffc17 	ldw	r2,-16(fp)
 4027f30:	10800217 	ldw	r2,8(r2)
 4027f34:	1880041e 	bne	r3,r2,4027f48 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 4027f38:	e0bffc17 	ldw	r2,-16(fp)
 4027f3c:	10c00117 	ldw	r3,4(r2)
 4027f40:	e0bffc17 	ldw	r2,-16(fp)
 4027f44:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 4027f48:	e0bfff17 	ldw	r2,-4(fp)
 4027f4c:	10000005 	stb	zero,0(r2)
 4027f50:	00000406 	br	4027f64 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 4027f54:	e0bfff17 	ldw	r2,-4(fp)
 4027f58:	00c007c4 	movi	r3,31
 4027f5c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 4027f60:	e03ff915 	stw	zero,-28(fp)
 4027f64:	e0bffa17 	ldw	r2,-24(fp)
 4027f68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4027f6c:	e0bffb17 	ldw	r2,-20(fp)
 4027f70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 4027f74:	e0bff917 	ldw	r2,-28(fp)
}
 4027f78:	e037883a 	mov	sp,fp
 4027f7c:	df000017 	ldw	fp,0(sp)
 4027f80:	dec00104 	addi	sp,sp,4
 4027f84:	f800283a 	ret

04027f88 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 4027f88:	defff404 	addi	sp,sp,-48
 4027f8c:	dfc00b15 	stw	ra,44(sp)
 4027f90:	df000a15 	stw	fp,40(sp)
 4027f94:	df000a04 	addi	fp,sp,40
 4027f98:	e13ffe15 	stw	r4,-8(fp)
 4027f9c:	2805883a 	mov	r2,r5
 4027fa0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4027fa4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4027fa8:	d0a04703 	ldbu	r2,-32484(gp)
 4027fac:	10803fcc 	andi	r2,r2,255
 4027fb0:	10000226 	beq	r2,zero,4027fbc <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 4027fb4:	0005883a 	mov	r2,zero
 4027fb8:	00005906 	br	4028120 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4027fbc:	0005303a 	rdctl	r2,status
 4027fc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4027fc4:	e0fffd17 	ldw	r3,-12(fp)
 4027fc8:	00bfff84 	movi	r2,-2
 4027fcc:	1884703a 	and	r2,r3,r2
 4027fd0:	1001703a 	wrctl	status,r2
  
  return context;
 4027fd4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4027fd8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 4027fdc:	d0a04617 	ldw	r2,-32488(gp)
 4027fe0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4027fe4:	d0a04617 	ldw	r2,-32488(gp)
 4027fe8:	10000326 	beq	r2,zero,4027ff8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4027fec:	d0a04617 	ldw	r2,-32488(gp)
 4027ff0:	10800117 	ldw	r2,4(r2)
 4027ff4:	d0a04615 	stw	r2,-32488(gp)
 4027ff8:	e0bff717 	ldw	r2,-36(fp)
 4027ffc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4028000:	e0bff817 	ldw	r2,-32(fp)
 4028004:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 4028008:	e0bff617 	ldw	r2,-40(fp)
 402800c:	10004326 	beq	r2,zero,402811c <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4028010:	0005303a 	rdctl	r2,status
 4028014:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4028018:	e0fff917 	ldw	r3,-28(fp)
 402801c:	00bfff84 	movi	r2,-2
 4028020:	1884703a 	and	r2,r3,r2
 4028024:	1001703a 	wrctl	status,r2
  
  return context;
 4028028:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 402802c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 4028030:	d0a04417 	ldw	r2,-32496(gp)
 4028034:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 4028038:	e0bffb17 	ldw	r2,-20(fp)
 402803c:	10002d26 	beq	r2,zero,40280f4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 4028040:	d0a04417 	ldw	r2,-32496(gp)
 4028044:	10800017 	ldw	r2,0(r2)
 4028048:	d0a04415 	stw	r2,-32496(gp)
 402804c:	e0bff717 	ldw	r2,-36(fp)
 4028050:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4028054:	e0bffa17 	ldw	r2,-24(fp)
 4028058:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 402805c:	e0bffb17 	ldw	r2,-20(fp)
 4028060:	e0fffe17 	ldw	r3,-8(fp)
 4028064:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 4028068:	e0bfff0b 	ldhu	r2,-4(fp)
 402806c:	1085883a 	add	r2,r2,r2
 4028070:	1085883a 	add	r2,r2,r2
 4028074:	1007883a 	mov	r3,r2
 4028078:	e0bffe17 	ldw	r2,-8(fp)
 402807c:	10c7883a 	add	r3,r2,r3
 4028080:	e0bffb17 	ldw	r2,-20(fp)
 4028084:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 4028088:	e0bffb17 	ldw	r2,-20(fp)
 402808c:	e0fffe17 	ldw	r3,-8(fp)
 4028090:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 4028094:	e0bffb17 	ldw	r2,-20(fp)
 4028098:	e0fffe17 	ldw	r3,-8(fp)
 402809c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 40280a0:	e0bffb17 	ldw	r2,-20(fp)
 40280a4:	e0ffff0b 	ldhu	r3,-4(fp)
 40280a8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 40280ac:	e0bffb17 	ldw	r2,-20(fp)
 40280b0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 40280b4:	e0bff617 	ldw	r2,-40(fp)
 40280b8:	00c00084 	movi	r3,2
 40280bc:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 40280c0:	e0bff617 	ldw	r2,-40(fp)
 40280c4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 40280c8:	e0bff617 	ldw	r2,-40(fp)
 40280cc:	e0fffb17 	ldw	r3,-20(fp)
 40280d0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 40280d4:	e0bff617 	ldw	r2,-40(fp)
 40280d8:	00c00fc4 	movi	r3,63
 40280dc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 40280e0:	e0bff617 	ldw	r2,-40(fp)
 40280e4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 40280e8:	e13ff617 	ldw	r4,-40(fp)
 40280ec:	40252d40 	call	40252d4 <OS_EventWaitListInit>
 40280f0:	00000a06 	br	402811c <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 40280f4:	d0e04617 	ldw	r3,-32488(gp)
 40280f8:	e0bff617 	ldw	r2,-40(fp)
 40280fc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 4028100:	e0bff617 	ldw	r2,-40(fp)
 4028104:	d0a04615 	stw	r2,-32488(gp)
 4028108:	e0bff717 	ldw	r2,-36(fp)
 402810c:	e0bffc15 	stw	r2,-16(fp)
 4028110:	e0bffc17 	ldw	r2,-16(fp)
 4028114:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 4028118:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 402811c:	e0bff617 	ldw	r2,-40(fp)
}
 4028120:	e037883a 	mov	sp,fp
 4028124:	dfc00117 	ldw	ra,4(sp)
 4028128:	df000017 	ldw	fp,0(sp)
 402812c:	dec00204 	addi	sp,sp,8
 4028130:	f800283a 	ret

04028134 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4028134:	defff204 	addi	sp,sp,-56
 4028138:	dfc00d15 	stw	ra,52(sp)
 402813c:	df000c15 	stw	fp,48(sp)
 4028140:	df000c04 	addi	fp,sp,48
 4028144:	e13ffd15 	stw	r4,-12(fp)
 4028148:	2805883a 	mov	r2,r5
 402814c:	e1bfff15 	stw	r6,-4(fp)
 4028150:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4028154:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4028158:	e0bfff17 	ldw	r2,-4(fp)
 402815c:	1000021e 	bne	r2,zero,4028168 <OSQDel+0x34>
        return (pevent);
 4028160:	e0bffd17 	ldw	r2,-12(fp)
 4028164:	00008e06 	br	40283a0 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4028168:	e0bffd17 	ldw	r2,-12(fp)
 402816c:	1000051e 	bne	r2,zero,4028184 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4028170:	e0bfff17 	ldw	r2,-4(fp)
 4028174:	00c00104 	movi	r3,4
 4028178:	10c00005 	stb	r3,0(r2)
        return (pevent);
 402817c:	e0bffd17 	ldw	r2,-12(fp)
 4028180:	00008706 	br	40283a0 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4028184:	e0bffd17 	ldw	r2,-12(fp)
 4028188:	10800003 	ldbu	r2,0(r2)
 402818c:	10803fcc 	andi	r2,r2,255
 4028190:	108000a0 	cmpeqi	r2,r2,2
 4028194:	1000051e 	bne	r2,zero,40281ac <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4028198:	e0bfff17 	ldw	r2,-4(fp)
 402819c:	00c00044 	movi	r3,1
 40281a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 40281a4:	e0bffd17 	ldw	r2,-12(fp)
 40281a8:	00007d06 	br	40283a0 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 40281ac:	d0a04703 	ldbu	r2,-32484(gp)
 40281b0:	10803fcc 	andi	r2,r2,255
 40281b4:	10000526 	beq	r2,zero,40281cc <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 40281b8:	e0bfff17 	ldw	r2,-4(fp)
 40281bc:	00c003c4 	movi	r3,15
 40281c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 40281c4:	e0bffd17 	ldw	r2,-12(fp)
 40281c8:	00007506 	br	40283a0 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40281cc:	0005303a 	rdctl	r2,status
 40281d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40281d4:	e0fffc17 	ldw	r3,-16(fp)
 40281d8:	00bfff84 	movi	r2,-2
 40281dc:	1884703a 	and	r2,r3,r2
 40281e0:	1001703a 	wrctl	status,r2
  
  return context;
 40281e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40281e8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 40281ec:	e0bffd17 	ldw	r2,-12(fp)
 40281f0:	10800283 	ldbu	r2,10(r2)
 40281f4:	10803fcc 	andi	r2,r2,255
 40281f8:	10000326 	beq	r2,zero,4028208 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 40281fc:	00800044 	movi	r2,1
 4028200:	e0bff405 	stb	r2,-48(fp)
 4028204:	00000106 	br	402820c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4028208:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 402820c:	e0bffe03 	ldbu	r2,-8(fp)
 4028210:	10000326 	beq	r2,zero,4028220 <OSQDel+0xec>
 4028214:	10800060 	cmpeqi	r2,r2,1
 4028218:	1000301e 	bne	r2,zero,40282dc <OSQDel+0x1a8>
 402821c:	00005506 	br	4028374 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 4028220:	e0bff403 	ldbu	r2,-48(fp)
 4028224:	10001e1e 	bne	r2,zero,40282a0 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4028228:	e0bffd17 	ldw	r2,-12(fp)
 402822c:	00c00fc4 	movi	r3,63
 4028230:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4028234:	e0bffd17 	ldw	r2,-12(fp)
 4028238:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 402823c:	e0bffd17 	ldw	r2,-12(fp)
 4028240:	10800117 	ldw	r2,4(r2)
 4028244:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 4028248:	d0e04417 	ldw	r3,-32496(gp)
 402824c:	e0bff817 	ldw	r2,-32(fp)
 4028250:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 4028254:	e0bff817 	ldw	r2,-32(fp)
 4028258:	d0a04415 	stw	r2,-32496(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 402825c:	e0bffd17 	ldw	r2,-12(fp)
 4028260:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4028264:	d0e04617 	ldw	r3,-32488(gp)
 4028268:	e0bffd17 	ldw	r2,-12(fp)
 402826c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4028270:	e0bffd17 	ldw	r2,-12(fp)
 4028274:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4028278:	e0bffd17 	ldw	r2,-12(fp)
 402827c:	d0a04615 	stw	r2,-32488(gp)
 4028280:	e0bff617 	ldw	r2,-40(fp)
 4028284:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4028288:	e0bff717 	ldw	r2,-36(fp)
 402828c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4028290:	e0bfff17 	ldw	r2,-4(fp)
 4028294:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 4028298:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 402829c:	00003f06 	br	402839c <OSQDel+0x268>
 40282a0:	e0bff617 	ldw	r2,-40(fp)
 40282a4:	e0bff915 	stw	r2,-28(fp)
 40282a8:	e0bff917 	ldw	r2,-28(fp)
 40282ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 40282b0:	e0bfff17 	ldw	r2,-4(fp)
 40282b4:	00c01244 	movi	r3,73
 40282b8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 40282bc:	e0bffd17 	ldw	r2,-12(fp)
 40282c0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 40282c4:	00003506 	br	402839c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 40282c8:	000f883a 	mov	r7,zero
 40282cc:	01800104 	movi	r6,4
 40282d0:	000b883a 	mov	r5,zero
 40282d4:	e13ffd17 	ldw	r4,-12(fp)
 40282d8:	4024d240 	call	4024d24 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 40282dc:	e0bffd17 	ldw	r2,-12(fp)
 40282e0:	10800283 	ldbu	r2,10(r2)
 40282e4:	10803fcc 	andi	r2,r2,255
 40282e8:	103ff71e 	bne	r2,zero,40282c8 <__flash_rwdata_start+0xffffa6c4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 40282ec:	e0bffd17 	ldw	r2,-12(fp)
 40282f0:	00c00fc4 	movi	r3,63
 40282f4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 40282f8:	e0bffd17 	ldw	r2,-12(fp)
 40282fc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 4028300:	e0bffd17 	ldw	r2,-12(fp)
 4028304:	10800117 	ldw	r2,4(r2)
 4028308:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 402830c:	d0e04417 	ldw	r3,-32496(gp)
 4028310:	e0bff817 	ldw	r2,-32(fp)
 4028314:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 4028318:	e0bff817 	ldw	r2,-32(fp)
 402831c:	d0a04415 	stw	r2,-32496(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4028320:	e0bffd17 	ldw	r2,-12(fp)
 4028324:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4028328:	d0e04617 	ldw	r3,-32488(gp)
 402832c:	e0bffd17 	ldw	r2,-12(fp)
 4028330:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4028334:	e0bffd17 	ldw	r2,-12(fp)
 4028338:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 402833c:	e0bffd17 	ldw	r2,-12(fp)
 4028340:	d0a04615 	stw	r2,-32488(gp)
 4028344:	e0bff617 	ldw	r2,-40(fp)
 4028348:	e0bffa15 	stw	r2,-24(fp)
 402834c:	e0bffa17 	ldw	r2,-24(fp)
 4028350:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4028354:	e0bff403 	ldbu	r2,-48(fp)
 4028358:	10800058 	cmpnei	r2,r2,1
 402835c:	1000011e 	bne	r2,zero,4028364 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4028360:	40257700 	call	4025770 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4028364:	e0bfff17 	ldw	r2,-4(fp)
 4028368:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 402836c:	e03ff515 	stw	zero,-44(fp)
             break;
 4028370:	00000a06 	br	402839c <OSQDel+0x268>
 4028374:	e0bff617 	ldw	r2,-40(fp)
 4028378:	e0bffb15 	stw	r2,-20(fp)
 402837c:	e0bffb17 	ldw	r2,-20(fp)
 4028380:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4028384:	e0bfff17 	ldw	r2,-4(fp)
 4028388:	00c001c4 	movi	r3,7
 402838c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 4028390:	e0bffd17 	ldw	r2,-12(fp)
 4028394:	e0bff515 	stw	r2,-44(fp)
             break;
 4028398:	0001883a 	nop
    }
    return (pevent_return);
 402839c:	e0bff517 	ldw	r2,-44(fp)
}
 40283a0:	e037883a 	mov	sp,fp
 40283a4:	dfc00117 	ldw	ra,4(sp)
 40283a8:	df000017 	ldw	fp,0(sp)
 40283ac:	dec00204 	addi	sp,sp,8
 40283b0:	f800283a 	ret

040283b4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 40283b4:	defffa04 	addi	sp,sp,-24
 40283b8:	df000515 	stw	fp,20(sp)
 40283bc:	df000504 	addi	fp,sp,20
 40283c0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40283c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40283c8:	e0bfff17 	ldw	r2,-4(fp)
 40283cc:	1000021e 	bne	r2,zero,40283d8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 40283d0:	00800104 	movi	r2,4
 40283d4:	00002106 	br	402845c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 40283d8:	e0bfff17 	ldw	r2,-4(fp)
 40283dc:	10800003 	ldbu	r2,0(r2)
 40283e0:	10803fcc 	andi	r2,r2,255
 40283e4:	108000a0 	cmpeqi	r2,r2,2
 40283e8:	1000021e 	bne	r2,zero,40283f4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 40283ec:	00800044 	movi	r2,1
 40283f0:	00001a06 	br	402845c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40283f4:	0005303a 	rdctl	r2,status
 40283f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40283fc:	e0fffd17 	ldw	r3,-12(fp)
 4028400:	00bfff84 	movi	r2,-2
 4028404:	1884703a 	and	r2,r3,r2
 4028408:	1001703a 	wrctl	status,r2
  
  return context;
 402840c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4028410:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 4028414:	e0bfff17 	ldw	r2,-4(fp)
 4028418:	10800117 	ldw	r2,4(r2)
 402841c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 4028420:	e0bffc17 	ldw	r2,-16(fp)
 4028424:	10c00117 	ldw	r3,4(r2)
 4028428:	e0bffc17 	ldw	r2,-16(fp)
 402842c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 4028430:	e0bffc17 	ldw	r2,-16(fp)
 4028434:	10c00117 	ldw	r3,4(r2)
 4028438:	e0bffc17 	ldw	r2,-16(fp)
 402843c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 4028440:	e0bffc17 	ldw	r2,-16(fp)
 4028444:	1000058d 	sth	zero,22(r2)
 4028448:	e0bffb17 	ldw	r2,-20(fp)
 402844c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4028450:	e0bffe17 	ldw	r2,-8(fp)
 4028454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4028458:	0005883a 	mov	r2,zero
}
 402845c:	e037883a 	mov	sp,fp
 4028460:	df000017 	ldw	fp,0(sp)
 4028464:	dec00104 	addi	sp,sp,4
 4028468:	f800283a 	ret

0402846c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 402846c:	defff304 	addi	sp,sp,-52
 4028470:	dfc00c15 	stw	ra,48(sp)
 4028474:	df000b15 	stw	fp,44(sp)
 4028478:	df000b04 	addi	fp,sp,44
 402847c:	e13ffd15 	stw	r4,-12(fp)
 4028480:	2805883a 	mov	r2,r5
 4028484:	e1bfff15 	stw	r6,-4(fp)
 4028488:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 402848c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4028490:	e0bfff17 	ldw	r2,-4(fp)
 4028494:	1000021e 	bne	r2,zero,40284a0 <OSQPend+0x34>
        return ((void *)0);
 4028498:	0005883a 	mov	r2,zero
 402849c:	00009106 	br	40286e4 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 40284a0:	e0bffd17 	ldw	r2,-12(fp)
 40284a4:	1000051e 	bne	r2,zero,40284bc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 40284a8:	e0bfff17 	ldw	r2,-4(fp)
 40284ac:	00c00104 	movi	r3,4
 40284b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40284b4:	0005883a 	mov	r2,zero
 40284b8:	00008a06 	br	40286e4 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 40284bc:	e0bffd17 	ldw	r2,-12(fp)
 40284c0:	10800003 	ldbu	r2,0(r2)
 40284c4:	10803fcc 	andi	r2,r2,255
 40284c8:	108000a0 	cmpeqi	r2,r2,2
 40284cc:	1000051e 	bne	r2,zero,40284e4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 40284d0:	e0bfff17 	ldw	r2,-4(fp)
 40284d4:	00c00044 	movi	r3,1
 40284d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40284dc:	0005883a 	mov	r2,zero
 40284e0:	00008006 	br	40286e4 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 40284e4:	d0a04703 	ldbu	r2,-32484(gp)
 40284e8:	10803fcc 	andi	r2,r2,255
 40284ec:	10000526 	beq	r2,zero,4028504 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 40284f0:	e0bfff17 	ldw	r2,-4(fp)
 40284f4:	00c00084 	movi	r3,2
 40284f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40284fc:	0005883a 	mov	r2,zero
 4028500:	00007806 	br	40286e4 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 4028504:	d0a03903 	ldbu	r2,-32540(gp)
 4028508:	10803fcc 	andi	r2,r2,255
 402850c:	10000526 	beq	r2,zero,4028524 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 4028510:	e0bfff17 	ldw	r2,-4(fp)
 4028514:	00c00344 	movi	r3,13
 4028518:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 402851c:	0005883a 	mov	r2,zero
 4028520:	00007006 	br	40286e4 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4028524:	0005303a 	rdctl	r2,status
 4028528:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402852c:	e0fffc17 	ldw	r3,-16(fp)
 4028530:	00bfff84 	movi	r2,-2
 4028534:	1884703a 	and	r2,r3,r2
 4028538:	1001703a 	wrctl	status,r2
  
  return context;
 402853c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4028540:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4028544:	e0bffd17 	ldw	r2,-12(fp)
 4028548:	10800117 	ldw	r2,4(r2)
 402854c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4028550:	e0bff817 	ldw	r2,-32(fp)
 4028554:	1080058b 	ldhu	r2,22(r2)
 4028558:	10bfffcc 	andi	r2,r2,65535
 402855c:	10001e26 	beq	r2,zero,40285d8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4028560:	e0bff817 	ldw	r2,-32(fp)
 4028564:	10800417 	ldw	r2,16(r2)
 4028568:	11000104 	addi	r4,r2,4
 402856c:	e0fff817 	ldw	r3,-32(fp)
 4028570:	19000415 	stw	r4,16(r3)
 4028574:	10800017 	ldw	r2,0(r2)
 4028578:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 402857c:	e0bff817 	ldw	r2,-32(fp)
 4028580:	1080058b 	ldhu	r2,22(r2)
 4028584:	10bfffc4 	addi	r2,r2,-1
 4028588:	1007883a 	mov	r3,r2
 402858c:	e0bff817 	ldw	r2,-32(fp)
 4028590:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4028594:	e0bff817 	ldw	r2,-32(fp)
 4028598:	10c00417 	ldw	r3,16(r2)
 402859c:	e0bff817 	ldw	r2,-32(fp)
 40285a0:	10800217 	ldw	r2,8(r2)
 40285a4:	1880041e 	bne	r3,r2,40285b8 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 40285a8:	e0bff817 	ldw	r2,-32(fp)
 40285ac:	10c00117 	ldw	r3,4(r2)
 40285b0:	e0bff817 	ldw	r2,-32(fp)
 40285b4:	10c00415 	stw	r3,16(r2)
 40285b8:	e0bff617 	ldw	r2,-40(fp)
 40285bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40285c0:	e0bff717 	ldw	r2,-36(fp)
 40285c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 40285c8:	e0bfff17 	ldw	r2,-4(fp)
 40285cc:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 40285d0:	e0bff517 	ldw	r2,-44(fp)
 40285d4:	00004306 	br	40286e4 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 40285d8:	d0a04817 	ldw	r2,-32480(gp)
 40285dc:	d0e04817 	ldw	r3,-32480(gp)
 40285e0:	18c00c03 	ldbu	r3,48(r3)
 40285e4:	18c00114 	ori	r3,r3,4
 40285e8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 40285ec:	d0a04817 	ldw	r2,-32480(gp)
 40285f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 40285f4:	d0a04817 	ldw	r2,-32480(gp)
 40285f8:	e0fffe0b 	ldhu	r3,-8(fp)
 40285fc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 4028600:	e13ffd17 	ldw	r4,-12(fp)
 4028604:	4024ebc0 	call	4024ebc <OS_EventTaskWait>
 4028608:	e0bff617 	ldw	r2,-40(fp)
 402860c:	e0bffb15 	stw	r2,-20(fp)
 4028610:	e0bffb17 	ldw	r2,-20(fp)
 4028614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 4028618:	40257700 	call	4025770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402861c:	0005303a 	rdctl	r2,status
 4028620:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4028624:	e0fff917 	ldw	r3,-28(fp)
 4028628:	00bfff84 	movi	r2,-2
 402862c:	1884703a 	and	r2,r3,r2
 4028630:	1001703a 	wrctl	status,r2
  
  return context;
 4028634:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 4028638:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 402863c:	d0a04817 	ldw	r2,-32480(gp)
 4028640:	10800c43 	ldbu	r2,49(r2)
 4028644:	10803fcc 	andi	r2,r2,255
 4028648:	10000326 	beq	r2,zero,4028658 <OSQPend+0x1ec>
 402864c:	108000a0 	cmpeqi	r2,r2,2
 4028650:	1000071e 	bne	r2,zero,4028670 <OSQPend+0x204>
 4028654:	00000b06 	br	4028684 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 4028658:	d0a04817 	ldw	r2,-32480(gp)
 402865c:	10800917 	ldw	r2,36(r2)
 4028660:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 4028664:	e0bfff17 	ldw	r2,-4(fp)
 4028668:	10000005 	stb	zero,0(r2)
             break;
 402866c:	00000e06 	br	40286a8 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 4028670:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4028674:	e0bfff17 	ldw	r2,-4(fp)
 4028678:	00c00384 	movi	r3,14
 402867c:	10c00005 	stb	r3,0(r2)
             break;
 4028680:	00000906 	br	40286a8 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 4028684:	d0a04817 	ldw	r2,-32480(gp)
 4028688:	e17ffd17 	ldw	r5,-12(fp)
 402868c:	1009883a 	mov	r4,r2
 4028690:	402511c0 	call	402511c <OS_EventTaskRemove>
             pmsg = (void *)0;
 4028694:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4028698:	e0bfff17 	ldw	r2,-4(fp)
 402869c:	00c00284 	movi	r3,10
 40286a0:	10c00005 	stb	r3,0(r2)
             break;
 40286a4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 40286a8:	d0a04817 	ldw	r2,-32480(gp)
 40286ac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 40286b0:	d0a04817 	ldw	r2,-32480(gp)
 40286b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 40286b8:	d0a04817 	ldw	r2,-32480(gp)
 40286bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 40286c0:	d0a04817 	ldw	r2,-32480(gp)
 40286c4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 40286c8:	d0a04817 	ldw	r2,-32480(gp)
 40286cc:	10000915 	stw	zero,36(r2)
 40286d0:	e0bff617 	ldw	r2,-40(fp)
 40286d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40286d8:	e0bffa17 	ldw	r2,-24(fp)
 40286dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 40286e0:	e0bff517 	ldw	r2,-44(fp)
}
 40286e4:	e037883a 	mov	sp,fp
 40286e8:	dfc00117 	ldw	ra,4(sp)
 40286ec:	df000017 	ldw	fp,0(sp)
 40286f0:	dec00204 	addi	sp,sp,8
 40286f4:	f800283a 	ret

040286f8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 40286f8:	defff604 	addi	sp,sp,-40
 40286fc:	dfc00915 	stw	ra,36(sp)
 4028700:	df000815 	stw	fp,32(sp)
 4028704:	df000804 	addi	fp,sp,32
 4028708:	e13ffd15 	stw	r4,-12(fp)
 402870c:	2805883a 	mov	r2,r5
 4028710:	e1bfff15 	stw	r6,-4(fp)
 4028714:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4028718:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 402871c:	e0bfff17 	ldw	r2,-4(fp)
 4028720:	1000021e 	bne	r2,zero,402872c <OSQPendAbort+0x34>
        return (0);
 4028724:	0005883a 	mov	r2,zero
 4028728:	00004906 	br	4028850 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 402872c:	e0bffd17 	ldw	r2,-12(fp)
 4028730:	1000051e 	bne	r2,zero,4028748 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4028734:	e0bfff17 	ldw	r2,-4(fp)
 4028738:	00c00104 	movi	r3,4
 402873c:	10c00005 	stb	r3,0(r2)
        return (0);
 4028740:	0005883a 	mov	r2,zero
 4028744:	00004206 	br	4028850 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4028748:	e0bffd17 	ldw	r2,-12(fp)
 402874c:	10800003 	ldbu	r2,0(r2)
 4028750:	10803fcc 	andi	r2,r2,255
 4028754:	108000a0 	cmpeqi	r2,r2,2
 4028758:	1000051e 	bne	r2,zero,4028770 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 402875c:	e0bfff17 	ldw	r2,-4(fp)
 4028760:	00c00044 	movi	r3,1
 4028764:	10c00005 	stb	r3,0(r2)
        return (0);
 4028768:	0005883a 	mov	r2,zero
 402876c:	00003806 	br	4028850 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4028770:	0005303a 	rdctl	r2,status
 4028774:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4028778:	e0fffc17 	ldw	r3,-16(fp)
 402877c:	00bfff84 	movi	r2,-2
 4028780:	1884703a 	and	r2,r3,r2
 4028784:	1001703a 	wrctl	status,r2
  
  return context;
 4028788:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 402878c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 4028790:	e0bffd17 	ldw	r2,-12(fp)
 4028794:	10800283 	ldbu	r2,10(r2)
 4028798:	10803fcc 	andi	r2,r2,255
 402879c:	10002526 	beq	r2,zero,4028834 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 40287a0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 40287a4:	e0bffe03 	ldbu	r2,-8(fp)
 40287a8:	10800060 	cmpeqi	r2,r2,1
 40287ac:	10000e26 	beq	r2,zero,40287e8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 40287b0:	00000806 	br	40287d4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 40287b4:	01c00084 	movi	r7,2
 40287b8:	01800104 	movi	r6,4
 40287bc:	000b883a 	mov	r5,zero
 40287c0:	e13ffd17 	ldw	r4,-12(fp)
 40287c4:	4024d240 	call	4024d24 <OS_EventTaskRdy>
                     nbr_tasks++;
 40287c8:	e0bff803 	ldbu	r2,-32(fp)
 40287cc:	10800044 	addi	r2,r2,1
 40287d0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 40287d4:	e0bffd17 	ldw	r2,-12(fp)
 40287d8:	10800283 	ldbu	r2,10(r2)
 40287dc:	10803fcc 	andi	r2,r2,255
 40287e0:	103ff41e 	bne	r2,zero,40287b4 <__flash_rwdata_start+0xffffabb0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 40287e4:	00000906 	br	402880c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 40287e8:	01c00084 	movi	r7,2
 40287ec:	01800104 	movi	r6,4
 40287f0:	000b883a 	mov	r5,zero
 40287f4:	e13ffd17 	ldw	r4,-12(fp)
 40287f8:	4024d240 	call	4024d24 <OS_EventTaskRdy>
                 nbr_tasks++;
 40287fc:	e0bff803 	ldbu	r2,-32(fp)
 4028800:	10800044 	addi	r2,r2,1
 4028804:	e0bff805 	stb	r2,-32(fp)
                 break;
 4028808:	0001883a 	nop
 402880c:	e0bff917 	ldw	r2,-28(fp)
 4028810:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4028814:	e0bffa17 	ldw	r2,-24(fp)
 4028818:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 402881c:	40257700 	call	4025770 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4028820:	e0bfff17 	ldw	r2,-4(fp)
 4028824:	00c00384 	movi	r3,14
 4028828:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 402882c:	e0bff803 	ldbu	r2,-32(fp)
 4028830:	00000706 	br	4028850 <OSQPendAbort+0x158>
 4028834:	e0bff917 	ldw	r2,-28(fp)
 4028838:	e0bffb15 	stw	r2,-20(fp)
 402883c:	e0bffb17 	ldw	r2,-20(fp)
 4028840:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4028844:	e0bfff17 	ldw	r2,-4(fp)
 4028848:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 402884c:	0005883a 	mov	r2,zero
}
 4028850:	e037883a 	mov	sp,fp
 4028854:	dfc00117 	ldw	ra,4(sp)
 4028858:	df000017 	ldw	fp,0(sp)
 402885c:	dec00204 	addi	sp,sp,8
 4028860:	f800283a 	ret

04028864 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 4028864:	defff604 	addi	sp,sp,-40
 4028868:	dfc00915 	stw	ra,36(sp)
 402886c:	df000815 	stw	fp,32(sp)
 4028870:	df000804 	addi	fp,sp,32
 4028874:	e13ffe15 	stw	r4,-8(fp)
 4028878:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 402887c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4028880:	e0bffe17 	ldw	r2,-8(fp)
 4028884:	1000021e 	bne	r2,zero,4028890 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 4028888:	00800104 	movi	r2,4
 402888c:	00004a06 	br	40289b8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4028890:	e0bffe17 	ldw	r2,-8(fp)
 4028894:	10800003 	ldbu	r2,0(r2)
 4028898:	10803fcc 	andi	r2,r2,255
 402889c:	108000a0 	cmpeqi	r2,r2,2
 40288a0:	1000021e 	bne	r2,zero,40288ac <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 40288a4:	00800044 	movi	r2,1
 40288a8:	00004306 	br	40289b8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40288ac:	0005303a 	rdctl	r2,status
 40288b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40288b4:	e0fffd17 	ldw	r3,-12(fp)
 40288b8:	00bfff84 	movi	r2,-2
 40288bc:	1884703a 	and	r2,r3,r2
 40288c0:	1001703a 	wrctl	status,r2
  
  return context;
 40288c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40288c8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 40288cc:	e0bffe17 	ldw	r2,-8(fp)
 40288d0:	10800283 	ldbu	r2,10(r2)
 40288d4:	10803fcc 	andi	r2,r2,255
 40288d8:	10000c26 	beq	r2,zero,402890c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40288dc:	000f883a 	mov	r7,zero
 40288e0:	01800104 	movi	r6,4
 40288e4:	e17fff17 	ldw	r5,-4(fp)
 40288e8:	e13ffe17 	ldw	r4,-8(fp)
 40288ec:	4024d240 	call	4024d24 <OS_EventTaskRdy>
 40288f0:	e0bff817 	ldw	r2,-32(fp)
 40288f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40288f8:	e0bff917 	ldw	r2,-28(fp)
 40288fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 4028900:	40257700 	call	4025770 <OS_Sched>
        return (OS_ERR_NONE);
 4028904:	0005883a 	mov	r2,zero
 4028908:	00002b06 	br	40289b8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 402890c:	e0bffe17 	ldw	r2,-8(fp)
 4028910:	10800117 	ldw	r2,4(r2)
 4028914:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 4028918:	e0bffb17 	ldw	r2,-20(fp)
 402891c:	10c0058b 	ldhu	r3,22(r2)
 4028920:	e0bffb17 	ldw	r2,-20(fp)
 4028924:	1080050b 	ldhu	r2,20(r2)
 4028928:	18ffffcc 	andi	r3,r3,65535
 402892c:	10bfffcc 	andi	r2,r2,65535
 4028930:	18800636 	bltu	r3,r2,402894c <OSQPost+0xe8>
 4028934:	e0bff817 	ldw	r2,-32(fp)
 4028938:	e0bffa15 	stw	r2,-24(fp)
 402893c:	e0bffa17 	ldw	r2,-24(fp)
 4028940:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4028944:	00800784 	movi	r2,30
 4028948:	00001b06 	br	40289b8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 402894c:	e0bffb17 	ldw	r2,-20(fp)
 4028950:	10800317 	ldw	r2,12(r2)
 4028954:	11000104 	addi	r4,r2,4
 4028958:	e0fffb17 	ldw	r3,-20(fp)
 402895c:	19000315 	stw	r4,12(r3)
 4028960:	e0ffff17 	ldw	r3,-4(fp)
 4028964:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 4028968:	e0bffb17 	ldw	r2,-20(fp)
 402896c:	1080058b 	ldhu	r2,22(r2)
 4028970:	10800044 	addi	r2,r2,1
 4028974:	1007883a 	mov	r3,r2
 4028978:	e0bffb17 	ldw	r2,-20(fp)
 402897c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 4028980:	e0bffb17 	ldw	r2,-20(fp)
 4028984:	10c00317 	ldw	r3,12(r2)
 4028988:	e0bffb17 	ldw	r2,-20(fp)
 402898c:	10800217 	ldw	r2,8(r2)
 4028990:	1880041e 	bne	r3,r2,40289a4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 4028994:	e0bffb17 	ldw	r2,-20(fp)
 4028998:	10c00117 	ldw	r3,4(r2)
 402899c:	e0bffb17 	ldw	r2,-20(fp)
 40289a0:	10c00315 	stw	r3,12(r2)
 40289a4:	e0bff817 	ldw	r2,-32(fp)
 40289a8:	e0bffc15 	stw	r2,-16(fp)
 40289ac:	e0bffc17 	ldw	r2,-16(fp)
 40289b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40289b4:	0005883a 	mov	r2,zero
}
 40289b8:	e037883a 	mov	sp,fp
 40289bc:	dfc00117 	ldw	ra,4(sp)
 40289c0:	df000017 	ldw	fp,0(sp)
 40289c4:	dec00204 	addi	sp,sp,8
 40289c8:	f800283a 	ret

040289cc <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 40289cc:	defff604 	addi	sp,sp,-40
 40289d0:	dfc00915 	stw	ra,36(sp)
 40289d4:	df000815 	stw	fp,32(sp)
 40289d8:	df000804 	addi	fp,sp,32
 40289dc:	e13ffe15 	stw	r4,-8(fp)
 40289e0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40289e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40289e8:	e0bffe17 	ldw	r2,-8(fp)
 40289ec:	1000021e 	bne	r2,zero,40289f8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 40289f0:	00800104 	movi	r2,4
 40289f4:	00004c06 	br	4028b28 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 40289f8:	e0bffe17 	ldw	r2,-8(fp)
 40289fc:	10800003 	ldbu	r2,0(r2)
 4028a00:	10803fcc 	andi	r2,r2,255
 4028a04:	108000a0 	cmpeqi	r2,r2,2
 4028a08:	1000021e 	bne	r2,zero,4028a14 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 4028a0c:	00800044 	movi	r2,1
 4028a10:	00004506 	br	4028b28 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4028a14:	0005303a 	rdctl	r2,status
 4028a18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4028a1c:	e0fffd17 	ldw	r3,-12(fp)
 4028a20:	00bfff84 	movi	r2,-2
 4028a24:	1884703a 	and	r2,r3,r2
 4028a28:	1001703a 	wrctl	status,r2
  
  return context;
 4028a2c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4028a30:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 4028a34:	e0bffe17 	ldw	r2,-8(fp)
 4028a38:	10800283 	ldbu	r2,10(r2)
 4028a3c:	10803fcc 	andi	r2,r2,255
 4028a40:	10000c26 	beq	r2,zero,4028a74 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4028a44:	000f883a 	mov	r7,zero
 4028a48:	01800104 	movi	r6,4
 4028a4c:	e17fff17 	ldw	r5,-4(fp)
 4028a50:	e13ffe17 	ldw	r4,-8(fp)
 4028a54:	4024d240 	call	4024d24 <OS_EventTaskRdy>
 4028a58:	e0bff817 	ldw	r2,-32(fp)
 4028a5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4028a60:	e0bff917 	ldw	r2,-28(fp)
 4028a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 4028a68:	40257700 	call	4025770 <OS_Sched>
        return (OS_ERR_NONE);
 4028a6c:	0005883a 	mov	r2,zero
 4028a70:	00002d06 	br	4028b28 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4028a74:	e0bffe17 	ldw	r2,-8(fp)
 4028a78:	10800117 	ldw	r2,4(r2)
 4028a7c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4028a80:	e0bffb17 	ldw	r2,-20(fp)
 4028a84:	10c0058b 	ldhu	r3,22(r2)
 4028a88:	e0bffb17 	ldw	r2,-20(fp)
 4028a8c:	1080050b 	ldhu	r2,20(r2)
 4028a90:	18ffffcc 	andi	r3,r3,65535
 4028a94:	10bfffcc 	andi	r2,r2,65535
 4028a98:	18800636 	bltu	r3,r2,4028ab4 <OSQPostFront+0xe8>
 4028a9c:	e0bff817 	ldw	r2,-32(fp)
 4028aa0:	e0bffa15 	stw	r2,-24(fp)
 4028aa4:	e0bffa17 	ldw	r2,-24(fp)
 4028aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4028aac:	00800784 	movi	r2,30
 4028ab0:	00001d06 	br	4028b28 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 4028ab4:	e0bffb17 	ldw	r2,-20(fp)
 4028ab8:	10c00417 	ldw	r3,16(r2)
 4028abc:	e0bffb17 	ldw	r2,-20(fp)
 4028ac0:	10800117 	ldw	r2,4(r2)
 4028ac4:	1880041e 	bne	r3,r2,4028ad8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 4028ac8:	e0bffb17 	ldw	r2,-20(fp)
 4028acc:	10c00217 	ldw	r3,8(r2)
 4028ad0:	e0bffb17 	ldw	r2,-20(fp)
 4028ad4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 4028ad8:	e0bffb17 	ldw	r2,-20(fp)
 4028adc:	10800417 	ldw	r2,16(r2)
 4028ae0:	10ffff04 	addi	r3,r2,-4
 4028ae4:	e0bffb17 	ldw	r2,-20(fp)
 4028ae8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 4028aec:	e0bffb17 	ldw	r2,-20(fp)
 4028af0:	10800417 	ldw	r2,16(r2)
 4028af4:	e0ffff17 	ldw	r3,-4(fp)
 4028af8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4028afc:	e0bffb17 	ldw	r2,-20(fp)
 4028b00:	1080058b 	ldhu	r2,22(r2)
 4028b04:	10800044 	addi	r2,r2,1
 4028b08:	1007883a 	mov	r3,r2
 4028b0c:	e0bffb17 	ldw	r2,-20(fp)
 4028b10:	10c0058d 	sth	r3,22(r2)
 4028b14:	e0bff817 	ldw	r2,-32(fp)
 4028b18:	e0bffc15 	stw	r2,-16(fp)
 4028b1c:	e0bffc17 	ldw	r2,-16(fp)
 4028b20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4028b24:	0005883a 	mov	r2,zero
}
 4028b28:	e037883a 	mov	sp,fp
 4028b2c:	dfc00117 	ldw	ra,4(sp)
 4028b30:	df000017 	ldw	fp,0(sp)
 4028b34:	dec00204 	addi	sp,sp,8
 4028b38:	f800283a 	ret

04028b3c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 4028b3c:	defff504 	addi	sp,sp,-44
 4028b40:	dfc00a15 	stw	ra,40(sp)
 4028b44:	df000915 	stw	fp,36(sp)
 4028b48:	df000904 	addi	fp,sp,36
 4028b4c:	e13ffd15 	stw	r4,-12(fp)
 4028b50:	e17ffe15 	stw	r5,-8(fp)
 4028b54:	3005883a 	mov	r2,r6
 4028b58:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4028b5c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4028b60:	e0bffd17 	ldw	r2,-12(fp)
 4028b64:	1000021e 	bne	r2,zero,4028b70 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 4028b68:	00800104 	movi	r2,4
 4028b6c:	00007106 	br	4028d34 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4028b70:	e0bffd17 	ldw	r2,-12(fp)
 4028b74:	10800003 	ldbu	r2,0(r2)
 4028b78:	10803fcc 	andi	r2,r2,255
 4028b7c:	108000a0 	cmpeqi	r2,r2,2
 4028b80:	1000021e 	bne	r2,zero,4028b8c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 4028b84:	00800044 	movi	r2,1
 4028b88:	00006a06 	br	4028d34 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4028b8c:	0005303a 	rdctl	r2,status
 4028b90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4028b94:	e0fffc17 	ldw	r3,-16(fp)
 4028b98:	00bfff84 	movi	r2,-2
 4028b9c:	1884703a 	and	r2,r3,r2
 4028ba0:	1001703a 	wrctl	status,r2
  
  return context;
 4028ba4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4028ba8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 4028bac:	e0bffd17 	ldw	r2,-12(fp)
 4028bb0:	10800283 	ldbu	r2,10(r2)
 4028bb4:	10803fcc 	andi	r2,r2,255
 4028bb8:	10001d26 	beq	r2,zero,4028c30 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 4028bbc:	e0bfff03 	ldbu	r2,-4(fp)
 4028bc0:	1080004c 	andi	r2,r2,1
 4028bc4:	10000b26 	beq	r2,zero,4028bf4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4028bc8:	00000506 	br	4028be0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4028bcc:	000f883a 	mov	r7,zero
 4028bd0:	01800104 	movi	r6,4
 4028bd4:	e17ffe17 	ldw	r5,-8(fp)
 4028bd8:	e13ffd17 	ldw	r4,-12(fp)
 4028bdc:	4024d240 	call	4024d24 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4028be0:	e0bffd17 	ldw	r2,-12(fp)
 4028be4:	10800283 	ldbu	r2,10(r2)
 4028be8:	10803fcc 	andi	r2,r2,255
 4028bec:	103ff71e 	bne	r2,zero,4028bcc <__flash_rwdata_start+0xffffafc8>
 4028bf0:	00000506 	br	4028c08 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4028bf4:	000f883a 	mov	r7,zero
 4028bf8:	01800104 	movi	r6,4
 4028bfc:	e17ffe17 	ldw	r5,-8(fp)
 4028c00:	e13ffd17 	ldw	r4,-12(fp)
 4028c04:	4024d240 	call	4024d24 <OS_EventTaskRdy>
 4028c08:	e0bff717 	ldw	r2,-36(fp)
 4028c0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4028c10:	e0bff817 	ldw	r2,-32(fp)
 4028c14:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 4028c18:	e0bfff03 	ldbu	r2,-4(fp)
 4028c1c:	1080010c 	andi	r2,r2,4
 4028c20:	1000011e 	bne	r2,zero,4028c28 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 4028c24:	40257700 	call	4025770 <OS_Sched>
        }
        return (OS_ERR_NONE);
 4028c28:	0005883a 	mov	r2,zero
 4028c2c:	00004106 	br	4028d34 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4028c30:	e0bffd17 	ldw	r2,-12(fp)
 4028c34:	10800117 	ldw	r2,4(r2)
 4028c38:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4028c3c:	e0bffa17 	ldw	r2,-24(fp)
 4028c40:	10c0058b 	ldhu	r3,22(r2)
 4028c44:	e0bffa17 	ldw	r2,-24(fp)
 4028c48:	1080050b 	ldhu	r2,20(r2)
 4028c4c:	18ffffcc 	andi	r3,r3,65535
 4028c50:	10bfffcc 	andi	r2,r2,65535
 4028c54:	18800636 	bltu	r3,r2,4028c70 <OSQPostOpt+0x134>
 4028c58:	e0bff717 	ldw	r2,-36(fp)
 4028c5c:	e0bff915 	stw	r2,-28(fp)
 4028c60:	e0bff917 	ldw	r2,-28(fp)
 4028c64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4028c68:	00800784 	movi	r2,30
 4028c6c:	00003106 	br	4028d34 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4028c70:	e0bfff03 	ldbu	r2,-4(fp)
 4028c74:	1080008c 	andi	r2,r2,2
 4028c78:	10001326 	beq	r2,zero,4028cc8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 4028c7c:	e0bffa17 	ldw	r2,-24(fp)
 4028c80:	10c00417 	ldw	r3,16(r2)
 4028c84:	e0bffa17 	ldw	r2,-24(fp)
 4028c88:	10800117 	ldw	r2,4(r2)
 4028c8c:	1880041e 	bne	r3,r2,4028ca0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 4028c90:	e0bffa17 	ldw	r2,-24(fp)
 4028c94:	10c00217 	ldw	r3,8(r2)
 4028c98:	e0bffa17 	ldw	r2,-24(fp)
 4028c9c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 4028ca0:	e0bffa17 	ldw	r2,-24(fp)
 4028ca4:	10800417 	ldw	r2,16(r2)
 4028ca8:	10ffff04 	addi	r3,r2,-4
 4028cac:	e0bffa17 	ldw	r2,-24(fp)
 4028cb0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 4028cb4:	e0bffa17 	ldw	r2,-24(fp)
 4028cb8:	10800417 	ldw	r2,16(r2)
 4028cbc:	e0fffe17 	ldw	r3,-8(fp)
 4028cc0:	10c00015 	stw	r3,0(r2)
 4028cc4:	00001006 	br	4028d08 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 4028cc8:	e0bffa17 	ldw	r2,-24(fp)
 4028ccc:	10800317 	ldw	r2,12(r2)
 4028cd0:	11000104 	addi	r4,r2,4
 4028cd4:	e0fffa17 	ldw	r3,-24(fp)
 4028cd8:	19000315 	stw	r4,12(r3)
 4028cdc:	e0fffe17 	ldw	r3,-8(fp)
 4028ce0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 4028ce4:	e0bffa17 	ldw	r2,-24(fp)
 4028ce8:	10c00317 	ldw	r3,12(r2)
 4028cec:	e0bffa17 	ldw	r2,-24(fp)
 4028cf0:	10800217 	ldw	r2,8(r2)
 4028cf4:	1880041e 	bne	r3,r2,4028d08 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 4028cf8:	e0bffa17 	ldw	r2,-24(fp)
 4028cfc:	10c00117 	ldw	r3,4(r2)
 4028d00:	e0bffa17 	ldw	r2,-24(fp)
 4028d04:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4028d08:	e0bffa17 	ldw	r2,-24(fp)
 4028d0c:	1080058b 	ldhu	r2,22(r2)
 4028d10:	10800044 	addi	r2,r2,1
 4028d14:	1007883a 	mov	r3,r2
 4028d18:	e0bffa17 	ldw	r2,-24(fp)
 4028d1c:	10c0058d 	sth	r3,22(r2)
 4028d20:	e0bff717 	ldw	r2,-36(fp)
 4028d24:	e0bffb15 	stw	r2,-20(fp)
 4028d28:	e0bffb17 	ldw	r2,-20(fp)
 4028d2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4028d30:	0005883a 	mov	r2,zero
}
 4028d34:	e037883a 	mov	sp,fp
 4028d38:	dfc00117 	ldw	ra,4(sp)
 4028d3c:	df000017 	ldw	fp,0(sp)
 4028d40:	dec00204 	addi	sp,sp,8
 4028d44:	f800283a 	ret

04028d48 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 4028d48:	defff604 	addi	sp,sp,-40
 4028d4c:	df000915 	stw	fp,36(sp)
 4028d50:	df000904 	addi	fp,sp,36
 4028d54:	e13ffe15 	stw	r4,-8(fp)
 4028d58:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4028d5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4028d60:	e0bffe17 	ldw	r2,-8(fp)
 4028d64:	1000021e 	bne	r2,zero,4028d70 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 4028d68:	00800104 	movi	r2,4
 4028d6c:	00004906 	br	4028e94 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4028d70:	e0bfff17 	ldw	r2,-4(fp)
 4028d74:	1000021e 	bne	r2,zero,4028d80 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 4028d78:	00800244 	movi	r2,9
 4028d7c:	00004506 	br	4028e94 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4028d80:	e0bffe17 	ldw	r2,-8(fp)
 4028d84:	10800003 	ldbu	r2,0(r2)
 4028d88:	10803fcc 	andi	r2,r2,255
 4028d8c:	108000a0 	cmpeqi	r2,r2,2
 4028d90:	1000021e 	bne	r2,zero,4028d9c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 4028d94:	00800044 	movi	r2,1
 4028d98:	00003e06 	br	4028e94 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4028d9c:	0005303a 	rdctl	r2,status
 4028da0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4028da4:	e0fffd17 	ldw	r3,-12(fp)
 4028da8:	00bfff84 	movi	r2,-2
 4028dac:	1884703a 	and	r2,r3,r2
 4028db0:	1001703a 	wrctl	status,r2
  
  return context;
 4028db4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4028db8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 4028dbc:	e0bffe17 	ldw	r2,-8(fp)
 4028dc0:	10c00283 	ldbu	r3,10(r2)
 4028dc4:	e0bfff17 	ldw	r2,-4(fp)
 4028dc8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 4028dcc:	e0bffe17 	ldw	r2,-8(fp)
 4028dd0:	108002c4 	addi	r2,r2,11
 4028dd4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 4028dd8:	e0bfff17 	ldw	r2,-4(fp)
 4028ddc:	10800204 	addi	r2,r2,8
 4028de0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4028de4:	e03ff705 	stb	zero,-36(fp)
 4028de8:	00000b06 	br	4028e18 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 4028dec:	e0bff917 	ldw	r2,-28(fp)
 4028df0:	10c00044 	addi	r3,r2,1
 4028df4:	e0fff915 	stw	r3,-28(fp)
 4028df8:	e0fff817 	ldw	r3,-32(fp)
 4028dfc:	19000044 	addi	r4,r3,1
 4028e00:	e13ff815 	stw	r4,-32(fp)
 4028e04:	18c00003 	ldbu	r3,0(r3)
 4028e08:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4028e0c:	e0bff703 	ldbu	r2,-36(fp)
 4028e10:	10800044 	addi	r2,r2,1
 4028e14:	e0bff705 	stb	r2,-36(fp)
 4028e18:	e0bff703 	ldbu	r2,-36(fp)
 4028e1c:	108000f0 	cmpltui	r2,r2,3
 4028e20:	103ff21e 	bne	r2,zero,4028dec <__flash_rwdata_start+0xffffb1e8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4028e24:	e0bffe17 	ldw	r2,-8(fp)
 4028e28:	10800117 	ldw	r2,4(r2)
 4028e2c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 4028e30:	e0bffc17 	ldw	r2,-16(fp)
 4028e34:	1080058b 	ldhu	r2,22(r2)
 4028e38:	10bfffcc 	andi	r2,r2,65535
 4028e3c:	10000626 	beq	r2,zero,4028e58 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4028e40:	e0bffc17 	ldw	r2,-16(fp)
 4028e44:	10800417 	ldw	r2,16(r2)
 4028e48:	10c00017 	ldw	r3,0(r2)
 4028e4c:	e0bfff17 	ldw	r2,-4(fp)
 4028e50:	10c00015 	stw	r3,0(r2)
 4028e54:	00000206 	br	4028e60 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 4028e58:	e0bfff17 	ldw	r2,-4(fp)
 4028e5c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4028e60:	e0bffc17 	ldw	r2,-16(fp)
 4028e64:	10c0058b 	ldhu	r3,22(r2)
 4028e68:	e0bfff17 	ldw	r2,-4(fp)
 4028e6c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4028e70:	e0bffc17 	ldw	r2,-16(fp)
 4028e74:	10c0050b 	ldhu	r3,20(r2)
 4028e78:	e0bfff17 	ldw	r2,-4(fp)
 4028e7c:	10c0018d 	sth	r3,6(r2)
 4028e80:	e0bffa17 	ldw	r2,-24(fp)
 4028e84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4028e88:	e0bffb17 	ldw	r2,-20(fp)
 4028e8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4028e90:	0005883a 	mov	r2,zero
}
 4028e94:	e037883a 	mov	sp,fp
 4028e98:	df000017 	ldw	fp,0(sp)
 4028e9c:	dec00104 	addi	sp,sp,4
 4028ea0:	f800283a 	ret

04028ea4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 4028ea4:	defffb04 	addi	sp,sp,-20
 4028ea8:	dfc00415 	stw	ra,16(sp)
 4028eac:	df000315 	stw	fp,12(sp)
 4028eb0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 4028eb4:	01407804 	movi	r5,480
 4028eb8:	01000034 	movhi	r4,0
 4028ebc:	211d3304 	addi	r4,r4,29900
 4028ec0:	40256b40 	call	40256b4 <OS_MemClr>
    pq1 = &OSQTbl[0];
 4028ec4:	00800034 	movhi	r2,0
 4028ec8:	109d3304 	addi	r2,r2,29900
 4028ecc:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 4028ed0:	00800034 	movhi	r2,0
 4028ed4:	109d3904 	addi	r2,r2,29924
 4028ed8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4028edc:	e03ffd0d 	sth	zero,-12(fp)
 4028ee0:	00000c06 	br	4028f14 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 4028ee4:	e0bffe17 	ldw	r2,-8(fp)
 4028ee8:	e0ffff17 	ldw	r3,-4(fp)
 4028eec:	10c00015 	stw	r3,0(r2)
        pq1++;
 4028ef0:	e0bffe17 	ldw	r2,-8(fp)
 4028ef4:	10800604 	addi	r2,r2,24
 4028ef8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 4028efc:	e0bfff17 	ldw	r2,-4(fp)
 4028f00:	10800604 	addi	r2,r2,24
 4028f04:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4028f08:	e0bffd0b 	ldhu	r2,-12(fp)
 4028f0c:	10800044 	addi	r2,r2,1
 4028f10:	e0bffd0d 	sth	r2,-12(fp)
 4028f14:	e0bffd0b 	ldhu	r2,-12(fp)
 4028f18:	108004f0 	cmpltui	r2,r2,19
 4028f1c:	103ff11e 	bne	r2,zero,4028ee4 <__flash_rwdata_start+0xffffb2e0>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 4028f20:	e0bffe17 	ldw	r2,-8(fp)
 4028f24:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 4028f28:	00800034 	movhi	r2,0
 4028f2c:	109d3304 	addi	r2,r2,29900
 4028f30:	d0a04415 	stw	r2,-32496(gp)
#endif
}
 4028f34:	0001883a 	nop
 4028f38:	e037883a 	mov	sp,fp
 4028f3c:	dfc00117 	ldw	ra,4(sp)
 4028f40:	df000017 	ldw	fp,0(sp)
 4028f44:	dec00204 	addi	sp,sp,8
 4028f48:	f800283a 	ret

04028f4c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 4028f4c:	defffa04 	addi	sp,sp,-24
 4028f50:	df000515 	stw	fp,20(sp)
 4028f54:	df000504 	addi	fp,sp,20
 4028f58:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4028f5c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4028f60:	e0bfff17 	ldw	r2,-4(fp)
 4028f64:	1000021e 	bne	r2,zero,4028f70 <OSSemAccept+0x24>
        return (0);
 4028f68:	0005883a 	mov	r2,zero
 4028f6c:	00001f06 	br	4028fec <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4028f70:	e0bfff17 	ldw	r2,-4(fp)
 4028f74:	10800003 	ldbu	r2,0(r2)
 4028f78:	10803fcc 	andi	r2,r2,255
 4028f7c:	108000e0 	cmpeqi	r2,r2,3
 4028f80:	1000021e 	bne	r2,zero,4028f8c <OSSemAccept+0x40>
        return (0);
 4028f84:	0005883a 	mov	r2,zero
 4028f88:	00001806 	br	4028fec <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4028f8c:	0005303a 	rdctl	r2,status
 4028f90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4028f94:	e0fffe17 	ldw	r3,-8(fp)
 4028f98:	00bfff84 	movi	r2,-2
 4028f9c:	1884703a 	and	r2,r3,r2
 4028fa0:	1001703a 	wrctl	status,r2
  
  return context;
 4028fa4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4028fa8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 4028fac:	e0bfff17 	ldw	r2,-4(fp)
 4028fb0:	1080020b 	ldhu	r2,8(r2)
 4028fb4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 4028fb8:	e0bffd0b 	ldhu	r2,-12(fp)
 4028fbc:	10000626 	beq	r2,zero,4028fd8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 4028fc0:	e0bfff17 	ldw	r2,-4(fp)
 4028fc4:	1080020b 	ldhu	r2,8(r2)
 4028fc8:	10bfffc4 	addi	r2,r2,-1
 4028fcc:	1007883a 	mov	r3,r2
 4028fd0:	e0bfff17 	ldw	r2,-4(fp)
 4028fd4:	10c0020d 	sth	r3,8(r2)
 4028fd8:	e0bffb17 	ldw	r2,-20(fp)
 4028fdc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4028fe0:	e0bffc17 	ldw	r2,-16(fp)
 4028fe4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4028fe8:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4028fec:	e037883a 	mov	sp,fp
 4028ff0:	df000017 	ldw	fp,0(sp)
 4028ff4:	dec00104 	addi	sp,sp,4
 4028ff8:	f800283a 	ret

04028ffc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 4028ffc:	defff904 	addi	sp,sp,-28
 4029000:	dfc00615 	stw	ra,24(sp)
 4029004:	df000515 	stw	fp,20(sp)
 4029008:	df000504 	addi	fp,sp,20
 402900c:	2005883a 	mov	r2,r4
 4029010:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4029014:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4029018:	d0a04703 	ldbu	r2,-32484(gp)
 402901c:	10803fcc 	andi	r2,r2,255
 4029020:	10000226 	beq	r2,zero,402902c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 4029024:	0005883a 	mov	r2,zero
 4029028:	00002506 	br	40290c0 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402902c:	0005303a 	rdctl	r2,status
 4029030:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029034:	e0fffe17 	ldw	r3,-8(fp)
 4029038:	00bfff84 	movi	r2,-2
 402903c:	1884703a 	and	r2,r3,r2
 4029040:	1001703a 	wrctl	status,r2
  
  return context;
 4029044:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4029048:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 402904c:	d0a04617 	ldw	r2,-32488(gp)
 4029050:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 4029054:	d0a04617 	ldw	r2,-32488(gp)
 4029058:	10000326 	beq	r2,zero,4029068 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 402905c:	d0a04617 	ldw	r2,-32488(gp)
 4029060:	10800117 	ldw	r2,4(r2)
 4029064:	d0a04615 	stw	r2,-32488(gp)
 4029068:	e0bffb17 	ldw	r2,-20(fp)
 402906c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029070:	e0bffc17 	ldw	r2,-16(fp)
 4029074:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 4029078:	e0bffd17 	ldw	r2,-12(fp)
 402907c:	10000f26 	beq	r2,zero,40290bc <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 4029080:	e0bffd17 	ldw	r2,-12(fp)
 4029084:	00c000c4 	movi	r3,3
 4029088:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 402908c:	e0bffd17 	ldw	r2,-12(fp)
 4029090:	e0ffff0b 	ldhu	r3,-4(fp)
 4029094:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 4029098:	e0bffd17 	ldw	r2,-12(fp)
 402909c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 40290a0:	e0bffd17 	ldw	r2,-12(fp)
 40290a4:	00c00fc4 	movi	r3,63
 40290a8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 40290ac:	e0bffd17 	ldw	r2,-12(fp)
 40290b0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 40290b4:	e13ffd17 	ldw	r4,-12(fp)
 40290b8:	40252d40 	call	40252d4 <OS_EventWaitListInit>
    }
    return (pevent);
 40290bc:	e0bffd17 	ldw	r2,-12(fp)
}
 40290c0:	e037883a 	mov	sp,fp
 40290c4:	dfc00117 	ldw	ra,4(sp)
 40290c8:	df000017 	ldw	fp,0(sp)
 40290cc:	dec00204 	addi	sp,sp,8
 40290d0:	f800283a 	ret

040290d4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 40290d4:	defff304 	addi	sp,sp,-52
 40290d8:	dfc00c15 	stw	ra,48(sp)
 40290dc:	df000b15 	stw	fp,44(sp)
 40290e0:	df000b04 	addi	fp,sp,44
 40290e4:	e13ffd15 	stw	r4,-12(fp)
 40290e8:	2805883a 	mov	r2,r5
 40290ec:	e1bfff15 	stw	r6,-4(fp)
 40290f0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40290f4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40290f8:	e0bfff17 	ldw	r2,-4(fp)
 40290fc:	1000021e 	bne	r2,zero,4029108 <OSSemDel+0x34>
        return (pevent);
 4029100:	e0bffd17 	ldw	r2,-12(fp)
 4029104:	00007e06 	br	4029300 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4029108:	e0bffd17 	ldw	r2,-12(fp)
 402910c:	1000051e 	bne	r2,zero,4029124 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4029110:	e0bfff17 	ldw	r2,-4(fp)
 4029114:	00c00104 	movi	r3,4
 4029118:	10c00005 	stb	r3,0(r2)
        return (pevent);
 402911c:	e0bffd17 	ldw	r2,-12(fp)
 4029120:	00007706 	br	4029300 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4029124:	e0bffd17 	ldw	r2,-12(fp)
 4029128:	10800003 	ldbu	r2,0(r2)
 402912c:	10803fcc 	andi	r2,r2,255
 4029130:	108000e0 	cmpeqi	r2,r2,3
 4029134:	1000051e 	bne	r2,zero,402914c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4029138:	e0bfff17 	ldw	r2,-4(fp)
 402913c:	00c00044 	movi	r3,1
 4029140:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4029144:	e0bffd17 	ldw	r2,-12(fp)
 4029148:	00006d06 	br	4029300 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 402914c:	d0a04703 	ldbu	r2,-32484(gp)
 4029150:	10803fcc 	andi	r2,r2,255
 4029154:	10000526 	beq	r2,zero,402916c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 4029158:	e0bfff17 	ldw	r2,-4(fp)
 402915c:	00c003c4 	movi	r3,15
 4029160:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4029164:	e0bffd17 	ldw	r2,-12(fp)
 4029168:	00006506 	br	4029300 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402916c:	0005303a 	rdctl	r2,status
 4029170:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029174:	e0fffc17 	ldw	r3,-16(fp)
 4029178:	00bfff84 	movi	r2,-2
 402917c:	1884703a 	and	r2,r3,r2
 4029180:	1001703a 	wrctl	status,r2
  
  return context;
 4029184:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4029188:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 402918c:	e0bffd17 	ldw	r2,-12(fp)
 4029190:	10800283 	ldbu	r2,10(r2)
 4029194:	10803fcc 	andi	r2,r2,255
 4029198:	10000326 	beq	r2,zero,40291a8 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 402919c:	00800044 	movi	r2,1
 40291a0:	e0bff505 	stb	r2,-44(fp)
 40291a4:	00000106 	br	40291ac <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 40291a8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 40291ac:	e0bffe03 	ldbu	r2,-8(fp)
 40291b0:	10000326 	beq	r2,zero,40291c0 <OSSemDel+0xec>
 40291b4:	10800060 	cmpeqi	r2,r2,1
 40291b8:	1000281e 	bne	r2,zero,402925c <OSSemDel+0x188>
 40291bc:	00004506 	br	40292d4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 40291c0:	e0bff503 	ldbu	r2,-44(fp)
 40291c4:	1000161e 	bne	r2,zero,4029220 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 40291c8:	e0bffd17 	ldw	r2,-12(fp)
 40291cc:	00c00fc4 	movi	r3,63
 40291d0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 40291d4:	e0bffd17 	ldw	r2,-12(fp)
 40291d8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 40291dc:	e0bffd17 	ldw	r2,-12(fp)
 40291e0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 40291e4:	d0e04617 	ldw	r3,-32488(gp)
 40291e8:	e0bffd17 	ldw	r2,-12(fp)
 40291ec:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 40291f0:	e0bffd17 	ldw	r2,-12(fp)
 40291f4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 40291f8:	e0bffd17 	ldw	r2,-12(fp)
 40291fc:	d0a04615 	stw	r2,-32488(gp)
 4029200:	e0bff717 	ldw	r2,-36(fp)
 4029204:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029208:	e0bff817 	ldw	r2,-32(fp)
 402920c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4029210:	e0bfff17 	ldw	r2,-4(fp)
 4029214:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 4029218:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 402921c:	00003706 	br	40292fc <OSSemDel+0x228>
 4029220:	e0bff717 	ldw	r2,-36(fp)
 4029224:	e0bff915 	stw	r2,-28(fp)
 4029228:	e0bff917 	ldw	r2,-28(fp)
 402922c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4029230:	e0bfff17 	ldw	r2,-4(fp)
 4029234:	00c01244 	movi	r3,73
 4029238:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 402923c:	e0bffd17 	ldw	r2,-12(fp)
 4029240:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4029244:	00002d06 	br	40292fc <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4029248:	000f883a 	mov	r7,zero
 402924c:	01800044 	movi	r6,1
 4029250:	000b883a 	mov	r5,zero
 4029254:	e13ffd17 	ldw	r4,-12(fp)
 4029258:	4024d240 	call	4024d24 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 402925c:	e0bffd17 	ldw	r2,-12(fp)
 4029260:	10800283 	ldbu	r2,10(r2)
 4029264:	10803fcc 	andi	r2,r2,255
 4029268:	103ff71e 	bne	r2,zero,4029248 <__flash_rwdata_start+0xffffb644>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 402926c:	e0bffd17 	ldw	r2,-12(fp)
 4029270:	00c00fc4 	movi	r3,63
 4029274:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4029278:	e0bffd17 	ldw	r2,-12(fp)
 402927c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4029280:	e0bffd17 	ldw	r2,-12(fp)
 4029284:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4029288:	d0e04617 	ldw	r3,-32488(gp)
 402928c:	e0bffd17 	ldw	r2,-12(fp)
 4029290:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4029294:	e0bffd17 	ldw	r2,-12(fp)
 4029298:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 402929c:	e0bffd17 	ldw	r2,-12(fp)
 40292a0:	d0a04615 	stw	r2,-32488(gp)
 40292a4:	e0bff717 	ldw	r2,-36(fp)
 40292a8:	e0bffa15 	stw	r2,-24(fp)
 40292ac:	e0bffa17 	ldw	r2,-24(fp)
 40292b0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 40292b4:	e0bff503 	ldbu	r2,-44(fp)
 40292b8:	10800058 	cmpnei	r2,r2,1
 40292bc:	1000011e 	bne	r2,zero,40292c4 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 40292c0:	40257700 	call	4025770 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 40292c4:	e0bfff17 	ldw	r2,-4(fp)
 40292c8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 40292cc:	e03ff615 	stw	zero,-40(fp)
             break;
 40292d0:	00000a06 	br	40292fc <OSSemDel+0x228>
 40292d4:	e0bff717 	ldw	r2,-36(fp)
 40292d8:	e0bffb15 	stw	r2,-20(fp)
 40292dc:	e0bffb17 	ldw	r2,-20(fp)
 40292e0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 40292e4:	e0bfff17 	ldw	r2,-4(fp)
 40292e8:	00c001c4 	movi	r3,7
 40292ec:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 40292f0:	e0bffd17 	ldw	r2,-12(fp)
 40292f4:	e0bff615 	stw	r2,-40(fp)
             break;
 40292f8:	0001883a 	nop
    }
    return (pevent_return);
 40292fc:	e0bff617 	ldw	r2,-40(fp)
}
 4029300:	e037883a 	mov	sp,fp
 4029304:	dfc00117 	ldw	ra,4(sp)
 4029308:	df000017 	ldw	fp,0(sp)
 402930c:	dec00204 	addi	sp,sp,8
 4029310:	f800283a 	ret

04029314 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4029314:	defff504 	addi	sp,sp,-44
 4029318:	dfc00a15 	stw	ra,40(sp)
 402931c:	df000915 	stw	fp,36(sp)
 4029320:	df000904 	addi	fp,sp,36
 4029324:	e13ffd15 	stw	r4,-12(fp)
 4029328:	2805883a 	mov	r2,r5
 402932c:	e1bfff15 	stw	r6,-4(fp)
 4029330:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4029334:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4029338:	e0bfff17 	ldw	r2,-4(fp)
 402933c:	10007226 	beq	r2,zero,4029508 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4029340:	e0bffd17 	ldw	r2,-12(fp)
 4029344:	1000041e 	bne	r2,zero,4029358 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4029348:	e0bfff17 	ldw	r2,-4(fp)
 402934c:	00c00104 	movi	r3,4
 4029350:	10c00005 	stb	r3,0(r2)
        return;
 4029354:	00006d06 	br	402950c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4029358:	e0bffd17 	ldw	r2,-12(fp)
 402935c:	10800003 	ldbu	r2,0(r2)
 4029360:	10803fcc 	andi	r2,r2,255
 4029364:	108000e0 	cmpeqi	r2,r2,3
 4029368:	1000041e 	bne	r2,zero,402937c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 402936c:	e0bfff17 	ldw	r2,-4(fp)
 4029370:	00c00044 	movi	r3,1
 4029374:	10c00005 	stb	r3,0(r2)
        return;
 4029378:	00006406 	br	402950c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 402937c:	d0a04703 	ldbu	r2,-32484(gp)
 4029380:	10803fcc 	andi	r2,r2,255
 4029384:	10000426 	beq	r2,zero,4029398 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 4029388:	e0bfff17 	ldw	r2,-4(fp)
 402938c:	00c00084 	movi	r3,2
 4029390:	10c00005 	stb	r3,0(r2)
        return;
 4029394:	00005d06 	br	402950c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 4029398:	d0a03903 	ldbu	r2,-32540(gp)
 402939c:	10803fcc 	andi	r2,r2,255
 40293a0:	10000426 	beq	r2,zero,40293b4 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 40293a4:	e0bfff17 	ldw	r2,-4(fp)
 40293a8:	00c00344 	movi	r3,13
 40293ac:	10c00005 	stb	r3,0(r2)
        return;
 40293b0:	00005606 	br	402950c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40293b4:	0005303a 	rdctl	r2,status
 40293b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40293bc:	e0fffc17 	ldw	r3,-16(fp)
 40293c0:	00bfff84 	movi	r2,-2
 40293c4:	1884703a 	and	r2,r3,r2
 40293c8:	1001703a 	wrctl	status,r2
  
  return context;
 40293cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40293d0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 40293d4:	e0bffd17 	ldw	r2,-12(fp)
 40293d8:	1080020b 	ldhu	r2,8(r2)
 40293dc:	10bfffcc 	andi	r2,r2,65535
 40293e0:	10000d26 	beq	r2,zero,4029418 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 40293e4:	e0bffd17 	ldw	r2,-12(fp)
 40293e8:	1080020b 	ldhu	r2,8(r2)
 40293ec:	10bfffc4 	addi	r2,r2,-1
 40293f0:	1007883a 	mov	r3,r2
 40293f4:	e0bffd17 	ldw	r2,-12(fp)
 40293f8:	10c0020d 	sth	r3,8(r2)
 40293fc:	e0bff717 	ldw	r2,-36(fp)
 4029400:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029404:	e0bff817 	ldw	r2,-32(fp)
 4029408:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 402940c:	e0bfff17 	ldw	r2,-4(fp)
 4029410:	10000005 	stb	zero,0(r2)
        return;
 4029414:	00003d06 	br	402950c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 4029418:	d0a04817 	ldw	r2,-32480(gp)
 402941c:	d0e04817 	ldw	r3,-32480(gp)
 4029420:	18c00c03 	ldbu	r3,48(r3)
 4029424:	18c00054 	ori	r3,r3,1
 4029428:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 402942c:	d0a04817 	ldw	r2,-32480(gp)
 4029430:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 4029434:	d0a04817 	ldw	r2,-32480(gp)
 4029438:	e0fffe0b 	ldhu	r3,-8(fp)
 402943c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 4029440:	e13ffd17 	ldw	r4,-12(fp)
 4029444:	4024ebc0 	call	4024ebc <OS_EventTaskWait>
 4029448:	e0bff717 	ldw	r2,-36(fp)
 402944c:	e0bffb15 	stw	r2,-20(fp)
 4029450:	e0bffb17 	ldw	r2,-20(fp)
 4029454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 4029458:	40257700 	call	4025770 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402945c:	0005303a 	rdctl	r2,status
 4029460:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029464:	e0fff917 	ldw	r3,-28(fp)
 4029468:	00bfff84 	movi	r2,-2
 402946c:	1884703a 	and	r2,r3,r2
 4029470:	1001703a 	wrctl	status,r2
  
  return context;
 4029474:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 4029478:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 402947c:	d0a04817 	ldw	r2,-32480(gp)
 4029480:	10800c43 	ldbu	r2,49(r2)
 4029484:	10803fcc 	andi	r2,r2,255
 4029488:	10000326 	beq	r2,zero,4029498 <OSSemPend+0x184>
 402948c:	108000a0 	cmpeqi	r2,r2,2
 4029490:	1000041e 	bne	r2,zero,40294a4 <OSSemPend+0x190>
 4029494:	00000706 	br	40294b4 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 4029498:	e0bfff17 	ldw	r2,-4(fp)
 402949c:	10000005 	stb	zero,0(r2)
             break;
 40294a0:	00000c06 	br	40294d4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 40294a4:	e0bfff17 	ldw	r2,-4(fp)
 40294a8:	00c00384 	movi	r3,14
 40294ac:	10c00005 	stb	r3,0(r2)
             break;
 40294b0:	00000806 	br	40294d4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 40294b4:	d0a04817 	ldw	r2,-32480(gp)
 40294b8:	e17ffd17 	ldw	r5,-12(fp)
 40294bc:	1009883a 	mov	r4,r2
 40294c0:	402511c0 	call	402511c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 40294c4:	e0bfff17 	ldw	r2,-4(fp)
 40294c8:	00c00284 	movi	r3,10
 40294cc:	10c00005 	stb	r3,0(r2)
             break;
 40294d0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 40294d4:	d0a04817 	ldw	r2,-32480(gp)
 40294d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 40294dc:	d0a04817 	ldw	r2,-32480(gp)
 40294e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 40294e4:	d0a04817 	ldw	r2,-32480(gp)
 40294e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 40294ec:	d0a04817 	ldw	r2,-32480(gp)
 40294f0:	10000815 	stw	zero,32(r2)
 40294f4:	e0bff717 	ldw	r2,-36(fp)
 40294f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40294fc:	e0bffa17 	ldw	r2,-24(fp)
 4029500:	1001703a 	wrctl	status,r2
 4029504:	00000106 	br	402950c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 4029508:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 402950c:	e037883a 	mov	sp,fp
 4029510:	dfc00117 	ldw	ra,4(sp)
 4029514:	df000017 	ldw	fp,0(sp)
 4029518:	dec00204 	addi	sp,sp,8
 402951c:	f800283a 	ret

04029520 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4029520:	defff604 	addi	sp,sp,-40
 4029524:	dfc00915 	stw	ra,36(sp)
 4029528:	df000815 	stw	fp,32(sp)
 402952c:	df000804 	addi	fp,sp,32
 4029530:	e13ffd15 	stw	r4,-12(fp)
 4029534:	2805883a 	mov	r2,r5
 4029538:	e1bfff15 	stw	r6,-4(fp)
 402953c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4029540:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4029544:	e0bfff17 	ldw	r2,-4(fp)
 4029548:	1000021e 	bne	r2,zero,4029554 <OSSemPendAbort+0x34>
        return (0);
 402954c:	0005883a 	mov	r2,zero
 4029550:	00004906 	br	4029678 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4029554:	e0bffd17 	ldw	r2,-12(fp)
 4029558:	1000051e 	bne	r2,zero,4029570 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 402955c:	e0bfff17 	ldw	r2,-4(fp)
 4029560:	00c00104 	movi	r3,4
 4029564:	10c00005 	stb	r3,0(r2)
        return (0);
 4029568:	0005883a 	mov	r2,zero
 402956c:	00004206 	br	4029678 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4029570:	e0bffd17 	ldw	r2,-12(fp)
 4029574:	10800003 	ldbu	r2,0(r2)
 4029578:	10803fcc 	andi	r2,r2,255
 402957c:	108000e0 	cmpeqi	r2,r2,3
 4029580:	1000051e 	bne	r2,zero,4029598 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4029584:	e0bfff17 	ldw	r2,-4(fp)
 4029588:	00c00044 	movi	r3,1
 402958c:	10c00005 	stb	r3,0(r2)
        return (0);
 4029590:	0005883a 	mov	r2,zero
 4029594:	00003806 	br	4029678 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4029598:	0005303a 	rdctl	r2,status
 402959c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40295a0:	e0fffc17 	ldw	r3,-16(fp)
 40295a4:	00bfff84 	movi	r2,-2
 40295a8:	1884703a 	and	r2,r3,r2
 40295ac:	1001703a 	wrctl	status,r2
  
  return context;
 40295b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40295b4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 40295b8:	e0bffd17 	ldw	r2,-12(fp)
 40295bc:	10800283 	ldbu	r2,10(r2)
 40295c0:	10803fcc 	andi	r2,r2,255
 40295c4:	10002526 	beq	r2,zero,402965c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 40295c8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 40295cc:	e0bffe03 	ldbu	r2,-8(fp)
 40295d0:	10800060 	cmpeqi	r2,r2,1
 40295d4:	10000e26 	beq	r2,zero,4029610 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 40295d8:	00000806 	br	40295fc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 40295dc:	01c00084 	movi	r7,2
 40295e0:	01800044 	movi	r6,1
 40295e4:	000b883a 	mov	r5,zero
 40295e8:	e13ffd17 	ldw	r4,-12(fp)
 40295ec:	4024d240 	call	4024d24 <OS_EventTaskRdy>
                     nbr_tasks++;
 40295f0:	e0bff803 	ldbu	r2,-32(fp)
 40295f4:	10800044 	addi	r2,r2,1
 40295f8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 40295fc:	e0bffd17 	ldw	r2,-12(fp)
 4029600:	10800283 	ldbu	r2,10(r2)
 4029604:	10803fcc 	andi	r2,r2,255
 4029608:	103ff41e 	bne	r2,zero,40295dc <__flash_rwdata_start+0xffffb9d8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 402960c:	00000906 	br	4029634 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4029610:	01c00084 	movi	r7,2
 4029614:	01800044 	movi	r6,1
 4029618:	000b883a 	mov	r5,zero
 402961c:	e13ffd17 	ldw	r4,-12(fp)
 4029620:	4024d240 	call	4024d24 <OS_EventTaskRdy>
                 nbr_tasks++;
 4029624:	e0bff803 	ldbu	r2,-32(fp)
 4029628:	10800044 	addi	r2,r2,1
 402962c:	e0bff805 	stb	r2,-32(fp)
                 break;
 4029630:	0001883a 	nop
 4029634:	e0bff917 	ldw	r2,-28(fp)
 4029638:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402963c:	e0bffa17 	ldw	r2,-24(fp)
 4029640:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4029644:	40257700 	call	4025770 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 4029648:	e0bfff17 	ldw	r2,-4(fp)
 402964c:	00c00384 	movi	r3,14
 4029650:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 4029654:	e0bff803 	ldbu	r2,-32(fp)
 4029658:	00000706 	br	4029678 <OSSemPendAbort+0x158>
 402965c:	e0bff917 	ldw	r2,-28(fp)
 4029660:	e0bffb15 	stw	r2,-20(fp)
 4029664:	e0bffb17 	ldw	r2,-20(fp)
 4029668:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 402966c:	e0bfff17 	ldw	r2,-4(fp)
 4029670:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 4029674:	0005883a 	mov	r2,zero
}
 4029678:	e037883a 	mov	sp,fp
 402967c:	dfc00117 	ldw	ra,4(sp)
 4029680:	df000017 	ldw	fp,0(sp)
 4029684:	dec00204 	addi	sp,sp,8
 4029688:	f800283a 	ret

0402968c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 402968c:	defff804 	addi	sp,sp,-32
 4029690:	dfc00715 	stw	ra,28(sp)
 4029694:	df000615 	stw	fp,24(sp)
 4029698:	df000604 	addi	fp,sp,24
 402969c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40296a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40296a4:	e0bfff17 	ldw	r2,-4(fp)
 40296a8:	1000021e 	bne	r2,zero,40296b4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 40296ac:	00800104 	movi	r2,4
 40296b0:	00003506 	br	4029788 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40296b4:	e0bfff17 	ldw	r2,-4(fp)
 40296b8:	10800003 	ldbu	r2,0(r2)
 40296bc:	10803fcc 	andi	r2,r2,255
 40296c0:	108000e0 	cmpeqi	r2,r2,3
 40296c4:	1000021e 	bne	r2,zero,40296d0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 40296c8:	00800044 	movi	r2,1
 40296cc:	00002e06 	br	4029788 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40296d0:	0005303a 	rdctl	r2,status
 40296d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40296d8:	e0fffe17 	ldw	r3,-8(fp)
 40296dc:	00bfff84 	movi	r2,-2
 40296e0:	1884703a 	and	r2,r3,r2
 40296e4:	1001703a 	wrctl	status,r2
  
  return context;
 40296e8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 40296ec:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 40296f0:	e0bfff17 	ldw	r2,-4(fp)
 40296f4:	10800283 	ldbu	r2,10(r2)
 40296f8:	10803fcc 	andi	r2,r2,255
 40296fc:	10000c26 	beq	r2,zero,4029730 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 4029700:	000f883a 	mov	r7,zero
 4029704:	01800044 	movi	r6,1
 4029708:	000b883a 	mov	r5,zero
 402970c:	e13fff17 	ldw	r4,-4(fp)
 4029710:	4024d240 	call	4024d24 <OS_EventTaskRdy>
 4029714:	e0bffa17 	ldw	r2,-24(fp)
 4029718:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402971c:	e0bffb17 	ldw	r2,-20(fp)
 4029720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 4029724:	40257700 	call	4025770 <OS_Sched>
        return (OS_ERR_NONE);
 4029728:	0005883a 	mov	r2,zero
 402972c:	00001606 	br	4029788 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 4029730:	e0bfff17 	ldw	r2,-4(fp)
 4029734:	1080020b 	ldhu	r2,8(r2)
 4029738:	10ffffcc 	andi	r3,r2,65535
 402973c:	00bfffd4 	movui	r2,65535
 4029740:	18800c26 	beq	r3,r2,4029774 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 4029744:	e0bfff17 	ldw	r2,-4(fp)
 4029748:	1080020b 	ldhu	r2,8(r2)
 402974c:	10800044 	addi	r2,r2,1
 4029750:	1007883a 	mov	r3,r2
 4029754:	e0bfff17 	ldw	r2,-4(fp)
 4029758:	10c0020d 	sth	r3,8(r2)
 402975c:	e0bffa17 	ldw	r2,-24(fp)
 4029760:	e0bffc15 	stw	r2,-16(fp)
 4029764:	e0bffc17 	ldw	r2,-16(fp)
 4029768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 402976c:	0005883a 	mov	r2,zero
 4029770:	00000506 	br	4029788 <OSSemPost+0xfc>
 4029774:	e0bffa17 	ldw	r2,-24(fp)
 4029778:	e0bffd15 	stw	r2,-12(fp)
 402977c:	e0bffd17 	ldw	r2,-12(fp)
 4029780:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 4029784:	00800c84 	movi	r2,50
}
 4029788:	e037883a 	mov	sp,fp
 402978c:	dfc00117 	ldw	ra,4(sp)
 4029790:	df000017 	ldw	fp,0(sp)
 4029794:	dec00204 	addi	sp,sp,8
 4029798:	f800283a 	ret

0402979c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 402979c:	defff704 	addi	sp,sp,-36
 40297a0:	df000815 	stw	fp,32(sp)
 40297a4:	df000804 	addi	fp,sp,32
 40297a8:	e13ffe15 	stw	r4,-8(fp)
 40297ac:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40297b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40297b4:	e0bffe17 	ldw	r2,-8(fp)
 40297b8:	1000021e 	bne	r2,zero,40297c4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 40297bc:	00800104 	movi	r2,4
 40297c0:	00003606 	br	402989c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 40297c4:	e0bfff17 	ldw	r2,-4(fp)
 40297c8:	1000021e 	bne	r2,zero,40297d4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 40297cc:	00800244 	movi	r2,9
 40297d0:	00003206 	br	402989c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 40297d4:	e0bffe17 	ldw	r2,-8(fp)
 40297d8:	10800003 	ldbu	r2,0(r2)
 40297dc:	10803fcc 	andi	r2,r2,255
 40297e0:	108000e0 	cmpeqi	r2,r2,3
 40297e4:	1000021e 	bne	r2,zero,40297f0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 40297e8:	00800044 	movi	r2,1
 40297ec:	00002b06 	br	402989c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40297f0:	0005303a 	rdctl	r2,status
 40297f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40297f8:	e0fffd17 	ldw	r3,-12(fp)
 40297fc:	00bfff84 	movi	r2,-2
 4029800:	1884703a 	and	r2,r3,r2
 4029804:	1001703a 	wrctl	status,r2
  
  return context;
 4029808:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 402980c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 4029810:	e0bffe17 	ldw	r2,-8(fp)
 4029814:	10c00283 	ldbu	r3,10(r2)
 4029818:	e0bfff17 	ldw	r2,-4(fp)
 402981c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 4029820:	e0bffe17 	ldw	r2,-8(fp)
 4029824:	108002c4 	addi	r2,r2,11
 4029828:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 402982c:	e0bfff17 	ldw	r2,-4(fp)
 4029830:	10800084 	addi	r2,r2,2
 4029834:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4029838:	e03ffa05 	stb	zero,-24(fp)
 402983c:	00000b06 	br	402986c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 4029840:	e0bff917 	ldw	r2,-28(fp)
 4029844:	10c00044 	addi	r3,r2,1
 4029848:	e0fff915 	stw	r3,-28(fp)
 402984c:	e0fff817 	ldw	r3,-32(fp)
 4029850:	19000044 	addi	r4,r3,1
 4029854:	e13ff815 	stw	r4,-32(fp)
 4029858:	18c00003 	ldbu	r3,0(r3)
 402985c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4029860:	e0bffa03 	ldbu	r2,-24(fp)
 4029864:	10800044 	addi	r2,r2,1
 4029868:	e0bffa05 	stb	r2,-24(fp)
 402986c:	e0bffa03 	ldbu	r2,-24(fp)
 4029870:	108000f0 	cmpltui	r2,r2,3
 4029874:	103ff21e 	bne	r2,zero,4029840 <__flash_rwdata_start+0xffffbc3c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 4029878:	e0bffe17 	ldw	r2,-8(fp)
 402987c:	10c0020b 	ldhu	r3,8(r2)
 4029880:	e0bfff17 	ldw	r2,-4(fp)
 4029884:	10c0000d 	sth	r3,0(r2)
 4029888:	e0bffb17 	ldw	r2,-20(fp)
 402988c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029890:	e0bffc17 	ldw	r2,-16(fp)
 4029894:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4029898:	0005883a 	mov	r2,zero
}
 402989c:	e037883a 	mov	sp,fp
 40298a0:	df000017 	ldw	fp,0(sp)
 40298a4:	dec00104 	addi	sp,sp,4
 40298a8:	f800283a 	ret

040298ac <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 40298ac:	defff904 	addi	sp,sp,-28
 40298b0:	df000615 	stw	fp,24(sp)
 40298b4:	df000604 	addi	fp,sp,24
 40298b8:	e13ffd15 	stw	r4,-12(fp)
 40298bc:	2805883a 	mov	r2,r5
 40298c0:	e1bfff15 	stw	r6,-4(fp)
 40298c4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40298c8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40298cc:	e0bfff17 	ldw	r2,-4(fp)
 40298d0:	10003126 	beq	r2,zero,4029998 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40298d4:	e0bffd17 	ldw	r2,-12(fp)
 40298d8:	1000041e 	bne	r2,zero,40298ec <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 40298dc:	e0bfff17 	ldw	r2,-4(fp)
 40298e0:	00c00104 	movi	r3,4
 40298e4:	10c00005 	stb	r3,0(r2)
        return;
 40298e8:	00002c06 	br	402999c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40298ec:	e0bffd17 	ldw	r2,-12(fp)
 40298f0:	10800003 	ldbu	r2,0(r2)
 40298f4:	10803fcc 	andi	r2,r2,255
 40298f8:	108000e0 	cmpeqi	r2,r2,3
 40298fc:	1000041e 	bne	r2,zero,4029910 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 4029900:	e0bfff17 	ldw	r2,-4(fp)
 4029904:	00c00044 	movi	r3,1
 4029908:	10c00005 	stb	r3,0(r2)
        return;
 402990c:	00002306 	br	402999c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4029910:	0005303a 	rdctl	r2,status
 4029914:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029918:	e0fffc17 	ldw	r3,-16(fp)
 402991c:	00bfff84 	movi	r2,-2
 4029920:	1884703a 	and	r2,r3,r2
 4029924:	1001703a 	wrctl	status,r2
  
  return context;
 4029928:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 402992c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 4029930:	e0bfff17 	ldw	r2,-4(fp)
 4029934:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 4029938:	e0bffd17 	ldw	r2,-12(fp)
 402993c:	1080020b 	ldhu	r2,8(r2)
 4029940:	10bfffcc 	andi	r2,r2,65535
 4029944:	10000426 	beq	r2,zero,4029958 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 4029948:	e0bffd17 	ldw	r2,-12(fp)
 402994c:	e0fffe0b 	ldhu	r3,-8(fp)
 4029950:	10c0020d 	sth	r3,8(r2)
 4029954:	00000b06 	br	4029984 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 4029958:	e0bffd17 	ldw	r2,-12(fp)
 402995c:	10800283 	ldbu	r2,10(r2)
 4029960:	10803fcc 	andi	r2,r2,255
 4029964:	1000041e 	bne	r2,zero,4029978 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 4029968:	e0bffd17 	ldw	r2,-12(fp)
 402996c:	e0fffe0b 	ldhu	r3,-8(fp)
 4029970:	10c0020d 	sth	r3,8(r2)
 4029974:	00000306 	br	4029984 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 4029978:	e0bfff17 	ldw	r2,-4(fp)
 402997c:	00c01244 	movi	r3,73
 4029980:	10c00005 	stb	r3,0(r2)
 4029984:	e0bffa17 	ldw	r2,-24(fp)
 4029988:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402998c:	e0bffb17 	ldw	r2,-20(fp)
 4029990:	1001703a 	wrctl	status,r2
 4029994:	00000106 	br	402999c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 4029998:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 402999c:	e037883a 	mov	sp,fp
 40299a0:	df000017 	ldw	fp,0(sp)
 40299a4:	dec00104 	addi	sp,sp,4
 40299a8:	f800283a 	ret

040299ac <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 40299ac:	defff104 	addi	sp,sp,-60
 40299b0:	dfc00e15 	stw	ra,56(sp)
 40299b4:	df000d15 	stw	fp,52(sp)
 40299b8:	df000d04 	addi	fp,sp,52
 40299bc:	2007883a 	mov	r3,r4
 40299c0:	2805883a 	mov	r2,r5
 40299c4:	e0fffe05 	stb	r3,-8(fp)
 40299c8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 40299cc:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 40299d0:	e0bffe03 	ldbu	r2,-8(fp)
 40299d4:	10800530 	cmpltui	r2,r2,20
 40299d8:	1000051e 	bne	r2,zero,40299f0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 40299dc:	e0bffe03 	ldbu	r2,-8(fp)
 40299e0:	10803fe0 	cmpeqi	r2,r2,255
 40299e4:	1000021e 	bne	r2,zero,40299f0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 40299e8:	00800a84 	movi	r2,42
 40299ec:	00012606 	br	4029e88 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 40299f0:	e0bfff03 	ldbu	r2,-4(fp)
 40299f4:	10800530 	cmpltui	r2,r2,20
 40299f8:	1000021e 	bne	r2,zero,4029a04 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 40299fc:	00800a84 	movi	r2,42
 4029a00:	00012106 	br	4029e88 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4029a04:	0005303a 	rdctl	r2,status
 4029a08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029a0c:	e0fffd17 	ldw	r3,-12(fp)
 4029a10:	00bfff84 	movi	r2,-2
 4029a14:	1884703a 	and	r2,r3,r2
 4029a18:	1001703a 	wrctl	status,r2
  
  return context;
 4029a1c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4029a20:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 4029a24:	e0ffff03 	ldbu	r3,-4(fp)
 4029a28:	00800074 	movhi	r2,1
 4029a2c:	10a3bf04 	addi	r2,r2,-28932
 4029a30:	18c7883a 	add	r3,r3,r3
 4029a34:	18c7883a 	add	r3,r3,r3
 4029a38:	10c5883a 	add	r2,r2,r3
 4029a3c:	10800017 	ldw	r2,0(r2)
 4029a40:	10000626 	beq	r2,zero,4029a5c <OSTaskChangePrio+0xb0>
 4029a44:	e0bff517 	ldw	r2,-44(fp)
 4029a48:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029a4c:	e0bff617 	ldw	r2,-40(fp)
 4029a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 4029a54:	00800a04 	movi	r2,40
 4029a58:	00010b06 	br	4029e88 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 4029a5c:	e0bffe03 	ldbu	r2,-8(fp)
 4029a60:	10803fd8 	cmpnei	r2,r2,255
 4029a64:	1000031e 	bne	r2,zero,4029a74 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 4029a68:	d0a04817 	ldw	r2,-32480(gp)
 4029a6c:	10800c83 	ldbu	r2,50(r2)
 4029a70:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 4029a74:	e0fffe03 	ldbu	r3,-8(fp)
 4029a78:	00800074 	movhi	r2,1
 4029a7c:	10a3bf04 	addi	r2,r2,-28932
 4029a80:	18c7883a 	add	r3,r3,r3
 4029a84:	18c7883a 	add	r3,r3,r3
 4029a88:	10c5883a 	add	r2,r2,r3
 4029a8c:	10800017 	ldw	r2,0(r2)
 4029a90:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 4029a94:	e0bff817 	ldw	r2,-32(fp)
 4029a98:	1000061e 	bne	r2,zero,4029ab4 <OSTaskChangePrio+0x108>
 4029a9c:	e0bff517 	ldw	r2,-44(fp)
 4029aa0:	e0bff715 	stw	r2,-36(fp)
 4029aa4:	e0bff717 	ldw	r2,-36(fp)
 4029aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 4029aac:	00800a44 	movi	r2,41
 4029ab0:	0000f506 	br	4029e88 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 4029ab4:	e0bff817 	ldw	r2,-32(fp)
 4029ab8:	10800058 	cmpnei	r2,r2,1
 4029abc:	1000061e 	bne	r2,zero,4029ad8 <OSTaskChangePrio+0x12c>
 4029ac0:	e0bff517 	ldw	r2,-44(fp)
 4029ac4:	e0bff915 	stw	r2,-28(fp)
 4029ac8:	e0bff917 	ldw	r2,-28(fp)
 4029acc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 4029ad0:	008010c4 	movi	r2,67
 4029ad4:	0000ec06 	br	4029e88 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 4029ad8:	e0bfff03 	ldbu	r2,-4(fp)
 4029adc:	1004d0fa 	srli	r2,r2,3
 4029ae0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 4029ae4:	e0bfff03 	ldbu	r2,-4(fp)
 4029ae8:	108001cc 	andi	r2,r2,7
 4029aec:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 4029af0:	e0bffb03 	ldbu	r2,-20(fp)
 4029af4:	00c00044 	movi	r3,1
 4029af8:	1884983a 	sll	r2,r3,r2
 4029afc:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 4029b00:	e0bffb43 	ldbu	r2,-19(fp)
 4029b04:	00c00044 	movi	r3,1
 4029b08:	1884983a 	sll	r2,r3,r2
 4029b0c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 4029b10:	e0fffe03 	ldbu	r3,-8(fp)
 4029b14:	00800074 	movhi	r2,1
 4029b18:	10a3bf04 	addi	r2,r2,-28932
 4029b1c:	18c7883a 	add	r3,r3,r3
 4029b20:	18c7883a 	add	r3,r3,r3
 4029b24:	10c5883a 	add	r2,r2,r3
 4029b28:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 4029b2c:	e0ffff03 	ldbu	r3,-4(fp)
 4029b30:	00800074 	movhi	r2,1
 4029b34:	10a3bf04 	addi	r2,r2,-28932
 4029b38:	18c7883a 	add	r3,r3,r3
 4029b3c:	18c7883a 	add	r3,r3,r3
 4029b40:	10c5883a 	add	r2,r2,r3
 4029b44:	e0fff817 	ldw	r3,-32(fp)
 4029b48:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 4029b4c:	e0bff817 	ldw	r2,-32(fp)
 4029b50:	10800d03 	ldbu	r2,52(r2)
 4029b54:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 4029b58:	e0bff817 	ldw	r2,-32(fp)
 4029b5c:	10800d83 	ldbu	r2,54(r2)
 4029b60:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 4029b64:	e0bff817 	ldw	r2,-32(fp)
 4029b68:	10800d43 	ldbu	r2,53(r2)
 4029b6c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4029b70:	e0fffc03 	ldbu	r3,-16(fp)
 4029b74:	d0a04544 	addi	r2,gp,-32491
 4029b78:	1885883a 	add	r2,r3,r2
 4029b7c:	10c00003 	ldbu	r3,0(r2)
 4029b80:	e0bffc83 	ldbu	r2,-14(fp)
 4029b84:	1884703a 	and	r2,r3,r2
 4029b88:	10803fcc 	andi	r2,r2,255
 4029b8c:	10002826 	beq	r2,zero,4029c30 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 4029b90:	e0fffc03 	ldbu	r3,-16(fp)
 4029b94:	e13ffc03 	ldbu	r4,-16(fp)
 4029b98:	d0a04544 	addi	r2,gp,-32491
 4029b9c:	2085883a 	add	r2,r4,r2
 4029ba0:	10800003 	ldbu	r2,0(r2)
 4029ba4:	1009883a 	mov	r4,r2
 4029ba8:	e0bffc83 	ldbu	r2,-14(fp)
 4029bac:	0084303a 	nor	r2,zero,r2
 4029bb0:	2084703a 	and	r2,r4,r2
 4029bb4:	1009883a 	mov	r4,r2
 4029bb8:	d0a04544 	addi	r2,gp,-32491
 4029bbc:	1885883a 	add	r2,r3,r2
 4029bc0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 4029bc4:	e0fffc03 	ldbu	r3,-16(fp)
 4029bc8:	d0a04544 	addi	r2,gp,-32491
 4029bcc:	1885883a 	add	r2,r3,r2
 4029bd0:	10800003 	ldbu	r2,0(r2)
 4029bd4:	10803fcc 	andi	r2,r2,255
 4029bd8:	1000061e 	bne	r2,zero,4029bf4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 4029bdc:	e0bffc43 	ldbu	r2,-15(fp)
 4029be0:	0084303a 	nor	r2,zero,r2
 4029be4:	1007883a 	mov	r3,r2
 4029be8:	d0a04503 	ldbu	r2,-32492(gp)
 4029bec:	1884703a 	and	r2,r3,r2
 4029bf0:	d0a04505 	stb	r2,-32492(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 4029bf4:	d0e04503 	ldbu	r3,-32492(gp)
 4029bf8:	e0bffb83 	ldbu	r2,-18(fp)
 4029bfc:	1884b03a 	or	r2,r3,r2
 4029c00:	d0a04505 	stb	r2,-32492(gp)
         OSRdyTbl[y_new] |= bitx_new;
 4029c04:	e0fffb03 	ldbu	r3,-20(fp)
 4029c08:	e13ffb03 	ldbu	r4,-20(fp)
 4029c0c:	d0a04544 	addi	r2,gp,-32491
 4029c10:	2085883a 	add	r2,r4,r2
 4029c14:	11000003 	ldbu	r4,0(r2)
 4029c18:	e0bffbc3 	ldbu	r2,-17(fp)
 4029c1c:	2084b03a 	or	r2,r4,r2
 4029c20:	1009883a 	mov	r4,r2
 4029c24:	d0a04544 	addi	r2,gp,-32491
 4029c28:	1885883a 	add	r2,r3,r2
 4029c2c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 4029c30:	e0bff817 	ldw	r2,-32(fp)
 4029c34:	10800717 	ldw	r2,28(r2)
 4029c38:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 4029c3c:	e0bff317 	ldw	r2,-52(fp)
 4029c40:	10003326 	beq	r2,zero,4029d10 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 4029c44:	e0bffc03 	ldbu	r2,-16(fp)
 4029c48:	e0fffc03 	ldbu	r3,-16(fp)
 4029c4c:	e13ff317 	ldw	r4,-52(fp)
 4029c50:	20c7883a 	add	r3,r4,r3
 4029c54:	18c002c4 	addi	r3,r3,11
 4029c58:	18c00003 	ldbu	r3,0(r3)
 4029c5c:	1809883a 	mov	r4,r3
 4029c60:	e0fffc83 	ldbu	r3,-14(fp)
 4029c64:	00c6303a 	nor	r3,zero,r3
 4029c68:	20c6703a 	and	r3,r4,r3
 4029c6c:	1809883a 	mov	r4,r3
 4029c70:	e0fff317 	ldw	r3,-52(fp)
 4029c74:	1885883a 	add	r2,r3,r2
 4029c78:	108002c4 	addi	r2,r2,11
 4029c7c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 4029c80:	e0bffc03 	ldbu	r2,-16(fp)
 4029c84:	e0fff317 	ldw	r3,-52(fp)
 4029c88:	1885883a 	add	r2,r3,r2
 4029c8c:	108002c4 	addi	r2,r2,11
 4029c90:	10800003 	ldbu	r2,0(r2)
 4029c94:	10803fcc 	andi	r2,r2,255
 4029c98:	1000091e 	bne	r2,zero,4029cc0 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 4029c9c:	e0bff317 	ldw	r2,-52(fp)
 4029ca0:	10800283 	ldbu	r2,10(r2)
 4029ca4:	1007883a 	mov	r3,r2
 4029ca8:	e0bffc43 	ldbu	r2,-15(fp)
 4029cac:	0084303a 	nor	r2,zero,r2
 4029cb0:	1884703a 	and	r2,r3,r2
 4029cb4:	1007883a 	mov	r3,r2
 4029cb8:	e0bff317 	ldw	r2,-52(fp)
 4029cbc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 4029cc0:	e0bff317 	ldw	r2,-52(fp)
 4029cc4:	10c00283 	ldbu	r3,10(r2)
 4029cc8:	e0bffb83 	ldbu	r2,-18(fp)
 4029ccc:	1884b03a 	or	r2,r3,r2
 4029cd0:	1007883a 	mov	r3,r2
 4029cd4:	e0bff317 	ldw	r2,-52(fp)
 4029cd8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 4029cdc:	e0bffb03 	ldbu	r2,-20(fp)
 4029ce0:	e0fffb03 	ldbu	r3,-20(fp)
 4029ce4:	e13ff317 	ldw	r4,-52(fp)
 4029ce8:	20c7883a 	add	r3,r4,r3
 4029cec:	18c002c4 	addi	r3,r3,11
 4029cf0:	19000003 	ldbu	r4,0(r3)
 4029cf4:	e0fffbc3 	ldbu	r3,-17(fp)
 4029cf8:	20c6b03a 	or	r3,r4,r3
 4029cfc:	1809883a 	mov	r4,r3
 4029d00:	e0fff317 	ldw	r3,-52(fp)
 4029d04:	1885883a 	add	r2,r3,r2
 4029d08:	108002c4 	addi	r2,r2,11
 4029d0c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 4029d10:	e0bff817 	ldw	r2,-32(fp)
 4029d14:	10800817 	ldw	r2,32(r2)
 4029d18:	10004226 	beq	r2,zero,4029e24 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 4029d1c:	e0bff817 	ldw	r2,-32(fp)
 4029d20:	10800817 	ldw	r2,32(r2)
 4029d24:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 4029d28:	e0bff417 	ldw	r2,-48(fp)
 4029d2c:	10800017 	ldw	r2,0(r2)
 4029d30:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 4029d34:	00003906 	br	4029e1c <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 4029d38:	e0bffc03 	ldbu	r2,-16(fp)
 4029d3c:	e0fffc03 	ldbu	r3,-16(fp)
 4029d40:	e13ff317 	ldw	r4,-52(fp)
 4029d44:	20c7883a 	add	r3,r4,r3
 4029d48:	18c002c4 	addi	r3,r3,11
 4029d4c:	18c00003 	ldbu	r3,0(r3)
 4029d50:	1809883a 	mov	r4,r3
 4029d54:	e0fffc83 	ldbu	r3,-14(fp)
 4029d58:	00c6303a 	nor	r3,zero,r3
 4029d5c:	20c6703a 	and	r3,r4,r3
 4029d60:	1809883a 	mov	r4,r3
 4029d64:	e0fff317 	ldw	r3,-52(fp)
 4029d68:	1885883a 	add	r2,r3,r2
 4029d6c:	108002c4 	addi	r2,r2,11
 4029d70:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 4029d74:	e0bffc03 	ldbu	r2,-16(fp)
 4029d78:	e0fff317 	ldw	r3,-52(fp)
 4029d7c:	1885883a 	add	r2,r3,r2
 4029d80:	108002c4 	addi	r2,r2,11
 4029d84:	10800003 	ldbu	r2,0(r2)
 4029d88:	10803fcc 	andi	r2,r2,255
 4029d8c:	1000091e 	bne	r2,zero,4029db4 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 4029d90:	e0bff317 	ldw	r2,-52(fp)
 4029d94:	10800283 	ldbu	r2,10(r2)
 4029d98:	1007883a 	mov	r3,r2
 4029d9c:	e0bffc43 	ldbu	r2,-15(fp)
 4029da0:	0084303a 	nor	r2,zero,r2
 4029da4:	1884703a 	and	r2,r3,r2
 4029da8:	1007883a 	mov	r3,r2
 4029dac:	e0bff317 	ldw	r2,-52(fp)
 4029db0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 4029db4:	e0bff317 	ldw	r2,-52(fp)
 4029db8:	10c00283 	ldbu	r3,10(r2)
 4029dbc:	e0bffb83 	ldbu	r2,-18(fp)
 4029dc0:	1884b03a 	or	r2,r3,r2
 4029dc4:	1007883a 	mov	r3,r2
 4029dc8:	e0bff317 	ldw	r2,-52(fp)
 4029dcc:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 4029dd0:	e0bffb03 	ldbu	r2,-20(fp)
 4029dd4:	e0fffb03 	ldbu	r3,-20(fp)
 4029dd8:	e13ff317 	ldw	r4,-52(fp)
 4029ddc:	20c7883a 	add	r3,r4,r3
 4029de0:	18c002c4 	addi	r3,r3,11
 4029de4:	19000003 	ldbu	r4,0(r3)
 4029de8:	e0fffbc3 	ldbu	r3,-17(fp)
 4029dec:	20c6b03a 	or	r3,r4,r3
 4029df0:	1809883a 	mov	r4,r3
 4029df4:	e0fff317 	ldw	r3,-52(fp)
 4029df8:	1885883a 	add	r2,r3,r2
 4029dfc:	108002c4 	addi	r2,r2,11
 4029e00:	11000005 	stb	r4,0(r2)
            pevents++;
 4029e04:	e0bff417 	ldw	r2,-48(fp)
 4029e08:	10800104 	addi	r2,r2,4
 4029e0c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 4029e10:	e0bff417 	ldw	r2,-48(fp)
 4029e14:	10800017 	ldw	r2,0(r2)
 4029e18:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 4029e1c:	e0bff317 	ldw	r2,-52(fp)
 4029e20:	103fc51e 	bne	r2,zero,4029d38 <__flash_rwdata_start+0xffffc134>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 4029e24:	e0bff817 	ldw	r2,-32(fp)
 4029e28:	e0ffff03 	ldbu	r3,-4(fp)
 4029e2c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 4029e30:	e0bff817 	ldw	r2,-32(fp)
 4029e34:	e0fffb03 	ldbu	r3,-20(fp)
 4029e38:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 4029e3c:	e0bff817 	ldw	r2,-32(fp)
 4029e40:	e0fffb43 	ldbu	r3,-19(fp)
 4029e44:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 4029e48:	e0bff817 	ldw	r2,-32(fp)
 4029e4c:	e0fffb83 	ldbu	r3,-18(fp)
 4029e50:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 4029e54:	e0bff817 	ldw	r2,-32(fp)
 4029e58:	e0fffbc3 	ldbu	r3,-17(fp)
 4029e5c:	10c00d45 	stb	r3,53(r2)
 4029e60:	e0bff517 	ldw	r2,-44(fp)
 4029e64:	e0bffa15 	stw	r2,-24(fp)
 4029e68:	e0bffa17 	ldw	r2,-24(fp)
 4029e6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4029e70:	d0a03943 	ldbu	r2,-32539(gp)
 4029e74:	10803fcc 	andi	r2,r2,255
 4029e78:	10800058 	cmpnei	r2,r2,1
 4029e7c:	1000011e 	bne	r2,zero,4029e84 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 4029e80:	40257700 	call	4025770 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4029e84:	0005883a 	mov	r2,zero
}
 4029e88:	e037883a 	mov	sp,fp
 4029e8c:	dfc00117 	ldw	ra,4(sp)
 4029e90:	df000017 	ldw	fp,0(sp)
 4029e94:	dec00204 	addi	sp,sp,8
 4029e98:	f800283a 	ret

04029e9c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 4029e9c:	deffee04 	addi	sp,sp,-72
 4029ea0:	dfc01115 	stw	ra,68(sp)
 4029ea4:	df001015 	stw	fp,64(sp)
 4029ea8:	df001004 	addi	fp,sp,64
 4029eac:	e13ffc15 	stw	r4,-16(fp)
 4029eb0:	e17ffd15 	stw	r5,-12(fp)
 4029eb4:	e1bffe15 	stw	r6,-8(fp)
 4029eb8:	3805883a 	mov	r2,r7
 4029ebc:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 4029ec0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4029ec4:	e0bfff03 	ldbu	r2,-4(fp)
 4029ec8:	10800570 	cmpltui	r2,r2,21
 4029ecc:	1000021e 	bne	r2,zero,4029ed8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 4029ed0:	00800a84 	movi	r2,42
 4029ed4:	00005706 	br	402a034 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4029ed8:	0005303a 	rdctl	r2,status
 4029edc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029ee0:	e0fffb17 	ldw	r3,-20(fp)
 4029ee4:	00bfff84 	movi	r2,-2
 4029ee8:	1884703a 	and	r2,r3,r2
 4029eec:	1001703a 	wrctl	status,r2
  
  return context;
 4029ef0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4029ef4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4029ef8:	d0a04703 	ldbu	r2,-32484(gp)
 4029efc:	10803fcc 	andi	r2,r2,255
 4029f00:	10000626 	beq	r2,zero,4029f1c <OSTaskCreate+0x80>
 4029f04:	e0bff317 	ldw	r2,-52(fp)
 4029f08:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4029f0c:	e0bff417 	ldw	r2,-48(fp)
 4029f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 4029f14:	00800f04 	movi	r2,60
 4029f18:	00004606 	br	402a034 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4029f1c:	e0ffff03 	ldbu	r3,-4(fp)
 4029f20:	00800074 	movhi	r2,1
 4029f24:	10a3bf04 	addi	r2,r2,-28932
 4029f28:	18c7883a 	add	r3,r3,r3
 4029f2c:	18c7883a 	add	r3,r3,r3
 4029f30:	10c5883a 	add	r2,r2,r3
 4029f34:	10800017 	ldw	r2,0(r2)
 4029f38:	1000391e 	bne	r2,zero,402a020 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 4029f3c:	e0ffff03 	ldbu	r3,-4(fp)
 4029f40:	00800074 	movhi	r2,1
 4029f44:	10a3bf04 	addi	r2,r2,-28932
 4029f48:	18c7883a 	add	r3,r3,r3
 4029f4c:	18c7883a 	add	r3,r3,r3
 4029f50:	10c5883a 	add	r2,r2,r3
 4029f54:	00c00044 	movi	r3,1
 4029f58:	10c00015 	stw	r3,0(r2)
 4029f5c:	e0bff317 	ldw	r2,-52(fp)
 4029f60:	e0bff515 	stw	r2,-44(fp)
 4029f64:	e0bff517 	ldw	r2,-44(fp)
 4029f68:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 4029f6c:	000f883a 	mov	r7,zero
 4029f70:	e1bffe17 	ldw	r6,-8(fp)
 4029f74:	e17ffd17 	ldw	r5,-12(fp)
 4029f78:	e13ffc17 	ldw	r4,-16(fp)
 4029f7c:	402d1400 	call	402d140 <OSTaskStkInit>
 4029f80:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 4029f84:	e0bfff03 	ldbu	r2,-4(fp)
 4029f88:	d8000215 	stw	zero,8(sp)
 4029f8c:	d8000115 	stw	zero,4(sp)
 4029f90:	d8000015 	stw	zero,0(sp)
 4029f94:	000f883a 	mov	r7,zero
 4029f98:	000d883a 	mov	r6,zero
 4029f9c:	e17ff717 	ldw	r5,-36(fp)
 4029fa0:	1009883a 	mov	r4,r2
 4029fa4:	4025b700 	call	4025b70 <OS_TCBInit>
 4029fa8:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 4029fac:	e0bff803 	ldbu	r2,-32(fp)
 4029fb0:	1000061e 	bne	r2,zero,4029fcc <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 4029fb4:	d0a03943 	ldbu	r2,-32539(gp)
 4029fb8:	10803fcc 	andi	r2,r2,255
 4029fbc:	10800058 	cmpnei	r2,r2,1
 4029fc0:	1000151e 	bne	r2,zero,402a018 <OSTaskCreate+0x17c>
                OS_Sched();
 4029fc4:	40257700 	call	4025770 <OS_Sched>
 4029fc8:	00001306 	br	402a018 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4029fcc:	0005303a 	rdctl	r2,status
 4029fd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4029fd4:	e0fffa17 	ldw	r3,-24(fp)
 4029fd8:	00bfff84 	movi	r2,-2
 4029fdc:	1884703a 	and	r2,r3,r2
 4029fe0:	1001703a 	wrctl	status,r2
  
  return context;
 4029fe4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4029fe8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 4029fec:	e0ffff03 	ldbu	r3,-4(fp)
 4029ff0:	00800074 	movhi	r2,1
 4029ff4:	10a3bf04 	addi	r2,r2,-28932
 4029ff8:	18c7883a 	add	r3,r3,r3
 4029ffc:	18c7883a 	add	r3,r3,r3
 402a000:	10c5883a 	add	r2,r2,r3
 402a004:	10000015 	stw	zero,0(r2)
 402a008:	e0bff317 	ldw	r2,-52(fp)
 402a00c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a010:	e0bff617 	ldw	r2,-40(fp)
 402a014:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 402a018:	e0bff803 	ldbu	r2,-32(fp)
 402a01c:	00000506 	br	402a034 <OSTaskCreate+0x198>
 402a020:	e0bff317 	ldw	r2,-52(fp)
 402a024:	e0bff915 	stw	r2,-28(fp)
 402a028:	e0bff917 	ldw	r2,-28(fp)
 402a02c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 402a030:	00800a04 	movi	r2,40
}
 402a034:	e037883a 	mov	sp,fp
 402a038:	dfc00117 	ldw	ra,4(sp)
 402a03c:	df000017 	ldw	fp,0(sp)
 402a040:	dec00204 	addi	sp,sp,8
 402a044:	f800283a 	ret

0402a048 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 402a048:	deffec04 	addi	sp,sp,-80
 402a04c:	dfc01315 	stw	ra,76(sp)
 402a050:	df001215 	stw	fp,72(sp)
 402a054:	df001204 	addi	fp,sp,72
 402a058:	e13ffa15 	stw	r4,-24(fp)
 402a05c:	e17ffb15 	stw	r5,-20(fp)
 402a060:	e1bffc15 	stw	r6,-16(fp)
 402a064:	3809883a 	mov	r4,r7
 402a068:	e0c00217 	ldw	r3,8(fp)
 402a06c:	e0800617 	ldw	r2,24(fp)
 402a070:	e13ffd05 	stb	r4,-12(fp)
 402a074:	e0fffe0d 	sth	r3,-8(fp)
 402a078:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 402a07c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 402a080:	e0bffd03 	ldbu	r2,-12(fp)
 402a084:	10800570 	cmpltui	r2,r2,21
 402a088:	1000021e 	bne	r2,zero,402a094 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 402a08c:	00800a84 	movi	r2,42
 402a090:	00006106 	br	402a218 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402a094:	0005303a 	rdctl	r2,status
 402a098:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402a09c:	e0fff917 	ldw	r3,-28(fp)
 402a0a0:	00bfff84 	movi	r2,-2
 402a0a4:	1884703a 	and	r2,r3,r2
 402a0a8:	1001703a 	wrctl	status,r2
  
  return context;
 402a0ac:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 402a0b0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 402a0b4:	d0a04703 	ldbu	r2,-32484(gp)
 402a0b8:	10803fcc 	andi	r2,r2,255
 402a0bc:	10000626 	beq	r2,zero,402a0d8 <OSTaskCreateExt+0x90>
 402a0c0:	e0bff117 	ldw	r2,-60(fp)
 402a0c4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a0c8:	e0bff217 	ldw	r2,-56(fp)
 402a0cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 402a0d0:	00800f04 	movi	r2,60
 402a0d4:	00005006 	br	402a218 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 402a0d8:	e0fffd03 	ldbu	r3,-12(fp)
 402a0dc:	00800074 	movhi	r2,1
 402a0e0:	10a3bf04 	addi	r2,r2,-28932
 402a0e4:	18c7883a 	add	r3,r3,r3
 402a0e8:	18c7883a 	add	r3,r3,r3
 402a0ec:	10c5883a 	add	r2,r2,r3
 402a0f0:	10800017 	ldw	r2,0(r2)
 402a0f4:	1000431e 	bne	r2,zero,402a204 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 402a0f8:	e0fffd03 	ldbu	r3,-12(fp)
 402a0fc:	00800074 	movhi	r2,1
 402a100:	10a3bf04 	addi	r2,r2,-28932
 402a104:	18c7883a 	add	r3,r3,r3
 402a108:	18c7883a 	add	r3,r3,r3
 402a10c:	10c5883a 	add	r2,r2,r3
 402a110:	00c00044 	movi	r3,1
 402a114:	10c00015 	stw	r3,0(r2)
 402a118:	e0bff117 	ldw	r2,-60(fp)
 402a11c:	e0bff315 	stw	r2,-52(fp)
 402a120:	e0bff317 	ldw	r2,-52(fp)
 402a124:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 402a128:	e0bfff0b 	ldhu	r2,-4(fp)
 402a12c:	100d883a 	mov	r6,r2
 402a130:	e1400417 	ldw	r5,16(fp)
 402a134:	e1000317 	ldw	r4,12(fp)
 402a138:	402b0a80 	call	402b0a8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 402a13c:	e0bfff0b 	ldhu	r2,-4(fp)
 402a140:	100f883a 	mov	r7,r2
 402a144:	e1bffc17 	ldw	r6,-16(fp)
 402a148:	e17ffb17 	ldw	r5,-20(fp)
 402a14c:	e13ffa17 	ldw	r4,-24(fp)
 402a150:	402d1400 	call	402d140 <OSTaskStkInit>
 402a154:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 402a158:	e0fffd03 	ldbu	r3,-12(fp)
 402a15c:	e13ffe0b 	ldhu	r4,-8(fp)
 402a160:	e0bfff0b 	ldhu	r2,-4(fp)
 402a164:	d8800215 	stw	r2,8(sp)
 402a168:	e0800517 	ldw	r2,20(fp)
 402a16c:	d8800115 	stw	r2,4(sp)
 402a170:	e0800417 	ldw	r2,16(fp)
 402a174:	d8800015 	stw	r2,0(sp)
 402a178:	200f883a 	mov	r7,r4
 402a17c:	e1800317 	ldw	r6,12(fp)
 402a180:	e17ff517 	ldw	r5,-44(fp)
 402a184:	1809883a 	mov	r4,r3
 402a188:	4025b700 	call	4025b70 <OS_TCBInit>
 402a18c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 402a190:	e0bff603 	ldbu	r2,-40(fp)
 402a194:	1000061e 	bne	r2,zero,402a1b0 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 402a198:	d0a03943 	ldbu	r2,-32539(gp)
 402a19c:	10803fcc 	andi	r2,r2,255
 402a1a0:	10800058 	cmpnei	r2,r2,1
 402a1a4:	1000151e 	bne	r2,zero,402a1fc <OSTaskCreateExt+0x1b4>
                OS_Sched();
 402a1a8:	40257700 	call	4025770 <OS_Sched>
 402a1ac:	00001306 	br	402a1fc <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402a1b0:	0005303a 	rdctl	r2,status
 402a1b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402a1b8:	e0fff817 	ldw	r3,-32(fp)
 402a1bc:	00bfff84 	movi	r2,-2
 402a1c0:	1884703a 	and	r2,r3,r2
 402a1c4:	1001703a 	wrctl	status,r2
  
  return context;
 402a1c8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 402a1cc:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 402a1d0:	e0fffd03 	ldbu	r3,-12(fp)
 402a1d4:	00800074 	movhi	r2,1
 402a1d8:	10a3bf04 	addi	r2,r2,-28932
 402a1dc:	18c7883a 	add	r3,r3,r3
 402a1e0:	18c7883a 	add	r3,r3,r3
 402a1e4:	10c5883a 	add	r2,r2,r3
 402a1e8:	10000015 	stw	zero,0(r2)
 402a1ec:	e0bff117 	ldw	r2,-60(fp)
 402a1f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a1f4:	e0bff417 	ldw	r2,-48(fp)
 402a1f8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 402a1fc:	e0bff603 	ldbu	r2,-40(fp)
 402a200:	00000506 	br	402a218 <OSTaskCreateExt+0x1d0>
 402a204:	e0bff117 	ldw	r2,-60(fp)
 402a208:	e0bff715 	stw	r2,-36(fp)
 402a20c:	e0bff717 	ldw	r2,-36(fp)
 402a210:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 402a214:	00800a04 	movi	r2,40
}
 402a218:	e037883a 	mov	sp,fp
 402a21c:	dfc00117 	ldw	ra,4(sp)
 402a220:	df000017 	ldw	fp,0(sp)
 402a224:	dec00204 	addi	sp,sp,8
 402a228:	f800283a 	ret

0402a22c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 402a22c:	defff404 	addi	sp,sp,-48
 402a230:	dfc00b15 	stw	ra,44(sp)
 402a234:	df000a15 	stw	fp,40(sp)
 402a238:	df000a04 	addi	fp,sp,40
 402a23c:	2005883a 	mov	r2,r4
 402a240:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 402a244:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 402a248:	d0a04703 	ldbu	r2,-32484(gp)
 402a24c:	10803fcc 	andi	r2,r2,255
 402a250:	10000226 	beq	r2,zero,402a25c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 402a254:	00801004 	movi	r2,64
 402a258:	0000c006 	br	402a55c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 402a25c:	e0bfff03 	ldbu	r2,-4(fp)
 402a260:	10800518 	cmpnei	r2,r2,20
 402a264:	1000021e 	bne	r2,zero,402a270 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 402a268:	00800f84 	movi	r2,62
 402a26c:	0000bb06 	br	402a55c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 402a270:	e0bfff03 	ldbu	r2,-4(fp)
 402a274:	10800530 	cmpltui	r2,r2,20
 402a278:	1000051e 	bne	r2,zero,402a290 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 402a27c:	e0bfff03 	ldbu	r2,-4(fp)
 402a280:	10803fe0 	cmpeqi	r2,r2,255
 402a284:	1000021e 	bne	r2,zero,402a290 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 402a288:	00800a84 	movi	r2,42
 402a28c:	0000b306 	br	402a55c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402a290:	0005303a 	rdctl	r2,status
 402a294:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402a298:	e0fffe17 	ldw	r3,-8(fp)
 402a29c:	00bfff84 	movi	r2,-2
 402a2a0:	1884703a 	and	r2,r3,r2
 402a2a4:	1001703a 	wrctl	status,r2
  
  return context;
 402a2a8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 402a2ac:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 402a2b0:	e0bfff03 	ldbu	r2,-4(fp)
 402a2b4:	10803fd8 	cmpnei	r2,r2,255
 402a2b8:	1000031e 	bne	r2,zero,402a2c8 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 402a2bc:	d0a04817 	ldw	r2,-32480(gp)
 402a2c0:	10800c83 	ldbu	r2,50(r2)
 402a2c4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 402a2c8:	e0ffff03 	ldbu	r3,-4(fp)
 402a2cc:	00800074 	movhi	r2,1
 402a2d0:	10a3bf04 	addi	r2,r2,-28932
 402a2d4:	18c7883a 	add	r3,r3,r3
 402a2d8:	18c7883a 	add	r3,r3,r3
 402a2dc:	10c5883a 	add	r2,r2,r3
 402a2e0:	10800017 	ldw	r2,0(r2)
 402a2e4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 402a2e8:	e0bff817 	ldw	r2,-32(fp)
 402a2ec:	1000061e 	bne	r2,zero,402a308 <OSTaskDel+0xdc>
 402a2f0:	e0bff617 	ldw	r2,-40(fp)
 402a2f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a2f8:	e0bff717 	ldw	r2,-36(fp)
 402a2fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 402a300:	008010c4 	movi	r2,67
 402a304:	00009506 	br	402a55c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 402a308:	e0bff817 	ldw	r2,-32(fp)
 402a30c:	10800058 	cmpnei	r2,r2,1
 402a310:	1000061e 	bne	r2,zero,402a32c <OSTaskDel+0x100>
 402a314:	e0bff617 	ldw	r2,-40(fp)
 402a318:	e0bff915 	stw	r2,-28(fp)
 402a31c:	e0bff917 	ldw	r2,-28(fp)
 402a320:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 402a324:	00800f44 	movi	r2,61
 402a328:	00008c06 	br	402a55c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 402a32c:	e0bff817 	ldw	r2,-32(fp)
 402a330:	10800d03 	ldbu	r2,52(r2)
 402a334:	10c03fcc 	andi	r3,r2,255
 402a338:	e0bff817 	ldw	r2,-32(fp)
 402a33c:	10800d03 	ldbu	r2,52(r2)
 402a340:	11003fcc 	andi	r4,r2,255
 402a344:	d0a04544 	addi	r2,gp,-32491
 402a348:	2085883a 	add	r2,r4,r2
 402a34c:	10800003 	ldbu	r2,0(r2)
 402a350:	1009883a 	mov	r4,r2
 402a354:	e0bff817 	ldw	r2,-32(fp)
 402a358:	10800d43 	ldbu	r2,53(r2)
 402a35c:	0084303a 	nor	r2,zero,r2
 402a360:	2084703a 	and	r2,r4,r2
 402a364:	1009883a 	mov	r4,r2
 402a368:	d0a04544 	addi	r2,gp,-32491
 402a36c:	1885883a 	add	r2,r3,r2
 402a370:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 402a374:	e0bff817 	ldw	r2,-32(fp)
 402a378:	10800d03 	ldbu	r2,52(r2)
 402a37c:	10c03fcc 	andi	r3,r2,255
 402a380:	d0a04544 	addi	r2,gp,-32491
 402a384:	1885883a 	add	r2,r3,r2
 402a388:	10800003 	ldbu	r2,0(r2)
 402a38c:	10803fcc 	andi	r2,r2,255
 402a390:	1000071e 	bne	r2,zero,402a3b0 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 402a394:	e0bff817 	ldw	r2,-32(fp)
 402a398:	10800d83 	ldbu	r2,54(r2)
 402a39c:	0084303a 	nor	r2,zero,r2
 402a3a0:	1007883a 	mov	r3,r2
 402a3a4:	d0a04503 	ldbu	r2,-32492(gp)
 402a3a8:	1884703a 	and	r2,r3,r2
 402a3ac:	d0a04505 	stb	r2,-32492(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 402a3b0:	e0bff817 	ldw	r2,-32(fp)
 402a3b4:	10800717 	ldw	r2,28(r2)
 402a3b8:	10000526 	beq	r2,zero,402a3d0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 402a3bc:	e0bff817 	ldw	r2,-32(fp)
 402a3c0:	10800717 	ldw	r2,28(r2)
 402a3c4:	100b883a 	mov	r5,r2
 402a3c8:	e13ff817 	ldw	r4,-32(fp)
 402a3cc:	402511c0 	call	402511c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 402a3d0:	e0bff817 	ldw	r2,-32(fp)
 402a3d4:	10800817 	ldw	r2,32(r2)
 402a3d8:	10000526 	beq	r2,zero,402a3f0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 402a3dc:	e0bff817 	ldw	r2,-32(fp)
 402a3e0:	10800817 	ldw	r2,32(r2)
 402a3e4:	100b883a 	mov	r5,r2
 402a3e8:	e13ff817 	ldw	r4,-32(fp)
 402a3ec:	40251d40 	call	40251d4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 402a3f0:	e0bff817 	ldw	r2,-32(fp)
 402a3f4:	10800a17 	ldw	r2,40(r2)
 402a3f8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 402a3fc:	e0bffb17 	ldw	r2,-20(fp)
 402a400:	10000226 	beq	r2,zero,402a40c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 402a404:	e13ffb17 	ldw	r4,-20(fp)
 402a408:	40276440 	call	4027644 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 402a40c:	e0bff817 	ldw	r2,-32(fp)
 402a410:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 402a414:	e0bff817 	ldw	r2,-32(fp)
 402a418:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 402a41c:	e0bff817 	ldw	r2,-32(fp)
 402a420:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 402a424:	d0a03903 	ldbu	r2,-32540(gp)
 402a428:	10803fcc 	andi	r2,r2,255
 402a42c:	10803fe0 	cmpeqi	r2,r2,255
 402a430:	1000031e 	bne	r2,zero,402a440 <OSTaskDel+0x214>
        OSLockNesting++;
 402a434:	d0a03903 	ldbu	r2,-32540(gp)
 402a438:	10800044 	addi	r2,r2,1
 402a43c:	d0a03905 	stb	r2,-32540(gp)
 402a440:	e0bff617 	ldw	r2,-40(fp)
 402a444:	e0bffd15 	stw	r2,-12(fp)
 402a448:	e0bffd17 	ldw	r2,-12(fp)
 402a44c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 402a450:	4024d040 	call	4024d04 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402a454:	0005303a 	rdctl	r2,status
 402a458:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402a45c:	e0fffa17 	ldw	r3,-24(fp)
 402a460:	00bfff84 	movi	r2,-2
 402a464:	1884703a 	and	r2,r3,r2
 402a468:	1001703a 	wrctl	status,r2
  
  return context;
 402a46c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 402a470:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 402a474:	d0a03903 	ldbu	r2,-32540(gp)
 402a478:	10803fcc 	andi	r2,r2,255
 402a47c:	10000326 	beq	r2,zero,402a48c <OSTaskDel+0x260>
        OSLockNesting--;
 402a480:	d0a03903 	ldbu	r2,-32540(gp)
 402a484:	10bfffc4 	addi	r2,r2,-1
 402a488:	d0a03905 	stb	r2,-32540(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 402a48c:	e13ff817 	ldw	r4,-32(fp)
 402a490:	402d2c00 	call	402d2c0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 402a494:	d0a04143 	ldbu	r2,-32507(gp)
 402a498:	10bfffc4 	addi	r2,r2,-1
 402a49c:	d0a04145 	stb	r2,-32507(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 402a4a0:	e0ffff03 	ldbu	r3,-4(fp)
 402a4a4:	00800074 	movhi	r2,1
 402a4a8:	10a3bf04 	addi	r2,r2,-28932
 402a4ac:	18c7883a 	add	r3,r3,r3
 402a4b0:	18c7883a 	add	r3,r3,r3
 402a4b4:	10c5883a 	add	r2,r2,r3
 402a4b8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 402a4bc:	e0bff817 	ldw	r2,-32(fp)
 402a4c0:	10800617 	ldw	r2,24(r2)
 402a4c4:	1000071e 	bne	r2,zero,402a4e4 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 402a4c8:	e0bff817 	ldw	r2,-32(fp)
 402a4cc:	10800517 	ldw	r2,20(r2)
 402a4d0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 402a4d4:	e0bff817 	ldw	r2,-32(fp)
 402a4d8:	10800517 	ldw	r2,20(r2)
 402a4dc:	d0a03c15 	stw	r2,-32528(gp)
 402a4e0:	00000a06 	br	402a50c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 402a4e4:	e0bff817 	ldw	r2,-32(fp)
 402a4e8:	10800617 	ldw	r2,24(r2)
 402a4ec:	e0fff817 	ldw	r3,-32(fp)
 402a4f0:	18c00517 	ldw	r3,20(r3)
 402a4f4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 402a4f8:	e0bff817 	ldw	r2,-32(fp)
 402a4fc:	10800517 	ldw	r2,20(r2)
 402a500:	e0fff817 	ldw	r3,-32(fp)
 402a504:	18c00617 	ldw	r3,24(r3)
 402a508:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 402a50c:	d0e04017 	ldw	r3,-32512(gp)
 402a510:	e0bff817 	ldw	r2,-32(fp)
 402a514:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 402a518:	e0bff817 	ldw	r2,-32(fp)
 402a51c:	d0a04015 	stw	r2,-32512(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 402a520:	e0bff817 	ldw	r2,-32(fp)
 402a524:	00c00fc4 	movi	r3,63
 402a528:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 402a52c:	e0bff817 	ldw	r2,-32(fp)
 402a530:	10001345 	stb	zero,77(r2)
 402a534:	e0bff617 	ldw	r2,-40(fp)
 402a538:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a53c:	e0bffc17 	ldw	r2,-16(fp)
 402a540:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 402a544:	d0a03943 	ldbu	r2,-32539(gp)
 402a548:	10803fcc 	andi	r2,r2,255
 402a54c:	10800058 	cmpnei	r2,r2,1
 402a550:	1000011e 	bne	r2,zero,402a558 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 402a554:	40257700 	call	4025770 <OS_Sched>
    }
    return (OS_ERR_NONE);
 402a558:	0005883a 	mov	r2,zero
}
 402a55c:	e037883a 	mov	sp,fp
 402a560:	dfc00117 	ldw	ra,4(sp)
 402a564:	df000017 	ldw	fp,0(sp)
 402a568:	dec00204 	addi	sp,sp,8
 402a56c:	f800283a 	ret

0402a570 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 402a570:	defff504 	addi	sp,sp,-44
 402a574:	df000a15 	stw	fp,40(sp)
 402a578:	df000a04 	addi	fp,sp,40
 402a57c:	2005883a 	mov	r2,r4
 402a580:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 402a584:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 402a588:	e0bfff03 	ldbu	r2,-4(fp)
 402a58c:	10800518 	cmpnei	r2,r2,20
 402a590:	1000021e 	bne	r2,zero,402a59c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 402a594:	00800f84 	movi	r2,62
 402a598:	00004506 	br	402a6b0 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 402a59c:	e0bfff03 	ldbu	r2,-4(fp)
 402a5a0:	10800530 	cmpltui	r2,r2,20
 402a5a4:	1000051e 	bne	r2,zero,402a5bc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 402a5a8:	e0bfff03 	ldbu	r2,-4(fp)
 402a5ac:	10803fe0 	cmpeqi	r2,r2,255
 402a5b0:	1000021e 	bne	r2,zero,402a5bc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 402a5b4:	00800a84 	movi	r2,42
 402a5b8:	00003d06 	br	402a6b0 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 402a5bc:	e0bfff03 	ldbu	r2,-4(fp)
 402a5c0:	10803fd8 	cmpnei	r2,r2,255
 402a5c4:	1000111e 	bne	r2,zero,402a60c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402a5c8:	0005303a 	rdctl	r2,status
 402a5cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402a5d0:	e0fff917 	ldw	r3,-28(fp)
 402a5d4:	00bfff84 	movi	r2,-2
 402a5d8:	1884703a 	and	r2,r3,r2
 402a5dc:	1001703a 	wrctl	status,r2
  
  return context;
 402a5e0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 402a5e4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 402a5e8:	d0a04817 	ldw	r2,-32480(gp)
 402a5ec:	10800dc3 	ldbu	r2,55(r2)
 402a5f0:	e0bff805 	stb	r2,-32(fp)
 402a5f4:	e0bff617 	ldw	r2,-40(fp)
 402a5f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a5fc:	e0bffe17 	ldw	r2,-8(fp)
 402a600:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 402a604:	e0bff803 	ldbu	r2,-32(fp)
 402a608:	00002906 	br	402a6b0 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402a60c:	0005303a 	rdctl	r2,status
 402a610:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402a614:	e0fff717 	ldw	r3,-36(fp)
 402a618:	00bfff84 	movi	r2,-2
 402a61c:	1884703a 	and	r2,r3,r2
 402a620:	1001703a 	wrctl	status,r2
  
  return context;
 402a624:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 402a628:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 402a62c:	e0ffff03 	ldbu	r3,-4(fp)
 402a630:	00800074 	movhi	r2,1
 402a634:	10a3bf04 	addi	r2,r2,-28932
 402a638:	18c7883a 	add	r3,r3,r3
 402a63c:	18c7883a 	add	r3,r3,r3
 402a640:	10c5883a 	add	r2,r2,r3
 402a644:	10800017 	ldw	r2,0(r2)
 402a648:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 402a64c:	e0bffb17 	ldw	r2,-20(fp)
 402a650:	1000061e 	bne	r2,zero,402a66c <OSTaskDelReq+0xfc>
 402a654:	e0bff617 	ldw	r2,-40(fp)
 402a658:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a65c:	e0bffa17 	ldw	r2,-24(fp)
 402a660:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 402a664:	008010c4 	movi	r2,67
 402a668:	00001106 	br	402a6b0 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 402a66c:	e0bffb17 	ldw	r2,-20(fp)
 402a670:	10800058 	cmpnei	r2,r2,1
 402a674:	1000061e 	bne	r2,zero,402a690 <OSTaskDelReq+0x120>
 402a678:	e0bff617 	ldw	r2,-40(fp)
 402a67c:	e0bffc15 	stw	r2,-16(fp)
 402a680:	e0bffc17 	ldw	r2,-16(fp)
 402a684:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 402a688:	00800f44 	movi	r2,61
 402a68c:	00000806 	br	402a6b0 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 402a690:	e0bffb17 	ldw	r2,-20(fp)
 402a694:	00c00fc4 	movi	r3,63
 402a698:	10c00dc5 	stb	r3,55(r2)
 402a69c:	e0bff617 	ldw	r2,-40(fp)
 402a6a0:	e0bffd15 	stw	r2,-12(fp)
 402a6a4:	e0bffd17 	ldw	r2,-12(fp)
 402a6a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 402a6ac:	0005883a 	mov	r2,zero
}
 402a6b0:	e037883a 	mov	sp,fp
 402a6b4:	df000017 	ldw	fp,0(sp)
 402a6b8:	dec00104 	addi	sp,sp,4
 402a6bc:	f800283a 	ret

0402a6c0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 402a6c0:	defff404 	addi	sp,sp,-48
 402a6c4:	dfc00b15 	stw	ra,44(sp)
 402a6c8:	df000a15 	stw	fp,40(sp)
 402a6cc:	df000a04 	addi	fp,sp,40
 402a6d0:	2005883a 	mov	r2,r4
 402a6d4:	e17ffe15 	stw	r5,-8(fp)
 402a6d8:	e1bfff15 	stw	r6,-4(fp)
 402a6dc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 402a6e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 402a6e4:	e0bfff17 	ldw	r2,-4(fp)
 402a6e8:	1000021e 	bne	r2,zero,402a6f4 <OSTaskNameGet+0x34>
        return (0);
 402a6ec:	0005883a 	mov	r2,zero
 402a6f0:	00005406 	br	402a844 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 402a6f4:	e0bffd03 	ldbu	r2,-12(fp)
 402a6f8:	10800570 	cmpltui	r2,r2,21
 402a6fc:	1000081e 	bne	r2,zero,402a720 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 402a700:	e0bffd03 	ldbu	r2,-12(fp)
 402a704:	10803fe0 	cmpeqi	r2,r2,255
 402a708:	1000051e 	bne	r2,zero,402a720 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 402a70c:	e0bfff17 	ldw	r2,-4(fp)
 402a710:	00c00a84 	movi	r3,42
 402a714:	10c00005 	stb	r3,0(r2)
            return (0);
 402a718:	0005883a 	mov	r2,zero
 402a71c:	00004906 	br	402a844 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 402a720:	e0bffe17 	ldw	r2,-8(fp)
 402a724:	1000051e 	bne	r2,zero,402a73c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 402a728:	e0bfff17 	ldw	r2,-4(fp)
 402a72c:	00c00304 	movi	r3,12
 402a730:	10c00005 	stb	r3,0(r2)
        return (0);
 402a734:	0005883a 	mov	r2,zero
 402a738:	00004206 	br	402a844 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 402a73c:	d0a04703 	ldbu	r2,-32484(gp)
 402a740:	10803fcc 	andi	r2,r2,255
 402a744:	10000526 	beq	r2,zero,402a75c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 402a748:	e0bfff17 	ldw	r2,-4(fp)
 402a74c:	00c00444 	movi	r3,17
 402a750:	10c00005 	stb	r3,0(r2)
        return (0);
 402a754:	0005883a 	mov	r2,zero
 402a758:	00003a06 	br	402a844 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402a75c:	0005303a 	rdctl	r2,status
 402a760:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402a764:	e0fffc17 	ldw	r3,-16(fp)
 402a768:	00bfff84 	movi	r2,-2
 402a76c:	1884703a 	and	r2,r3,r2
 402a770:	1001703a 	wrctl	status,r2
  
  return context;
 402a774:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 402a778:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 402a77c:	e0bffd03 	ldbu	r2,-12(fp)
 402a780:	10803fd8 	cmpnei	r2,r2,255
 402a784:	1000031e 	bne	r2,zero,402a794 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 402a788:	d0a04817 	ldw	r2,-32480(gp)
 402a78c:	10800c83 	ldbu	r2,50(r2)
 402a790:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 402a794:	e0fffd03 	ldbu	r3,-12(fp)
 402a798:	00800074 	movhi	r2,1
 402a79c:	10a3bf04 	addi	r2,r2,-28932
 402a7a0:	18c7883a 	add	r3,r3,r3
 402a7a4:	18c7883a 	add	r3,r3,r3
 402a7a8:	10c5883a 	add	r2,r2,r3
 402a7ac:	10800017 	ldw	r2,0(r2)
 402a7b0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 402a7b4:	e0bff817 	ldw	r2,-32(fp)
 402a7b8:	1000091e 	bne	r2,zero,402a7e0 <OSTaskNameGet+0x120>
 402a7bc:	e0bff617 	ldw	r2,-40(fp)
 402a7c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a7c4:	e0bff717 	ldw	r2,-36(fp)
 402a7c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 402a7cc:	e0bfff17 	ldw	r2,-4(fp)
 402a7d0:	00c010c4 	movi	r3,67
 402a7d4:	10c00005 	stb	r3,0(r2)
        return (0);
 402a7d8:	0005883a 	mov	r2,zero
 402a7dc:	00001906 	br	402a844 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 402a7e0:	e0bff817 	ldw	r2,-32(fp)
 402a7e4:	10800058 	cmpnei	r2,r2,1
 402a7e8:	1000091e 	bne	r2,zero,402a810 <OSTaskNameGet+0x150>
 402a7ec:	e0bff617 	ldw	r2,-40(fp)
 402a7f0:	e0bff915 	stw	r2,-28(fp)
 402a7f4:	e0bff917 	ldw	r2,-28(fp)
 402a7f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 402a7fc:	e0bfff17 	ldw	r2,-4(fp)
 402a800:	00c010c4 	movi	r3,67
 402a804:	10c00005 	stb	r3,0(r2)
        return (0);
 402a808:	0005883a 	mov	r2,zero
 402a80c:	00000d06 	br	402a844 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 402a810:	e0bff817 	ldw	r2,-32(fp)
 402a814:	10801304 	addi	r2,r2,76
 402a818:	100b883a 	mov	r5,r2
 402a81c:	e13ffe17 	ldw	r4,-8(fp)
 402a820:	40258b40 	call	40258b4 <OS_StrCopy>
 402a824:	e0bffb05 	stb	r2,-20(fp)
 402a828:	e0bff617 	ldw	r2,-40(fp)
 402a82c:	e0bffa15 	stw	r2,-24(fp)
 402a830:	e0bffa17 	ldw	r2,-24(fp)
 402a834:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 402a838:	e0bfff17 	ldw	r2,-4(fp)
 402a83c:	10000005 	stb	zero,0(r2)
    return (len);
 402a840:	e0bffb03 	ldbu	r2,-20(fp)
}
 402a844:	e037883a 	mov	sp,fp
 402a848:	dfc00117 	ldw	ra,4(sp)
 402a84c:	df000017 	ldw	fp,0(sp)
 402a850:	dec00204 	addi	sp,sp,8
 402a854:	f800283a 	ret

0402a858 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 402a858:	defff304 	addi	sp,sp,-52
 402a85c:	dfc00c15 	stw	ra,48(sp)
 402a860:	df000b15 	stw	fp,44(sp)
 402a864:	df000b04 	addi	fp,sp,44
 402a868:	2005883a 	mov	r2,r4
 402a86c:	e17ffe15 	stw	r5,-8(fp)
 402a870:	e1bfff15 	stw	r6,-4(fp)
 402a874:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 402a878:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 402a87c:	e0bfff17 	ldw	r2,-4(fp)
 402a880:	10005c26 	beq	r2,zero,402a9f4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 402a884:	e0bffd03 	ldbu	r2,-12(fp)
 402a888:	10800570 	cmpltui	r2,r2,21
 402a88c:	1000071e 	bne	r2,zero,402a8ac <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 402a890:	e0bffd03 	ldbu	r2,-12(fp)
 402a894:	10803fe0 	cmpeqi	r2,r2,255
 402a898:	1000041e 	bne	r2,zero,402a8ac <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 402a89c:	e0bfff17 	ldw	r2,-4(fp)
 402a8a0:	00c00a84 	movi	r3,42
 402a8a4:	10c00005 	stb	r3,0(r2)
            return;
 402a8a8:	00005306 	br	402a9f8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 402a8ac:	e0bffe17 	ldw	r2,-8(fp)
 402a8b0:	1000041e 	bne	r2,zero,402a8c4 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 402a8b4:	e0bfff17 	ldw	r2,-4(fp)
 402a8b8:	00c00304 	movi	r3,12
 402a8bc:	10c00005 	stb	r3,0(r2)
        return;
 402a8c0:	00004d06 	br	402a9f8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 402a8c4:	d0a04703 	ldbu	r2,-32484(gp)
 402a8c8:	10803fcc 	andi	r2,r2,255
 402a8cc:	10000426 	beq	r2,zero,402a8e0 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 402a8d0:	e0bfff17 	ldw	r2,-4(fp)
 402a8d4:	00c00484 	movi	r3,18
 402a8d8:	10c00005 	stb	r3,0(r2)
        return;
 402a8dc:	00004606 	br	402a9f8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402a8e0:	0005303a 	rdctl	r2,status
 402a8e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402a8e8:	e0fffc17 	ldw	r3,-16(fp)
 402a8ec:	00bfff84 	movi	r2,-2
 402a8f0:	1884703a 	and	r2,r3,r2
 402a8f4:	1001703a 	wrctl	status,r2
  
  return context;
 402a8f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 402a8fc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 402a900:	e0bffd03 	ldbu	r2,-12(fp)
 402a904:	10803fd8 	cmpnei	r2,r2,255
 402a908:	1000031e 	bne	r2,zero,402a918 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 402a90c:	d0a04817 	ldw	r2,-32480(gp)
 402a910:	10800c83 	ldbu	r2,50(r2)
 402a914:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 402a918:	e0fffd03 	ldbu	r3,-12(fp)
 402a91c:	00800074 	movhi	r2,1
 402a920:	10a3bf04 	addi	r2,r2,-28932
 402a924:	18c7883a 	add	r3,r3,r3
 402a928:	18c7883a 	add	r3,r3,r3
 402a92c:	10c5883a 	add	r2,r2,r3
 402a930:	10800017 	ldw	r2,0(r2)
 402a934:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 402a938:	e0bff717 	ldw	r2,-36(fp)
 402a93c:	1000081e 	bne	r2,zero,402a960 <OSTaskNameSet+0x108>
 402a940:	e0bff517 	ldw	r2,-44(fp)
 402a944:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402a948:	e0bff617 	ldw	r2,-40(fp)
 402a94c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 402a950:	e0bfff17 	ldw	r2,-4(fp)
 402a954:	00c010c4 	movi	r3,67
 402a958:	10c00005 	stb	r3,0(r2)
        return;
 402a95c:	00002606 	br	402a9f8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 402a960:	e0bff717 	ldw	r2,-36(fp)
 402a964:	10800058 	cmpnei	r2,r2,1
 402a968:	1000081e 	bne	r2,zero,402a98c <OSTaskNameSet+0x134>
 402a96c:	e0bff517 	ldw	r2,-44(fp)
 402a970:	e0bff815 	stw	r2,-32(fp)
 402a974:	e0bff817 	ldw	r2,-32(fp)
 402a978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 402a97c:	e0bfff17 	ldw	r2,-4(fp)
 402a980:	00c010c4 	movi	r3,67
 402a984:	10c00005 	stb	r3,0(r2)
        return;
 402a988:	00001b06 	br	402a9f8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 402a98c:	e13ffe17 	ldw	r4,-8(fp)
 402a990:	40259280 	call	4025928 <OS_StrLen>
 402a994:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 402a998:	e0bffa03 	ldbu	r2,-24(fp)
 402a99c:	10800830 	cmpltui	r2,r2,32
 402a9a0:	1000081e 	bne	r2,zero,402a9c4 <OSTaskNameSet+0x16c>
 402a9a4:	e0bff517 	ldw	r2,-44(fp)
 402a9a8:	e0bff915 	stw	r2,-28(fp)
 402a9ac:	e0bff917 	ldw	r2,-28(fp)
 402a9b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 402a9b4:	e0bfff17 	ldw	r2,-4(fp)
 402a9b8:	00c01044 	movi	r3,65
 402a9bc:	10c00005 	stb	r3,0(r2)
        return;
 402a9c0:	00000d06 	br	402a9f8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 402a9c4:	e0bff717 	ldw	r2,-36(fp)
 402a9c8:	10801304 	addi	r2,r2,76
 402a9cc:	e17ffe17 	ldw	r5,-8(fp)
 402a9d0:	1009883a 	mov	r4,r2
 402a9d4:	40258b40 	call	40258b4 <OS_StrCopy>
 402a9d8:	e0bff517 	ldw	r2,-44(fp)
 402a9dc:	e0bffb15 	stw	r2,-20(fp)
 402a9e0:	e0bffb17 	ldw	r2,-20(fp)
 402a9e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 402a9e8:	e0bfff17 	ldw	r2,-4(fp)
 402a9ec:	10000005 	stb	zero,0(r2)
 402a9f0:	00000106 	br	402a9f8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 402a9f4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 402a9f8:	e037883a 	mov	sp,fp
 402a9fc:	dfc00117 	ldw	ra,4(sp)
 402aa00:	df000017 	ldw	fp,0(sp)
 402aa04:	dec00204 	addi	sp,sp,8
 402aa08:	f800283a 	ret

0402aa0c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 402aa0c:	defff404 	addi	sp,sp,-48
 402aa10:	dfc00b15 	stw	ra,44(sp)
 402aa14:	df000a15 	stw	fp,40(sp)
 402aa18:	df000a04 	addi	fp,sp,40
 402aa1c:	2005883a 	mov	r2,r4
 402aa20:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 402aa24:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 402aa28:	e0bfff03 	ldbu	r2,-4(fp)
 402aa2c:	10800530 	cmpltui	r2,r2,20
 402aa30:	1000021e 	bne	r2,zero,402aa3c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 402aa34:	00800a84 	movi	r2,42
 402aa38:	00006406 	br	402abcc <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402aa3c:	0005303a 	rdctl	r2,status
 402aa40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402aa44:	e0fffe17 	ldw	r3,-8(fp)
 402aa48:	00bfff84 	movi	r2,-2
 402aa4c:	1884703a 	and	r2,r3,r2
 402aa50:	1001703a 	wrctl	status,r2
  
  return context;
 402aa54:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 402aa58:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 402aa5c:	e0ffff03 	ldbu	r3,-4(fp)
 402aa60:	00800074 	movhi	r2,1
 402aa64:	10a3bf04 	addi	r2,r2,-28932
 402aa68:	18c7883a 	add	r3,r3,r3
 402aa6c:	18c7883a 	add	r3,r3,r3
 402aa70:	10c5883a 	add	r2,r2,r3
 402aa74:	10800017 	ldw	r2,0(r2)
 402aa78:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 402aa7c:	e0bff817 	ldw	r2,-32(fp)
 402aa80:	1000061e 	bne	r2,zero,402aa9c <OSTaskResume+0x90>
 402aa84:	e0bff617 	ldw	r2,-40(fp)
 402aa88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402aa8c:	e0bff717 	ldw	r2,-36(fp)
 402aa90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 402aa94:	00801184 	movi	r2,70
 402aa98:	00004c06 	br	402abcc <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 402aa9c:	e0bff817 	ldw	r2,-32(fp)
 402aaa0:	10800058 	cmpnei	r2,r2,1
 402aaa4:	1000061e 	bne	r2,zero,402aac0 <OSTaskResume+0xb4>
 402aaa8:	e0bff617 	ldw	r2,-40(fp)
 402aaac:	e0bff915 	stw	r2,-28(fp)
 402aab0:	e0bff917 	ldw	r2,-28(fp)
 402aab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 402aab8:	008010c4 	movi	r2,67
 402aabc:	00004306 	br	402abcc <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 402aac0:	e0bff817 	ldw	r2,-32(fp)
 402aac4:	10800c03 	ldbu	r2,48(r2)
 402aac8:	10803fcc 	andi	r2,r2,255
 402aacc:	1080020c 	andi	r2,r2,8
 402aad0:	10003926 	beq	r2,zero,402abb8 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 402aad4:	e0bff817 	ldw	r2,-32(fp)
 402aad8:	10c00c03 	ldbu	r3,48(r2)
 402aadc:	00bffdc4 	movi	r2,-9
 402aae0:	1884703a 	and	r2,r3,r2
 402aae4:	1007883a 	mov	r3,r2
 402aae8:	e0bff817 	ldw	r2,-32(fp)
 402aaec:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 402aaf0:	e0bff817 	ldw	r2,-32(fp)
 402aaf4:	10800c03 	ldbu	r2,48(r2)
 402aaf8:	10803fcc 	andi	r2,r2,255
 402aafc:	1000281e 	bne	r2,zero,402aba0 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 402ab00:	e0bff817 	ldw	r2,-32(fp)
 402ab04:	10800b8b 	ldhu	r2,46(r2)
 402ab08:	10bfffcc 	andi	r2,r2,65535
 402ab0c:	10001f1e 	bne	r2,zero,402ab8c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 402ab10:	e0bff817 	ldw	r2,-32(fp)
 402ab14:	10c00d83 	ldbu	r3,54(r2)
 402ab18:	d0a04503 	ldbu	r2,-32492(gp)
 402ab1c:	1884b03a 	or	r2,r3,r2
 402ab20:	d0a04505 	stb	r2,-32492(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 402ab24:	e0bff817 	ldw	r2,-32(fp)
 402ab28:	10800d03 	ldbu	r2,52(r2)
 402ab2c:	10c03fcc 	andi	r3,r2,255
 402ab30:	e0bff817 	ldw	r2,-32(fp)
 402ab34:	10800d03 	ldbu	r2,52(r2)
 402ab38:	11003fcc 	andi	r4,r2,255
 402ab3c:	d0a04544 	addi	r2,gp,-32491
 402ab40:	2085883a 	add	r2,r4,r2
 402ab44:	11000003 	ldbu	r4,0(r2)
 402ab48:	e0bff817 	ldw	r2,-32(fp)
 402ab4c:	10800d43 	ldbu	r2,53(r2)
 402ab50:	2084b03a 	or	r2,r4,r2
 402ab54:	1009883a 	mov	r4,r2
 402ab58:	d0a04544 	addi	r2,gp,-32491
 402ab5c:	1885883a 	add	r2,r3,r2
 402ab60:	11000005 	stb	r4,0(r2)
 402ab64:	e0bff617 	ldw	r2,-40(fp)
 402ab68:	e0bffa15 	stw	r2,-24(fp)
 402ab6c:	e0bffa17 	ldw	r2,-24(fp)
 402ab70:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 402ab74:	d0a03943 	ldbu	r2,-32539(gp)
 402ab78:	10803fcc 	andi	r2,r2,255
 402ab7c:	10800058 	cmpnei	r2,r2,1
 402ab80:	10000b1e 	bne	r2,zero,402abb0 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 402ab84:	40257700 	call	4025770 <OS_Sched>
 402ab88:	00000906 	br	402abb0 <OSTaskResume+0x1a4>
 402ab8c:	e0bff617 	ldw	r2,-40(fp)
 402ab90:	e0bffb15 	stw	r2,-20(fp)
 402ab94:	e0bffb17 	ldw	r2,-20(fp)
 402ab98:	1001703a 	wrctl	status,r2
 402ab9c:	00000406 	br	402abb0 <OSTaskResume+0x1a4>
 402aba0:	e0bff617 	ldw	r2,-40(fp)
 402aba4:	e0bffc15 	stw	r2,-16(fp)
 402aba8:	e0bffc17 	ldw	r2,-16(fp)
 402abac:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 402abb0:	0005883a 	mov	r2,zero
 402abb4:	00000506 	br	402abcc <OSTaskResume+0x1c0>
 402abb8:	e0bff617 	ldw	r2,-40(fp)
 402abbc:	e0bffd15 	stw	r2,-12(fp)
 402abc0:	e0bffd17 	ldw	r2,-12(fp)
 402abc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 402abc8:	00801104 	movi	r2,68
}
 402abcc:	e037883a 	mov	sp,fp
 402abd0:	dfc00117 	ldw	ra,4(sp)
 402abd4:	df000017 	ldw	fp,0(sp)
 402abd8:	dec00204 	addi	sp,sp,8
 402abdc:	f800283a 	ret

0402abe0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 402abe0:	defff304 	addi	sp,sp,-52
 402abe4:	df000c15 	stw	fp,48(sp)
 402abe8:	df000c04 	addi	fp,sp,48
 402abec:	2005883a 	mov	r2,r4
 402abf0:	e17fff15 	stw	r5,-4(fp)
 402abf4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 402abf8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 402abfc:	e0bffe03 	ldbu	r2,-8(fp)
 402ac00:	10800570 	cmpltui	r2,r2,21
 402ac04:	1000051e 	bne	r2,zero,402ac1c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 402ac08:	e0bffe03 	ldbu	r2,-8(fp)
 402ac0c:	10803fe0 	cmpeqi	r2,r2,255
 402ac10:	1000021e 	bne	r2,zero,402ac1c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 402ac14:	00800a84 	movi	r2,42
 402ac18:	00005d06 	br	402ad90 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 402ac1c:	e0bfff17 	ldw	r2,-4(fp)
 402ac20:	1000021e 	bne	r2,zero,402ac2c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 402ac24:	00800244 	movi	r2,9
 402ac28:	00005906 	br	402ad90 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 402ac2c:	e0bfff17 	ldw	r2,-4(fp)
 402ac30:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 402ac34:	e0bfff17 	ldw	r2,-4(fp)
 402ac38:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ac3c:	0005303a 	rdctl	r2,status
 402ac40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ac44:	e0fffd17 	ldw	r3,-12(fp)
 402ac48:	00bfff84 	movi	r2,-2
 402ac4c:	1884703a 	and	r2,r3,r2
 402ac50:	1001703a 	wrctl	status,r2
  
  return context;
 402ac54:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 402ac58:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 402ac5c:	e0bffe03 	ldbu	r2,-8(fp)
 402ac60:	10803fd8 	cmpnei	r2,r2,255
 402ac64:	1000031e 	bne	r2,zero,402ac74 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 402ac68:	d0a04817 	ldw	r2,-32480(gp)
 402ac6c:	10800c83 	ldbu	r2,50(r2)
 402ac70:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 402ac74:	e0fffe03 	ldbu	r3,-8(fp)
 402ac78:	00800074 	movhi	r2,1
 402ac7c:	10a3bf04 	addi	r2,r2,-28932
 402ac80:	18c7883a 	add	r3,r3,r3
 402ac84:	18c7883a 	add	r3,r3,r3
 402ac88:	10c5883a 	add	r2,r2,r3
 402ac8c:	10800017 	ldw	r2,0(r2)
 402ac90:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 402ac94:	e0bff817 	ldw	r2,-32(fp)
 402ac98:	1000061e 	bne	r2,zero,402acb4 <OSTaskStkChk+0xd4>
 402ac9c:	e0bff617 	ldw	r2,-40(fp)
 402aca0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402aca4:	e0bff717 	ldw	r2,-36(fp)
 402aca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 402acac:	008010c4 	movi	r2,67
 402acb0:	00003706 	br	402ad90 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 402acb4:	e0bff817 	ldw	r2,-32(fp)
 402acb8:	10800058 	cmpnei	r2,r2,1
 402acbc:	1000061e 	bne	r2,zero,402acd8 <OSTaskStkChk+0xf8>
 402acc0:	e0bff617 	ldw	r2,-40(fp)
 402acc4:	e0bff915 	stw	r2,-28(fp)
 402acc8:	e0bff917 	ldw	r2,-28(fp)
 402accc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 402acd0:	008010c4 	movi	r2,67
 402acd4:	00002e06 	br	402ad90 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 402acd8:	e0bff817 	ldw	r2,-32(fp)
 402acdc:	1080040b 	ldhu	r2,16(r2)
 402ace0:	10bfffcc 	andi	r2,r2,65535
 402ace4:	1080004c 	andi	r2,r2,1
 402ace8:	1000061e 	bne	r2,zero,402ad04 <OSTaskStkChk+0x124>
 402acec:	e0bff617 	ldw	r2,-40(fp)
 402acf0:	e0bffa15 	stw	r2,-24(fp)
 402acf4:	e0bffa17 	ldw	r2,-24(fp)
 402acf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 402acfc:	00801144 	movi	r2,69
 402ad00:	00002306 	br	402ad90 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 402ad04:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 402ad08:	e0bff817 	ldw	r2,-32(fp)
 402ad0c:	10800317 	ldw	r2,12(r2)
 402ad10:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 402ad14:	e0bff817 	ldw	r2,-32(fp)
 402ad18:	10800217 	ldw	r2,8(r2)
 402ad1c:	e0bff415 	stw	r2,-48(fp)
 402ad20:	e0bff617 	ldw	r2,-40(fp)
 402ad24:	e0bffb15 	stw	r2,-20(fp)
 402ad28:	e0bffb17 	ldw	r2,-20(fp)
 402ad2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 402ad30:	00000306 	br	402ad40 <OSTaskStkChk+0x160>
        nfree++;
 402ad34:	e0bff517 	ldw	r2,-44(fp)
 402ad38:	10800044 	addi	r2,r2,1
 402ad3c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 402ad40:	e0bff417 	ldw	r2,-48(fp)
 402ad44:	10c00104 	addi	r3,r2,4
 402ad48:	e0fff415 	stw	r3,-48(fp)
 402ad4c:	10800017 	ldw	r2,0(r2)
 402ad50:	103ff826 	beq	r2,zero,402ad34 <__flash_rwdata_start+0xffffd130>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 402ad54:	e0bff517 	ldw	r2,-44(fp)
 402ad58:	1085883a 	add	r2,r2,r2
 402ad5c:	1085883a 	add	r2,r2,r2
 402ad60:	1007883a 	mov	r3,r2
 402ad64:	e0bfff17 	ldw	r2,-4(fp)
 402ad68:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 402ad6c:	e0fffc17 	ldw	r3,-16(fp)
 402ad70:	e0bff517 	ldw	r2,-44(fp)
 402ad74:	1885c83a 	sub	r2,r3,r2
 402ad78:	1085883a 	add	r2,r2,r2
 402ad7c:	1085883a 	add	r2,r2,r2
 402ad80:	1007883a 	mov	r3,r2
 402ad84:	e0bfff17 	ldw	r2,-4(fp)
 402ad88:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 402ad8c:	0005883a 	mov	r2,zero
}
 402ad90:	e037883a 	mov	sp,fp
 402ad94:	df000017 	ldw	fp,0(sp)
 402ad98:	dec00104 	addi	sp,sp,4
 402ad9c:	f800283a 	ret

0402ada0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 402ada0:	defff504 	addi	sp,sp,-44
 402ada4:	dfc00a15 	stw	ra,40(sp)
 402ada8:	df000915 	stw	fp,36(sp)
 402adac:	df000904 	addi	fp,sp,36
 402adb0:	2005883a 	mov	r2,r4
 402adb4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 402adb8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 402adbc:	e0bfff03 	ldbu	r2,-4(fp)
 402adc0:	10800518 	cmpnei	r2,r2,20
 402adc4:	1000021e 	bne	r2,zero,402add0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 402adc8:	008011c4 	movi	r2,71
 402adcc:	00006806 	br	402af70 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 402add0:	e0bfff03 	ldbu	r2,-4(fp)
 402add4:	10800530 	cmpltui	r2,r2,20
 402add8:	1000051e 	bne	r2,zero,402adf0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 402addc:	e0bfff03 	ldbu	r2,-4(fp)
 402ade0:	10803fe0 	cmpeqi	r2,r2,255
 402ade4:	1000021e 	bne	r2,zero,402adf0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 402ade8:	00800a84 	movi	r2,42
 402adec:	00006006 	br	402af70 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402adf0:	0005303a 	rdctl	r2,status
 402adf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402adf8:	e0fffe17 	ldw	r3,-8(fp)
 402adfc:	00bfff84 	movi	r2,-2
 402ae00:	1884703a 	and	r2,r3,r2
 402ae04:	1001703a 	wrctl	status,r2
  
  return context;
 402ae08:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 402ae0c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 402ae10:	e0bfff03 	ldbu	r2,-4(fp)
 402ae14:	10803fd8 	cmpnei	r2,r2,255
 402ae18:	1000061e 	bne	r2,zero,402ae34 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 402ae1c:	d0a04817 	ldw	r2,-32480(gp)
 402ae20:	10800c83 	ldbu	r2,50(r2)
 402ae24:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 402ae28:	00800044 	movi	r2,1
 402ae2c:	e0bff705 	stb	r2,-36(fp)
 402ae30:	00000906 	br	402ae58 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 402ae34:	d0a04817 	ldw	r2,-32480(gp)
 402ae38:	10800c83 	ldbu	r2,50(r2)
 402ae3c:	10c03fcc 	andi	r3,r2,255
 402ae40:	e0bfff03 	ldbu	r2,-4(fp)
 402ae44:	1880031e 	bne	r3,r2,402ae54 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 402ae48:	00800044 	movi	r2,1
 402ae4c:	e0bff705 	stb	r2,-36(fp)
 402ae50:	00000106 	br	402ae58 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 402ae54:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 402ae58:	e0ffff03 	ldbu	r3,-4(fp)
 402ae5c:	00800074 	movhi	r2,1
 402ae60:	10a3bf04 	addi	r2,r2,-28932
 402ae64:	18c7883a 	add	r3,r3,r3
 402ae68:	18c7883a 	add	r3,r3,r3
 402ae6c:	10c5883a 	add	r2,r2,r3
 402ae70:	10800017 	ldw	r2,0(r2)
 402ae74:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 402ae78:	e0bffa17 	ldw	r2,-24(fp)
 402ae7c:	1000061e 	bne	r2,zero,402ae98 <OSTaskSuspend+0xf8>
 402ae80:	e0bff817 	ldw	r2,-32(fp)
 402ae84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402ae88:	e0bff917 	ldw	r2,-28(fp)
 402ae8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 402ae90:	00801204 	movi	r2,72
 402ae94:	00003606 	br	402af70 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 402ae98:	e0bffa17 	ldw	r2,-24(fp)
 402ae9c:	10800058 	cmpnei	r2,r2,1
 402aea0:	1000061e 	bne	r2,zero,402aebc <OSTaskSuspend+0x11c>
 402aea4:	e0bff817 	ldw	r2,-32(fp)
 402aea8:	e0bffb15 	stw	r2,-20(fp)
 402aeac:	e0bffb17 	ldw	r2,-20(fp)
 402aeb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 402aeb4:	008010c4 	movi	r2,67
 402aeb8:	00002d06 	br	402af70 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 402aebc:	e0bffa17 	ldw	r2,-24(fp)
 402aec0:	10800d03 	ldbu	r2,52(r2)
 402aec4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 402aec8:	e0fffd03 	ldbu	r3,-12(fp)
 402aecc:	e13ffd03 	ldbu	r4,-12(fp)
 402aed0:	d0a04544 	addi	r2,gp,-32491
 402aed4:	2085883a 	add	r2,r4,r2
 402aed8:	10800003 	ldbu	r2,0(r2)
 402aedc:	1009883a 	mov	r4,r2
 402aee0:	e0bffa17 	ldw	r2,-24(fp)
 402aee4:	10800d43 	ldbu	r2,53(r2)
 402aee8:	0084303a 	nor	r2,zero,r2
 402aeec:	2084703a 	and	r2,r4,r2
 402aef0:	1009883a 	mov	r4,r2
 402aef4:	d0a04544 	addi	r2,gp,-32491
 402aef8:	1885883a 	add	r2,r3,r2
 402aefc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 402af00:	e0fffd03 	ldbu	r3,-12(fp)
 402af04:	d0a04544 	addi	r2,gp,-32491
 402af08:	1885883a 	add	r2,r3,r2
 402af0c:	10800003 	ldbu	r2,0(r2)
 402af10:	10803fcc 	andi	r2,r2,255
 402af14:	1000071e 	bne	r2,zero,402af34 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 402af18:	e0bffa17 	ldw	r2,-24(fp)
 402af1c:	10800d83 	ldbu	r2,54(r2)
 402af20:	0084303a 	nor	r2,zero,r2
 402af24:	1007883a 	mov	r3,r2
 402af28:	d0a04503 	ldbu	r2,-32492(gp)
 402af2c:	1884703a 	and	r2,r3,r2
 402af30:	d0a04505 	stb	r2,-32492(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 402af34:	e0bffa17 	ldw	r2,-24(fp)
 402af38:	10800c03 	ldbu	r2,48(r2)
 402af3c:	10800214 	ori	r2,r2,8
 402af40:	1007883a 	mov	r3,r2
 402af44:	e0bffa17 	ldw	r2,-24(fp)
 402af48:	10c00c05 	stb	r3,48(r2)
 402af4c:	e0bff817 	ldw	r2,-32(fp)
 402af50:	e0bffc15 	stw	r2,-16(fp)
 402af54:	e0bffc17 	ldw	r2,-16(fp)
 402af58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 402af5c:	e0bff703 	ldbu	r2,-36(fp)
 402af60:	10800058 	cmpnei	r2,r2,1
 402af64:	1000011e 	bne	r2,zero,402af6c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 402af68:	40257700 	call	4025770 <OS_Sched>
    }
    return (OS_ERR_NONE);
 402af6c:	0005883a 	mov	r2,zero
}
 402af70:	e037883a 	mov	sp,fp
 402af74:	dfc00117 	ldw	ra,4(sp)
 402af78:	df000017 	ldw	fp,0(sp)
 402af7c:	dec00204 	addi	sp,sp,8
 402af80:	f800283a 	ret

0402af84 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 402af84:	defff604 	addi	sp,sp,-40
 402af88:	dfc00915 	stw	ra,36(sp)
 402af8c:	df000815 	stw	fp,32(sp)
 402af90:	df000804 	addi	fp,sp,32
 402af94:	2005883a 	mov	r2,r4
 402af98:	e17fff15 	stw	r5,-4(fp)
 402af9c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 402afa0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 402afa4:	e0bffe03 	ldbu	r2,-8(fp)
 402afa8:	10800570 	cmpltui	r2,r2,21
 402afac:	1000051e 	bne	r2,zero,402afc4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 402afb0:	e0bffe03 	ldbu	r2,-8(fp)
 402afb4:	10803fe0 	cmpeqi	r2,r2,255
 402afb8:	1000021e 	bne	r2,zero,402afc4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 402afbc:	00800a84 	movi	r2,42
 402afc0:	00003406 	br	402b094 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 402afc4:	e0bfff17 	ldw	r2,-4(fp)
 402afc8:	1000021e 	bne	r2,zero,402afd4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 402afcc:	00800244 	movi	r2,9
 402afd0:	00003006 	br	402b094 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402afd4:	0005303a 	rdctl	r2,status
 402afd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402afdc:	e0fffd17 	ldw	r3,-12(fp)
 402afe0:	00bfff84 	movi	r2,-2
 402afe4:	1884703a 	and	r2,r3,r2
 402afe8:	1001703a 	wrctl	status,r2
  
  return context;
 402afec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 402aff0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 402aff4:	e0bffe03 	ldbu	r2,-8(fp)
 402aff8:	10803fd8 	cmpnei	r2,r2,255
 402affc:	1000031e 	bne	r2,zero,402b00c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 402b000:	d0a04817 	ldw	r2,-32480(gp)
 402b004:	10800c83 	ldbu	r2,50(r2)
 402b008:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 402b00c:	e0fffe03 	ldbu	r3,-8(fp)
 402b010:	00800074 	movhi	r2,1
 402b014:	10a3bf04 	addi	r2,r2,-28932
 402b018:	18c7883a 	add	r3,r3,r3
 402b01c:	18c7883a 	add	r3,r3,r3
 402b020:	10c5883a 	add	r2,r2,r3
 402b024:	10800017 	ldw	r2,0(r2)
 402b028:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 402b02c:	e0bffa17 	ldw	r2,-24(fp)
 402b030:	1000061e 	bne	r2,zero,402b04c <OSTaskQuery+0xc8>
 402b034:	e0bff817 	ldw	r2,-32(fp)
 402b038:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402b03c:	e0bff917 	ldw	r2,-28(fp)
 402b040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 402b044:	00800a44 	movi	r2,41
 402b048:	00001206 	br	402b094 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 402b04c:	e0bffa17 	ldw	r2,-24(fp)
 402b050:	10800058 	cmpnei	r2,r2,1
 402b054:	1000061e 	bne	r2,zero,402b070 <OSTaskQuery+0xec>
 402b058:	e0bff817 	ldw	r2,-32(fp)
 402b05c:	e0bffb15 	stw	r2,-20(fp)
 402b060:	e0bffb17 	ldw	r2,-20(fp)
 402b064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 402b068:	008010c4 	movi	r2,67
 402b06c:	00000906 	br	402b094 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 402b070:	01801b04 	movi	r6,108
 402b074:	e17ffa17 	ldw	r5,-24(fp)
 402b078:	e13fff17 	ldw	r4,-4(fp)
 402b07c:	40257080 	call	4025708 <OS_MemCopy>
 402b080:	e0bff817 	ldw	r2,-32(fp)
 402b084:	e0bffc15 	stw	r2,-16(fp)
 402b088:	e0bffc17 	ldw	r2,-16(fp)
 402b08c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 402b090:	0005883a 	mov	r2,zero
}
 402b094:	e037883a 	mov	sp,fp
 402b098:	dfc00117 	ldw	ra,4(sp)
 402b09c:	df000017 	ldw	fp,0(sp)
 402b0a0:	dec00204 	addi	sp,sp,8
 402b0a4:	f800283a 	ret

0402b0a8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 402b0a8:	defffc04 	addi	sp,sp,-16
 402b0ac:	df000315 	stw	fp,12(sp)
 402b0b0:	df000304 	addi	fp,sp,12
 402b0b4:	e13ffd15 	stw	r4,-12(fp)
 402b0b8:	e17ffe15 	stw	r5,-8(fp)
 402b0bc:	3005883a 	mov	r2,r6
 402b0c0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 402b0c4:	e0bfff0b 	ldhu	r2,-4(fp)
 402b0c8:	1080004c 	andi	r2,r2,1
 402b0cc:	10000d26 	beq	r2,zero,402b104 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 402b0d0:	e0bfff0b 	ldhu	r2,-4(fp)
 402b0d4:	1080008c 	andi	r2,r2,2
 402b0d8:	10000a26 	beq	r2,zero,402b104 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 402b0dc:	00000706 	br	402b0fc <OS_TaskStkClr+0x54>
                size--;
 402b0e0:	e0bffe17 	ldw	r2,-8(fp)
 402b0e4:	10bfffc4 	addi	r2,r2,-1
 402b0e8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 402b0ec:	e0bffd17 	ldw	r2,-12(fp)
 402b0f0:	10c00104 	addi	r3,r2,4
 402b0f4:	e0fffd15 	stw	r3,-12(fp)
 402b0f8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 402b0fc:	e0bffe17 	ldw	r2,-8(fp)
 402b100:	103ff71e 	bne	r2,zero,402b0e0 <__flash_rwdata_start+0xffffd4dc>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 402b104:	0001883a 	nop
 402b108:	e037883a 	mov	sp,fp
 402b10c:	df000017 	ldw	fp,0(sp)
 402b110:	dec00104 	addi	sp,sp,4
 402b114:	f800283a 	ret

0402b118 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 402b118:	defff904 	addi	sp,sp,-28
 402b11c:	dfc00615 	stw	ra,24(sp)
 402b120:	df000515 	stw	fp,20(sp)
 402b124:	df000504 	addi	fp,sp,20
 402b128:	2005883a 	mov	r2,r4
 402b12c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 402b130:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 402b134:	d0a04703 	ldbu	r2,-32484(gp)
 402b138:	10803fcc 	andi	r2,r2,255
 402b13c:	1000311e 	bne	r2,zero,402b204 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 402b140:	e0bfff0b 	ldhu	r2,-4(fp)
 402b144:	10003026 	beq	r2,zero,402b208 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402b148:	0005303a 	rdctl	r2,status
 402b14c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402b150:	e0fffe17 	ldw	r3,-8(fp)
 402b154:	00bfff84 	movi	r2,-2
 402b158:	1884703a 	and	r2,r3,r2
 402b15c:	1001703a 	wrctl	status,r2
  
  return context;
 402b160:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 402b164:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 402b168:	d0a04817 	ldw	r2,-32480(gp)
 402b16c:	10800d03 	ldbu	r2,52(r2)
 402b170:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 402b174:	e0fffd03 	ldbu	r3,-12(fp)
 402b178:	e13ffd03 	ldbu	r4,-12(fp)
 402b17c:	d0a04544 	addi	r2,gp,-32491
 402b180:	2085883a 	add	r2,r4,r2
 402b184:	10800003 	ldbu	r2,0(r2)
 402b188:	1009883a 	mov	r4,r2
 402b18c:	d0a04817 	ldw	r2,-32480(gp)
 402b190:	10800d43 	ldbu	r2,53(r2)
 402b194:	0084303a 	nor	r2,zero,r2
 402b198:	2084703a 	and	r2,r4,r2
 402b19c:	1009883a 	mov	r4,r2
 402b1a0:	d0a04544 	addi	r2,gp,-32491
 402b1a4:	1885883a 	add	r2,r3,r2
 402b1a8:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 402b1ac:	e0fffd03 	ldbu	r3,-12(fp)
 402b1b0:	d0a04544 	addi	r2,gp,-32491
 402b1b4:	1885883a 	add	r2,r3,r2
 402b1b8:	10800003 	ldbu	r2,0(r2)
 402b1bc:	10803fcc 	andi	r2,r2,255
 402b1c0:	1000071e 	bne	r2,zero,402b1e0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 402b1c4:	d0a04817 	ldw	r2,-32480(gp)
 402b1c8:	10800d83 	ldbu	r2,54(r2)
 402b1cc:	0084303a 	nor	r2,zero,r2
 402b1d0:	1007883a 	mov	r3,r2
 402b1d4:	d0a04503 	ldbu	r2,-32492(gp)
 402b1d8:	1884703a 	and	r2,r3,r2
 402b1dc:	d0a04505 	stb	r2,-32492(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 402b1e0:	d0a04817 	ldw	r2,-32480(gp)
 402b1e4:	e0ffff0b 	ldhu	r3,-4(fp)
 402b1e8:	10c00b8d 	sth	r3,46(r2)
 402b1ec:	e0bffb17 	ldw	r2,-20(fp)
 402b1f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402b1f4:	e0bffc17 	ldw	r2,-16(fp)
 402b1f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 402b1fc:	40257700 	call	4025770 <OS_Sched>
 402b200:	00000106 	br	402b208 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 402b204:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 402b208:	e037883a 	mov	sp,fp
 402b20c:	dfc00117 	ldw	ra,4(sp)
 402b210:	df000017 	ldw	fp,0(sp)
 402b214:	dec00204 	addi	sp,sp,8
 402b218:	f800283a 	ret

0402b21c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 402b21c:	defff704 	addi	sp,sp,-36
 402b220:	dfc00815 	stw	ra,32(sp)
 402b224:	df000715 	stw	fp,28(sp)
 402b228:	dc000615 	stw	r16,24(sp)
 402b22c:	df000704 	addi	fp,sp,28
 402b230:	2011883a 	mov	r8,r4
 402b234:	2809883a 	mov	r4,r5
 402b238:	3007883a 	mov	r3,r6
 402b23c:	3805883a 	mov	r2,r7
 402b240:	e23ffb05 	stb	r8,-20(fp)
 402b244:	e13ffc05 	stb	r4,-16(fp)
 402b248:	e0fffd05 	stb	r3,-12(fp)
 402b24c:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 402b250:	d0a04703 	ldbu	r2,-32484(gp)
 402b254:	10803fcc 	andi	r2,r2,255
 402b258:	10000226 	beq	r2,zero,402b264 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 402b25c:	00801544 	movi	r2,85
 402b260:	00004706 	br	402b380 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 402b264:	e0bffb03 	ldbu	r2,-20(fp)
 402b268:	1000081e 	bne	r2,zero,402b28c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 402b26c:	e0bffc03 	ldbu	r2,-16(fp)
 402b270:	1000061e 	bne	r2,zero,402b28c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 402b274:	e0bffd03 	ldbu	r2,-12(fp)
 402b278:	1000041e 	bne	r2,zero,402b28c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 402b27c:	e0bffe0b 	ldhu	r2,-8(fp)
 402b280:	1000021e 	bne	r2,zero,402b28c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 402b284:	00801504 	movi	r2,84
 402b288:	00003d06 	br	402b380 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
 402b28c:	e0bffc03 	ldbu	r2,-16(fp)
 402b290:	10800f30 	cmpltui	r2,r2,60
 402b294:	1000021e 	bne	r2,zero,402b2a0 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 402b298:	00801444 	movi	r2,81
 402b29c:	00003806 	br	402b380 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
 402b2a0:	e0bffd03 	ldbu	r2,-12(fp)
 402b2a4:	10800f30 	cmpltui	r2,r2,60
 402b2a8:	1000021e 	bne	r2,zero,402b2b4 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 402b2ac:	00801484 	movi	r2,82
 402b2b0:	00003306 	br	402b380 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
 402b2b4:	e0bffe0b 	ldhu	r2,-8(fp)
 402b2b8:	1080fa30 	cmpltui	r2,r2,1000
 402b2bc:	1000021e 	bne	r2,zero,402b2c8 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 402b2c0:	008014c4 	movi	r2,83
 402b2c4:	00002e06 	br	402b380 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 402b2c8:	e0bffb03 	ldbu	r2,-20(fp)
 402b2cc:	01438404 	movi	r5,3600
 402b2d0:	1009883a 	mov	r4,r2
 402b2d4:	402316c0 	call	402316c <__mulsi3>
 402b2d8:	1021883a 	mov	r16,r2
 402b2dc:	e0bffc03 	ldbu	r2,-16(fp)
 402b2e0:	01400f04 	movi	r5,60
 402b2e4:	1009883a 	mov	r4,r2
 402b2e8:	402316c0 	call	402316c <__mulsi3>
 402b2ec:	8087883a 	add	r3,r16,r2
 402b2f0:	e0bffd03 	ldbu	r2,-12(fp)
 402b2f4:	1885883a 	add	r2,r3,r2
 402b2f8:	0140fa04 	movi	r5,1000
 402b2fc:	1009883a 	mov	r4,r2
 402b300:	402316c0 	call	402316c <__mulsi3>
 402b304:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 402b308:	e0bffe0b 	ldhu	r2,-8(fp)
 402b30c:	0140fa04 	movi	r5,1000
 402b310:	1009883a 	mov	r4,r2
 402b314:	402316c0 	call	402316c <__mulsi3>
 402b318:	0140fa04 	movi	r5,1000
 402b31c:	1009883a 	mov	r4,r2
 402b320:	40230b00 	call	40230b0 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 402b324:	8085883a 	add	r2,r16,r2
 402b328:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 402b32c:	e0bffa17 	ldw	r2,-24(fp)
 402b330:	1004d43a 	srli	r2,r2,16
 402b334:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 402b338:	e0bffa17 	ldw	r2,-24(fp)
 402b33c:	10bfffcc 	andi	r2,r2,65535
 402b340:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 402b344:	e0bffa17 	ldw	r2,-24(fp)
 402b348:	10bfffcc 	andi	r2,r2,65535
 402b34c:	1009883a 	mov	r4,r2
 402b350:	402b1180 	call	402b118 <OSTimeDly>
    while (loops > 0) {
 402b354:	00000706 	br	402b374 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
 402b358:	01200014 	movui	r4,32768
 402b35c:	402b1180 	call	402b118 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 402b360:	01200014 	movui	r4,32768
 402b364:	402b1180 	call	402b118 <OSTimeDly>
        loops--;
 402b368:	e0bff90b 	ldhu	r2,-28(fp)
 402b36c:	10bfffc4 	addi	r2,r2,-1
 402b370:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 402b374:	e0bff90b 	ldhu	r2,-28(fp)
 402b378:	103ff71e 	bne	r2,zero,402b358 <__flash_rwdata_start+0xffffd754>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 402b37c:	0005883a 	mov	r2,zero
}
 402b380:	e6ffff04 	addi	sp,fp,-4
 402b384:	dfc00217 	ldw	ra,8(sp)
 402b388:	df000117 	ldw	fp,4(sp)
 402b38c:	dc000017 	ldw	r16,0(sp)
 402b390:	dec00304 	addi	sp,sp,12
 402b394:	f800283a 	ret

0402b398 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 402b398:	defff504 	addi	sp,sp,-44
 402b39c:	dfc00a15 	stw	ra,40(sp)
 402b3a0:	df000915 	stw	fp,36(sp)
 402b3a4:	df000904 	addi	fp,sp,36
 402b3a8:	2005883a 	mov	r2,r4
 402b3ac:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 402b3b0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 402b3b4:	e0bfff03 	ldbu	r2,-4(fp)
 402b3b8:	10800530 	cmpltui	r2,r2,20
 402b3bc:	1000021e 	bne	r2,zero,402b3c8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 402b3c0:	00800a84 	movi	r2,42
 402b3c4:	00006406 	br	402b558 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402b3c8:	0005303a 	rdctl	r2,status
 402b3cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402b3d0:	e0fffe17 	ldw	r3,-8(fp)
 402b3d4:	00bfff84 	movi	r2,-2
 402b3d8:	1884703a 	and	r2,r3,r2
 402b3dc:	1001703a 	wrctl	status,r2
  
  return context;
 402b3e0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 402b3e4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 402b3e8:	e0ffff03 	ldbu	r3,-4(fp)
 402b3ec:	00800074 	movhi	r2,1
 402b3f0:	10a3bf04 	addi	r2,r2,-28932
 402b3f4:	18c7883a 	add	r3,r3,r3
 402b3f8:	18c7883a 	add	r3,r3,r3
 402b3fc:	10c5883a 	add	r2,r2,r3
 402b400:	10800017 	ldw	r2,0(r2)
 402b404:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 402b408:	e0bff917 	ldw	r2,-28(fp)
 402b40c:	1000061e 	bne	r2,zero,402b428 <OSTimeDlyResume+0x90>
 402b410:	e0bff717 	ldw	r2,-36(fp)
 402b414:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402b418:	e0bff817 	ldw	r2,-32(fp)
 402b41c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 402b420:	008010c4 	movi	r2,67
 402b424:	00004c06 	br	402b558 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 402b428:	e0bff917 	ldw	r2,-28(fp)
 402b42c:	10800058 	cmpnei	r2,r2,1
 402b430:	1000061e 	bne	r2,zero,402b44c <OSTimeDlyResume+0xb4>
 402b434:	e0bff717 	ldw	r2,-36(fp)
 402b438:	e0bffa15 	stw	r2,-24(fp)
 402b43c:	e0bffa17 	ldw	r2,-24(fp)
 402b440:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 402b444:	008010c4 	movi	r2,67
 402b448:	00004306 	br	402b558 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 402b44c:	e0bff917 	ldw	r2,-28(fp)
 402b450:	10800b8b 	ldhu	r2,46(r2)
 402b454:	10bfffcc 	andi	r2,r2,65535
 402b458:	1000061e 	bne	r2,zero,402b474 <OSTimeDlyResume+0xdc>
 402b45c:	e0bff717 	ldw	r2,-36(fp)
 402b460:	e0bffb15 	stw	r2,-20(fp)
 402b464:	e0bffb17 	ldw	r2,-20(fp)
 402b468:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 402b46c:	00801404 	movi	r2,80
 402b470:	00003906 	br	402b558 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 402b474:	e0bff917 	ldw	r2,-28(fp)
 402b478:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 402b47c:	e0bff917 	ldw	r2,-28(fp)
 402b480:	10800c03 	ldbu	r2,48(r2)
 402b484:	10803fcc 	andi	r2,r2,255
 402b488:	10800dcc 	andi	r2,r2,55
 402b48c:	10000b26 	beq	r2,zero,402b4bc <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 402b490:	e0bff917 	ldw	r2,-28(fp)
 402b494:	10c00c03 	ldbu	r3,48(r2)
 402b498:	00bff204 	movi	r2,-56
 402b49c:	1884703a 	and	r2,r3,r2
 402b4a0:	1007883a 	mov	r3,r2
 402b4a4:	e0bff917 	ldw	r2,-28(fp)
 402b4a8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 402b4ac:	e0bff917 	ldw	r2,-28(fp)
 402b4b0:	00c00044 	movi	r3,1
 402b4b4:	10c00c45 	stb	r3,49(r2)
 402b4b8:	00000206 	br	402b4c4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 402b4bc:	e0bff917 	ldw	r2,-28(fp)
 402b4c0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 402b4c4:	e0bff917 	ldw	r2,-28(fp)
 402b4c8:	10800c03 	ldbu	r2,48(r2)
 402b4cc:	10803fcc 	andi	r2,r2,255
 402b4d0:	1080020c 	andi	r2,r2,8
 402b4d4:	10001b1e 	bne	r2,zero,402b544 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 402b4d8:	e0bff917 	ldw	r2,-28(fp)
 402b4dc:	10c00d83 	ldbu	r3,54(r2)
 402b4e0:	d0a04503 	ldbu	r2,-32492(gp)
 402b4e4:	1884b03a 	or	r2,r3,r2
 402b4e8:	d0a04505 	stb	r2,-32492(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 402b4ec:	e0bff917 	ldw	r2,-28(fp)
 402b4f0:	10800d03 	ldbu	r2,52(r2)
 402b4f4:	10c03fcc 	andi	r3,r2,255
 402b4f8:	e0bff917 	ldw	r2,-28(fp)
 402b4fc:	10800d03 	ldbu	r2,52(r2)
 402b500:	11003fcc 	andi	r4,r2,255
 402b504:	d0a04544 	addi	r2,gp,-32491
 402b508:	2085883a 	add	r2,r4,r2
 402b50c:	11000003 	ldbu	r4,0(r2)
 402b510:	e0bff917 	ldw	r2,-28(fp)
 402b514:	10800d43 	ldbu	r2,53(r2)
 402b518:	2084b03a 	or	r2,r4,r2
 402b51c:	1009883a 	mov	r4,r2
 402b520:	d0a04544 	addi	r2,gp,-32491
 402b524:	1885883a 	add	r2,r3,r2
 402b528:	11000005 	stb	r4,0(r2)
 402b52c:	e0bff717 	ldw	r2,-36(fp)
 402b530:	e0bffc15 	stw	r2,-16(fp)
 402b534:	e0bffc17 	ldw	r2,-16(fp)
 402b538:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 402b53c:	40257700 	call	4025770 <OS_Sched>
 402b540:	00000406 	br	402b554 <OSTimeDlyResume+0x1bc>
 402b544:	e0bff717 	ldw	r2,-36(fp)
 402b548:	e0bffd15 	stw	r2,-12(fp)
 402b54c:	e0bffd17 	ldw	r2,-12(fp)
 402b550:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 402b554:	0005883a 	mov	r2,zero
}
 402b558:	e037883a 	mov	sp,fp
 402b55c:	dfc00117 	ldw	ra,4(sp)
 402b560:	df000017 	ldw	fp,0(sp)
 402b564:	dec00204 	addi	sp,sp,8
 402b568:	f800283a 	ret

0402b56c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 402b56c:	defffb04 	addi	sp,sp,-20
 402b570:	df000415 	stw	fp,16(sp)
 402b574:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 402b578:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402b57c:	0005303a 	rdctl	r2,status
 402b580:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402b584:	e0fffe17 	ldw	r3,-8(fp)
 402b588:	00bfff84 	movi	r2,-2
 402b58c:	1884703a 	and	r2,r3,r2
 402b590:	1001703a 	wrctl	status,r2
  
  return context;
 402b594:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 402b598:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 402b59c:	d0a04917 	ldw	r2,-32476(gp)
 402b5a0:	e0bffd15 	stw	r2,-12(fp)
 402b5a4:	e0bffc17 	ldw	r2,-16(fp)
 402b5a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402b5ac:	e0bfff17 	ldw	r2,-4(fp)
 402b5b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 402b5b4:	e0bffd17 	ldw	r2,-12(fp)
}
 402b5b8:	e037883a 	mov	sp,fp
 402b5bc:	df000017 	ldw	fp,0(sp)
 402b5c0:	dec00104 	addi	sp,sp,4
 402b5c4:	f800283a 	ret

0402b5c8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 402b5c8:	defffb04 	addi	sp,sp,-20
 402b5cc:	df000415 	stw	fp,16(sp)
 402b5d0:	df000404 	addi	fp,sp,16
 402b5d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 402b5d8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402b5dc:	0005303a 	rdctl	r2,status
 402b5e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402b5e4:	e0fffd17 	ldw	r3,-12(fp)
 402b5e8:	00bfff84 	movi	r2,-2
 402b5ec:	1884703a 	and	r2,r3,r2
 402b5f0:	1001703a 	wrctl	status,r2
  
  return context;
 402b5f4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 402b5f8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 402b5fc:	e0bfff17 	ldw	r2,-4(fp)
 402b600:	d0a04915 	stw	r2,-32476(gp)
 402b604:	e0bffc17 	ldw	r2,-16(fp)
 402b608:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402b60c:	e0bffe17 	ldw	r2,-8(fp)
 402b610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 402b614:	0001883a 	nop
 402b618:	e037883a 	mov	sp,fp
 402b61c:	df000017 	ldw	fp,0(sp)
 402b620:	dec00104 	addi	sp,sp,4
 402b624:	f800283a 	ret

0402b628 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 402b628:	defffd04 	addi	sp,sp,-12
 402b62c:	dfc00215 	stw	ra,8(sp)
 402b630:	df000115 	stw	fp,4(sp)
 402b634:	df000104 	addi	fp,sp,4
 402b638:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 402b63c:	d1600604 	addi	r5,gp,-32744
 402b640:	e13fff17 	ldw	r4,-4(fp)
 402b644:	402c6a00 	call	402c6a0 <alt_dev_llist_insert>
}
 402b648:	e037883a 	mov	sp,fp
 402b64c:	dfc00117 	ldw	ra,4(sp)
 402b650:	df000017 	ldw	fp,0(sp)
 402b654:	dec00204 	addi	sp,sp,8
 402b658:	f800283a 	ret

0402b65c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 402b65c:	defffd04 	addi	sp,sp,-12
 402b660:	dfc00215 	stw	ra,8(sp)
 402b664:	df000115 	stw	fp,4(sp)
 402b668:	df000104 	addi	fp,sp,4
 402b66c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 402b670:	402d04c0 	call	402d04c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 402b674:	00800044 	movi	r2,1
 402b678:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 402b67c:	0001883a 	nop
 402b680:	e037883a 	mov	sp,fp
 402b684:	dfc00117 	ldw	ra,4(sp)
 402b688:	df000017 	ldw	fp,0(sp)
 402b68c:	dec00204 	addi	sp,sp,8
 402b690:	f800283a 	ret

0402b694 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 402b694:	defffe04 	addi	sp,sp,-8
 402b698:	dfc00115 	stw	ra,4(sp)
 402b69c:	df000015 	stw	fp,0(sp)
 402b6a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 402b6a4:	01c0fa04 	movi	r7,1000
 402b6a8:	01800084 	movi	r6,2
 402b6ac:	000b883a 	mov	r5,zero
 402b6b0:	01010134 	movhi	r4,1028
 402b6b4:	21040004 	addi	r4,r4,4096
 402b6b8:	402c49c0 	call	402c49c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 402b6bc:	01800044 	movi	r6,1
 402b6c0:	000b883a 	mov	r5,zero
 402b6c4:	01000034 	movhi	r4,0
 402b6c8:	2102df04 	addi	r4,r4,2940
 402b6cc:	402b85c0 	call	402b85c <altera_avalon_jtag_uart_init>
 402b6d0:	01000034 	movhi	r4,0
 402b6d4:	2102d504 	addi	r4,r4,2900
 402b6d8:	402b6280 	call	402b628 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 402b6dc:	0001883a 	nop
}
 402b6e0:	0001883a 	nop
 402b6e4:	e037883a 	mov	sp,fp
 402b6e8:	dfc00117 	ldw	ra,4(sp)
 402b6ec:	df000017 	ldw	fp,0(sp)
 402b6f0:	dec00204 	addi	sp,sp,8
 402b6f4:	f800283a 	ret

0402b6f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 402b6f8:	defffa04 	addi	sp,sp,-24
 402b6fc:	dfc00515 	stw	ra,20(sp)
 402b700:	df000415 	stw	fp,16(sp)
 402b704:	df000404 	addi	fp,sp,16
 402b708:	e13ffd15 	stw	r4,-12(fp)
 402b70c:	e17ffe15 	stw	r5,-8(fp)
 402b710:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402b714:	e0bffd17 	ldw	r2,-12(fp)
 402b718:	10800017 	ldw	r2,0(r2)
 402b71c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 402b720:	e0bffc17 	ldw	r2,-16(fp)
 402b724:	10c00a04 	addi	r3,r2,40
 402b728:	e0bffd17 	ldw	r2,-12(fp)
 402b72c:	10800217 	ldw	r2,8(r2)
 402b730:	100f883a 	mov	r7,r2
 402b734:	e1bfff17 	ldw	r6,-4(fp)
 402b738:	e17ffe17 	ldw	r5,-8(fp)
 402b73c:	1809883a 	mov	r4,r3
 402b740:	402bea40 	call	402bea4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 402b744:	e037883a 	mov	sp,fp
 402b748:	dfc00117 	ldw	ra,4(sp)
 402b74c:	df000017 	ldw	fp,0(sp)
 402b750:	dec00204 	addi	sp,sp,8
 402b754:	f800283a 	ret

0402b758 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 402b758:	defffa04 	addi	sp,sp,-24
 402b75c:	dfc00515 	stw	ra,20(sp)
 402b760:	df000415 	stw	fp,16(sp)
 402b764:	df000404 	addi	fp,sp,16
 402b768:	e13ffd15 	stw	r4,-12(fp)
 402b76c:	e17ffe15 	stw	r5,-8(fp)
 402b770:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402b774:	e0bffd17 	ldw	r2,-12(fp)
 402b778:	10800017 	ldw	r2,0(r2)
 402b77c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 402b780:	e0bffc17 	ldw	r2,-16(fp)
 402b784:	10c00a04 	addi	r3,r2,40
 402b788:	e0bffd17 	ldw	r2,-12(fp)
 402b78c:	10800217 	ldw	r2,8(r2)
 402b790:	100f883a 	mov	r7,r2
 402b794:	e1bfff17 	ldw	r6,-4(fp)
 402b798:	e17ffe17 	ldw	r5,-8(fp)
 402b79c:	1809883a 	mov	r4,r3
 402b7a0:	402c1600 	call	402c160 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 402b7a4:	e037883a 	mov	sp,fp
 402b7a8:	dfc00117 	ldw	ra,4(sp)
 402b7ac:	df000017 	ldw	fp,0(sp)
 402b7b0:	dec00204 	addi	sp,sp,8
 402b7b4:	f800283a 	ret

0402b7b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 402b7b8:	defffc04 	addi	sp,sp,-16
 402b7bc:	dfc00315 	stw	ra,12(sp)
 402b7c0:	df000215 	stw	fp,8(sp)
 402b7c4:	df000204 	addi	fp,sp,8
 402b7c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402b7cc:	e0bfff17 	ldw	r2,-4(fp)
 402b7d0:	10800017 	ldw	r2,0(r2)
 402b7d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 402b7d8:	e0bffe17 	ldw	r2,-8(fp)
 402b7dc:	10c00a04 	addi	r3,r2,40
 402b7e0:	e0bfff17 	ldw	r2,-4(fp)
 402b7e4:	10800217 	ldw	r2,8(r2)
 402b7e8:	100b883a 	mov	r5,r2
 402b7ec:	1809883a 	mov	r4,r3
 402b7f0:	402bd4c0 	call	402bd4c <altera_avalon_jtag_uart_close>
}
 402b7f4:	e037883a 	mov	sp,fp
 402b7f8:	dfc00117 	ldw	ra,4(sp)
 402b7fc:	df000017 	ldw	fp,0(sp)
 402b800:	dec00204 	addi	sp,sp,8
 402b804:	f800283a 	ret

0402b808 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 402b808:	defffa04 	addi	sp,sp,-24
 402b80c:	dfc00515 	stw	ra,20(sp)
 402b810:	df000415 	stw	fp,16(sp)
 402b814:	df000404 	addi	fp,sp,16
 402b818:	e13ffd15 	stw	r4,-12(fp)
 402b81c:	e17ffe15 	stw	r5,-8(fp)
 402b820:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 402b824:	e0bffd17 	ldw	r2,-12(fp)
 402b828:	10800017 	ldw	r2,0(r2)
 402b82c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 402b830:	e0bffc17 	ldw	r2,-16(fp)
 402b834:	10800a04 	addi	r2,r2,40
 402b838:	e1bfff17 	ldw	r6,-4(fp)
 402b83c:	e17ffe17 	ldw	r5,-8(fp)
 402b840:	1009883a 	mov	r4,r2
 402b844:	402bdb40 	call	402bdb4 <altera_avalon_jtag_uart_ioctl>
}
 402b848:	e037883a 	mov	sp,fp
 402b84c:	dfc00117 	ldw	ra,4(sp)
 402b850:	df000017 	ldw	fp,0(sp)
 402b854:	dec00204 	addi	sp,sp,8
 402b858:	f800283a 	ret

0402b85c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 402b85c:	defff104 	addi	sp,sp,-60
 402b860:	dfc00e15 	stw	ra,56(sp)
 402b864:	df000d15 	stw	fp,52(sp)
 402b868:	df000d04 	addi	fp,sp,52
 402b86c:	e13ff915 	stw	r4,-28(fp)
 402b870:	e17ffa15 	stw	r5,-24(fp)
 402b874:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 402b878:	e0bff917 	ldw	r2,-28(fp)
 402b87c:	10800c04 	addi	r2,r2,48
 402b880:	e0bff415 	stw	r2,-48(fp)
 402b884:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 402b888:	e0bff80b 	ldhu	r2,-32(fp)
 402b88c:	e0fff884 	addi	r3,fp,-30
 402b890:	180b883a 	mov	r5,r3
 402b894:	1009883a 	mov	r4,r2
 402b898:	40262dc0 	call	40262dc <OSFlagCreate>
 402b89c:	1007883a 	mov	r3,r2
 402b8a0:	e0bff417 	ldw	r2,-48(fp)
 402b8a4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 402b8a8:	e0bff917 	ldw	r2,-28(fp)
 402b8ac:	10800a04 	addi	r2,r2,40
 402b8b0:	e0bff515 	stw	r2,-44(fp)
 402b8b4:	00800044 	movi	r2,1
 402b8b8:	e0bff78d 	sth	r2,-34(fp)
 402b8bc:	e0bff78b 	ldhu	r2,-34(fp)
 402b8c0:	1009883a 	mov	r4,r2
 402b8c4:	4028ffc0 	call	4028ffc <OSSemCreate>
 402b8c8:	1007883a 	mov	r3,r2
 402b8cc:	e0bff517 	ldw	r2,-44(fp)
 402b8d0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 402b8d4:	e0bff917 	ldw	r2,-28(fp)
 402b8d8:	10800b04 	addi	r2,r2,44
 402b8dc:	e0bff615 	stw	r2,-40(fp)
 402b8e0:	00800044 	movi	r2,1
 402b8e4:	e0bff70d 	sth	r2,-36(fp)
 402b8e8:	e0bff70b 	ldhu	r2,-36(fp)
 402b8ec:	1009883a 	mov	r4,r2
 402b8f0:	4028ffc0 	call	4028ffc <OSSemCreate>
 402b8f4:	1007883a 	mov	r3,r2
 402b8f8:	e0bff617 	ldw	r2,-40(fp)
 402b8fc:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402b900:	e0bff917 	ldw	r2,-28(fp)
 402b904:	00c00044 	movi	r3,1
 402b908:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 402b90c:	e0bff917 	ldw	r2,-28(fp)
 402b910:	10800017 	ldw	r2,0(r2)
 402b914:	10800104 	addi	r2,r2,4
 402b918:	1007883a 	mov	r3,r2
 402b91c:	e0bff917 	ldw	r2,-28(fp)
 402b920:	10800817 	ldw	r2,32(r2)
 402b924:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 402b928:	e0bffa17 	ldw	r2,-24(fp)
 402b92c:	e0fffb17 	ldw	r3,-20(fp)
 402b930:	d8000015 	stw	zero,0(sp)
 402b934:	e1fff917 	ldw	r7,-28(fp)
 402b938:	018100f4 	movhi	r6,1027
 402b93c:	31ae6904 	addi	r6,r6,-18012
 402b940:	180b883a 	mov	r5,r3
 402b944:	1009883a 	mov	r4,r2
 402b948:	402c8240 	call	402c824 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 402b94c:	e0bff917 	ldw	r2,-28(fp)
 402b950:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 402b954:	e0bff917 	ldw	r2,-28(fp)
 402b958:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402b95c:	d0e04e17 	ldw	r3,-32456(gp)
 402b960:	e1fff917 	ldw	r7,-28(fp)
 402b964:	018100f4 	movhi	r6,1027
 402b968:	31af1204 	addi	r6,r6,-17336
 402b96c:	180b883a 	mov	r5,r3
 402b970:	1009883a 	mov	r4,r2
 402b974:	402c5180 	call	402c518 <alt_alarm_start>
 402b978:	1000040e 	bge	r2,zero,402b98c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 402b97c:	e0fff917 	ldw	r3,-28(fp)
 402b980:	00a00034 	movhi	r2,32768
 402b984:	10bfffc4 	addi	r2,r2,-1
 402b988:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 402b98c:	0001883a 	nop
 402b990:	e037883a 	mov	sp,fp
 402b994:	dfc00117 	ldw	ra,4(sp)
 402b998:	df000017 	ldw	fp,0(sp)
 402b99c:	dec00204 	addi	sp,sp,8
 402b9a0:	f800283a 	ret

0402b9a4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 402b9a4:	defff204 	addi	sp,sp,-56
 402b9a8:	dfc00d15 	stw	ra,52(sp)
 402b9ac:	df000c15 	stw	fp,48(sp)
 402b9b0:	df000c04 	addi	fp,sp,48
 402b9b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 402b9b8:	e0bfff17 	ldw	r2,-4(fp)
 402b9bc:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 402b9c0:	e0bff617 	ldw	r2,-40(fp)
 402b9c4:	10800017 	ldw	r2,0(r2)
 402b9c8:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402b9cc:	e0bff717 	ldw	r2,-36(fp)
 402b9d0:	10800104 	addi	r2,r2,4
 402b9d4:	10800037 	ldwio	r2,0(r2)
 402b9d8:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 402b9dc:	e0bff817 	ldw	r2,-32(fp)
 402b9e0:	1080c00c 	andi	r2,r2,768
 402b9e4:	10009126 	beq	r2,zero,402bc2c <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 402b9e8:	e0bff817 	ldw	r2,-32(fp)
 402b9ec:	1080400c 	andi	r2,r2,256
 402b9f0:	10004726 	beq	r2,zero,402bb10 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 402b9f4:	00800074 	movhi	r2,1
 402b9f8:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402b9fc:	e0bff617 	ldw	r2,-40(fp)
 402ba00:	10800d17 	ldw	r2,52(r2)
 402ba04:	10800044 	addi	r2,r2,1
 402ba08:	1081ffcc 	andi	r2,r2,2047
 402ba0c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 402ba10:	e0bff617 	ldw	r2,-40(fp)
 402ba14:	10c00e17 	ldw	r3,56(r2)
 402ba18:	e0bff917 	ldw	r2,-28(fp)
 402ba1c:	18802726 	beq	r3,r2,402babc <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 402ba20:	e0bff717 	ldw	r2,-36(fp)
 402ba24:	10800037 	ldwio	r2,0(r2)
 402ba28:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 402ba2c:	e0bff417 	ldw	r2,-48(fp)
 402ba30:	10a0000c 	andi	r2,r2,32768
 402ba34:	10002326 	beq	r2,zero,402bac4 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 402ba38:	e0bff617 	ldw	r2,-40(fp)
 402ba3c:	10800d17 	ldw	r2,52(r2)
 402ba40:	e0fff417 	ldw	r3,-48(fp)
 402ba44:	1809883a 	mov	r4,r3
 402ba48:	e0fff617 	ldw	r3,-40(fp)
 402ba4c:	1885883a 	add	r2,r3,r2
 402ba50:	10801104 	addi	r2,r2,68
 402ba54:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402ba58:	e0bff617 	ldw	r2,-40(fp)
 402ba5c:	10800d17 	ldw	r2,52(r2)
 402ba60:	10800044 	addi	r2,r2,1
 402ba64:	10c1ffcc 	andi	r3,r2,2047
 402ba68:	e0bff617 	ldw	r2,-40(fp)
 402ba6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 402ba70:	e0bff617 	ldw	r2,-40(fp)
 402ba74:	10800c17 	ldw	r2,48(r2)
 402ba78:	e0bffb15 	stw	r2,-20(fp)
 402ba7c:	00800044 	movi	r2,1
 402ba80:	e0bffc0d 	sth	r2,-16(fp)
 402ba84:	00800044 	movi	r2,1
 402ba88:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 402ba8c:	d0a03943 	ldbu	r2,-32539(gp)
 402ba90:	10803fcc 	andi	r2,r2,255
 402ba94:	103fd926 	beq	r2,zero,402b9fc <__flash_rwdata_start+0xffffddf8>
  {
    OSFlagPost (group, flags, opt, &err);
 402ba98:	e0bffc0b 	ldhu	r2,-16(fp)
 402ba9c:	e0fffc83 	ldbu	r3,-14(fp)
 402baa0:	e13ffdc4 	addi	r4,fp,-9
 402baa4:	200f883a 	mov	r7,r4
 402baa8:	180d883a 	mov	r6,r3
 402baac:	100b883a 	mov	r5,r2
 402bab0:	e13ffb17 	ldw	r4,-20(fp)
 402bab4:	4026eb80 	call	4026eb8 <OSFlagPost>
      }
 402bab8:	003fd006 	br	402b9fc <__flash_rwdata_start+0xffffddf8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 402babc:	0001883a 	nop
 402bac0:	00000106 	br	402bac8 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 402bac4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 402bac8:	e0bff417 	ldw	r2,-48(fp)
 402bacc:	10bfffec 	andhi	r2,r2,65535
 402bad0:	10000f26 	beq	r2,zero,402bb10 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402bad4:	e0bff617 	ldw	r2,-40(fp)
 402bad8:	10c00817 	ldw	r3,32(r2)
 402badc:	00bfff84 	movi	r2,-2
 402bae0:	1886703a 	and	r3,r3,r2
 402bae4:	e0bff617 	ldw	r2,-40(fp)
 402bae8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 402baec:	e0bff717 	ldw	r2,-36(fp)
 402baf0:	10800104 	addi	r2,r2,4
 402baf4:	1007883a 	mov	r3,r2
 402baf8:	e0bff617 	ldw	r2,-40(fp)
 402bafc:	10800817 	ldw	r2,32(r2)
 402bb00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402bb04:	e0bff717 	ldw	r2,-36(fp)
 402bb08:	10800104 	addi	r2,r2,4
 402bb0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 402bb10:	e0bff817 	ldw	r2,-32(fp)
 402bb14:	1080800c 	andi	r2,r2,512
 402bb18:	103fac26 	beq	r2,zero,402b9cc <__flash_rwdata_start+0xffffddc8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 402bb1c:	e0bff817 	ldw	r2,-32(fp)
 402bb20:	1004d43a 	srli	r2,r2,16
 402bb24:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 402bb28:	00002606 	br	402bbc4 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 402bb2c:	e0bff717 	ldw	r2,-36(fp)
 402bb30:	e0fff617 	ldw	r3,-40(fp)
 402bb34:	18c01017 	ldw	r3,64(r3)
 402bb38:	e13ff617 	ldw	r4,-40(fp)
 402bb3c:	20c7883a 	add	r3,r4,r3
 402bb40:	18c21104 	addi	r3,r3,2116
 402bb44:	18c00003 	ldbu	r3,0(r3)
 402bb48:	18c03fcc 	andi	r3,r3,255
 402bb4c:	18c0201c 	xori	r3,r3,128
 402bb50:	18ffe004 	addi	r3,r3,-128
 402bb54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402bb58:	e0bff617 	ldw	r2,-40(fp)
 402bb5c:	10801017 	ldw	r2,64(r2)
 402bb60:	10800044 	addi	r2,r2,1
 402bb64:	10c1ffcc 	andi	r3,r2,2047
 402bb68:	e0bff617 	ldw	r2,-40(fp)
 402bb6c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 402bb70:	e0bff617 	ldw	r2,-40(fp)
 402bb74:	10800c17 	ldw	r2,48(r2)
 402bb78:	e0bffa15 	stw	r2,-24(fp)
 402bb7c:	00800084 	movi	r2,2
 402bb80:	e0bffd0d 	sth	r2,-12(fp)
 402bb84:	00800044 	movi	r2,1
 402bb88:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 402bb8c:	d0a03943 	ldbu	r2,-32539(gp)
 402bb90:	10803fcc 	andi	r2,r2,255
 402bb94:	10000826 	beq	r2,zero,402bbb8 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 402bb98:	e0bffd0b 	ldhu	r2,-12(fp)
 402bb9c:	e0fffd83 	ldbu	r3,-10(fp)
 402bba0:	e13ffe04 	addi	r4,fp,-8
 402bba4:	200f883a 	mov	r7,r4
 402bba8:	180d883a 	mov	r6,r3
 402bbac:	100b883a 	mov	r5,r2
 402bbb0:	e13ffa17 	ldw	r4,-24(fp)
 402bbb4:	4026eb80 	call	4026eb8 <OSFlagPost>

        space--;
 402bbb8:	e0bff517 	ldw	r2,-44(fp)
 402bbbc:	10bfffc4 	addi	r2,r2,-1
 402bbc0:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 402bbc4:	e0bff517 	ldw	r2,-44(fp)
 402bbc8:	10000526 	beq	r2,zero,402bbe0 <altera_avalon_jtag_uart_irq+0x23c>
 402bbcc:	e0bff617 	ldw	r2,-40(fp)
 402bbd0:	10c01017 	ldw	r3,64(r2)
 402bbd4:	e0bff617 	ldw	r2,-40(fp)
 402bbd8:	10800f17 	ldw	r2,60(r2)
 402bbdc:	18bfd31e 	bne	r3,r2,402bb2c <__flash_rwdata_start+0xffffdf28>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 402bbe0:	e0bff517 	ldw	r2,-44(fp)
 402bbe4:	103f7926 	beq	r2,zero,402b9cc <__flash_rwdata_start+0xffffddc8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402bbe8:	e0bff617 	ldw	r2,-40(fp)
 402bbec:	10c00817 	ldw	r3,32(r2)
 402bbf0:	00bfff44 	movi	r2,-3
 402bbf4:	1886703a 	and	r3,r3,r2
 402bbf8:	e0bff617 	ldw	r2,-40(fp)
 402bbfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402bc00:	e0bff617 	ldw	r2,-40(fp)
 402bc04:	10800017 	ldw	r2,0(r2)
 402bc08:	10800104 	addi	r2,r2,4
 402bc0c:	1007883a 	mov	r3,r2
 402bc10:	e0bff617 	ldw	r2,-40(fp)
 402bc14:	10800817 	ldw	r2,32(r2)
 402bc18:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402bc1c:	e0bff717 	ldw	r2,-36(fp)
 402bc20:	10800104 	addi	r2,r2,4
 402bc24:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 402bc28:	003f6806 	br	402b9cc <__flash_rwdata_start+0xffffddc8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 402bc2c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 402bc30:	0001883a 	nop
 402bc34:	e037883a 	mov	sp,fp
 402bc38:	dfc00117 	ldw	ra,4(sp)
 402bc3c:	df000017 	ldw	fp,0(sp)
 402bc40:	dec00204 	addi	sp,sp,8
 402bc44:	f800283a 	ret

0402bc48 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 402bc48:	defff904 	addi	sp,sp,-28
 402bc4c:	dfc00615 	stw	ra,24(sp)
 402bc50:	df000515 	stw	fp,20(sp)
 402bc54:	df000504 	addi	fp,sp,20
 402bc58:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 402bc5c:	e0bfff17 	ldw	r2,-4(fp)
 402bc60:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 402bc64:	e0bffb17 	ldw	r2,-20(fp)
 402bc68:	10800017 	ldw	r2,0(r2)
 402bc6c:	10800104 	addi	r2,r2,4
 402bc70:	10800037 	ldwio	r2,0(r2)
 402bc74:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 402bc78:	e0bffc17 	ldw	r2,-16(fp)
 402bc7c:	1081000c 	andi	r2,r2,1024
 402bc80:	10000b26 	beq	r2,zero,402bcb0 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 402bc84:	e0bffb17 	ldw	r2,-20(fp)
 402bc88:	10800017 	ldw	r2,0(r2)
 402bc8c:	10800104 	addi	r2,r2,4
 402bc90:	1007883a 	mov	r3,r2
 402bc94:	e0bffb17 	ldw	r2,-20(fp)
 402bc98:	10800817 	ldw	r2,32(r2)
 402bc9c:	10810014 	ori	r2,r2,1024
 402bca0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 402bca4:	e0bffb17 	ldw	r2,-20(fp)
 402bca8:	10000915 	stw	zero,36(r2)
 402bcac:	00002106 	br	402bd34 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 402bcb0:	e0bffb17 	ldw	r2,-20(fp)
 402bcb4:	10c00917 	ldw	r3,36(r2)
 402bcb8:	00a00034 	movhi	r2,32768
 402bcbc:	10bfff04 	addi	r2,r2,-4
 402bcc0:	10c01c36 	bltu	r2,r3,402bd34 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 402bcc4:	e0bffb17 	ldw	r2,-20(fp)
 402bcc8:	10800917 	ldw	r2,36(r2)
 402bccc:	10c00044 	addi	r3,r2,1
 402bcd0:	e0bffb17 	ldw	r2,-20(fp)
 402bcd4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 402bcd8:	e0bffb17 	ldw	r2,-20(fp)
 402bcdc:	10c00917 	ldw	r3,36(r2)
 402bce0:	e0bffb17 	ldw	r2,-20(fp)
 402bce4:	10800117 	ldw	r2,4(r2)
 402bce8:	18801236 	bltu	r3,r2,402bd34 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 402bcec:	e0bffb17 	ldw	r2,-20(fp)
 402bcf0:	10800c17 	ldw	r2,48(r2)
 402bcf4:	e0bffd15 	stw	r2,-12(fp)
 402bcf8:	00800104 	movi	r2,4
 402bcfc:	e0bffe0d 	sth	r2,-8(fp)
 402bd00:	00800044 	movi	r2,1
 402bd04:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 402bd08:	d0a03943 	ldbu	r2,-32539(gp)
 402bd0c:	10803fcc 	andi	r2,r2,255
 402bd10:	10000826 	beq	r2,zero,402bd34 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 402bd14:	e0bffe0b 	ldhu	r2,-8(fp)
 402bd18:	e0fffe83 	ldbu	r3,-6(fp)
 402bd1c:	e13ffec4 	addi	r4,fp,-5
 402bd20:	200f883a 	mov	r7,r4
 402bd24:	180d883a 	mov	r6,r3
 402bd28:	100b883a 	mov	r5,r2
 402bd2c:	e13ffd17 	ldw	r4,-12(fp)
 402bd30:	4026eb80 	call	4026eb8 <OSFlagPost>
 402bd34:	d0a04e17 	ldw	r2,-32456(gp)
    }
  }

  return alt_ticks_per_second();
}
 402bd38:	e037883a 	mov	sp,fp
 402bd3c:	dfc00117 	ldw	ra,4(sp)
 402bd40:	df000017 	ldw	fp,0(sp)
 402bd44:	dec00204 	addi	sp,sp,8
 402bd48:	f800283a 	ret

0402bd4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 402bd4c:	defffd04 	addi	sp,sp,-12
 402bd50:	df000215 	stw	fp,8(sp)
 402bd54:	df000204 	addi	fp,sp,8
 402bd58:	e13ffe15 	stw	r4,-8(fp)
 402bd5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402bd60:	00000506 	br	402bd78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 402bd64:	e0bfff17 	ldw	r2,-4(fp)
 402bd68:	1090000c 	andi	r2,r2,16384
 402bd6c:	10000226 	beq	r2,zero,402bd78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 402bd70:	00bffd44 	movi	r2,-11
 402bd74:	00000b06 	br	402bda4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402bd78:	e0bffe17 	ldw	r2,-8(fp)
 402bd7c:	10c01017 	ldw	r3,64(r2)
 402bd80:	e0bffe17 	ldw	r2,-8(fp)
 402bd84:	10800f17 	ldw	r2,60(r2)
 402bd88:	18800526 	beq	r3,r2,402bda0 <altera_avalon_jtag_uart_close+0x54>
 402bd8c:	e0bffe17 	ldw	r2,-8(fp)
 402bd90:	10c00917 	ldw	r3,36(r2)
 402bd94:	e0bffe17 	ldw	r2,-8(fp)
 402bd98:	10800117 	ldw	r2,4(r2)
 402bd9c:	18bff136 	bltu	r3,r2,402bd64 <__flash_rwdata_start+0xffffe160>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 402bda0:	0005883a 	mov	r2,zero
}
 402bda4:	e037883a 	mov	sp,fp
 402bda8:	df000017 	ldw	fp,0(sp)
 402bdac:	dec00104 	addi	sp,sp,4
 402bdb0:	f800283a 	ret

0402bdb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 402bdb4:	defffa04 	addi	sp,sp,-24
 402bdb8:	df000515 	stw	fp,20(sp)
 402bdbc:	df000504 	addi	fp,sp,20
 402bdc0:	e13ffd15 	stw	r4,-12(fp)
 402bdc4:	e17ffe15 	stw	r5,-8(fp)
 402bdc8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 402bdcc:	00bff9c4 	movi	r2,-25
 402bdd0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 402bdd4:	e0bffe17 	ldw	r2,-8(fp)
 402bdd8:	10da8060 	cmpeqi	r3,r2,27137
 402bddc:	1800031e 	bne	r3,zero,402bdec <altera_avalon_jtag_uart_ioctl+0x38>
 402bde0:	109a80a0 	cmpeqi	r2,r2,27138
 402bde4:	1000181e 	bne	r2,zero,402be48 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 402bde8:	00002906 	br	402be90 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 402bdec:	e0bffd17 	ldw	r2,-12(fp)
 402bdf0:	10c00117 	ldw	r3,4(r2)
 402bdf4:	00a00034 	movhi	r2,32768
 402bdf8:	10bfffc4 	addi	r2,r2,-1
 402bdfc:	18802126 	beq	r3,r2,402be84 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 402be00:	e0bfff17 	ldw	r2,-4(fp)
 402be04:	10800017 	ldw	r2,0(r2)
 402be08:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 402be0c:	e0bffc17 	ldw	r2,-16(fp)
 402be10:	10800090 	cmplti	r2,r2,2
 402be14:	1000061e 	bne	r2,zero,402be30 <altera_avalon_jtag_uart_ioctl+0x7c>
 402be18:	e0fffc17 	ldw	r3,-16(fp)
 402be1c:	00a00034 	movhi	r2,32768
 402be20:	10bfffc4 	addi	r2,r2,-1
 402be24:	18800226 	beq	r3,r2,402be30 <altera_avalon_jtag_uart_ioctl+0x7c>
 402be28:	e0bffc17 	ldw	r2,-16(fp)
 402be2c:	00000206 	br	402be38 <altera_avalon_jtag_uart_ioctl+0x84>
 402be30:	00a00034 	movhi	r2,32768
 402be34:	10bfff84 	addi	r2,r2,-2
 402be38:	e0fffd17 	ldw	r3,-12(fp)
 402be3c:	18800115 	stw	r2,4(r3)
      rc = 0;
 402be40:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402be44:	00000f06 	br	402be84 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 402be48:	e0bffd17 	ldw	r2,-12(fp)
 402be4c:	10c00117 	ldw	r3,4(r2)
 402be50:	00a00034 	movhi	r2,32768
 402be54:	10bfffc4 	addi	r2,r2,-1
 402be58:	18800c26 	beq	r3,r2,402be8c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 402be5c:	e0bffd17 	ldw	r2,-12(fp)
 402be60:	10c00917 	ldw	r3,36(r2)
 402be64:	e0bffd17 	ldw	r2,-12(fp)
 402be68:	10800117 	ldw	r2,4(r2)
 402be6c:	1885803a 	cmpltu	r2,r3,r2
 402be70:	10c03fcc 	andi	r3,r2,255
 402be74:	e0bfff17 	ldw	r2,-4(fp)
 402be78:	10c00015 	stw	r3,0(r2)
      rc = 0;
 402be7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402be80:	00000206 	br	402be8c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 402be84:	0001883a 	nop
 402be88:	00000106 	br	402be90 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 402be8c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 402be90:	e0bffb17 	ldw	r2,-20(fp)
}
 402be94:	e037883a 	mov	sp,fp
 402be98:	df000017 	ldw	fp,0(sp)
 402be9c:	dec00104 	addi	sp,sp,4
 402bea0:	f800283a 	ret

0402bea4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 402bea4:	deffed04 	addi	sp,sp,-76
 402bea8:	dfc01215 	stw	ra,72(sp)
 402beac:	df001115 	stw	fp,68(sp)
 402beb0:	df001104 	addi	fp,sp,68
 402beb4:	e13ffc15 	stw	r4,-16(fp)
 402beb8:	e17ffd15 	stw	r5,-12(fp)
 402bebc:	e1bffe15 	stw	r6,-8(fp)
 402bec0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 402bec4:	e0bffd17 	ldw	r2,-12(fp)
 402bec8:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 402becc:	e0bffc17 	ldw	r2,-16(fp)
 402bed0:	10800a17 	ldw	r2,40(r2)
 402bed4:	e0bff815 	stw	r2,-32(fp)
 402bed8:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 402bedc:	e0bff90b 	ldhu	r2,-28(fp)
 402bee0:	e0fffb04 	addi	r3,fp,-20
 402bee4:	180d883a 	mov	r6,r3
 402bee8:	100b883a 	mov	r5,r2
 402beec:	e13ff817 	ldw	r4,-32(fp)
 402bef0:	40293140 	call	4029314 <OSSemPend>

  while (space > 0)
 402bef4:	00006106 	br	402c07c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 402bef8:	e0bffc17 	ldw	r2,-16(fp)
 402befc:	10800d17 	ldw	r2,52(r2)
 402bf00:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 402bf04:	e0bffc17 	ldw	r2,-16(fp)
 402bf08:	10800e17 	ldw	r2,56(r2)
 402bf0c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 402bf10:	e0fff317 	ldw	r3,-52(fp)
 402bf14:	e0bff417 	ldw	r2,-48(fp)
 402bf18:	18800536 	bltu	r3,r2,402bf30 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 402bf1c:	e0fff317 	ldw	r3,-52(fp)
 402bf20:	e0bff417 	ldw	r2,-48(fp)
 402bf24:	1885c83a 	sub	r2,r3,r2
 402bf28:	e0bff115 	stw	r2,-60(fp)
 402bf2c:	00000406 	br	402bf40 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 402bf30:	00c20004 	movi	r3,2048
 402bf34:	e0bff417 	ldw	r2,-48(fp)
 402bf38:	1885c83a 	sub	r2,r3,r2
 402bf3c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 402bf40:	e0bff117 	ldw	r2,-60(fp)
 402bf44:	10001e26 	beq	r2,zero,402bfc0 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 402bf48:	e0fffe17 	ldw	r3,-8(fp)
 402bf4c:	e0bff117 	ldw	r2,-60(fp)
 402bf50:	1880022e 	bgeu	r3,r2,402bf5c <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 402bf54:	e0bffe17 	ldw	r2,-8(fp)
 402bf58:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 402bf5c:	e0bffc17 	ldw	r2,-16(fp)
 402bf60:	10c01104 	addi	r3,r2,68
 402bf64:	e0bff417 	ldw	r2,-48(fp)
 402bf68:	1885883a 	add	r2,r3,r2
 402bf6c:	e1bff117 	ldw	r6,-60(fp)
 402bf70:	100b883a 	mov	r5,r2
 402bf74:	e13ff017 	ldw	r4,-64(fp)
 402bf78:	40217e40 	call	40217e4 <memcpy>
      ptr   += n;
 402bf7c:	e0fff017 	ldw	r3,-64(fp)
 402bf80:	e0bff117 	ldw	r2,-60(fp)
 402bf84:	1885883a 	add	r2,r3,r2
 402bf88:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 402bf8c:	e0fffe17 	ldw	r3,-8(fp)
 402bf90:	e0bff117 	ldw	r2,-60(fp)
 402bf94:	1885c83a 	sub	r2,r3,r2
 402bf98:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402bf9c:	e0fff417 	ldw	r3,-48(fp)
 402bfa0:	e0bff117 	ldw	r2,-60(fp)
 402bfa4:	1885883a 	add	r2,r3,r2
 402bfa8:	10c1ffcc 	andi	r3,r2,2047
 402bfac:	e0bffc17 	ldw	r2,-16(fp)
 402bfb0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 402bfb4:	e0bffe17 	ldw	r2,-8(fp)
 402bfb8:	00bfcf16 	blt	zero,r2,402bef8 <__flash_rwdata_start+0xffffe2f4>
 402bfbc:	00000106 	br	402bfc4 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 402bfc0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 402bfc4:	e0fff017 	ldw	r3,-64(fp)
 402bfc8:	e0bffd17 	ldw	r2,-12(fp)
 402bfcc:	18802e1e 	bne	r3,r2,402c088 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 402bfd0:	e0bfff17 	ldw	r2,-4(fp)
 402bfd4:	1090000c 	andi	r2,r2,16384
 402bfd8:	10002d1e 	bne	r2,zero,402c090 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 402bfdc:	d0a03943 	ldbu	r2,-32539(gp)
 402bfe0:	10803fcc 	andi	r2,r2,255
 402bfe4:	10800058 	cmpnei	r2,r2,1
 402bfe8:	1000161e 	bne	r2,zero,402c044 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 402bfec:	e0bffc17 	ldw	r2,-16(fp)
 402bff0:	10800c17 	ldw	r2,48(r2)
 402bff4:	e0bff215 	stw	r2,-56(fp)
 402bff8:	00800144 	movi	r2,5
 402bffc:	e0bff98d 	sth	r2,-26(fp)
 402c000:	00bfe0c4 	movi	r2,-125
 402c004:	e0bffa05 	stb	r2,-24(fp)
 402c008:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 402c00c:	d0a03943 	ldbu	r2,-32539(gp)
 402c010:	10803fcc 	andi	r2,r2,255
 402c014:	10001526 	beq	r2,zero,402c06c <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 402c018:	e0fff98b 	ldhu	r3,-26(fp)
 402c01c:	e13ffa03 	ldbu	r4,-24(fp)
 402c020:	e17ffa8b 	ldhu	r5,-22(fp)
 402c024:	e0bffb44 	addi	r2,fp,-19
 402c028:	d8800015 	stw	r2,0(sp)
 402c02c:	280f883a 	mov	r7,r5
 402c030:	200d883a 	mov	r6,r4
 402c034:	180b883a 	mov	r5,r3
 402c038:	e13ff217 	ldw	r4,-56(fp)
 402c03c:	40268a00 	call	40268a0 <OSFlagPend>
 402c040:	00000a06 	br	402c06c <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 402c044:	0001883a 	nop
 402c048:	e0bffc17 	ldw	r2,-16(fp)
 402c04c:	10c00d17 	ldw	r3,52(r2)
 402c050:	e0bff317 	ldw	r2,-52(fp)
 402c054:	1880051e 	bne	r3,r2,402c06c <altera_avalon_jtag_uart_read+0x1c8>
 402c058:	e0bffc17 	ldw	r2,-16(fp)
 402c05c:	10c00917 	ldw	r3,36(r2)
 402c060:	e0bffc17 	ldw	r2,-16(fp)
 402c064:	10800117 	ldw	r2,4(r2)
 402c068:	18bff736 	bltu	r3,r2,402c048 <__flash_rwdata_start+0xffffe444>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 402c06c:	e0bffc17 	ldw	r2,-16(fp)
 402c070:	10c00d17 	ldw	r3,52(r2)
 402c074:	e0bff317 	ldw	r2,-52(fp)
 402c078:	18800726 	beq	r3,r2,402c098 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402c07c:	e0bffe17 	ldw	r2,-8(fp)
 402c080:	00bf9d16 	blt	zero,r2,402bef8 <__flash_rwdata_start+0xffffe2f4>
 402c084:	00000506 	br	402c09c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 402c088:	0001883a 	nop
 402c08c:	00000306 	br	402c09c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 402c090:	0001883a 	nop
 402c094:	00000106 	br	402c09c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 402c098:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 402c09c:	e0bffc17 	ldw	r2,-16(fp)
 402c0a0:	10800a17 	ldw	r2,40(r2)
 402c0a4:	1009883a 	mov	r4,r2
 402c0a8:	402968c0 	call	402968c <OSSemPost>

  if (ptr != buffer)
 402c0ac:	e0fff017 	ldw	r3,-64(fp)
 402c0b0:	e0bffd17 	ldw	r2,-12(fp)
 402c0b4:	18801826 	beq	r3,r2,402c118 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402c0b8:	0005303a 	rdctl	r2,status
 402c0bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402c0c0:	e0fff717 	ldw	r3,-36(fp)
 402c0c4:	00bfff84 	movi	r2,-2
 402c0c8:	1884703a 	and	r2,r3,r2
 402c0cc:	1001703a 	wrctl	status,r2
  
  return context;
 402c0d0:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 402c0d4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402c0d8:	e0bffc17 	ldw	r2,-16(fp)
 402c0dc:	10800817 	ldw	r2,32(r2)
 402c0e0:	10c00054 	ori	r3,r2,1
 402c0e4:	e0bffc17 	ldw	r2,-16(fp)
 402c0e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402c0ec:	e0bffc17 	ldw	r2,-16(fp)
 402c0f0:	10800017 	ldw	r2,0(r2)
 402c0f4:	10800104 	addi	r2,r2,4
 402c0f8:	1007883a 	mov	r3,r2
 402c0fc:	e0bffc17 	ldw	r2,-16(fp)
 402c100:	10800817 	ldw	r2,32(r2)
 402c104:	18800035 	stwio	r2,0(r3)
 402c108:	e0bff617 	ldw	r2,-40(fp)
 402c10c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402c110:	e0bff517 	ldw	r2,-44(fp)
 402c114:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 402c118:	e0fff017 	ldw	r3,-64(fp)
 402c11c:	e0bffd17 	ldw	r2,-12(fp)
 402c120:	18800426 	beq	r3,r2,402c134 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 402c124:	e0fff017 	ldw	r3,-64(fp)
 402c128:	e0bffd17 	ldw	r2,-12(fp)
 402c12c:	1885c83a 	sub	r2,r3,r2
 402c130:	00000606 	br	402c14c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 402c134:	e0bfff17 	ldw	r2,-4(fp)
 402c138:	1090000c 	andi	r2,r2,16384
 402c13c:	10000226 	beq	r2,zero,402c148 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 402c140:	00bffd44 	movi	r2,-11
 402c144:	00000106 	br	402c14c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 402c148:	00bffec4 	movi	r2,-5
}
 402c14c:	e037883a 	mov	sp,fp
 402c150:	dfc00117 	ldw	ra,4(sp)
 402c154:	df000017 	ldw	fp,0(sp)
 402c158:	dec00204 	addi	sp,sp,8
 402c15c:	f800283a 	ret

0402c160 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 402c160:	deffed04 	addi	sp,sp,-76
 402c164:	dfc01215 	stw	ra,72(sp)
 402c168:	df001115 	stw	fp,68(sp)
 402c16c:	df001104 	addi	fp,sp,68
 402c170:	e13ffc15 	stw	r4,-16(fp)
 402c174:	e17ffd15 	stw	r5,-12(fp)
 402c178:	e1bffe15 	stw	r6,-8(fp)
 402c17c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 402c180:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 402c184:	e0bffd17 	ldw	r2,-12(fp)
 402c188:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 402c18c:	e0bffc17 	ldw	r2,-16(fp)
 402c190:	10800b17 	ldw	r2,44(r2)
 402c194:	e0bff815 	stw	r2,-32(fp)
 402c198:	e03ff90d 	sth	zero,-28(fp)
 402c19c:	e0bff90b 	ldhu	r2,-28(fp)
 402c1a0:	e0fffb44 	addi	r3,fp,-19
 402c1a4:	180d883a 	mov	r6,r3
 402c1a8:	100b883a 	mov	r5,r2
 402c1ac:	e13ff817 	ldw	r4,-32(fp)
 402c1b0:	40293140 	call	4029314 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402c1b4:	00003706 	br	402c294 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 402c1b8:	e0bffc17 	ldw	r2,-16(fp)
 402c1bc:	10800f17 	ldw	r2,60(r2)
 402c1c0:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 402c1c4:	e0bffc17 	ldw	r2,-16(fp)
 402c1c8:	10801017 	ldw	r2,64(r2)
 402c1cc:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 402c1d0:	e0fff417 	ldw	r3,-48(fp)
 402c1d4:	e0bff017 	ldw	r2,-64(fp)
 402c1d8:	1880062e 	bgeu	r3,r2,402c1f4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 402c1dc:	e0fff017 	ldw	r3,-64(fp)
 402c1e0:	e0bff417 	ldw	r2,-48(fp)
 402c1e4:	1885c83a 	sub	r2,r3,r2
 402c1e8:	10bfffc4 	addi	r2,r2,-1
 402c1ec:	e0bff115 	stw	r2,-60(fp)
 402c1f0:	00000b06 	br	402c220 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 402c1f4:	e0bff017 	ldw	r2,-64(fp)
 402c1f8:	10000526 	beq	r2,zero,402c210 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 402c1fc:	00c20004 	movi	r3,2048
 402c200:	e0bff417 	ldw	r2,-48(fp)
 402c204:	1885c83a 	sub	r2,r3,r2
 402c208:	e0bff115 	stw	r2,-60(fp)
 402c20c:	00000406 	br	402c220 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 402c210:	00c1ffc4 	movi	r3,2047
 402c214:	e0bff417 	ldw	r2,-48(fp)
 402c218:	1885c83a 	sub	r2,r3,r2
 402c21c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 402c220:	e0bff117 	ldw	r2,-60(fp)
 402c224:	10001e26 	beq	r2,zero,402c2a0 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 402c228:	e0fffe17 	ldw	r3,-8(fp)
 402c22c:	e0bff117 	ldw	r2,-60(fp)
 402c230:	1880022e 	bgeu	r3,r2,402c23c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 402c234:	e0bffe17 	ldw	r2,-8(fp)
 402c238:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 402c23c:	e0bffc17 	ldw	r2,-16(fp)
 402c240:	10c21104 	addi	r3,r2,2116
 402c244:	e0bff417 	ldw	r2,-48(fp)
 402c248:	1885883a 	add	r2,r3,r2
 402c24c:	e1bff117 	ldw	r6,-60(fp)
 402c250:	e17ffd17 	ldw	r5,-12(fp)
 402c254:	1009883a 	mov	r4,r2
 402c258:	40217e40 	call	40217e4 <memcpy>
      ptr   += n;
 402c25c:	e0fffd17 	ldw	r3,-12(fp)
 402c260:	e0bff117 	ldw	r2,-60(fp)
 402c264:	1885883a 	add	r2,r3,r2
 402c268:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 402c26c:	e0fffe17 	ldw	r3,-8(fp)
 402c270:	e0bff117 	ldw	r2,-60(fp)
 402c274:	1885c83a 	sub	r2,r3,r2
 402c278:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402c27c:	e0fff417 	ldw	r3,-48(fp)
 402c280:	e0bff117 	ldw	r2,-60(fp)
 402c284:	1885883a 	add	r2,r3,r2
 402c288:	10c1ffcc 	andi	r3,r2,2047
 402c28c:	e0bffc17 	ldw	r2,-16(fp)
 402c290:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402c294:	e0bffe17 	ldw	r2,-8(fp)
 402c298:	00bfc716 	blt	zero,r2,402c1b8 <__flash_rwdata_start+0xffffe5b4>
 402c29c:	00000106 	br	402c2a4 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 402c2a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402c2a4:	0005303a 	rdctl	r2,status
 402c2a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402c2ac:	e0fff717 	ldw	r3,-36(fp)
 402c2b0:	00bfff84 	movi	r2,-2
 402c2b4:	1884703a 	and	r2,r3,r2
 402c2b8:	1001703a 	wrctl	status,r2
  
  return context;
 402c2bc:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 402c2c0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402c2c4:	e0bffc17 	ldw	r2,-16(fp)
 402c2c8:	10800817 	ldw	r2,32(r2)
 402c2cc:	10c00094 	ori	r3,r2,2
 402c2d0:	e0bffc17 	ldw	r2,-16(fp)
 402c2d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402c2d8:	e0bffc17 	ldw	r2,-16(fp)
 402c2dc:	10800017 	ldw	r2,0(r2)
 402c2e0:	10800104 	addi	r2,r2,4
 402c2e4:	1007883a 	mov	r3,r2
 402c2e8:	e0bffc17 	ldw	r2,-16(fp)
 402c2ec:	10800817 	ldw	r2,32(r2)
 402c2f0:	18800035 	stwio	r2,0(r3)
 402c2f4:	e0bff617 	ldw	r2,-40(fp)
 402c2f8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402c2fc:	e0bff317 	ldw	r2,-52(fp)
 402c300:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 402c304:	e0bffe17 	ldw	r2,-8(fp)
 402c308:	00802a0e 	bge	zero,r2,402c3b4 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 402c30c:	e0bfff17 	ldw	r2,-4(fp)
 402c310:	1090000c 	andi	r2,r2,16384
 402c314:	10002a1e 	bne	r2,zero,402c3c0 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 402c318:	d0a03943 	ldbu	r2,-32539(gp)
 402c31c:	10803fcc 	andi	r2,r2,255
 402c320:	10800058 	cmpnei	r2,r2,1
 402c324:	1000161e 	bne	r2,zero,402c380 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 402c328:	e0bffc17 	ldw	r2,-16(fp)
 402c32c:	10800c17 	ldw	r2,48(r2)
 402c330:	e0bff515 	stw	r2,-44(fp)
 402c334:	00800184 	movi	r2,6
 402c338:	e0bff98d 	sth	r2,-26(fp)
 402c33c:	00bfe0c4 	movi	r2,-125
 402c340:	e0bffa05 	stb	r2,-24(fp)
 402c344:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 402c348:	d0a03943 	ldbu	r2,-32539(gp)
 402c34c:	10803fcc 	andi	r2,r2,255
 402c350:	10001526 	beq	r2,zero,402c3a8 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 402c354:	e0fff98b 	ldhu	r3,-26(fp)
 402c358:	e13ffa03 	ldbu	r4,-24(fp)
 402c35c:	e17ffa8b 	ldhu	r5,-22(fp)
 402c360:	e0bffb04 	addi	r2,fp,-20
 402c364:	d8800015 	stw	r2,0(sp)
 402c368:	280f883a 	mov	r7,r5
 402c36c:	200d883a 	mov	r6,r4
 402c370:	180b883a 	mov	r5,r3
 402c374:	e13ff517 	ldw	r4,-44(fp)
 402c378:	40268a00 	call	40268a0 <OSFlagPend>
 402c37c:	00000a06 	br	402c3a8 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 402c380:	0001883a 	nop
 402c384:	e0bffc17 	ldw	r2,-16(fp)
 402c388:	10c01017 	ldw	r3,64(r2)
 402c38c:	e0bff017 	ldw	r2,-64(fp)
 402c390:	1880051e 	bne	r3,r2,402c3a8 <altera_avalon_jtag_uart_write+0x248>
 402c394:	e0bffc17 	ldw	r2,-16(fp)
 402c398:	10c00917 	ldw	r3,36(r2)
 402c39c:	e0bffc17 	ldw	r2,-16(fp)
 402c3a0:	10800117 	ldw	r2,4(r2)
 402c3a4:	18bff736 	bltu	r3,r2,402c384 <__flash_rwdata_start+0xffffe780>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 402c3a8:	e0bffc17 	ldw	r2,-16(fp)
 402c3ac:	10800917 	ldw	r2,36(r2)
 402c3b0:	1000051e 	bne	r2,zero,402c3c8 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 402c3b4:	e0bffe17 	ldw	r2,-8(fp)
 402c3b8:	00bfb616 	blt	zero,r2,402c294 <__flash_rwdata_start+0xffffe690>
 402c3bc:	00000306 	br	402c3cc <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 402c3c0:	0001883a 	nop
 402c3c4:	00000106 	br	402c3cc <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 402c3c8:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 402c3cc:	e0bffc17 	ldw	r2,-16(fp)
 402c3d0:	10800b17 	ldw	r2,44(r2)
 402c3d4:	1009883a 	mov	r4,r2
 402c3d8:	402968c0 	call	402968c <OSSemPost>

  if (ptr != start)
 402c3dc:	e0fffd17 	ldw	r3,-12(fp)
 402c3e0:	e0bff217 	ldw	r2,-56(fp)
 402c3e4:	18800426 	beq	r3,r2,402c3f8 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 402c3e8:	e0fffd17 	ldw	r3,-12(fp)
 402c3ec:	e0bff217 	ldw	r2,-56(fp)
 402c3f0:	1885c83a 	sub	r2,r3,r2
 402c3f4:	00000606 	br	402c410 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 402c3f8:	e0bfff17 	ldw	r2,-4(fp)
 402c3fc:	1090000c 	andi	r2,r2,16384
 402c400:	10000226 	beq	r2,zero,402c40c <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 402c404:	00bffd44 	movi	r2,-11
 402c408:	00000106 	br	402c410 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 402c40c:	00bffec4 	movi	r2,-5
}
 402c410:	e037883a 	mov	sp,fp
 402c414:	dfc00117 	ldw	ra,4(sp)
 402c418:	df000017 	ldw	fp,0(sp)
 402c41c:	dec00204 	addi	sp,sp,8
 402c420:	f800283a 	ret

0402c424 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 402c424:	defffa04 	addi	sp,sp,-24
 402c428:	dfc00515 	stw	ra,20(sp)
 402c42c:	df000415 	stw	fp,16(sp)
 402c430:	df000404 	addi	fp,sp,16
 402c434:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 402c438:	0007883a 	mov	r3,zero
 402c43c:	e0bfff17 	ldw	r2,-4(fp)
 402c440:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 402c444:	e0bfff17 	ldw	r2,-4(fp)
 402c448:	10800104 	addi	r2,r2,4
 402c44c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402c450:	0005303a 	rdctl	r2,status
 402c454:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402c458:	e0fffd17 	ldw	r3,-12(fp)
 402c45c:	00bfff84 	movi	r2,-2
 402c460:	1884703a 	and	r2,r3,r2
 402c464:	1001703a 	wrctl	status,r2
  
  return context;
 402c468:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 402c46c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 402c470:	402cf440 	call	402cf44 <alt_tick>
 402c474:	e0bffc17 	ldw	r2,-16(fp)
 402c478:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402c47c:	e0bffe17 	ldw	r2,-8(fp)
 402c480:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 402c484:	0001883a 	nop
 402c488:	e037883a 	mov	sp,fp
 402c48c:	dfc00117 	ldw	ra,4(sp)
 402c490:	df000017 	ldw	fp,0(sp)
 402c494:	dec00204 	addi	sp,sp,8
 402c498:	f800283a 	ret

0402c49c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 402c49c:	defff804 	addi	sp,sp,-32
 402c4a0:	dfc00715 	stw	ra,28(sp)
 402c4a4:	df000615 	stw	fp,24(sp)
 402c4a8:	df000604 	addi	fp,sp,24
 402c4ac:	e13ffc15 	stw	r4,-16(fp)
 402c4b0:	e17ffd15 	stw	r5,-12(fp)
 402c4b4:	e1bffe15 	stw	r6,-8(fp)
 402c4b8:	e1ffff15 	stw	r7,-4(fp)
 402c4bc:	e0bfff17 	ldw	r2,-4(fp)
 402c4c0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 402c4c4:	d0a04e17 	ldw	r2,-32456(gp)
 402c4c8:	1000021e 	bne	r2,zero,402c4d4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 402c4cc:	e0bffb17 	ldw	r2,-20(fp)
 402c4d0:	d0a04e15 	stw	r2,-32456(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 402c4d4:	e0bffc17 	ldw	r2,-16(fp)
 402c4d8:	10800104 	addi	r2,r2,4
 402c4dc:	00c001c4 	movi	r3,7
 402c4e0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 402c4e4:	d8000015 	stw	zero,0(sp)
 402c4e8:	e1fffc17 	ldw	r7,-16(fp)
 402c4ec:	018100f4 	movhi	r6,1027
 402c4f0:	31b10904 	addi	r6,r6,-15324
 402c4f4:	e17ffe17 	ldw	r5,-8(fp)
 402c4f8:	e13ffd17 	ldw	r4,-12(fp)
 402c4fc:	402c8240 	call	402c824 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 402c500:	0001883a 	nop
 402c504:	e037883a 	mov	sp,fp
 402c508:	dfc00117 	ldw	ra,4(sp)
 402c50c:	df000017 	ldw	fp,0(sp)
 402c510:	dec00204 	addi	sp,sp,8
 402c514:	f800283a 	ret

0402c518 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 402c518:	defff504 	addi	sp,sp,-44
 402c51c:	df000a15 	stw	fp,40(sp)
 402c520:	df000a04 	addi	fp,sp,40
 402c524:	e13ffc15 	stw	r4,-16(fp)
 402c528:	e17ffd15 	stw	r5,-12(fp)
 402c52c:	e1bffe15 	stw	r6,-8(fp)
 402c530:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 402c534:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402c538:	d0a04e17 	ldw	r2,-32456(gp)
  
  if (alt_ticks_per_second ())
 402c53c:	10003c26 	beq	r2,zero,402c630 <alt_alarm_start+0x118>
  {
    if (alarm)
 402c540:	e0bffc17 	ldw	r2,-16(fp)
 402c544:	10003826 	beq	r2,zero,402c628 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 402c548:	e0bffc17 	ldw	r2,-16(fp)
 402c54c:	e0fffe17 	ldw	r3,-8(fp)
 402c550:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 402c554:	e0bffc17 	ldw	r2,-16(fp)
 402c558:	e0ffff17 	ldw	r3,-4(fp)
 402c55c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402c560:	0005303a 	rdctl	r2,status
 402c564:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402c568:	e0fff917 	ldw	r3,-28(fp)
 402c56c:	00bfff84 	movi	r2,-2
 402c570:	1884703a 	and	r2,r3,r2
 402c574:	1001703a 	wrctl	status,r2
  
  return context;
 402c578:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 402c57c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 402c580:	d0a04f17 	ldw	r2,-32452(gp)
      
      current_nticks = alt_nticks();
 402c584:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 402c588:	e0fffd17 	ldw	r3,-12(fp)
 402c58c:	e0bff617 	ldw	r2,-40(fp)
 402c590:	1885883a 	add	r2,r3,r2
 402c594:	10c00044 	addi	r3,r2,1
 402c598:	e0bffc17 	ldw	r2,-16(fp)
 402c59c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 402c5a0:	e0bffc17 	ldw	r2,-16(fp)
 402c5a4:	10c00217 	ldw	r3,8(r2)
 402c5a8:	e0bff617 	ldw	r2,-40(fp)
 402c5ac:	1880042e 	bgeu	r3,r2,402c5c0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 402c5b0:	e0bffc17 	ldw	r2,-16(fp)
 402c5b4:	00c00044 	movi	r3,1
 402c5b8:	10c00405 	stb	r3,16(r2)
 402c5bc:	00000206 	br	402c5c8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 402c5c0:	e0bffc17 	ldw	r2,-16(fp)
 402c5c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 402c5c8:	e0bffc17 	ldw	r2,-16(fp)
 402c5cc:	d0e02b04 	addi	r3,gp,-32596
 402c5d0:	e0fffa15 	stw	r3,-24(fp)
 402c5d4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402c5d8:	e0bffb17 	ldw	r2,-20(fp)
 402c5dc:	e0fffa17 	ldw	r3,-24(fp)
 402c5e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402c5e4:	e0bffa17 	ldw	r2,-24(fp)
 402c5e8:	10c00017 	ldw	r3,0(r2)
 402c5ec:	e0bffb17 	ldw	r2,-20(fp)
 402c5f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402c5f4:	e0bffa17 	ldw	r2,-24(fp)
 402c5f8:	10800017 	ldw	r2,0(r2)
 402c5fc:	e0fffb17 	ldw	r3,-20(fp)
 402c600:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402c604:	e0bffa17 	ldw	r2,-24(fp)
 402c608:	e0fffb17 	ldw	r3,-20(fp)
 402c60c:	10c00015 	stw	r3,0(r2)
 402c610:	e0bff817 	ldw	r2,-32(fp)
 402c614:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402c618:	e0bff717 	ldw	r2,-36(fp)
 402c61c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 402c620:	0005883a 	mov	r2,zero
 402c624:	00000306 	br	402c634 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 402c628:	00bffa84 	movi	r2,-22
 402c62c:	00000106 	br	402c634 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 402c630:	00bfde84 	movi	r2,-134
  }
}
 402c634:	e037883a 	mov	sp,fp
 402c638:	df000017 	ldw	fp,0(sp)
 402c63c:	dec00104 	addi	sp,sp,4
 402c640:	f800283a 	ret

0402c644 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 402c644:	deffff04 	addi	sp,sp,-4
 402c648:	df000015 	stw	fp,0(sp)
 402c64c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 402c650:	0001883a 	nop
 402c654:	e037883a 	mov	sp,fp
 402c658:	df000017 	ldw	fp,0(sp)
 402c65c:	dec00104 	addi	sp,sp,4
 402c660:	f800283a 	ret

0402c664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402c664:	defffe04 	addi	sp,sp,-8
 402c668:	dfc00115 	stw	ra,4(sp)
 402c66c:	df000015 	stw	fp,0(sp)
 402c670:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402c674:	d0a00917 	ldw	r2,-32732(gp)
 402c678:	10000326 	beq	r2,zero,402c688 <alt_get_errno+0x24>
 402c67c:	d0a00917 	ldw	r2,-32732(gp)
 402c680:	103ee83a 	callr	r2
 402c684:	00000106 	br	402c68c <alt_get_errno+0x28>
 402c688:	d0a03004 	addi	r2,gp,-32576
}
 402c68c:	e037883a 	mov	sp,fp
 402c690:	dfc00117 	ldw	ra,4(sp)
 402c694:	df000017 	ldw	fp,0(sp)
 402c698:	dec00204 	addi	sp,sp,8
 402c69c:	f800283a 	ret

0402c6a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 402c6a0:	defffa04 	addi	sp,sp,-24
 402c6a4:	dfc00515 	stw	ra,20(sp)
 402c6a8:	df000415 	stw	fp,16(sp)
 402c6ac:	df000404 	addi	fp,sp,16
 402c6b0:	e13ffe15 	stw	r4,-8(fp)
 402c6b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 402c6b8:	e0bffe17 	ldw	r2,-8(fp)
 402c6bc:	10000326 	beq	r2,zero,402c6cc <alt_dev_llist_insert+0x2c>
 402c6c0:	e0bffe17 	ldw	r2,-8(fp)
 402c6c4:	10800217 	ldw	r2,8(r2)
 402c6c8:	1000061e 	bne	r2,zero,402c6e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 402c6cc:	402c6640 	call	402c664 <alt_get_errno>
 402c6d0:	1007883a 	mov	r3,r2
 402c6d4:	00800584 	movi	r2,22
 402c6d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 402c6dc:	00bffa84 	movi	r2,-22
 402c6e0:	00001306 	br	402c730 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 402c6e4:	e0bffe17 	ldw	r2,-8(fp)
 402c6e8:	e0ffff17 	ldw	r3,-4(fp)
 402c6ec:	e0fffc15 	stw	r3,-16(fp)
 402c6f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402c6f4:	e0bffd17 	ldw	r2,-12(fp)
 402c6f8:	e0fffc17 	ldw	r3,-16(fp)
 402c6fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402c700:	e0bffc17 	ldw	r2,-16(fp)
 402c704:	10c00017 	ldw	r3,0(r2)
 402c708:	e0bffd17 	ldw	r2,-12(fp)
 402c70c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402c710:	e0bffc17 	ldw	r2,-16(fp)
 402c714:	10800017 	ldw	r2,0(r2)
 402c718:	e0fffd17 	ldw	r3,-12(fp)
 402c71c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402c720:	e0bffc17 	ldw	r2,-16(fp)
 402c724:	e0fffd17 	ldw	r3,-12(fp)
 402c728:	10c00015 	stw	r3,0(r2)

  return 0;  
 402c72c:	0005883a 	mov	r2,zero
}
 402c730:	e037883a 	mov	sp,fp
 402c734:	dfc00117 	ldw	ra,4(sp)
 402c738:	df000017 	ldw	fp,0(sp)
 402c73c:	dec00204 	addi	sp,sp,8
 402c740:	f800283a 	ret

0402c744 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 402c744:	defffd04 	addi	sp,sp,-12
 402c748:	dfc00215 	stw	ra,8(sp)
 402c74c:	df000115 	stw	fp,4(sp)
 402c750:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402c754:	008100f4 	movhi	r2,1027
 402c758:	10b6a004 	addi	r2,r2,-9600
 402c75c:	e0bfff15 	stw	r2,-4(fp)
 402c760:	00000606 	br	402c77c <_do_ctors+0x38>
        (*ctor) (); 
 402c764:	e0bfff17 	ldw	r2,-4(fp)
 402c768:	10800017 	ldw	r2,0(r2)
 402c76c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402c770:	e0bfff17 	ldw	r2,-4(fp)
 402c774:	10bfff04 	addi	r2,r2,-4
 402c778:	e0bfff15 	stw	r2,-4(fp)
 402c77c:	e0ffff17 	ldw	r3,-4(fp)
 402c780:	008100f4 	movhi	r2,1027
 402c784:	10b6a104 	addi	r2,r2,-9596
 402c788:	18bff62e 	bgeu	r3,r2,402c764 <__flash_rwdata_start+0xffffeb60>
        (*ctor) (); 
}
 402c78c:	0001883a 	nop
 402c790:	e037883a 	mov	sp,fp
 402c794:	dfc00117 	ldw	ra,4(sp)
 402c798:	df000017 	ldw	fp,0(sp)
 402c79c:	dec00204 	addi	sp,sp,8
 402c7a0:	f800283a 	ret

0402c7a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 402c7a4:	defffd04 	addi	sp,sp,-12
 402c7a8:	dfc00215 	stw	ra,8(sp)
 402c7ac:	df000115 	stw	fp,4(sp)
 402c7b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402c7b4:	008100f4 	movhi	r2,1027
 402c7b8:	10b6a004 	addi	r2,r2,-9600
 402c7bc:	e0bfff15 	stw	r2,-4(fp)
 402c7c0:	00000606 	br	402c7dc <_do_dtors+0x38>
        (*dtor) (); 
 402c7c4:	e0bfff17 	ldw	r2,-4(fp)
 402c7c8:	10800017 	ldw	r2,0(r2)
 402c7cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402c7d0:	e0bfff17 	ldw	r2,-4(fp)
 402c7d4:	10bfff04 	addi	r2,r2,-4
 402c7d8:	e0bfff15 	stw	r2,-4(fp)
 402c7dc:	e0ffff17 	ldw	r3,-4(fp)
 402c7e0:	008100f4 	movhi	r2,1027
 402c7e4:	10b6a104 	addi	r2,r2,-9596
 402c7e8:	18bff62e 	bgeu	r3,r2,402c7c4 <__flash_rwdata_start+0xffffebc0>
        (*dtor) (); 
}
 402c7ec:	0001883a 	nop
 402c7f0:	e037883a 	mov	sp,fp
 402c7f4:	dfc00117 	ldw	ra,4(sp)
 402c7f8:	df000017 	ldw	fp,0(sp)
 402c7fc:	dec00204 	addi	sp,sp,8
 402c800:	f800283a 	ret

0402c804 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 402c804:	deffff04 	addi	sp,sp,-4
 402c808:	df000015 	stw	fp,0(sp)
 402c80c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 402c810:	0001883a 	nop
 402c814:	e037883a 	mov	sp,fp
 402c818:	df000017 	ldw	fp,0(sp)
 402c81c:	dec00104 	addi	sp,sp,4
 402c820:	f800283a 	ret

0402c824 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402c824:	defff904 	addi	sp,sp,-28
 402c828:	dfc00615 	stw	ra,24(sp)
 402c82c:	df000515 	stw	fp,20(sp)
 402c830:	df000504 	addi	fp,sp,20
 402c834:	e13ffc15 	stw	r4,-16(fp)
 402c838:	e17ffd15 	stw	r5,-12(fp)
 402c83c:	e1bffe15 	stw	r6,-8(fp)
 402c840:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 402c844:	e0800217 	ldw	r2,8(fp)
 402c848:	d8800015 	stw	r2,0(sp)
 402c84c:	e1ffff17 	ldw	r7,-4(fp)
 402c850:	e1bffe17 	ldw	r6,-8(fp)
 402c854:	e17ffd17 	ldw	r5,-12(fp)
 402c858:	e13ffc17 	ldw	r4,-16(fp)
 402c85c:	402c9d40 	call	402c9d4 <alt_iic_isr_register>
}  
 402c860:	e037883a 	mov	sp,fp
 402c864:	dfc00117 	ldw	ra,4(sp)
 402c868:	df000017 	ldw	fp,0(sp)
 402c86c:	dec00204 	addi	sp,sp,8
 402c870:	f800283a 	ret

0402c874 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 402c874:	defff904 	addi	sp,sp,-28
 402c878:	df000615 	stw	fp,24(sp)
 402c87c:	df000604 	addi	fp,sp,24
 402c880:	e13ffe15 	stw	r4,-8(fp)
 402c884:	e17fff15 	stw	r5,-4(fp)
 402c888:	e0bfff17 	ldw	r2,-4(fp)
 402c88c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402c890:	0005303a 	rdctl	r2,status
 402c894:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402c898:	e0fffb17 	ldw	r3,-20(fp)
 402c89c:	00bfff84 	movi	r2,-2
 402c8a0:	1884703a 	and	r2,r3,r2
 402c8a4:	1001703a 	wrctl	status,r2
  
  return context;
 402c8a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402c8ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 402c8b0:	00c00044 	movi	r3,1
 402c8b4:	e0bffa17 	ldw	r2,-24(fp)
 402c8b8:	1884983a 	sll	r2,r3,r2
 402c8bc:	1007883a 	mov	r3,r2
 402c8c0:	d0a04d17 	ldw	r2,-32460(gp)
 402c8c4:	1884b03a 	or	r2,r3,r2
 402c8c8:	d0a04d15 	stw	r2,-32460(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402c8cc:	d0a04d17 	ldw	r2,-32460(gp)
 402c8d0:	100170fa 	wrctl	ienable,r2
 402c8d4:	e0bffc17 	ldw	r2,-16(fp)
 402c8d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402c8dc:	e0bffd17 	ldw	r2,-12(fp)
 402c8e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402c8e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 402c8e8:	0001883a 	nop
}
 402c8ec:	e037883a 	mov	sp,fp
 402c8f0:	df000017 	ldw	fp,0(sp)
 402c8f4:	dec00104 	addi	sp,sp,4
 402c8f8:	f800283a 	ret

0402c8fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 402c8fc:	defff904 	addi	sp,sp,-28
 402c900:	df000615 	stw	fp,24(sp)
 402c904:	df000604 	addi	fp,sp,24
 402c908:	e13ffe15 	stw	r4,-8(fp)
 402c90c:	e17fff15 	stw	r5,-4(fp)
 402c910:	e0bfff17 	ldw	r2,-4(fp)
 402c914:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402c918:	0005303a 	rdctl	r2,status
 402c91c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402c920:	e0fffb17 	ldw	r3,-20(fp)
 402c924:	00bfff84 	movi	r2,-2
 402c928:	1884703a 	and	r2,r3,r2
 402c92c:	1001703a 	wrctl	status,r2
  
  return context;
 402c930:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402c934:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 402c938:	00c00044 	movi	r3,1
 402c93c:	e0bffa17 	ldw	r2,-24(fp)
 402c940:	1884983a 	sll	r2,r3,r2
 402c944:	0084303a 	nor	r2,zero,r2
 402c948:	1007883a 	mov	r3,r2
 402c94c:	d0a04d17 	ldw	r2,-32460(gp)
 402c950:	1884703a 	and	r2,r3,r2
 402c954:	d0a04d15 	stw	r2,-32460(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402c958:	d0a04d17 	ldw	r2,-32460(gp)
 402c95c:	100170fa 	wrctl	ienable,r2
 402c960:	e0bffc17 	ldw	r2,-16(fp)
 402c964:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402c968:	e0bffd17 	ldw	r2,-12(fp)
 402c96c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402c970:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 402c974:	0001883a 	nop
}
 402c978:	e037883a 	mov	sp,fp
 402c97c:	df000017 	ldw	fp,0(sp)
 402c980:	dec00104 	addi	sp,sp,4
 402c984:	f800283a 	ret

0402c988 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 402c988:	defffc04 	addi	sp,sp,-16
 402c98c:	df000315 	stw	fp,12(sp)
 402c990:	df000304 	addi	fp,sp,12
 402c994:	e13ffe15 	stw	r4,-8(fp)
 402c998:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 402c99c:	000530fa 	rdctl	r2,ienable
 402c9a0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 402c9a4:	00c00044 	movi	r3,1
 402c9a8:	e0bfff17 	ldw	r2,-4(fp)
 402c9ac:	1884983a 	sll	r2,r3,r2
 402c9b0:	1007883a 	mov	r3,r2
 402c9b4:	e0bffd17 	ldw	r2,-12(fp)
 402c9b8:	1884703a 	and	r2,r3,r2
 402c9bc:	1004c03a 	cmpne	r2,r2,zero
 402c9c0:	10803fcc 	andi	r2,r2,255
}
 402c9c4:	e037883a 	mov	sp,fp
 402c9c8:	df000017 	ldw	fp,0(sp)
 402c9cc:	dec00104 	addi	sp,sp,4
 402c9d0:	f800283a 	ret

0402c9d4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402c9d4:	defff504 	addi	sp,sp,-44
 402c9d8:	dfc00a15 	stw	ra,40(sp)
 402c9dc:	df000915 	stw	fp,36(sp)
 402c9e0:	df000904 	addi	fp,sp,36
 402c9e4:	e13ffc15 	stw	r4,-16(fp)
 402c9e8:	e17ffd15 	stw	r5,-12(fp)
 402c9ec:	e1bffe15 	stw	r6,-8(fp)
 402c9f0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 402c9f4:	00bffa84 	movi	r2,-22
 402c9f8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 402c9fc:	e0bffd17 	ldw	r2,-12(fp)
 402ca00:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 402ca04:	e0bff817 	ldw	r2,-32(fp)
 402ca08:	10800808 	cmpgei	r2,r2,32
 402ca0c:	1000271e 	bne	r2,zero,402caac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ca10:	0005303a 	rdctl	r2,status
 402ca14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ca18:	e0fffb17 	ldw	r3,-20(fp)
 402ca1c:	00bfff84 	movi	r2,-2
 402ca20:	1884703a 	and	r2,r3,r2
 402ca24:	1001703a 	wrctl	status,r2
  
  return context;
 402ca28:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 402ca2c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 402ca30:	00800074 	movhi	r2,1
 402ca34:	10a3d404 	addi	r2,r2,-28848
 402ca38:	e0fff817 	ldw	r3,-32(fp)
 402ca3c:	180690fa 	slli	r3,r3,3
 402ca40:	10c5883a 	add	r2,r2,r3
 402ca44:	e0fffe17 	ldw	r3,-8(fp)
 402ca48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 402ca4c:	00800074 	movhi	r2,1
 402ca50:	10a3d404 	addi	r2,r2,-28848
 402ca54:	e0fff817 	ldw	r3,-32(fp)
 402ca58:	180690fa 	slli	r3,r3,3
 402ca5c:	10c5883a 	add	r2,r2,r3
 402ca60:	10800104 	addi	r2,r2,4
 402ca64:	e0ffff17 	ldw	r3,-4(fp)
 402ca68:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 402ca6c:	e0bffe17 	ldw	r2,-8(fp)
 402ca70:	10000526 	beq	r2,zero,402ca88 <alt_iic_isr_register+0xb4>
 402ca74:	e0bff817 	ldw	r2,-32(fp)
 402ca78:	100b883a 	mov	r5,r2
 402ca7c:	e13ffc17 	ldw	r4,-16(fp)
 402ca80:	402c8740 	call	402c874 <alt_ic_irq_enable>
 402ca84:	00000406 	br	402ca98 <alt_iic_isr_register+0xc4>
 402ca88:	e0bff817 	ldw	r2,-32(fp)
 402ca8c:	100b883a 	mov	r5,r2
 402ca90:	e13ffc17 	ldw	r4,-16(fp)
 402ca94:	402c8fc0 	call	402c8fc <alt_ic_irq_disable>
 402ca98:	e0bff715 	stw	r2,-36(fp)
 402ca9c:	e0bffa17 	ldw	r2,-24(fp)
 402caa0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402caa4:	e0bff917 	ldw	r2,-28(fp)
 402caa8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 402caac:	e0bff717 	ldw	r2,-36(fp)
}
 402cab0:	e037883a 	mov	sp,fp
 402cab4:	dfc00117 	ldw	ra,4(sp)
 402cab8:	df000017 	ldw	fp,0(sp)
 402cabc:	dec00204 	addi	sp,sp,8
 402cac0:	f800283a 	ret

0402cac4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 402cac4:	defff804 	addi	sp,sp,-32
 402cac8:	dfc00715 	stw	ra,28(sp)
 402cacc:	df000615 	stw	fp,24(sp)
 402cad0:	dc000515 	stw	r16,20(sp)
 402cad4:	df000604 	addi	fp,sp,24
 402cad8:	e13ffb15 	stw	r4,-20(fp)
 402cadc:	e17ffc15 	stw	r5,-16(fp)
 402cae0:	e1bffd15 	stw	r6,-12(fp)
 402cae4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 402cae8:	e1bffe17 	ldw	r6,-8(fp)
 402caec:	e17ffd17 	ldw	r5,-12(fp)
 402caf0:	e13ffc17 	ldw	r4,-16(fp)
 402caf4:	402cd4c0 	call	402cd4c <open>
 402caf8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 402cafc:	e0bffa17 	ldw	r2,-24(fp)
 402cb00:	10002216 	blt	r2,zero,402cb8c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 402cb04:	04000034 	movhi	r16,0
 402cb08:	84027504 	addi	r16,r16,2516
 402cb0c:	e0bffa17 	ldw	r2,-24(fp)
 402cb10:	01400304 	movi	r5,12
 402cb14:	1009883a 	mov	r4,r2
 402cb18:	402316c0 	call	402316c <__mulsi3>
 402cb1c:	8085883a 	add	r2,r16,r2
 402cb20:	10c00017 	ldw	r3,0(r2)
 402cb24:	e0bffb17 	ldw	r2,-20(fp)
 402cb28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 402cb2c:	04000034 	movhi	r16,0
 402cb30:	84027504 	addi	r16,r16,2516
 402cb34:	e0bffa17 	ldw	r2,-24(fp)
 402cb38:	01400304 	movi	r5,12
 402cb3c:	1009883a 	mov	r4,r2
 402cb40:	402316c0 	call	402316c <__mulsi3>
 402cb44:	8085883a 	add	r2,r16,r2
 402cb48:	10800104 	addi	r2,r2,4
 402cb4c:	10c00017 	ldw	r3,0(r2)
 402cb50:	e0bffb17 	ldw	r2,-20(fp)
 402cb54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 402cb58:	04000034 	movhi	r16,0
 402cb5c:	84027504 	addi	r16,r16,2516
 402cb60:	e0bffa17 	ldw	r2,-24(fp)
 402cb64:	01400304 	movi	r5,12
 402cb68:	1009883a 	mov	r4,r2
 402cb6c:	402316c0 	call	402316c <__mulsi3>
 402cb70:	8085883a 	add	r2,r16,r2
 402cb74:	10800204 	addi	r2,r2,8
 402cb78:	10c00017 	ldw	r3,0(r2)
 402cb7c:	e0bffb17 	ldw	r2,-20(fp)
 402cb80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 402cb84:	e13ffa17 	ldw	r4,-24(fp)
 402cb88:	40238b00 	call	40238b0 <alt_release_fd>
  }
} 
 402cb8c:	0001883a 	nop
 402cb90:	e6ffff04 	addi	sp,fp,-4
 402cb94:	dfc00217 	ldw	ra,8(sp)
 402cb98:	df000117 	ldw	fp,4(sp)
 402cb9c:	dc000017 	ldw	r16,0(sp)
 402cba0:	dec00304 	addi	sp,sp,12
 402cba4:	f800283a 	ret

0402cba8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 402cba8:	defffb04 	addi	sp,sp,-20
 402cbac:	dfc00415 	stw	ra,16(sp)
 402cbb0:	df000315 	stw	fp,12(sp)
 402cbb4:	df000304 	addi	fp,sp,12
 402cbb8:	e13ffd15 	stw	r4,-12(fp)
 402cbbc:	e17ffe15 	stw	r5,-8(fp)
 402cbc0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 402cbc4:	01c07fc4 	movi	r7,511
 402cbc8:	01800044 	movi	r6,1
 402cbcc:	e17ffd17 	ldw	r5,-12(fp)
 402cbd0:	01000034 	movhi	r4,0
 402cbd4:	21027804 	addi	r4,r4,2528
 402cbd8:	402cac40 	call	402cac4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 402cbdc:	01c07fc4 	movi	r7,511
 402cbe0:	000d883a 	mov	r6,zero
 402cbe4:	e17ffe17 	ldw	r5,-8(fp)
 402cbe8:	01000034 	movhi	r4,0
 402cbec:	21027504 	addi	r4,r4,2516
 402cbf0:	402cac40 	call	402cac4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 402cbf4:	01c07fc4 	movi	r7,511
 402cbf8:	01800044 	movi	r6,1
 402cbfc:	e17fff17 	ldw	r5,-4(fp)
 402cc00:	01000034 	movhi	r4,0
 402cc04:	21027b04 	addi	r4,r4,2540
 402cc08:	402cac40 	call	402cac4 <alt_open_fd>
}  
 402cc0c:	0001883a 	nop
 402cc10:	e037883a 	mov	sp,fp
 402cc14:	dfc00117 	ldw	ra,4(sp)
 402cc18:	df000017 	ldw	fp,0(sp)
 402cc1c:	dec00204 	addi	sp,sp,8
 402cc20:	f800283a 	ret

0402cc24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402cc24:	defffe04 	addi	sp,sp,-8
 402cc28:	dfc00115 	stw	ra,4(sp)
 402cc2c:	df000015 	stw	fp,0(sp)
 402cc30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402cc34:	d0a00917 	ldw	r2,-32732(gp)
 402cc38:	10000326 	beq	r2,zero,402cc48 <alt_get_errno+0x24>
 402cc3c:	d0a00917 	ldw	r2,-32732(gp)
 402cc40:	103ee83a 	callr	r2
 402cc44:	00000106 	br	402cc4c <alt_get_errno+0x28>
 402cc48:	d0a03004 	addi	r2,gp,-32576
}
 402cc4c:	e037883a 	mov	sp,fp
 402cc50:	dfc00117 	ldw	ra,4(sp)
 402cc54:	df000017 	ldw	fp,0(sp)
 402cc58:	dec00204 	addi	sp,sp,8
 402cc5c:	f800283a 	ret

0402cc60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 402cc60:	defffb04 	addi	sp,sp,-20
 402cc64:	dfc00415 	stw	ra,16(sp)
 402cc68:	df000315 	stw	fp,12(sp)
 402cc6c:	dc000215 	stw	r16,8(sp)
 402cc70:	df000304 	addi	fp,sp,12
 402cc74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 402cc78:	e0bffe17 	ldw	r2,-8(fp)
 402cc7c:	10800217 	ldw	r2,8(r2)
 402cc80:	10d00034 	orhi	r3,r2,16384
 402cc84:	e0bffe17 	ldw	r2,-8(fp)
 402cc88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402cc8c:	e03ffd15 	stw	zero,-12(fp)
 402cc90:	00002306 	br	402cd20 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402cc94:	04000034 	movhi	r16,0
 402cc98:	84027504 	addi	r16,r16,2516
 402cc9c:	e0bffd17 	ldw	r2,-12(fp)
 402cca0:	01400304 	movi	r5,12
 402cca4:	1009883a 	mov	r4,r2
 402cca8:	402316c0 	call	402316c <__mulsi3>
 402ccac:	8085883a 	add	r2,r16,r2
 402ccb0:	10c00017 	ldw	r3,0(r2)
 402ccb4:	e0bffe17 	ldw	r2,-8(fp)
 402ccb8:	10800017 	ldw	r2,0(r2)
 402ccbc:	1880151e 	bne	r3,r2,402cd14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402ccc0:	04000034 	movhi	r16,0
 402ccc4:	84027504 	addi	r16,r16,2516
 402ccc8:	e0bffd17 	ldw	r2,-12(fp)
 402cccc:	01400304 	movi	r5,12
 402ccd0:	1009883a 	mov	r4,r2
 402ccd4:	402316c0 	call	402316c <__mulsi3>
 402ccd8:	8085883a 	add	r2,r16,r2
 402ccdc:	10800204 	addi	r2,r2,8
 402cce0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402cce4:	10000b0e 	bge	r2,zero,402cd14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 402cce8:	01400304 	movi	r5,12
 402ccec:	e13ffd17 	ldw	r4,-12(fp)
 402ccf0:	402316c0 	call	402316c <__mulsi3>
 402ccf4:	1007883a 	mov	r3,r2
 402ccf8:	00800034 	movhi	r2,0
 402ccfc:	10827504 	addi	r2,r2,2516
 402cd00:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402cd04:	e0bffe17 	ldw	r2,-8(fp)
 402cd08:	18800226 	beq	r3,r2,402cd14 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 402cd0c:	00bffcc4 	movi	r2,-13
 402cd10:	00000806 	br	402cd34 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402cd14:	e0bffd17 	ldw	r2,-12(fp)
 402cd18:	10800044 	addi	r2,r2,1
 402cd1c:	e0bffd15 	stw	r2,-12(fp)
 402cd20:	d0a00817 	ldw	r2,-32736(gp)
 402cd24:	1007883a 	mov	r3,r2
 402cd28:	e0bffd17 	ldw	r2,-12(fp)
 402cd2c:	18bfd92e 	bgeu	r3,r2,402cc94 <__flash_rwdata_start+0xfffff090>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 402cd30:	0005883a 	mov	r2,zero
}
 402cd34:	e6ffff04 	addi	sp,fp,-4
 402cd38:	dfc00217 	ldw	ra,8(sp)
 402cd3c:	df000117 	ldw	fp,4(sp)
 402cd40:	dc000017 	ldw	r16,0(sp)
 402cd44:	dec00304 	addi	sp,sp,12
 402cd48:	f800283a 	ret

0402cd4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 402cd4c:	defff604 	addi	sp,sp,-40
 402cd50:	dfc00915 	stw	ra,36(sp)
 402cd54:	df000815 	stw	fp,32(sp)
 402cd58:	df000804 	addi	fp,sp,32
 402cd5c:	e13ffd15 	stw	r4,-12(fp)
 402cd60:	e17ffe15 	stw	r5,-8(fp)
 402cd64:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 402cd68:	00bfffc4 	movi	r2,-1
 402cd6c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 402cd70:	00bffb44 	movi	r2,-19
 402cd74:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 402cd78:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 402cd7c:	d1600604 	addi	r5,gp,-32744
 402cd80:	e13ffd17 	ldw	r4,-12(fp)
 402cd84:	402d3c80 	call	402d3c8 <alt_find_dev>
 402cd88:	e0bff815 	stw	r2,-32(fp)
 402cd8c:	e0bff817 	ldw	r2,-32(fp)
 402cd90:	1000051e 	bne	r2,zero,402cda8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 402cd94:	e13ffd17 	ldw	r4,-12(fp)
 402cd98:	402d4580 	call	402d458 <alt_find_file>
 402cd9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 402cda0:	00800044 	movi	r2,1
 402cda4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 402cda8:	e0bff817 	ldw	r2,-32(fp)
 402cdac:	10002b26 	beq	r2,zero,402ce5c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 402cdb0:	e13ff817 	ldw	r4,-32(fp)
 402cdb4:	402d5600 	call	402d560 <alt_get_fd>
 402cdb8:	e0bff915 	stw	r2,-28(fp)
 402cdbc:	e0bff917 	ldw	r2,-28(fp)
 402cdc0:	1000030e 	bge	r2,zero,402cdd0 <open+0x84>
    {
      status = index;
 402cdc4:	e0bff917 	ldw	r2,-28(fp)
 402cdc8:	e0bffa15 	stw	r2,-24(fp)
 402cdcc:	00002506 	br	402ce64 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 402cdd0:	01400304 	movi	r5,12
 402cdd4:	e13ff917 	ldw	r4,-28(fp)
 402cdd8:	402316c0 	call	402316c <__mulsi3>
 402cddc:	1007883a 	mov	r3,r2
 402cde0:	00800034 	movhi	r2,0
 402cde4:	10827504 	addi	r2,r2,2516
 402cde8:	1885883a 	add	r2,r3,r2
 402cdec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 402cdf0:	e0fffe17 	ldw	r3,-8(fp)
 402cdf4:	00900034 	movhi	r2,16384
 402cdf8:	10bfffc4 	addi	r2,r2,-1
 402cdfc:	1886703a 	and	r3,r3,r2
 402ce00:	e0bffc17 	ldw	r2,-16(fp)
 402ce04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 402ce08:	e0bffb17 	ldw	r2,-20(fp)
 402ce0c:	1000051e 	bne	r2,zero,402ce24 <open+0xd8>
 402ce10:	e13ffc17 	ldw	r4,-16(fp)
 402ce14:	402cc600 	call	402cc60 <alt_file_locked>
 402ce18:	e0bffa15 	stw	r2,-24(fp)
 402ce1c:	e0bffa17 	ldw	r2,-24(fp)
 402ce20:	10001016 	blt	r2,zero,402ce64 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 402ce24:	e0bff817 	ldw	r2,-32(fp)
 402ce28:	10800317 	ldw	r2,12(r2)
 402ce2c:	10000826 	beq	r2,zero,402ce50 <open+0x104>
 402ce30:	e0bff817 	ldw	r2,-32(fp)
 402ce34:	10800317 	ldw	r2,12(r2)
 402ce38:	e1ffff17 	ldw	r7,-4(fp)
 402ce3c:	e1bffe17 	ldw	r6,-8(fp)
 402ce40:	e17ffd17 	ldw	r5,-12(fp)
 402ce44:	e13ffc17 	ldw	r4,-16(fp)
 402ce48:	103ee83a 	callr	r2
 402ce4c:	00000106 	br	402ce54 <open+0x108>
 402ce50:	0005883a 	mov	r2,zero
 402ce54:	e0bffa15 	stw	r2,-24(fp)
 402ce58:	00000206 	br	402ce64 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 402ce5c:	00bffb44 	movi	r2,-19
 402ce60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 402ce64:	e0bffa17 	ldw	r2,-24(fp)
 402ce68:	1000090e 	bge	r2,zero,402ce90 <open+0x144>
  {
    alt_release_fd (index);  
 402ce6c:	e13ff917 	ldw	r4,-28(fp)
 402ce70:	40238b00 	call	40238b0 <alt_release_fd>
    ALT_ERRNO = -status;
 402ce74:	402cc240 	call	402cc24 <alt_get_errno>
 402ce78:	1007883a 	mov	r3,r2
 402ce7c:	e0bffa17 	ldw	r2,-24(fp)
 402ce80:	0085c83a 	sub	r2,zero,r2
 402ce84:	18800015 	stw	r2,0(r3)
    return -1;
 402ce88:	00bfffc4 	movi	r2,-1
 402ce8c:	00000106 	br	402ce94 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 402ce90:	e0bff917 	ldw	r2,-28(fp)
}
 402ce94:	e037883a 	mov	sp,fp
 402ce98:	dfc00117 	ldw	ra,4(sp)
 402ce9c:	df000017 	ldw	fp,0(sp)
 402cea0:	dec00204 	addi	sp,sp,8
 402cea4:	f800283a 	ret

0402cea8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 402cea8:	defffa04 	addi	sp,sp,-24
 402ceac:	df000515 	stw	fp,20(sp)
 402ceb0:	df000504 	addi	fp,sp,20
 402ceb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ceb8:	0005303a 	rdctl	r2,status
 402cebc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402cec0:	e0fffc17 	ldw	r3,-16(fp)
 402cec4:	00bfff84 	movi	r2,-2
 402cec8:	1884703a 	and	r2,r3,r2
 402cecc:	1001703a 	wrctl	status,r2
  
  return context;
 402ced0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 402ced4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 402ced8:	e0bfff17 	ldw	r2,-4(fp)
 402cedc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 402cee0:	e0bffd17 	ldw	r2,-12(fp)
 402cee4:	10800017 	ldw	r2,0(r2)
 402cee8:	e0fffd17 	ldw	r3,-12(fp)
 402ceec:	18c00117 	ldw	r3,4(r3)
 402cef0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 402cef4:	e0bffd17 	ldw	r2,-12(fp)
 402cef8:	10800117 	ldw	r2,4(r2)
 402cefc:	e0fffd17 	ldw	r3,-12(fp)
 402cf00:	18c00017 	ldw	r3,0(r3)
 402cf04:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 402cf08:	e0bffd17 	ldw	r2,-12(fp)
 402cf0c:	e0fffd17 	ldw	r3,-12(fp)
 402cf10:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 402cf14:	e0bffd17 	ldw	r2,-12(fp)
 402cf18:	e0fffd17 	ldw	r3,-12(fp)
 402cf1c:	10c00015 	stw	r3,0(r2)
 402cf20:	e0bffb17 	ldw	r2,-20(fp)
 402cf24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402cf28:	e0bffe17 	ldw	r2,-8(fp)
 402cf2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 402cf30:	0001883a 	nop
 402cf34:	e037883a 	mov	sp,fp
 402cf38:	df000017 	ldw	fp,0(sp)
 402cf3c:	dec00104 	addi	sp,sp,4
 402cf40:	f800283a 	ret

0402cf44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 402cf44:	defffb04 	addi	sp,sp,-20
 402cf48:	dfc00415 	stw	ra,16(sp)
 402cf4c:	df000315 	stw	fp,12(sp)
 402cf50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 402cf54:	d0a02b17 	ldw	r2,-32596(gp)
 402cf58:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 402cf5c:	d0a04f17 	ldw	r2,-32452(gp)
 402cf60:	10800044 	addi	r2,r2,1
 402cf64:	d0a04f15 	stw	r2,-32452(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402cf68:	00002e06 	br	402d024 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 402cf6c:	e0bffd17 	ldw	r2,-12(fp)
 402cf70:	10800017 	ldw	r2,0(r2)
 402cf74:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 402cf78:	e0bffd17 	ldw	r2,-12(fp)
 402cf7c:	10800403 	ldbu	r2,16(r2)
 402cf80:	10803fcc 	andi	r2,r2,255
 402cf84:	10000426 	beq	r2,zero,402cf98 <alt_tick+0x54>
 402cf88:	d0a04f17 	ldw	r2,-32452(gp)
 402cf8c:	1000021e 	bne	r2,zero,402cf98 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 402cf90:	e0bffd17 	ldw	r2,-12(fp)
 402cf94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 402cf98:	e0bffd17 	ldw	r2,-12(fp)
 402cf9c:	10800217 	ldw	r2,8(r2)
 402cfa0:	d0e04f17 	ldw	r3,-32452(gp)
 402cfa4:	18801d36 	bltu	r3,r2,402d01c <alt_tick+0xd8>
 402cfa8:	e0bffd17 	ldw	r2,-12(fp)
 402cfac:	10800403 	ldbu	r2,16(r2)
 402cfb0:	10803fcc 	andi	r2,r2,255
 402cfb4:	1000191e 	bne	r2,zero,402d01c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 402cfb8:	e0bffd17 	ldw	r2,-12(fp)
 402cfbc:	10800317 	ldw	r2,12(r2)
 402cfc0:	e0fffd17 	ldw	r3,-12(fp)
 402cfc4:	18c00517 	ldw	r3,20(r3)
 402cfc8:	1809883a 	mov	r4,r3
 402cfcc:	103ee83a 	callr	r2
 402cfd0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 402cfd4:	e0bfff17 	ldw	r2,-4(fp)
 402cfd8:	1000031e 	bne	r2,zero,402cfe8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 402cfdc:	e13ffd17 	ldw	r4,-12(fp)
 402cfe0:	402cea80 	call	402cea8 <alt_alarm_stop>
 402cfe4:	00000d06 	br	402d01c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 402cfe8:	e0bffd17 	ldw	r2,-12(fp)
 402cfec:	10c00217 	ldw	r3,8(r2)
 402cff0:	e0bfff17 	ldw	r2,-4(fp)
 402cff4:	1887883a 	add	r3,r3,r2
 402cff8:	e0bffd17 	ldw	r2,-12(fp)
 402cffc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 402d000:	e0bffd17 	ldw	r2,-12(fp)
 402d004:	10c00217 	ldw	r3,8(r2)
 402d008:	d0a04f17 	ldw	r2,-32452(gp)
 402d00c:	1880032e 	bgeu	r3,r2,402d01c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 402d010:	e0bffd17 	ldw	r2,-12(fp)
 402d014:	00c00044 	movi	r3,1
 402d018:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 402d01c:	e0bffe17 	ldw	r2,-8(fp)
 402d020:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402d024:	e0fffd17 	ldw	r3,-12(fp)
 402d028:	d0a02b04 	addi	r2,gp,-32596
 402d02c:	18bfcf1e 	bne	r3,r2,402cf6c <__flash_rwdata_start+0xfffff368>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 402d030:	4024ac40 	call	4024ac4 <OSTimeTick>
}
 402d034:	0001883a 	nop
 402d038:	e037883a 	mov	sp,fp
 402d03c:	dfc00117 	ldw	ra,4(sp)
 402d040:	df000017 	ldw	fp,0(sp)
 402d044:	dec00204 	addi	sp,sp,8
 402d048:	f800283a 	ret

0402d04c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 402d04c:	deffff04 	addi	sp,sp,-4
 402d050:	df000015 	stw	fp,0(sp)
 402d054:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 402d058:	000170fa 	wrctl	ienable,zero
}
 402d05c:	0001883a 	nop
 402d060:	e037883a 	mov	sp,fp
 402d064:	df000017 	ldw	fp,0(sp)
 402d068:	dec00104 	addi	sp,sp,4
 402d06c:	f800283a 	ret

0402d070 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 402d070:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 402d074:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 402d078:	d1204817 	ldw	r4,-32480(gp)

      stw ra,  0(sp)
 402d07c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 402d080:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 402d084:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 402d088:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 402d08c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 402d090:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 402d094:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 402d098:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 402d09c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 402d0a0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 402d0a4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 402d0a8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 402d0ac:	402d2e40 	call	402d2e4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 402d0b0:	d1204317 	ldw	r4,-32500(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 402d0b4:	d1603b07 	ldb	r5,-32532(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 402d0b8:	d1204815 	stw	r4,-32480(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 402d0bc:	d1603b45 	stb	r5,-32531(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 402d0c0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 402d0c4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 402d0c8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 402d0cc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 402d0d0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 402d0d4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 402d0d8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 402d0dc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 402d0e0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 402d0e4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 402d0e8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 402d0ec:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 402d0f0:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 402d0f4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 402d0f8:	f800283a 	ret

0402d0fc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 402d0fc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 402d100:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 402d104:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 402d108:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 402d10c:	402d2e40 	call	402d2e4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 402d110:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 402d114:	d4a03945 	stb	r18,-32539(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 402d118:	003fe506 	br	402d0b0 <__flash_rwdata_start+0xfffff4ac>

0402d11c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 402d11c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 402d120:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 402d124:	10800054 	ori	r2,r2,1
      wrctl status, r2
 402d128:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 402d12c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 402d130:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 402d134:	dec00204 	addi	sp,sp,8

      callr r2
 402d138:	103ee83a 	callr	r2

      nop
 402d13c:	0001883a 	nop

0402d140 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 402d140:	defff704 	addi	sp,sp,-36
 402d144:	dfc00815 	stw	ra,32(sp)
 402d148:	df000715 	stw	fp,28(sp)
 402d14c:	df000704 	addi	fp,sp,28
 402d150:	e13ffc15 	stw	r4,-16(fp)
 402d154:	e17ffd15 	stw	r5,-12(fp)
 402d158:	e1bffe15 	stw	r6,-8(fp)
 402d15c:	3805883a 	mov	r2,r7
 402d160:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 402d164:	e0fffe17 	ldw	r3,-8(fp)
 402d168:	00bfff04 	movi	r2,-4
 402d16c:	1884703a 	and	r2,r3,r2
 402d170:	10bef704 	addi	r2,r2,-1060
 402d174:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 402d178:	01810904 	movi	r6,1060
 402d17c:	000b883a 	mov	r5,zero
 402d180:	e13ff917 	ldw	r4,-28(fp)
 402d184:	4021a880 	call	4021a88 <memset>
 402d188:	e0bff917 	ldw	r2,-28(fp)
 402d18c:	10c0bb04 	addi	r3,r2,748
 402d190:	e0bff917 	ldw	r2,-28(fp)
 402d194:	10c00115 	stw	r3,4(r2)
 402d198:	e0bff917 	ldw	r2,-28(fp)
 402d19c:	10c0d504 	addi	r3,r2,852
 402d1a0:	e0bff917 	ldw	r2,-28(fp)
 402d1a4:	10c00215 	stw	r3,8(r2)
 402d1a8:	e0bff917 	ldw	r2,-28(fp)
 402d1ac:	10c0ef04 	addi	r3,r2,956
 402d1b0:	e0bff917 	ldw	r2,-28(fp)
 402d1b4:	10c00315 	stw	r3,12(r2)
 402d1b8:	e0fff917 	ldw	r3,-28(fp)
 402d1bc:	00800034 	movhi	r2,0
 402d1c0:	10805f04 	addi	r2,r2,380
 402d1c4:	18800d15 	stw	r2,52(r3)
 402d1c8:	e0bff917 	ldw	r2,-28(fp)
 402d1cc:	00c00044 	movi	r3,1
 402d1d0:	10c02915 	stw	r3,164(r2)
 402d1d4:	10002a15 	stw	zero,168(r2)
 402d1d8:	e0bff917 	ldw	r2,-28(fp)
 402d1dc:	00ccc384 	movi	r3,13070
 402d1e0:	10c02b0d 	sth	r3,172(r2)
 402d1e4:	e0bff917 	ldw	r2,-28(fp)
 402d1e8:	00eaf344 	movi	r3,-21555
 402d1ec:	10c02b8d 	sth	r3,174(r2)
 402d1f0:	e0bff917 	ldw	r2,-28(fp)
 402d1f4:	00c48d04 	movi	r3,4660
 402d1f8:	10c02c0d 	sth	r3,176(r2)
 402d1fc:	e0bff917 	ldw	r2,-28(fp)
 402d200:	00f99b44 	movi	r3,-6547
 402d204:	10c02c8d 	sth	r3,178(r2)
 402d208:	e0bff917 	ldw	r2,-28(fp)
 402d20c:	00f7bb04 	movi	r3,-8468
 402d210:	10c02d0d 	sth	r3,180(r2)
 402d214:	e0bff917 	ldw	r2,-28(fp)
 402d218:	00c00144 	movi	r3,5
 402d21c:	10c02d8d 	sth	r3,182(r2)
 402d220:	e0bff917 	ldw	r2,-28(fp)
 402d224:	00c002c4 	movi	r3,11
 402d228:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 402d22c:	e0bff917 	ldw	r2,-28(fp)
 402d230:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 402d234:	e0bffa17 	ldw	r2,-24(fp)
 402d238:	10bff304 	addi	r2,r2,-52
 402d23c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 402d240:	e0bffb17 	ldw	r2,-20(fp)
 402d244:	10800c04 	addi	r2,r2,48
 402d248:	e0fffc17 	ldw	r3,-16(fp)
 402d24c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 402d250:	e0bffb17 	ldw	r2,-20(fp)
 402d254:	10800b04 	addi	r2,r2,44
 402d258:	e0fffd17 	ldw	r3,-12(fp)
 402d25c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 402d260:	e0bffb17 	ldw	r2,-20(fp)
 402d264:	10800a04 	addi	r2,r2,40
 402d268:	e0fff917 	ldw	r3,-28(fp)
 402d26c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 402d270:	008100f4 	movhi	r2,1027
 402d274:	10b44704 	addi	r2,r2,-12004
 402d278:	10c00104 	addi	r3,r2,4
 402d27c:	e0bffb17 	ldw	r2,-20(fp)
 402d280:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 402d284:	e0bffb17 	ldw	r2,-20(fp)
}
 402d288:	e037883a 	mov	sp,fp
 402d28c:	dfc00117 	ldw	ra,4(sp)
 402d290:	df000017 	ldw	fp,0(sp)
 402d294:	dec00204 	addi	sp,sp,8
 402d298:	f800283a 	ret

0402d29c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 402d29c:	defffe04 	addi	sp,sp,-8
 402d2a0:	df000115 	stw	fp,4(sp)
 402d2a4:	df000104 	addi	fp,sp,4
 402d2a8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 402d2ac:	0001883a 	nop
 402d2b0:	e037883a 	mov	sp,fp
 402d2b4:	df000017 	ldw	fp,0(sp)
 402d2b8:	dec00104 	addi	sp,sp,4
 402d2bc:	f800283a 	ret

0402d2c0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 402d2c0:	defffe04 	addi	sp,sp,-8
 402d2c4:	df000115 	stw	fp,4(sp)
 402d2c8:	df000104 	addi	fp,sp,4
 402d2cc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 402d2d0:	0001883a 	nop
 402d2d4:	e037883a 	mov	sp,fp
 402d2d8:	df000017 	ldw	fp,0(sp)
 402d2dc:	dec00104 	addi	sp,sp,4
 402d2e0:	f800283a 	ret

0402d2e4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 402d2e4:	deffff04 	addi	sp,sp,-4
 402d2e8:	df000015 	stw	fp,0(sp)
 402d2ec:	d839883a 	mov	fp,sp
}
 402d2f0:	0001883a 	nop
 402d2f4:	e037883a 	mov	sp,fp
 402d2f8:	df000017 	ldw	fp,0(sp)
 402d2fc:	dec00104 	addi	sp,sp,4
 402d300:	f800283a 	ret

0402d304 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 402d304:	deffff04 	addi	sp,sp,-4
 402d308:	df000015 	stw	fp,0(sp)
 402d30c:	d839883a 	mov	fp,sp
}
 402d310:	0001883a 	nop
 402d314:	e037883a 	mov	sp,fp
 402d318:	df000017 	ldw	fp,0(sp)
 402d31c:	dec00104 	addi	sp,sp,4
 402d320:	f800283a 	ret

0402d324 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 402d324:	deffff04 	addi	sp,sp,-4
 402d328:	df000015 	stw	fp,0(sp)
 402d32c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 402d330:	0001883a 	nop
 402d334:	e037883a 	mov	sp,fp
 402d338:	df000017 	ldw	fp,0(sp)
 402d33c:	dec00104 	addi	sp,sp,4
 402d340:	f800283a 	ret

0402d344 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 402d344:	deffff04 	addi	sp,sp,-4
 402d348:	df000015 	stw	fp,0(sp)
 402d34c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 402d350:	0001883a 	nop
 402d354:	e037883a 	mov	sp,fp
 402d358:	df000017 	ldw	fp,0(sp)
 402d35c:	dec00104 	addi	sp,sp,4
 402d360:	f800283a 	ret

0402d364 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 402d364:	deffff04 	addi	sp,sp,-4
 402d368:	df000015 	stw	fp,0(sp)
 402d36c:	d839883a 	mov	fp,sp
}
 402d370:	0001883a 	nop
 402d374:	e037883a 	mov	sp,fp
 402d378:	df000017 	ldw	fp,0(sp)
 402d37c:	dec00104 	addi	sp,sp,4
 402d380:	f800283a 	ret

0402d384 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 402d384:	deffff04 	addi	sp,sp,-4
 402d388:	df000015 	stw	fp,0(sp)
 402d38c:	d839883a 	mov	fp,sp
}
 402d390:	0001883a 	nop
 402d394:	e037883a 	mov	sp,fp
 402d398:	df000017 	ldw	fp,0(sp)
 402d39c:	dec00104 	addi	sp,sp,4
 402d3a0:	f800283a 	ret

0402d3a4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 402d3a4:	defffe04 	addi	sp,sp,-8
 402d3a8:	df000115 	stw	fp,4(sp)
 402d3ac:	df000104 	addi	fp,sp,4
 402d3b0:	e13fff15 	stw	r4,-4(fp)
}
 402d3b4:	0001883a 	nop
 402d3b8:	e037883a 	mov	sp,fp
 402d3bc:	df000017 	ldw	fp,0(sp)
 402d3c0:	dec00104 	addi	sp,sp,4
 402d3c4:	f800283a 	ret

0402d3c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 402d3c8:	defffa04 	addi	sp,sp,-24
 402d3cc:	dfc00515 	stw	ra,20(sp)
 402d3d0:	df000415 	stw	fp,16(sp)
 402d3d4:	df000404 	addi	fp,sp,16
 402d3d8:	e13ffe15 	stw	r4,-8(fp)
 402d3dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 402d3e0:	e0bfff17 	ldw	r2,-4(fp)
 402d3e4:	10800017 	ldw	r2,0(r2)
 402d3e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 402d3ec:	e13ffe17 	ldw	r4,-8(fp)
 402d3f0:	402045c0 	call	402045c <strlen>
 402d3f4:	10800044 	addi	r2,r2,1
 402d3f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402d3fc:	00000d06 	br	402d434 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 402d400:	e0bffc17 	ldw	r2,-16(fp)
 402d404:	10800217 	ldw	r2,8(r2)
 402d408:	e0fffd17 	ldw	r3,-12(fp)
 402d40c:	180d883a 	mov	r6,r3
 402d410:	e17ffe17 	ldw	r5,-8(fp)
 402d414:	1009883a 	mov	r4,r2
 402d418:	402d73c0 	call	402d73c <memcmp>
 402d41c:	1000021e 	bne	r2,zero,402d428 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 402d420:	e0bffc17 	ldw	r2,-16(fp)
 402d424:	00000706 	br	402d444 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 402d428:	e0bffc17 	ldw	r2,-16(fp)
 402d42c:	10800017 	ldw	r2,0(r2)
 402d430:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402d434:	e0fffc17 	ldw	r3,-16(fp)
 402d438:	e0bfff17 	ldw	r2,-4(fp)
 402d43c:	18bff01e 	bne	r3,r2,402d400 <__flash_rwdata_start+0xfffff7fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 402d440:	0005883a 	mov	r2,zero
}
 402d444:	e037883a 	mov	sp,fp
 402d448:	dfc00117 	ldw	ra,4(sp)
 402d44c:	df000017 	ldw	fp,0(sp)
 402d450:	dec00204 	addi	sp,sp,8
 402d454:	f800283a 	ret

0402d458 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402d458:	defffb04 	addi	sp,sp,-20
 402d45c:	dfc00415 	stw	ra,16(sp)
 402d460:	df000315 	stw	fp,12(sp)
 402d464:	df000304 	addi	fp,sp,12
 402d468:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 402d46c:	d0a00417 	ldw	r2,-32752(gp)
 402d470:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402d474:	00003106 	br	402d53c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 402d478:	e0bffd17 	ldw	r2,-12(fp)
 402d47c:	10800217 	ldw	r2,8(r2)
 402d480:	1009883a 	mov	r4,r2
 402d484:	402045c0 	call	402045c <strlen>
 402d488:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 402d48c:	e0bffd17 	ldw	r2,-12(fp)
 402d490:	10c00217 	ldw	r3,8(r2)
 402d494:	e0bffe17 	ldw	r2,-8(fp)
 402d498:	10bfffc4 	addi	r2,r2,-1
 402d49c:	1885883a 	add	r2,r3,r2
 402d4a0:	10800003 	ldbu	r2,0(r2)
 402d4a4:	10803fcc 	andi	r2,r2,255
 402d4a8:	1080201c 	xori	r2,r2,128
 402d4ac:	10bfe004 	addi	r2,r2,-128
 402d4b0:	10800bd8 	cmpnei	r2,r2,47
 402d4b4:	1000031e 	bne	r2,zero,402d4c4 <alt_find_file+0x6c>
    {
      len -= 1;
 402d4b8:	e0bffe17 	ldw	r2,-8(fp)
 402d4bc:	10bfffc4 	addi	r2,r2,-1
 402d4c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402d4c4:	e0bffe17 	ldw	r2,-8(fp)
 402d4c8:	e0ffff17 	ldw	r3,-4(fp)
 402d4cc:	1885883a 	add	r2,r3,r2
 402d4d0:	10800003 	ldbu	r2,0(r2)
 402d4d4:	10803fcc 	andi	r2,r2,255
 402d4d8:	1080201c 	xori	r2,r2,128
 402d4dc:	10bfe004 	addi	r2,r2,-128
 402d4e0:	10800be0 	cmpeqi	r2,r2,47
 402d4e4:	1000081e 	bne	r2,zero,402d508 <alt_find_file+0xb0>
 402d4e8:	e0bffe17 	ldw	r2,-8(fp)
 402d4ec:	e0ffff17 	ldw	r3,-4(fp)
 402d4f0:	1885883a 	add	r2,r3,r2
 402d4f4:	10800003 	ldbu	r2,0(r2)
 402d4f8:	10803fcc 	andi	r2,r2,255
 402d4fc:	1080201c 	xori	r2,r2,128
 402d500:	10bfe004 	addi	r2,r2,-128
 402d504:	10000a1e 	bne	r2,zero,402d530 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 402d508:	e0bffd17 	ldw	r2,-12(fp)
 402d50c:	10800217 	ldw	r2,8(r2)
 402d510:	e0fffe17 	ldw	r3,-8(fp)
 402d514:	180d883a 	mov	r6,r3
 402d518:	e17fff17 	ldw	r5,-4(fp)
 402d51c:	1009883a 	mov	r4,r2
 402d520:	402d73c0 	call	402d73c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402d524:	1000021e 	bne	r2,zero,402d530 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 402d528:	e0bffd17 	ldw	r2,-12(fp)
 402d52c:	00000706 	br	402d54c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 402d530:	e0bffd17 	ldw	r2,-12(fp)
 402d534:	10800017 	ldw	r2,0(r2)
 402d538:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402d53c:	e0fffd17 	ldw	r3,-12(fp)
 402d540:	d0a00404 	addi	r2,gp,-32752
 402d544:	18bfcc1e 	bne	r3,r2,402d478 <__flash_rwdata_start+0xfffff874>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 402d548:	0005883a 	mov	r2,zero
}
 402d54c:	e037883a 	mov	sp,fp
 402d550:	dfc00117 	ldw	ra,4(sp)
 402d554:	df000017 	ldw	fp,0(sp)
 402d558:	dec00204 	addi	sp,sp,8
 402d55c:	f800283a 	ret

0402d560 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 402d560:	defff804 	addi	sp,sp,-32
 402d564:	dfc00715 	stw	ra,28(sp)
 402d568:	df000615 	stw	fp,24(sp)
 402d56c:	dc000515 	stw	r16,20(sp)
 402d570:	df000604 	addi	fp,sp,24
 402d574:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 402d578:	00bffa04 	movi	r2,-24
 402d57c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 402d580:	d0a03117 	ldw	r2,-32572(gp)
 402d584:	e0bffc15 	stw	r2,-16(fp)
 402d588:	e03ffd0d 	sth	zero,-12(fp)
 402d58c:	e0bffd0b 	ldhu	r2,-12(fp)
 402d590:	e0fffd84 	addi	r3,fp,-10
 402d594:	180d883a 	mov	r6,r3
 402d598:	100b883a 	mov	r5,r2
 402d59c:	e13ffc17 	ldw	r4,-16(fp)
 402d5a0:	40293140 	call	4029314 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402d5a4:	e03ffa15 	stw	zero,-24(fp)
 402d5a8:	00001d06 	br	402d620 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 402d5ac:	04000034 	movhi	r16,0
 402d5b0:	84027504 	addi	r16,r16,2516
 402d5b4:	e0bffa17 	ldw	r2,-24(fp)
 402d5b8:	01400304 	movi	r5,12
 402d5bc:	1009883a 	mov	r4,r2
 402d5c0:	402316c0 	call	402316c <__mulsi3>
 402d5c4:	8085883a 	add	r2,r16,r2
 402d5c8:	10800017 	ldw	r2,0(r2)
 402d5cc:	1000111e 	bne	r2,zero,402d614 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 402d5d0:	04000034 	movhi	r16,0
 402d5d4:	84027504 	addi	r16,r16,2516
 402d5d8:	e0bffa17 	ldw	r2,-24(fp)
 402d5dc:	01400304 	movi	r5,12
 402d5e0:	1009883a 	mov	r4,r2
 402d5e4:	402316c0 	call	402316c <__mulsi3>
 402d5e8:	8085883a 	add	r2,r16,r2
 402d5ec:	e0fffe17 	ldw	r3,-8(fp)
 402d5f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 402d5f4:	d0e00817 	ldw	r3,-32736(gp)
 402d5f8:	e0bffa17 	ldw	r2,-24(fp)
 402d5fc:	1880020e 	bge	r3,r2,402d608 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 402d600:	e0bffa17 	ldw	r2,-24(fp)
 402d604:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 402d608:	e0bffa17 	ldw	r2,-24(fp)
 402d60c:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
 402d610:	00000606 	br	402d62c <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402d614:	e0bffa17 	ldw	r2,-24(fp)
 402d618:	10800044 	addi	r2,r2,1
 402d61c:	e0bffa15 	stw	r2,-24(fp)
 402d620:	e0bffa17 	ldw	r2,-24(fp)
 402d624:	10800810 	cmplti	r2,r2,32
 402d628:	103fe01e 	bne	r2,zero,402d5ac <__flash_rwdata_start+0xfffff9a8>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 402d62c:	d0a03117 	ldw	r2,-32572(gp)
 402d630:	1009883a 	mov	r4,r2
 402d634:	402968c0 	call	402968c <OSSemPost>

  return rc;
 402d638:	e0bffb17 	ldw	r2,-20(fp)
}
 402d63c:	e6ffff04 	addi	sp,fp,-4
 402d640:	dfc00217 	ldw	ra,8(sp)
 402d644:	df000117 	ldw	fp,4(sp)
 402d648:	dc000017 	ldw	r16,0(sp)
 402d64c:	dec00304 	addi	sp,sp,12
 402d650:	f800283a 	ret

0402d654 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 402d654:	defffe04 	addi	sp,sp,-8
 402d658:	df000115 	stw	fp,4(sp)
 402d65c:	df000104 	addi	fp,sp,4
 402d660:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 402d664:	e0bfff17 	ldw	r2,-4(fp)
 402d668:	10bffe84 	addi	r2,r2,-6
 402d66c:	10c00428 	cmpgeui	r3,r2,16
 402d670:	18001a1e 	bne	r3,zero,402d6dc <alt_exception_cause_generated_bad_addr+0x88>
 402d674:	100690ba 	slli	r3,r2,2
 402d678:	008100f4 	movhi	r2,1027
 402d67c:	10b5a304 	addi	r2,r2,-10612
 402d680:	1885883a 	add	r2,r3,r2
 402d684:	10800017 	ldw	r2,0(r2)
 402d688:	1000683a 	jmp	r2
 402d68c:	0402d6cc 	andi	r16,zero,2907
 402d690:	0402d6cc 	andi	r16,zero,2907
 402d694:	0402d6dc 	xori	r16,zero,2907
 402d698:	0402d6dc 	xori	r16,zero,2907
 402d69c:	0402d6dc 	xori	r16,zero,2907
 402d6a0:	0402d6cc 	andi	r16,zero,2907
 402d6a4:	0402d6d4 	movui	r16,2907
 402d6a8:	0402d6dc 	xori	r16,zero,2907
 402d6ac:	0402d6cc 	andi	r16,zero,2907
 402d6b0:	0402d6cc 	andi	r16,zero,2907
 402d6b4:	0402d6dc 	xori	r16,zero,2907
 402d6b8:	0402d6cc 	andi	r16,zero,2907
 402d6bc:	0402d6d4 	movui	r16,2907
 402d6c0:	0402d6dc 	xori	r16,zero,2907
 402d6c4:	0402d6dc 	xori	r16,zero,2907
 402d6c8:	0402d6cc 	andi	r16,zero,2907
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 402d6cc:	00800044 	movi	r2,1
 402d6d0:	00000306 	br	402d6e0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 402d6d4:	0005883a 	mov	r2,zero
 402d6d8:	00000106 	br	402d6e0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 402d6dc:	0005883a 	mov	r2,zero
  }
}
 402d6e0:	e037883a 	mov	sp,fp
 402d6e4:	df000017 	ldw	fp,0(sp)
 402d6e8:	dec00104 	addi	sp,sp,4
 402d6ec:	f800283a 	ret

0402d6f0 <atexit>:
 402d6f0:	200b883a 	mov	r5,r4
 402d6f4:	000f883a 	mov	r7,zero
 402d6f8:	000d883a 	mov	r6,zero
 402d6fc:	0009883a 	mov	r4,zero
 402d700:	402d7b81 	jmpi	402d7b8 <__register_exitproc>

0402d704 <exit>:
 402d704:	defffe04 	addi	sp,sp,-8
 402d708:	000b883a 	mov	r5,zero
 402d70c:	dc000015 	stw	r16,0(sp)
 402d710:	dfc00115 	stw	ra,4(sp)
 402d714:	2021883a 	mov	r16,r4
 402d718:	402d8d00 	call	402d8d0 <__call_exitprocs>
 402d71c:	00800034 	movhi	r2,0
 402d720:	1086f004 	addi	r2,r2,7104
 402d724:	11000017 	ldw	r4,0(r2)
 402d728:	20800f17 	ldw	r2,60(r4)
 402d72c:	10000126 	beq	r2,zero,402d734 <exit+0x30>
 402d730:	103ee83a 	callr	r2
 402d734:	8009883a 	mov	r4,r16
 402d738:	402da500 	call	402da50 <_exit>

0402d73c <memcmp>:
 402d73c:	01c000c4 	movi	r7,3
 402d740:	3980192e 	bgeu	r7,r6,402d7a8 <memcmp+0x6c>
 402d744:	2144b03a 	or	r2,r4,r5
 402d748:	11c4703a 	and	r2,r2,r7
 402d74c:	10000f26 	beq	r2,zero,402d78c <memcmp+0x50>
 402d750:	20800003 	ldbu	r2,0(r4)
 402d754:	28c00003 	ldbu	r3,0(r5)
 402d758:	10c0151e 	bne	r2,r3,402d7b0 <memcmp+0x74>
 402d75c:	31bfff84 	addi	r6,r6,-2
 402d760:	01ffffc4 	movi	r7,-1
 402d764:	00000406 	br	402d778 <memcmp+0x3c>
 402d768:	20800003 	ldbu	r2,0(r4)
 402d76c:	28c00003 	ldbu	r3,0(r5)
 402d770:	31bfffc4 	addi	r6,r6,-1
 402d774:	10c00e1e 	bne	r2,r3,402d7b0 <memcmp+0x74>
 402d778:	21000044 	addi	r4,r4,1
 402d77c:	29400044 	addi	r5,r5,1
 402d780:	31fff91e 	bne	r6,r7,402d768 <__flash_rwdata_start+0xfffffb64>
 402d784:	0005883a 	mov	r2,zero
 402d788:	f800283a 	ret
 402d78c:	20c00017 	ldw	r3,0(r4)
 402d790:	28800017 	ldw	r2,0(r5)
 402d794:	18bfee1e 	bne	r3,r2,402d750 <__flash_rwdata_start+0xfffffb4c>
 402d798:	31bfff04 	addi	r6,r6,-4
 402d79c:	21000104 	addi	r4,r4,4
 402d7a0:	29400104 	addi	r5,r5,4
 402d7a4:	39bff936 	bltu	r7,r6,402d78c <__flash_rwdata_start+0xfffffb88>
 402d7a8:	303fe91e 	bne	r6,zero,402d750 <__flash_rwdata_start+0xfffffb4c>
 402d7ac:	003ff506 	br	402d784 <__flash_rwdata_start+0xfffffb80>
 402d7b0:	10c5c83a 	sub	r2,r2,r3
 402d7b4:	f800283a 	ret

0402d7b8 <__register_exitproc>:
 402d7b8:	defffa04 	addi	sp,sp,-24
 402d7bc:	dc000315 	stw	r16,12(sp)
 402d7c0:	04000034 	movhi	r16,0
 402d7c4:	8406f004 	addi	r16,r16,7104
 402d7c8:	80c00017 	ldw	r3,0(r16)
 402d7cc:	dc400415 	stw	r17,16(sp)
 402d7d0:	dfc00515 	stw	ra,20(sp)
 402d7d4:	18805217 	ldw	r2,328(r3)
 402d7d8:	2023883a 	mov	r17,r4
 402d7dc:	10003726 	beq	r2,zero,402d8bc <__register_exitproc+0x104>
 402d7e0:	10c00117 	ldw	r3,4(r2)
 402d7e4:	010007c4 	movi	r4,31
 402d7e8:	20c00e16 	blt	r4,r3,402d824 <__register_exitproc+0x6c>
 402d7ec:	1a000044 	addi	r8,r3,1
 402d7f0:	8800221e 	bne	r17,zero,402d87c <__register_exitproc+0xc4>
 402d7f4:	18c00084 	addi	r3,r3,2
 402d7f8:	18c7883a 	add	r3,r3,r3
 402d7fc:	18c7883a 	add	r3,r3,r3
 402d800:	12000115 	stw	r8,4(r2)
 402d804:	10c7883a 	add	r3,r2,r3
 402d808:	19400015 	stw	r5,0(r3)
 402d80c:	0005883a 	mov	r2,zero
 402d810:	dfc00517 	ldw	ra,20(sp)
 402d814:	dc400417 	ldw	r17,16(sp)
 402d818:	dc000317 	ldw	r16,12(sp)
 402d81c:	dec00604 	addi	sp,sp,24
 402d820:	f800283a 	ret
 402d824:	00800034 	movhi	r2,0
 402d828:	10800004 	addi	r2,r2,0
 402d82c:	10002626 	beq	r2,zero,402d8c8 <__register_exitproc+0x110>
 402d830:	01006404 	movi	r4,400
 402d834:	d9400015 	stw	r5,0(sp)
 402d838:	d9800115 	stw	r6,4(sp)
 402d83c:	d9c00215 	stw	r7,8(sp)
 402d840:	00000000 	call	0 <__alt_mem_sdram>
 402d844:	d9400017 	ldw	r5,0(sp)
 402d848:	d9800117 	ldw	r6,4(sp)
 402d84c:	d9c00217 	ldw	r7,8(sp)
 402d850:	10001d26 	beq	r2,zero,402d8c8 <__register_exitproc+0x110>
 402d854:	81000017 	ldw	r4,0(r16)
 402d858:	10000115 	stw	zero,4(r2)
 402d85c:	02000044 	movi	r8,1
 402d860:	22405217 	ldw	r9,328(r4)
 402d864:	0007883a 	mov	r3,zero
 402d868:	12400015 	stw	r9,0(r2)
 402d86c:	20805215 	stw	r2,328(r4)
 402d870:	10006215 	stw	zero,392(r2)
 402d874:	10006315 	stw	zero,396(r2)
 402d878:	883fde26 	beq	r17,zero,402d7f4 <__flash_rwdata_start+0xfffffbf0>
 402d87c:	18c9883a 	add	r4,r3,r3
 402d880:	2109883a 	add	r4,r4,r4
 402d884:	1109883a 	add	r4,r2,r4
 402d888:	21802215 	stw	r6,136(r4)
 402d88c:	01800044 	movi	r6,1
 402d890:	12406217 	ldw	r9,392(r2)
 402d894:	30cc983a 	sll	r6,r6,r3
 402d898:	4992b03a 	or	r9,r9,r6
 402d89c:	12406215 	stw	r9,392(r2)
 402d8a0:	21c04215 	stw	r7,264(r4)
 402d8a4:	01000084 	movi	r4,2
 402d8a8:	893fd21e 	bne	r17,r4,402d7f4 <__flash_rwdata_start+0xfffffbf0>
 402d8ac:	11006317 	ldw	r4,396(r2)
 402d8b0:	218cb03a 	or	r6,r4,r6
 402d8b4:	11806315 	stw	r6,396(r2)
 402d8b8:	003fce06 	br	402d7f4 <__flash_rwdata_start+0xfffffbf0>
 402d8bc:	18805304 	addi	r2,r3,332
 402d8c0:	18805215 	stw	r2,328(r3)
 402d8c4:	003fc606 	br	402d7e0 <__flash_rwdata_start+0xfffffbdc>
 402d8c8:	00bfffc4 	movi	r2,-1
 402d8cc:	003fd006 	br	402d810 <__flash_rwdata_start+0xfffffc0c>

0402d8d0 <__call_exitprocs>:
 402d8d0:	defff504 	addi	sp,sp,-44
 402d8d4:	df000915 	stw	fp,36(sp)
 402d8d8:	dd400615 	stw	r21,24(sp)
 402d8dc:	dc800315 	stw	r18,12(sp)
 402d8e0:	dfc00a15 	stw	ra,40(sp)
 402d8e4:	ddc00815 	stw	r23,32(sp)
 402d8e8:	dd800715 	stw	r22,28(sp)
 402d8ec:	dd000515 	stw	r20,20(sp)
 402d8f0:	dcc00415 	stw	r19,16(sp)
 402d8f4:	dc400215 	stw	r17,8(sp)
 402d8f8:	dc000115 	stw	r16,4(sp)
 402d8fc:	d9000015 	stw	r4,0(sp)
 402d900:	2839883a 	mov	fp,r5
 402d904:	04800044 	movi	r18,1
 402d908:	057fffc4 	movi	r21,-1
 402d90c:	00800034 	movhi	r2,0
 402d910:	1086f004 	addi	r2,r2,7104
 402d914:	12000017 	ldw	r8,0(r2)
 402d918:	45005217 	ldw	r20,328(r8)
 402d91c:	44c05204 	addi	r19,r8,328
 402d920:	a0001c26 	beq	r20,zero,402d994 <__call_exitprocs+0xc4>
 402d924:	a0800117 	ldw	r2,4(r20)
 402d928:	15ffffc4 	addi	r23,r2,-1
 402d92c:	b8000d16 	blt	r23,zero,402d964 <__call_exitprocs+0x94>
 402d930:	14000044 	addi	r16,r2,1
 402d934:	8421883a 	add	r16,r16,r16
 402d938:	8421883a 	add	r16,r16,r16
 402d93c:	84402004 	addi	r17,r16,128
 402d940:	a463883a 	add	r17,r20,r17
 402d944:	a421883a 	add	r16,r20,r16
 402d948:	e0001e26 	beq	fp,zero,402d9c4 <__call_exitprocs+0xf4>
 402d94c:	80804017 	ldw	r2,256(r16)
 402d950:	e0801c26 	beq	fp,r2,402d9c4 <__call_exitprocs+0xf4>
 402d954:	bdffffc4 	addi	r23,r23,-1
 402d958:	843fff04 	addi	r16,r16,-4
 402d95c:	8c7fff04 	addi	r17,r17,-4
 402d960:	bd7ff91e 	bne	r23,r21,402d948 <__flash_rwdata_start+0xfffffd44>
 402d964:	00800034 	movhi	r2,0
 402d968:	10800004 	addi	r2,r2,0
 402d96c:	10000926 	beq	r2,zero,402d994 <__call_exitprocs+0xc4>
 402d970:	a0800117 	ldw	r2,4(r20)
 402d974:	1000301e 	bne	r2,zero,402da38 <__call_exitprocs+0x168>
 402d978:	a0800017 	ldw	r2,0(r20)
 402d97c:	10003226 	beq	r2,zero,402da48 <__call_exitprocs+0x178>
 402d980:	a009883a 	mov	r4,r20
 402d984:	98800015 	stw	r2,0(r19)
 402d988:	00000000 	call	0 <__alt_mem_sdram>
 402d98c:	9d000017 	ldw	r20,0(r19)
 402d990:	a03fe41e 	bne	r20,zero,402d924 <__flash_rwdata_start+0xfffffd20>
 402d994:	dfc00a17 	ldw	ra,40(sp)
 402d998:	df000917 	ldw	fp,36(sp)
 402d99c:	ddc00817 	ldw	r23,32(sp)
 402d9a0:	dd800717 	ldw	r22,28(sp)
 402d9a4:	dd400617 	ldw	r21,24(sp)
 402d9a8:	dd000517 	ldw	r20,20(sp)
 402d9ac:	dcc00417 	ldw	r19,16(sp)
 402d9b0:	dc800317 	ldw	r18,12(sp)
 402d9b4:	dc400217 	ldw	r17,8(sp)
 402d9b8:	dc000117 	ldw	r16,4(sp)
 402d9bc:	dec00b04 	addi	sp,sp,44
 402d9c0:	f800283a 	ret
 402d9c4:	a0800117 	ldw	r2,4(r20)
 402d9c8:	80c00017 	ldw	r3,0(r16)
 402d9cc:	10bfffc4 	addi	r2,r2,-1
 402d9d0:	15c01426 	beq	r2,r23,402da24 <__call_exitprocs+0x154>
 402d9d4:	80000015 	stw	zero,0(r16)
 402d9d8:	183fde26 	beq	r3,zero,402d954 <__flash_rwdata_start+0xfffffd50>
 402d9dc:	95c8983a 	sll	r4,r18,r23
 402d9e0:	a0806217 	ldw	r2,392(r20)
 402d9e4:	a5800117 	ldw	r22,4(r20)
 402d9e8:	2084703a 	and	r2,r4,r2
 402d9ec:	10000b26 	beq	r2,zero,402da1c <__call_exitprocs+0x14c>
 402d9f0:	a0806317 	ldw	r2,396(r20)
 402d9f4:	2088703a 	and	r4,r4,r2
 402d9f8:	20000c1e 	bne	r4,zero,402da2c <__call_exitprocs+0x15c>
 402d9fc:	89400017 	ldw	r5,0(r17)
 402da00:	d9000017 	ldw	r4,0(sp)
 402da04:	183ee83a 	callr	r3
 402da08:	a0800117 	ldw	r2,4(r20)
 402da0c:	15bfbf1e 	bne	r2,r22,402d90c <__flash_rwdata_start+0xfffffd08>
 402da10:	98800017 	ldw	r2,0(r19)
 402da14:	153fcf26 	beq	r2,r20,402d954 <__flash_rwdata_start+0xfffffd50>
 402da18:	003fbc06 	br	402d90c <__flash_rwdata_start+0xfffffd08>
 402da1c:	183ee83a 	callr	r3
 402da20:	003ff906 	br	402da08 <__flash_rwdata_start+0xfffffe04>
 402da24:	a5c00115 	stw	r23,4(r20)
 402da28:	003feb06 	br	402d9d8 <__flash_rwdata_start+0xfffffdd4>
 402da2c:	89000017 	ldw	r4,0(r17)
 402da30:	183ee83a 	callr	r3
 402da34:	003ff406 	br	402da08 <__flash_rwdata_start+0xfffffe04>
 402da38:	a0800017 	ldw	r2,0(r20)
 402da3c:	a027883a 	mov	r19,r20
 402da40:	1029883a 	mov	r20,r2
 402da44:	003fb606 	br	402d920 <__flash_rwdata_start+0xfffffd1c>
 402da48:	0005883a 	mov	r2,zero
 402da4c:	003ffb06 	br	402da3c <__flash_rwdata_start+0xfffffe38>

0402da50 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 402da50:	defffd04 	addi	sp,sp,-12
 402da54:	df000215 	stw	fp,8(sp)
 402da58:	df000204 	addi	fp,sp,8
 402da5c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 402da60:	d0203945 	stb	zero,-32539(gp)
 402da64:	e0bfff17 	ldw	r2,-4(fp)
 402da68:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 402da6c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 402da70:	10000226 	beq	r2,zero,402da7c <_exit+0x2c>
    ALT_SIM_FAIL();
 402da74:	002af070 	cmpltui	zero,zero,43969
 402da78:	00000106 	br	402da80 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 402da7c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 402da80:	003fff06 	br	402da80 <__flash_rwdata_start+0xfffffe7c>
