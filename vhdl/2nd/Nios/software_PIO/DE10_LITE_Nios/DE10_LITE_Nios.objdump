
DE10_LITE_Nios.elf:     file format elf32-littlenios2
DE10_LITE_Nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020230

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x00005a6c memsz 0x00005a6c flags r-x
    LOAD off    0x00007000 vaddr 0x00000000 paddr 0x04025a8c align 2**12
         filesz 0x00001af4 memsz 0x00001c48 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000585c  04020230  04020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000060  00000000  04025a8c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a94  00000060  04025aec  00007060  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00001af4  04027580  00008af4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00001c48  00001c48  00008af4  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  04027580  04027580  00008af4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008af4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a70  00000000  00000000  00008b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000166a9  00000000  00000000  00009588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006184  00000000  00000000  0001fc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006b5c  00000000  00000000  00025db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001610  00000000  00000000  0002c914  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002854  00000000  00000000  0002df24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  00030778  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00035254  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00035298  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00037f6e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00037f71  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00037f7d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00037f7e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00037f7f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00037f83  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00037f87  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00037f8b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00037f94  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00037f9d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000e  00000000  00000000  00037fa6  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000010  00000000  00000000  00037fb4  2**0
                  CONTENTS, READONLY
 30 .jdi          000044fa  00000000  00000000  00037fc4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000665cd  00000000  00000000  0003c4be  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020230 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000060 l    d  .rwdata	00000000 .rwdata
00001af4 l    d  .bss	00000000 .bss
00001c48 l    d  .sdram	00000000 .sdram
04027580 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE10_LITE_Nios_bsp//obj/HAL/src/crt0.o
04020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
040204c0 l     F .text	00000008 __fp_unlock
040204d4 l     F .text	0000019c __sinit.part.1
04020670 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000088 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
04023160 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04023274 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040232a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04023394 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0402347c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04023568 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04023744 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001ae4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
040239e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04023b24 l     F .text	00000034 alt_dev_reg
00000a5c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04023e18 l     F .text	0000020c altera_avalon_jtag_uart_irq
04024024 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0402465c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
040249f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04024e54 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04024fb4 l     F .text	0000003c alt_get_errno
04024ff0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001b1c g     O .bss	00000004 alt_instruction_exception_handler
04022f30 g     F .text	00000054 _isatty_r
04023680 g     F .text	0000007c alt_main
04020354 g     F .text	000000c0 _puts_r
00001b48 g     O .bss	00000100 alt_irq
04022c58 g     F .text	00000060 _lseek_r
04025aec g       *ABS*	00000000 __flash_rwdata_start
00001c48 g       *ABS*	00000000 __alt_heap_start
0402220c g     F .text	0000005c __sseek
04020820 g     F .text	00000010 __sinit
04020678 g     F .text	00000078 __sfmoreglue
04023720 g     F .text	00000024 __malloc_unlock
040218f8 g     F .text	0000015c memmove
04020808 g     F .text	00000018 _cleanup
040253dc g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000000c __reset
04020020 g       *ABS*	00000000 __flash_exceptions_start
04022ed4 g     F .text	0000005c _fstat_r
00001b00 g     O .bss	00000004 errno
04022188 g     F .text	00000008 __seofread
00001b08 g     O .bss	00000004 alt_argv
00009abc g       *ABS*	00000000 _gp
040239b8 g     F .text	00000030 usleep
000008dc g     O .rwdata	00000180 alt_fd_list
04025400 g     F .text	00000090 alt_find_dev
040217b0 g     F .text	00000148 memcpy
040204c8 g     F .text	0000000c _cleanup_r
04024f38 g     F .text	0000007c alt_io_redirect
04025a8c g       *ABS*	00000000 __DTOR_END__
04020414 g     F .text	00000014 puts
0402565c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0402421c g     F .text	0000021c altera_avalon_jtag_uart_read
0402307c g     F .text	00000064 .hidden __udivsi3
040233d0 g     F .text	000000ac isatty
00001afc g     O .bss	00000004 __malloc_top_pad
04020870 g     F .text	000004c8 __sfvwrite_r
040220e0 g     F .text	00000054 _sbrk_r
04022e74 g     F .text	00000060 _read_r
00001adc g     O .rwdata	00000004 alt_max_fd
04022478 g     F .text	000000f0 _fclose_r
040227f4 g     F .text	00000030 fflush
00001af8 g     O .bss	00000004 __malloc_max_sbrked_mem
040235a4 g     F .text	000000dc lseek
00001abc g     O .rwdata	00000004 _global_impure_ptr
04021b7c g     F .text	00000564 _realloc_r
00001c48 g       *ABS*	00000000 __bss_end
04024d64 g     F .text	000000f0 alt_iic_isr_register
040252d4 g     F .text	00000108 alt_tick
04020840 g     F .text	00000018 __fp_lock_all
04024d18 g     F .text	0000004c alt_ic_irq_enabled
04025238 g     F .text	0000009c alt_alarm_stop
00001b10 g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d4 alt_irq_handler
000008b4 g     O .rwdata	00000028 alt_dev_null
00000060 g     O .rwdata	00000028 number
040249d4 g     F .text	00000020 alt_dcache_flush_all
00001af4 g       *ABS*	00000000 __ram_rwdata_end
00001ad4 g     O .rwdata	00000008 alt_dev_list
04023a24 g     F .text	00000100 write
00000060 g       *ABS*	00000000 __ram_rodata_end
040232dc g     F .text	000000b8 fstat
040230e0 g     F .text	00000058 .hidden __umodsi3
00001c48 g       *ABS*	00000000 end
04023d58 g     F .text	000000c0 altera_avalon_jtag_uart_init
040201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04025a8c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
040246d4 g     F .text	0000007c alt_avalon_timer_sc_init
04024438 g     F .text	00000224 altera_avalon_jtag_uart_write
04020830 g     F .text	00000004 __sfp_lock_acquire
040216cc g     F .text	000000e4 memchr
04022948 g     F .text	00000310 _free_r
040258d8 g     F .text	00000180 __call_exitprocs
00001ac4 g     O .rwdata	00000004 __malloc_sbrk_base
04020230 g     F .text	0000003c _start
00001b14 g     O .bss	00000004 _alt_tick_rate
00001b18 g     O .bss	00000004 _alt_nticks
04023780 g     F .text	00000104 read
04023b90 g     F .text	00000064 alt_sys_init
040257c0 g     F .text	00000118 __register_exitproc
040240c4 g     F .text	00000068 altera_avalon_jtag_uart_close
04023138 g     F .text	00000028 .hidden __mulsi3
00000060 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001b20 g     O .bss	00000028 __malloc_current_mallinfo
04023bf4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04025598 g     F .text	000000c4 alt_get_fd
0402487c g     F .text	00000158 alt_busy_sleep
04022424 g     F .text	00000054 _close_r
04025744 g     F .text	0000007c memcmp
04023cb4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001c48 g       *ABS*	00000000 __alt_stack_base
04023d04 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040222d0 g     F .text	00000154 __swsetup_r
040206f0 g     F .text	00000118 __sfp
000004ac g     O .rwdata	00000408 __malloc_av_
0402083c g     F .text	00000004 __sinit_lock_release
04022134 g     F .text	00000054 __sread
04025490 g     F .text	00000108 alt_find_file
04024a30 g     F .text	000000a4 alt_dev_llist_insert
040236fc g     F .text	00000024 __malloc_lock
04023908 g     F .text	000000b0 sbrk
04022798 g     F .text	0000005c _fflush_r
00001af4 g       *ABS*	00000000 __bss_start
04021a54 g     F .text	00000128 memset
0402026c g     F .text	000000e8 main
00001b0c g     O .bss	00000004 alt_envp
00001af4 g     O .bss	00000004 __malloc_max_total_mem
04023c54 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04022268 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
04022568 g     F .text	00000014 fclose
04020ec0 g     F .text	0000080c _malloc_r
00001ae0 g     O .rwdata	00000004 alt_errno
04020d38 g     F .text	000000c4 _fwalk
04022f84 g     F .text	00000084 .hidden __divsi3
04022824 g     F .text	00000124 _malloc_trim_r
04025a8c g       *ABS*	00000000 __CTOR_END__
04025a8c g       *ABS*	00000000 __flash_rodata_start
04025a8c g       *ABS*	00000000 __DTOR_LIST__
04023b58 g     F .text	00000038 alt_irq_init
04023884 g     F .text	00000084 alt_release_fd
040256f8 g     F .text	00000014 atexit
04022270 g     F .text	00000060 _write_r
00001ac0 g     O .rwdata	00000004 _impure_ptr
00001b04 g     O .bss	00000004 alt_argc
0402257c g     F .text	0000021c __sflush_r
04024b34 g     F .text	00000060 _do_dtors
04020020 g       .exceptions	00000000 alt_irq_entry
04020858 g     F .text	00000018 __fp_unlock_all
00001acc g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
04024bb4 g     F .text	00000050 alt_ic_isr_register
00001af4 g       *ABS*	00000000 _edata
00001c48 g       *ABS*	00000000 _end
04020230 g       *ABS*	00000000 __ram_exceptions_end
0402412c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04024c8c g     F .text	0000008c alt_ic_irq_disable
04022190 g     F .text	0000007c __swrite
00001ac8 g     O .rwdata	00000004 __malloc_trim_threshold
0402570c g     F .text	00000038 exit
04020dfc g     F .text	000000c4 _fwalk_reent
04023008 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
04020834 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
04025a58 g     F .text	00000034 _exit
04024750 g     F .text	0000012c alt_alarm_start
04022cb8 g     F .text	000001bc __smakebuf_r
04020428 g     F .text	00000098 strlen
040250dc g     F .text	0000015c open
04024b94 g     F .text	00000020 alt_icache_flush_all
00001ae8 g     O .rwdata	00000004 alt_priority_mask
04024c04 g     F .text	00000088 alt_ic_irq_enable
00001aec g     O .rwdata	00000008 alt_alarm_list
04024ad4 g     F .text	00000060 _do_ctors
0402319c g     F .text	000000d8 close
040234e4 g     F .text	00000084 alt_load
04020838 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020000:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020004:	08408c14 	ori	at,at,560
    jmp r1
 4020008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	00800034 	movhi	r2,0
 4020140:	1086d204 	addi	r2,r2,6984
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	00800034 	movhi	r2,0
 4020158:	1086d204 	addi	r2,r2,6984
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__flash_rwdata_start+0xffffa640>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__flash_rwdata_start+0xffffa634>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	0001883a 	nop
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40201e4:	00bfffc4 	movi	r2,-1
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40201f0:	d0a01817 	ldw	r2,-32672(gp)
 40201f4:	10000726 	beq	r2,zero,4020214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40201f8:	d0a01817 	ldw	r2,-32672(gp)
 40201fc:	e0fffd17 	ldw	r3,-12(fp)
 4020200:	e1bffe17 	ldw	r6,-8(fp)
 4020204:	e17fff17 	ldw	r5,-4(fp)
 4020208:	1809883a 	mov	r4,r3
 402020c:	103ee83a 	callr	r2
 4020210:	00000206 	br	402021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4020218:	0005883a 	mov	r2,zero
}
 402021c:	e037883a 	mov	sp,fp
 4020220:	dfc00117 	ldw	ra,4(sp)
 4020224:	df000017 	ldw	fp,0(sp)
 4020228:	dec00204 	addi	sp,sp,8
 402022c:	f800283a 	ret

Disassembly of section .text:

04020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4020234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4020238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 402023c:	d6a6af14 	ori	gp,gp,39612
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4020244:	1086bd14 	ori	r2,r2,6900

    movhi r3, %hi(__bss_end)
 4020248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 402024c:	18c71214 	ori	r3,r3,7240

    beq r2, r3, 1f
 4020250:	10c00326 	beq	r2,r3,4020260 <_start+0x30>

0:
    stw zero, (r2)
 4020254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4020258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 402025c:	10fffd36 	bltu	r2,r3,4020254 <__flash_rwdata_start+0xffffa768>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020260:	40234e40 	call	40234e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020264:	40236800 	call	4023680 <alt_main>

04020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4020268:	003fff06 	br	4020268 <__flash_rwdata_start+0xffffa77c>

0402026c <main>:
#include "alt_types.h"

int number[10] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101, 0b01111101, 0b00100111, 0b01111111, 0b01101111};

int main()
{
 402026c:	defffd04 	addi	sp,sp,-12
 4020270:	dfc00215 	stw	ra,8(sp)
 4020274:	df000115 	stw	fp,4(sp)
 4020278:	df000104 	addi	fp,sp,4
  int count = 0;
 402027c:	e03fff15 	stw	zero,-4(fp)

  printf("KEY/SW/HEX/LEDR Demo! KEY0 Start, KEY1 End.\n");
 4020280:	01000034 	movhi	r4,0
 4020284:	21000004 	addi	r4,r4,0
 4020288:	40204140 	call	4020414 <puts>
  while (IORD(KEY_BASE, 0) & 0x1) {  // KEY0 Start
 402028c:	00000806 	br	40202b0 <main+0x44>
	IOWR(HEX_BASE, 0, 0);  // HEX Clear
 4020290:	0007883a 	mov	r3,zero
 4020294:	00810134 	movhi	r2,1028
 4020298:	10842004 	addi	r2,r2,4224
 402029c:	10c00035 	stwio	r3,0(r2)
	IOWR(LEDR_BASE, 0, 0); // LEDR Clear
 40202a0:	0007883a 	mov	r3,zero
 40202a4:	00810134 	movhi	r2,1028
 40202a8:	10842804 	addi	r2,r2,4256
 40202ac:	10c00035 	stwio	r3,0(r2)
int main()
{
  int count = 0;

  printf("KEY/SW/HEX/LEDR Demo! KEY0 Start, KEY1 End.\n");
  while (IORD(KEY_BASE, 0) & 0x1) {  // KEY0 Start
 40202b0:	00810134 	movhi	r2,1028
 40202b4:	10840804 	addi	r2,r2,4128
 40202b8:	10800037 	ldwio	r2,0(r2)
 40202bc:	1080004c 	andi	r2,r2,1
 40202c0:	103ff31e 	bne	r2,zero,4020290 <__flash_rwdata_start+0xffffa7a4>
	IOWR(HEX_BASE, 0, 0);  // HEX Clear
	IOWR(LEDR_BASE, 0, 0); // LEDR Clear
  }
  do {
	if (count>10) count=0;
 40202c4:	e0bfff17 	ldw	r2,-4(fp)
 40202c8:	108002d0 	cmplti	r2,r2,11
 40202cc:	1000011e 	bne	r2,zero,40202d4 <main+0x68>
 40202d0:	e03fff15 	stw	zero,-4(fp)
	IOWR(HEX_BASE, 0, number[count++]);  // HEX<-SW
 40202d4:	e0ffff17 	ldw	r3,-4(fp)
 40202d8:	18800044 	addi	r2,r3,1
 40202dc:	e0bfff15 	stw	r2,-4(fp)
 40202e0:	00800034 	movhi	r2,0
 40202e4:	10801804 	addi	r2,r2,96
 40202e8:	18c7883a 	add	r3,r3,r3
 40202ec:	18c7883a 	add	r3,r3,r3
 40202f0:	10c5883a 	add	r2,r2,r3
 40202f4:	10c00017 	ldw	r3,0(r2)
 40202f8:	00810134 	movhi	r2,1028
 40202fc:	10842004 	addi	r2,r2,4224
 4020300:	10c00035 	stwio	r3,0(r2)
	IOWR(LEDR_BASE, 0, IORD(SW_BASE, 0));  // LEDR<-count
 4020304:	00810134 	movhi	r2,1028
 4020308:	10841804 	addi	r2,r2,4192
 402030c:	10c00037 	ldwio	r3,0(r2)
 4020310:	00810134 	movhi	r2,1028
 4020314:	10842804 	addi	r2,r2,4256
 4020318:	10c00035 	stwio	r3,0(r2)
	usleep(100*1000);  // 1us Sleep
 402031c:	010000b4 	movhi	r4,2
 4020320:	2121a804 	addi	r4,r4,-31072
 4020324:	40239b80 	call	40239b8 <usleep>
  } while (IORD(KEY_BASE, 0) & 0x2);  // KEY1 End
 4020328:	00810134 	movhi	r2,1028
 402032c:	10840804 	addi	r2,r2,4128
 4020330:	10800037 	ldwio	r2,0(r2)
 4020334:	1080008c 	andi	r2,r2,2
 4020338:	103fe21e 	bne	r2,zero,40202c4 <__flash_rwdata_start+0xffffa7d8>
  return 0;
 402033c:	0005883a 	mov	r2,zero
}
 4020340:	e037883a 	mov	sp,fp
 4020344:	dfc00117 	ldw	ra,4(sp)
 4020348:	df000017 	ldw	fp,0(sp)
 402034c:	dec00204 	addi	sp,sp,8
 4020350:	f800283a 	ret

04020354 <_puts_r>:
 4020354:	defff604 	addi	sp,sp,-40
 4020358:	dc000715 	stw	r16,28(sp)
 402035c:	2021883a 	mov	r16,r4
 4020360:	2809883a 	mov	r4,r5
 4020364:	dc400815 	stw	r17,32(sp)
 4020368:	dfc00915 	stw	ra,36(sp)
 402036c:	2823883a 	mov	r17,r5
 4020370:	40204280 	call	4020428 <strlen>
 4020374:	10c00044 	addi	r3,r2,1
 4020378:	d8800115 	stw	r2,4(sp)
 402037c:	00800034 	movhi	r2,0
 4020380:	10800b04 	addi	r2,r2,44
 4020384:	d8800215 	stw	r2,8(sp)
 4020388:	00800044 	movi	r2,1
 402038c:	d8800315 	stw	r2,12(sp)
 4020390:	00800084 	movi	r2,2
 4020394:	dc400015 	stw	r17,0(sp)
 4020398:	d8c00615 	stw	r3,24(sp)
 402039c:	dec00415 	stw	sp,16(sp)
 40203a0:	d8800515 	stw	r2,20(sp)
 40203a4:	80000226 	beq	r16,zero,40203b0 <_puts_r+0x5c>
 40203a8:	80800e17 	ldw	r2,56(r16)
 40203ac:	10001426 	beq	r2,zero,4020400 <_puts_r+0xac>
 40203b0:	81400217 	ldw	r5,8(r16)
 40203b4:	2880030b 	ldhu	r2,12(r5)
 40203b8:	10c8000c 	andi	r3,r2,8192
 40203bc:	1800061e 	bne	r3,zero,40203d8 <_puts_r+0x84>
 40203c0:	29001917 	ldw	r4,100(r5)
 40203c4:	00f7ffc4 	movi	r3,-8193
 40203c8:	10880014 	ori	r2,r2,8192
 40203cc:	20c6703a 	and	r3,r4,r3
 40203d0:	2880030d 	sth	r2,12(r5)
 40203d4:	28c01915 	stw	r3,100(r5)
 40203d8:	d9800404 	addi	r6,sp,16
 40203dc:	8009883a 	mov	r4,r16
 40203e0:	40208700 	call	4020870 <__sfvwrite_r>
 40203e4:	1000091e 	bne	r2,zero,402040c <_puts_r+0xb8>
 40203e8:	00800284 	movi	r2,10
 40203ec:	dfc00917 	ldw	ra,36(sp)
 40203f0:	dc400817 	ldw	r17,32(sp)
 40203f4:	dc000717 	ldw	r16,28(sp)
 40203f8:	dec00a04 	addi	sp,sp,40
 40203fc:	f800283a 	ret
 4020400:	8009883a 	mov	r4,r16
 4020404:	40208200 	call	4020820 <__sinit>
 4020408:	003fe906 	br	40203b0 <__flash_rwdata_start+0xffffa8c4>
 402040c:	00bfffc4 	movi	r2,-1
 4020410:	003ff606 	br	40203ec <__flash_rwdata_start+0xffffa900>

04020414 <puts>:
 4020414:	00800034 	movhi	r2,0
 4020418:	1086b004 	addi	r2,r2,6848
 402041c:	200b883a 	mov	r5,r4
 4020420:	11000017 	ldw	r4,0(r2)
 4020424:	40203541 	jmpi	4020354 <_puts_r>

04020428 <strlen>:
 4020428:	208000cc 	andi	r2,r4,3
 402042c:	10002026 	beq	r2,zero,40204b0 <strlen+0x88>
 4020430:	20800007 	ldb	r2,0(r4)
 4020434:	10002026 	beq	r2,zero,40204b8 <strlen+0x90>
 4020438:	2005883a 	mov	r2,r4
 402043c:	00000206 	br	4020448 <strlen+0x20>
 4020440:	10c00007 	ldb	r3,0(r2)
 4020444:	18001826 	beq	r3,zero,40204a8 <strlen+0x80>
 4020448:	10800044 	addi	r2,r2,1
 402044c:	10c000cc 	andi	r3,r2,3
 4020450:	183ffb1e 	bne	r3,zero,4020440 <__flash_rwdata_start+0xffffa954>
 4020454:	10c00017 	ldw	r3,0(r2)
 4020458:	01ffbff4 	movhi	r7,65279
 402045c:	39ffbfc4 	addi	r7,r7,-257
 4020460:	00ca303a 	nor	r5,zero,r3
 4020464:	01a02074 	movhi	r6,32897
 4020468:	19c7883a 	add	r3,r3,r7
 402046c:	31a02004 	addi	r6,r6,-32640
 4020470:	1946703a 	and	r3,r3,r5
 4020474:	1986703a 	and	r3,r3,r6
 4020478:	1800091e 	bne	r3,zero,40204a0 <strlen+0x78>
 402047c:	10800104 	addi	r2,r2,4
 4020480:	10c00017 	ldw	r3,0(r2)
 4020484:	19cb883a 	add	r5,r3,r7
 4020488:	00c6303a 	nor	r3,zero,r3
 402048c:	28c6703a 	and	r3,r5,r3
 4020490:	1986703a 	and	r3,r3,r6
 4020494:	183ff926 	beq	r3,zero,402047c <__flash_rwdata_start+0xffffa990>
 4020498:	00000106 	br	40204a0 <strlen+0x78>
 402049c:	10800044 	addi	r2,r2,1
 40204a0:	10c00007 	ldb	r3,0(r2)
 40204a4:	183ffd1e 	bne	r3,zero,402049c <__flash_rwdata_start+0xffffa9b0>
 40204a8:	1105c83a 	sub	r2,r2,r4
 40204ac:	f800283a 	ret
 40204b0:	2005883a 	mov	r2,r4
 40204b4:	003fe706 	br	4020454 <__flash_rwdata_start+0xffffa968>
 40204b8:	0005883a 	mov	r2,zero
 40204bc:	f800283a 	ret

040204c0 <__fp_unlock>:
 40204c0:	0005883a 	mov	r2,zero
 40204c4:	f800283a 	ret

040204c8 <_cleanup_r>:
 40204c8:	014100b4 	movhi	r5,1026
 40204cc:	29491e04 	addi	r5,r5,9336
 40204d0:	4020dfc1 	jmpi	4020dfc <_fwalk_reent>

040204d4 <__sinit.part.1>:
 40204d4:	defff704 	addi	sp,sp,-36
 40204d8:	00c100b4 	movhi	r3,1026
 40204dc:	dfc00815 	stw	ra,32(sp)
 40204e0:	ddc00715 	stw	r23,28(sp)
 40204e4:	dd800615 	stw	r22,24(sp)
 40204e8:	dd400515 	stw	r21,20(sp)
 40204ec:	dd000415 	stw	r20,16(sp)
 40204f0:	dcc00315 	stw	r19,12(sp)
 40204f4:	dc800215 	stw	r18,8(sp)
 40204f8:	dc400115 	stw	r17,4(sp)
 40204fc:	dc000015 	stw	r16,0(sp)
 4020500:	18c13204 	addi	r3,r3,1224
 4020504:	24000117 	ldw	r16,4(r4)
 4020508:	20c00f15 	stw	r3,60(r4)
 402050c:	2080bb04 	addi	r2,r4,748
 4020510:	00c000c4 	movi	r3,3
 4020514:	20c0b915 	stw	r3,740(r4)
 4020518:	2080ba15 	stw	r2,744(r4)
 402051c:	2000b815 	stw	zero,736(r4)
 4020520:	05c00204 	movi	r23,8
 4020524:	00800104 	movi	r2,4
 4020528:	2025883a 	mov	r18,r4
 402052c:	b80d883a 	mov	r6,r23
 4020530:	81001704 	addi	r4,r16,92
 4020534:	000b883a 	mov	r5,zero
 4020538:	80000015 	stw	zero,0(r16)
 402053c:	80000115 	stw	zero,4(r16)
 4020540:	80000215 	stw	zero,8(r16)
 4020544:	8080030d 	sth	r2,12(r16)
 4020548:	80001915 	stw	zero,100(r16)
 402054c:	8000038d 	sth	zero,14(r16)
 4020550:	80000415 	stw	zero,16(r16)
 4020554:	80000515 	stw	zero,20(r16)
 4020558:	80000615 	stw	zero,24(r16)
 402055c:	4021a540 	call	4021a54 <memset>
 4020560:	058100b4 	movhi	r22,1026
 4020564:	94400217 	ldw	r17,8(r18)
 4020568:	054100b4 	movhi	r21,1026
 402056c:	050100b4 	movhi	r20,1026
 4020570:	04c100b4 	movhi	r19,1026
 4020574:	b5884d04 	addi	r22,r22,8500
 4020578:	ad486404 	addi	r21,r21,8592
 402057c:	a5088304 	addi	r20,r20,8716
 4020580:	9cc89a04 	addi	r19,r19,8808
 4020584:	85800815 	stw	r22,32(r16)
 4020588:	85400915 	stw	r21,36(r16)
 402058c:	85000a15 	stw	r20,40(r16)
 4020590:	84c00b15 	stw	r19,44(r16)
 4020594:	84000715 	stw	r16,28(r16)
 4020598:	00800284 	movi	r2,10
 402059c:	8880030d 	sth	r2,12(r17)
 40205a0:	00800044 	movi	r2,1
 40205a4:	b80d883a 	mov	r6,r23
 40205a8:	89001704 	addi	r4,r17,92
 40205ac:	000b883a 	mov	r5,zero
 40205b0:	88000015 	stw	zero,0(r17)
 40205b4:	88000115 	stw	zero,4(r17)
 40205b8:	88000215 	stw	zero,8(r17)
 40205bc:	88001915 	stw	zero,100(r17)
 40205c0:	8880038d 	sth	r2,14(r17)
 40205c4:	88000415 	stw	zero,16(r17)
 40205c8:	88000515 	stw	zero,20(r17)
 40205cc:	88000615 	stw	zero,24(r17)
 40205d0:	4021a540 	call	4021a54 <memset>
 40205d4:	94000317 	ldw	r16,12(r18)
 40205d8:	00800484 	movi	r2,18
 40205dc:	8c400715 	stw	r17,28(r17)
 40205e0:	8d800815 	stw	r22,32(r17)
 40205e4:	8d400915 	stw	r21,36(r17)
 40205e8:	8d000a15 	stw	r20,40(r17)
 40205ec:	8cc00b15 	stw	r19,44(r17)
 40205f0:	8080030d 	sth	r2,12(r16)
 40205f4:	00800084 	movi	r2,2
 40205f8:	80000015 	stw	zero,0(r16)
 40205fc:	80000115 	stw	zero,4(r16)
 4020600:	80000215 	stw	zero,8(r16)
 4020604:	80001915 	stw	zero,100(r16)
 4020608:	8080038d 	sth	r2,14(r16)
 402060c:	80000415 	stw	zero,16(r16)
 4020610:	80000515 	stw	zero,20(r16)
 4020614:	80000615 	stw	zero,24(r16)
 4020618:	b80d883a 	mov	r6,r23
 402061c:	000b883a 	mov	r5,zero
 4020620:	81001704 	addi	r4,r16,92
 4020624:	4021a540 	call	4021a54 <memset>
 4020628:	00800044 	movi	r2,1
 402062c:	84000715 	stw	r16,28(r16)
 4020630:	85800815 	stw	r22,32(r16)
 4020634:	85400915 	stw	r21,36(r16)
 4020638:	85000a15 	stw	r20,40(r16)
 402063c:	84c00b15 	stw	r19,44(r16)
 4020640:	90800e15 	stw	r2,56(r18)
 4020644:	dfc00817 	ldw	ra,32(sp)
 4020648:	ddc00717 	ldw	r23,28(sp)
 402064c:	dd800617 	ldw	r22,24(sp)
 4020650:	dd400517 	ldw	r21,20(sp)
 4020654:	dd000417 	ldw	r20,16(sp)
 4020658:	dcc00317 	ldw	r19,12(sp)
 402065c:	dc800217 	ldw	r18,8(sp)
 4020660:	dc400117 	ldw	r17,4(sp)
 4020664:	dc000017 	ldw	r16,0(sp)
 4020668:	dec00904 	addi	sp,sp,36
 402066c:	f800283a 	ret

04020670 <__fp_lock>:
 4020670:	0005883a 	mov	r2,zero
 4020674:	f800283a 	ret

04020678 <__sfmoreglue>:
 4020678:	defffc04 	addi	sp,sp,-16
 402067c:	dc800215 	stw	r18,8(sp)
 4020680:	2825883a 	mov	r18,r5
 4020684:	dc000015 	stw	r16,0(sp)
 4020688:	01401a04 	movi	r5,104
 402068c:	2021883a 	mov	r16,r4
 4020690:	913fffc4 	addi	r4,r18,-1
 4020694:	dfc00315 	stw	ra,12(sp)
 4020698:	dc400115 	stw	r17,4(sp)
 402069c:	40231380 	call	4023138 <__mulsi3>
 40206a0:	8009883a 	mov	r4,r16
 40206a4:	11401d04 	addi	r5,r2,116
 40206a8:	1023883a 	mov	r17,r2
 40206ac:	4020ec00 	call	4020ec0 <_malloc_r>
 40206b0:	1021883a 	mov	r16,r2
 40206b4:	10000726 	beq	r2,zero,40206d4 <__sfmoreglue+0x5c>
 40206b8:	11000304 	addi	r4,r2,12
 40206bc:	10000015 	stw	zero,0(r2)
 40206c0:	14800115 	stw	r18,4(r2)
 40206c4:	11000215 	stw	r4,8(r2)
 40206c8:	89801a04 	addi	r6,r17,104
 40206cc:	000b883a 	mov	r5,zero
 40206d0:	4021a540 	call	4021a54 <memset>
 40206d4:	8005883a 	mov	r2,r16
 40206d8:	dfc00317 	ldw	ra,12(sp)
 40206dc:	dc800217 	ldw	r18,8(sp)
 40206e0:	dc400117 	ldw	r17,4(sp)
 40206e4:	dc000017 	ldw	r16,0(sp)
 40206e8:	dec00404 	addi	sp,sp,16
 40206ec:	f800283a 	ret

040206f0 <__sfp>:
 40206f0:	defffb04 	addi	sp,sp,-20
 40206f4:	dc000015 	stw	r16,0(sp)
 40206f8:	04000034 	movhi	r16,0
 40206fc:	8406af04 	addi	r16,r16,6844
 4020700:	dcc00315 	stw	r19,12(sp)
 4020704:	2027883a 	mov	r19,r4
 4020708:	81000017 	ldw	r4,0(r16)
 402070c:	dfc00415 	stw	ra,16(sp)
 4020710:	dc800215 	stw	r18,8(sp)
 4020714:	20800e17 	ldw	r2,56(r4)
 4020718:	dc400115 	stw	r17,4(sp)
 402071c:	1000021e 	bne	r2,zero,4020728 <__sfp+0x38>
 4020720:	40204d40 	call	40204d4 <__sinit.part.1>
 4020724:	81000017 	ldw	r4,0(r16)
 4020728:	2480b804 	addi	r18,r4,736
 402072c:	047fffc4 	movi	r17,-1
 4020730:	91000117 	ldw	r4,4(r18)
 4020734:	94000217 	ldw	r16,8(r18)
 4020738:	213fffc4 	addi	r4,r4,-1
 402073c:	20000a16 	blt	r4,zero,4020768 <__sfp+0x78>
 4020740:	8080030f 	ldh	r2,12(r16)
 4020744:	10000c26 	beq	r2,zero,4020778 <__sfp+0x88>
 4020748:	80c01d04 	addi	r3,r16,116
 402074c:	00000206 	br	4020758 <__sfp+0x68>
 4020750:	18bfe60f 	ldh	r2,-104(r3)
 4020754:	10000826 	beq	r2,zero,4020778 <__sfp+0x88>
 4020758:	213fffc4 	addi	r4,r4,-1
 402075c:	1c3ffd04 	addi	r16,r3,-12
 4020760:	18c01a04 	addi	r3,r3,104
 4020764:	247ffa1e 	bne	r4,r17,4020750 <__flash_rwdata_start+0xffffac64>
 4020768:	90800017 	ldw	r2,0(r18)
 402076c:	10001d26 	beq	r2,zero,40207e4 <__sfp+0xf4>
 4020770:	1025883a 	mov	r18,r2
 4020774:	003fee06 	br	4020730 <__flash_rwdata_start+0xffffac44>
 4020778:	00bfffc4 	movi	r2,-1
 402077c:	8080038d 	sth	r2,14(r16)
 4020780:	00800044 	movi	r2,1
 4020784:	8080030d 	sth	r2,12(r16)
 4020788:	80001915 	stw	zero,100(r16)
 402078c:	80000015 	stw	zero,0(r16)
 4020790:	80000215 	stw	zero,8(r16)
 4020794:	80000115 	stw	zero,4(r16)
 4020798:	80000415 	stw	zero,16(r16)
 402079c:	80000515 	stw	zero,20(r16)
 40207a0:	80000615 	stw	zero,24(r16)
 40207a4:	01800204 	movi	r6,8
 40207a8:	000b883a 	mov	r5,zero
 40207ac:	81001704 	addi	r4,r16,92
 40207b0:	4021a540 	call	4021a54 <memset>
 40207b4:	8005883a 	mov	r2,r16
 40207b8:	80000c15 	stw	zero,48(r16)
 40207bc:	80000d15 	stw	zero,52(r16)
 40207c0:	80001115 	stw	zero,68(r16)
 40207c4:	80001215 	stw	zero,72(r16)
 40207c8:	dfc00417 	ldw	ra,16(sp)
 40207cc:	dcc00317 	ldw	r19,12(sp)
 40207d0:	dc800217 	ldw	r18,8(sp)
 40207d4:	dc400117 	ldw	r17,4(sp)
 40207d8:	dc000017 	ldw	r16,0(sp)
 40207dc:	dec00504 	addi	sp,sp,20
 40207e0:	f800283a 	ret
 40207e4:	01400104 	movi	r5,4
 40207e8:	9809883a 	mov	r4,r19
 40207ec:	40206780 	call	4020678 <__sfmoreglue>
 40207f0:	90800015 	stw	r2,0(r18)
 40207f4:	103fde1e 	bne	r2,zero,4020770 <__flash_rwdata_start+0xffffac84>
 40207f8:	00800304 	movi	r2,12
 40207fc:	98800015 	stw	r2,0(r19)
 4020800:	0005883a 	mov	r2,zero
 4020804:	003ff006 	br	40207c8 <__flash_rwdata_start+0xffffacdc>

04020808 <_cleanup>:
 4020808:	00800034 	movhi	r2,0
 402080c:	1086af04 	addi	r2,r2,6844
 4020810:	11000017 	ldw	r4,0(r2)
 4020814:	014100b4 	movhi	r5,1026
 4020818:	29491e04 	addi	r5,r5,9336
 402081c:	4020dfc1 	jmpi	4020dfc <_fwalk_reent>

04020820 <__sinit>:
 4020820:	20800e17 	ldw	r2,56(r4)
 4020824:	10000126 	beq	r2,zero,402082c <__sinit+0xc>
 4020828:	f800283a 	ret
 402082c:	40204d41 	jmpi	40204d4 <__sinit.part.1>

04020830 <__sfp_lock_acquire>:
 4020830:	f800283a 	ret

04020834 <__sfp_lock_release>:
 4020834:	f800283a 	ret

04020838 <__sinit_lock_acquire>:
 4020838:	f800283a 	ret

0402083c <__sinit_lock_release>:
 402083c:	f800283a 	ret

04020840 <__fp_lock_all>:
 4020840:	00800034 	movhi	r2,0
 4020844:	1086b004 	addi	r2,r2,6848
 4020848:	11000017 	ldw	r4,0(r2)
 402084c:	014100b4 	movhi	r5,1026
 4020850:	29419c04 	addi	r5,r5,1648
 4020854:	4020d381 	jmpi	4020d38 <_fwalk>

04020858 <__fp_unlock_all>:
 4020858:	00800034 	movhi	r2,0
 402085c:	1086b004 	addi	r2,r2,6848
 4020860:	11000017 	ldw	r4,0(r2)
 4020864:	014100b4 	movhi	r5,1026
 4020868:	29413004 	addi	r5,r5,1216
 402086c:	4020d381 	jmpi	4020d38 <_fwalk>

04020870 <__sfvwrite_r>:
 4020870:	30800217 	ldw	r2,8(r6)
 4020874:	10006726 	beq	r2,zero,4020a14 <__sfvwrite_r+0x1a4>
 4020878:	28c0030b 	ldhu	r3,12(r5)
 402087c:	defff404 	addi	sp,sp,-48
 4020880:	dd400715 	stw	r21,28(sp)
 4020884:	dd000615 	stw	r20,24(sp)
 4020888:	dc000215 	stw	r16,8(sp)
 402088c:	dfc00b15 	stw	ra,44(sp)
 4020890:	df000a15 	stw	fp,40(sp)
 4020894:	ddc00915 	stw	r23,36(sp)
 4020898:	dd800815 	stw	r22,32(sp)
 402089c:	dcc00515 	stw	r19,20(sp)
 40208a0:	dc800415 	stw	r18,16(sp)
 40208a4:	dc400315 	stw	r17,12(sp)
 40208a8:	1880020c 	andi	r2,r3,8
 40208ac:	2821883a 	mov	r16,r5
 40208b0:	202b883a 	mov	r21,r4
 40208b4:	3029883a 	mov	r20,r6
 40208b8:	10002726 	beq	r2,zero,4020958 <__sfvwrite_r+0xe8>
 40208bc:	28800417 	ldw	r2,16(r5)
 40208c0:	10002526 	beq	r2,zero,4020958 <__sfvwrite_r+0xe8>
 40208c4:	1880008c 	andi	r2,r3,2
 40208c8:	a4400017 	ldw	r17,0(r20)
 40208cc:	10002a26 	beq	r2,zero,4020978 <__sfvwrite_r+0x108>
 40208d0:	05a00034 	movhi	r22,32768
 40208d4:	0027883a 	mov	r19,zero
 40208d8:	0025883a 	mov	r18,zero
 40208dc:	b5bf0004 	addi	r22,r22,-1024
 40208e0:	980d883a 	mov	r6,r19
 40208e4:	a809883a 	mov	r4,r21
 40208e8:	90004626 	beq	r18,zero,4020a04 <__sfvwrite_r+0x194>
 40208ec:	900f883a 	mov	r7,r18
 40208f0:	b480022e 	bgeu	r22,r18,40208fc <__sfvwrite_r+0x8c>
 40208f4:	01e00034 	movhi	r7,32768
 40208f8:	39ff0004 	addi	r7,r7,-1024
 40208fc:	80800917 	ldw	r2,36(r16)
 4020900:	81400717 	ldw	r5,28(r16)
 4020904:	103ee83a 	callr	r2
 4020908:	00805a0e 	bge	zero,r2,4020a74 <__sfvwrite_r+0x204>
 402090c:	a0c00217 	ldw	r3,8(r20)
 4020910:	98a7883a 	add	r19,r19,r2
 4020914:	90a5c83a 	sub	r18,r18,r2
 4020918:	1885c83a 	sub	r2,r3,r2
 402091c:	a0800215 	stw	r2,8(r20)
 4020920:	103fef1e 	bne	r2,zero,40208e0 <__flash_rwdata_start+0xffffadf4>
 4020924:	0005883a 	mov	r2,zero
 4020928:	dfc00b17 	ldw	ra,44(sp)
 402092c:	df000a17 	ldw	fp,40(sp)
 4020930:	ddc00917 	ldw	r23,36(sp)
 4020934:	dd800817 	ldw	r22,32(sp)
 4020938:	dd400717 	ldw	r21,28(sp)
 402093c:	dd000617 	ldw	r20,24(sp)
 4020940:	dcc00517 	ldw	r19,20(sp)
 4020944:	dc800417 	ldw	r18,16(sp)
 4020948:	dc400317 	ldw	r17,12(sp)
 402094c:	dc000217 	ldw	r16,8(sp)
 4020950:	dec00c04 	addi	sp,sp,48
 4020954:	f800283a 	ret
 4020958:	800b883a 	mov	r5,r16
 402095c:	a809883a 	mov	r4,r21
 4020960:	40222d00 	call	40222d0 <__swsetup_r>
 4020964:	1000ee1e 	bne	r2,zero,4020d20 <__sfvwrite_r+0x4b0>
 4020968:	80c0030b 	ldhu	r3,12(r16)
 402096c:	a4400017 	ldw	r17,0(r20)
 4020970:	1880008c 	andi	r2,r3,2
 4020974:	103fd61e 	bne	r2,zero,40208d0 <__flash_rwdata_start+0xffffade4>
 4020978:	1880004c 	andi	r2,r3,1
 402097c:	1000421e 	bne	r2,zero,4020a88 <__sfvwrite_r+0x218>
 4020980:	0039883a 	mov	fp,zero
 4020984:	0025883a 	mov	r18,zero
 4020988:	90001a26 	beq	r18,zero,40209f4 <__sfvwrite_r+0x184>
 402098c:	1880800c 	andi	r2,r3,512
 4020990:	84c00217 	ldw	r19,8(r16)
 4020994:	10002126 	beq	r2,zero,4020a1c <__sfvwrite_r+0x1ac>
 4020998:	982f883a 	mov	r23,r19
 402099c:	94c09636 	bltu	r18,r19,4020bf8 <__sfvwrite_r+0x388>
 40209a0:	1881200c 	andi	r2,r3,1152
 40209a4:	1000a11e 	bne	r2,zero,4020c2c <__sfvwrite_r+0x3bc>
 40209a8:	81000017 	ldw	r4,0(r16)
 40209ac:	b80d883a 	mov	r6,r23
 40209b0:	e00b883a 	mov	r5,fp
 40209b4:	40218f80 	call	40218f8 <memmove>
 40209b8:	80c00217 	ldw	r3,8(r16)
 40209bc:	81000017 	ldw	r4,0(r16)
 40209c0:	9005883a 	mov	r2,r18
 40209c4:	1ce7c83a 	sub	r19,r3,r19
 40209c8:	25cf883a 	add	r7,r4,r23
 40209cc:	84c00215 	stw	r19,8(r16)
 40209d0:	81c00015 	stw	r7,0(r16)
 40209d4:	a0c00217 	ldw	r3,8(r20)
 40209d8:	e0b9883a 	add	fp,fp,r2
 40209dc:	90a5c83a 	sub	r18,r18,r2
 40209e0:	18a7c83a 	sub	r19,r3,r2
 40209e4:	a4c00215 	stw	r19,8(r20)
 40209e8:	983fce26 	beq	r19,zero,4020924 <__flash_rwdata_start+0xffffae38>
 40209ec:	80c0030b 	ldhu	r3,12(r16)
 40209f0:	903fe61e 	bne	r18,zero,402098c <__flash_rwdata_start+0xffffaea0>
 40209f4:	8f000017 	ldw	fp,0(r17)
 40209f8:	8c800117 	ldw	r18,4(r17)
 40209fc:	8c400204 	addi	r17,r17,8
 4020a00:	003fe106 	br	4020988 <__flash_rwdata_start+0xffffae9c>
 4020a04:	8cc00017 	ldw	r19,0(r17)
 4020a08:	8c800117 	ldw	r18,4(r17)
 4020a0c:	8c400204 	addi	r17,r17,8
 4020a10:	003fb306 	br	40208e0 <__flash_rwdata_start+0xffffadf4>
 4020a14:	0005883a 	mov	r2,zero
 4020a18:	f800283a 	ret
 4020a1c:	81000017 	ldw	r4,0(r16)
 4020a20:	80800417 	ldw	r2,16(r16)
 4020a24:	11005a36 	bltu	r2,r4,4020b90 <__sfvwrite_r+0x320>
 4020a28:	85c00517 	ldw	r23,20(r16)
 4020a2c:	95c05836 	bltu	r18,r23,4020b90 <__sfvwrite_r+0x320>
 4020a30:	00a00034 	movhi	r2,32768
 4020a34:	10bfffc4 	addi	r2,r2,-1
 4020a38:	9009883a 	mov	r4,r18
 4020a3c:	1480012e 	bgeu	r2,r18,4020a44 <__sfvwrite_r+0x1d4>
 4020a40:	1009883a 	mov	r4,r2
 4020a44:	b80b883a 	mov	r5,r23
 4020a48:	4022f840 	call	4022f84 <__divsi3>
 4020a4c:	b80b883a 	mov	r5,r23
 4020a50:	1009883a 	mov	r4,r2
 4020a54:	40231380 	call	4023138 <__mulsi3>
 4020a58:	81400717 	ldw	r5,28(r16)
 4020a5c:	80c00917 	ldw	r3,36(r16)
 4020a60:	100f883a 	mov	r7,r2
 4020a64:	e00d883a 	mov	r6,fp
 4020a68:	a809883a 	mov	r4,r21
 4020a6c:	183ee83a 	callr	r3
 4020a70:	00bfd816 	blt	zero,r2,40209d4 <__flash_rwdata_start+0xffffaee8>
 4020a74:	8080030b 	ldhu	r2,12(r16)
 4020a78:	10801014 	ori	r2,r2,64
 4020a7c:	8080030d 	sth	r2,12(r16)
 4020a80:	00bfffc4 	movi	r2,-1
 4020a84:	003fa806 	br	4020928 <__flash_rwdata_start+0xffffae3c>
 4020a88:	0027883a 	mov	r19,zero
 4020a8c:	0011883a 	mov	r8,zero
 4020a90:	0039883a 	mov	fp,zero
 4020a94:	0025883a 	mov	r18,zero
 4020a98:	90001f26 	beq	r18,zero,4020b18 <__sfvwrite_r+0x2a8>
 4020a9c:	40005a26 	beq	r8,zero,4020c08 <__sfvwrite_r+0x398>
 4020aa0:	982d883a 	mov	r22,r19
 4020aa4:	94c0012e 	bgeu	r18,r19,4020aac <__sfvwrite_r+0x23c>
 4020aa8:	902d883a 	mov	r22,r18
 4020aac:	81000017 	ldw	r4,0(r16)
 4020ab0:	80800417 	ldw	r2,16(r16)
 4020ab4:	b02f883a 	mov	r23,r22
 4020ab8:	81c00517 	ldw	r7,20(r16)
 4020abc:	1100032e 	bgeu	r2,r4,4020acc <__sfvwrite_r+0x25c>
 4020ac0:	80c00217 	ldw	r3,8(r16)
 4020ac4:	38c7883a 	add	r3,r7,r3
 4020ac8:	1d801816 	blt	r3,r22,4020b2c <__sfvwrite_r+0x2bc>
 4020acc:	b1c03e16 	blt	r22,r7,4020bc8 <__sfvwrite_r+0x358>
 4020ad0:	80800917 	ldw	r2,36(r16)
 4020ad4:	81400717 	ldw	r5,28(r16)
 4020ad8:	e00d883a 	mov	r6,fp
 4020adc:	da000115 	stw	r8,4(sp)
 4020ae0:	a809883a 	mov	r4,r21
 4020ae4:	103ee83a 	callr	r2
 4020ae8:	102f883a 	mov	r23,r2
 4020aec:	da000117 	ldw	r8,4(sp)
 4020af0:	00bfe00e 	bge	zero,r2,4020a74 <__flash_rwdata_start+0xffffaf88>
 4020af4:	9de7c83a 	sub	r19,r19,r23
 4020af8:	98001f26 	beq	r19,zero,4020b78 <__sfvwrite_r+0x308>
 4020afc:	a0800217 	ldw	r2,8(r20)
 4020b00:	e5f9883a 	add	fp,fp,r23
 4020b04:	95e5c83a 	sub	r18,r18,r23
 4020b08:	15efc83a 	sub	r23,r2,r23
 4020b0c:	a5c00215 	stw	r23,8(r20)
 4020b10:	b83f8426 	beq	r23,zero,4020924 <__flash_rwdata_start+0xffffae38>
 4020b14:	903fe11e 	bne	r18,zero,4020a9c <__flash_rwdata_start+0xffffafb0>
 4020b18:	8f000017 	ldw	fp,0(r17)
 4020b1c:	8c800117 	ldw	r18,4(r17)
 4020b20:	0011883a 	mov	r8,zero
 4020b24:	8c400204 	addi	r17,r17,8
 4020b28:	003fdb06 	br	4020a98 <__flash_rwdata_start+0xffffafac>
 4020b2c:	180d883a 	mov	r6,r3
 4020b30:	e00b883a 	mov	r5,fp
 4020b34:	da000115 	stw	r8,4(sp)
 4020b38:	d8c00015 	stw	r3,0(sp)
 4020b3c:	40218f80 	call	40218f8 <memmove>
 4020b40:	d8c00017 	ldw	r3,0(sp)
 4020b44:	80800017 	ldw	r2,0(r16)
 4020b48:	800b883a 	mov	r5,r16
 4020b4c:	a809883a 	mov	r4,r21
 4020b50:	10c5883a 	add	r2,r2,r3
 4020b54:	80800015 	stw	r2,0(r16)
 4020b58:	d8c00015 	stw	r3,0(sp)
 4020b5c:	40227980 	call	4022798 <_fflush_r>
 4020b60:	d8c00017 	ldw	r3,0(sp)
 4020b64:	da000117 	ldw	r8,4(sp)
 4020b68:	103fc21e 	bne	r2,zero,4020a74 <__flash_rwdata_start+0xffffaf88>
 4020b6c:	182f883a 	mov	r23,r3
 4020b70:	9de7c83a 	sub	r19,r19,r23
 4020b74:	983fe11e 	bne	r19,zero,4020afc <__flash_rwdata_start+0xffffb010>
 4020b78:	800b883a 	mov	r5,r16
 4020b7c:	a809883a 	mov	r4,r21
 4020b80:	40227980 	call	4022798 <_fflush_r>
 4020b84:	103fbb1e 	bne	r2,zero,4020a74 <__flash_rwdata_start+0xffffaf88>
 4020b88:	0011883a 	mov	r8,zero
 4020b8c:	003fdb06 	br	4020afc <__flash_rwdata_start+0xffffb010>
 4020b90:	94c0012e 	bgeu	r18,r19,4020b98 <__sfvwrite_r+0x328>
 4020b94:	9027883a 	mov	r19,r18
 4020b98:	980d883a 	mov	r6,r19
 4020b9c:	e00b883a 	mov	r5,fp
 4020ba0:	40218f80 	call	40218f8 <memmove>
 4020ba4:	80800217 	ldw	r2,8(r16)
 4020ba8:	80c00017 	ldw	r3,0(r16)
 4020bac:	14c5c83a 	sub	r2,r2,r19
 4020bb0:	1cc7883a 	add	r3,r3,r19
 4020bb4:	80800215 	stw	r2,8(r16)
 4020bb8:	80c00015 	stw	r3,0(r16)
 4020bbc:	10004326 	beq	r2,zero,4020ccc <__sfvwrite_r+0x45c>
 4020bc0:	9805883a 	mov	r2,r19
 4020bc4:	003f8306 	br	40209d4 <__flash_rwdata_start+0xffffaee8>
 4020bc8:	b00d883a 	mov	r6,r22
 4020bcc:	e00b883a 	mov	r5,fp
 4020bd0:	da000115 	stw	r8,4(sp)
 4020bd4:	40218f80 	call	40218f8 <memmove>
 4020bd8:	80800217 	ldw	r2,8(r16)
 4020bdc:	80c00017 	ldw	r3,0(r16)
 4020be0:	da000117 	ldw	r8,4(sp)
 4020be4:	1585c83a 	sub	r2,r2,r22
 4020be8:	1dad883a 	add	r22,r3,r22
 4020bec:	80800215 	stw	r2,8(r16)
 4020bf0:	85800015 	stw	r22,0(r16)
 4020bf4:	003fbf06 	br	4020af4 <__flash_rwdata_start+0xffffb008>
 4020bf8:	81000017 	ldw	r4,0(r16)
 4020bfc:	9027883a 	mov	r19,r18
 4020c00:	902f883a 	mov	r23,r18
 4020c04:	003f6906 	br	40209ac <__flash_rwdata_start+0xffffaec0>
 4020c08:	900d883a 	mov	r6,r18
 4020c0c:	01400284 	movi	r5,10
 4020c10:	e009883a 	mov	r4,fp
 4020c14:	40216cc0 	call	40216cc <memchr>
 4020c18:	10003e26 	beq	r2,zero,4020d14 <__sfvwrite_r+0x4a4>
 4020c1c:	10800044 	addi	r2,r2,1
 4020c20:	1727c83a 	sub	r19,r2,fp
 4020c24:	02000044 	movi	r8,1
 4020c28:	003f9d06 	br	4020aa0 <__flash_rwdata_start+0xffffafb4>
 4020c2c:	80800517 	ldw	r2,20(r16)
 4020c30:	81400417 	ldw	r5,16(r16)
 4020c34:	81c00017 	ldw	r7,0(r16)
 4020c38:	10a7883a 	add	r19,r2,r2
 4020c3c:	9885883a 	add	r2,r19,r2
 4020c40:	1026d7fa 	srli	r19,r2,31
 4020c44:	396dc83a 	sub	r22,r7,r5
 4020c48:	b1000044 	addi	r4,r22,1
 4020c4c:	9885883a 	add	r2,r19,r2
 4020c50:	1027d07a 	srai	r19,r2,1
 4020c54:	2485883a 	add	r2,r4,r18
 4020c58:	980d883a 	mov	r6,r19
 4020c5c:	9880022e 	bgeu	r19,r2,4020c68 <__sfvwrite_r+0x3f8>
 4020c60:	1027883a 	mov	r19,r2
 4020c64:	100d883a 	mov	r6,r2
 4020c68:	18c1000c 	andi	r3,r3,1024
 4020c6c:	18001c26 	beq	r3,zero,4020ce0 <__sfvwrite_r+0x470>
 4020c70:	300b883a 	mov	r5,r6
 4020c74:	a809883a 	mov	r4,r21
 4020c78:	4020ec00 	call	4020ec0 <_malloc_r>
 4020c7c:	102f883a 	mov	r23,r2
 4020c80:	10002926 	beq	r2,zero,4020d28 <__sfvwrite_r+0x4b8>
 4020c84:	81400417 	ldw	r5,16(r16)
 4020c88:	b00d883a 	mov	r6,r22
 4020c8c:	1009883a 	mov	r4,r2
 4020c90:	40217b00 	call	40217b0 <memcpy>
 4020c94:	8080030b 	ldhu	r2,12(r16)
 4020c98:	00fedfc4 	movi	r3,-1153
 4020c9c:	10c4703a 	and	r2,r2,r3
 4020ca0:	10802014 	ori	r2,r2,128
 4020ca4:	8080030d 	sth	r2,12(r16)
 4020ca8:	bd89883a 	add	r4,r23,r22
 4020cac:	9d8fc83a 	sub	r7,r19,r22
 4020cb0:	85c00415 	stw	r23,16(r16)
 4020cb4:	84c00515 	stw	r19,20(r16)
 4020cb8:	81000015 	stw	r4,0(r16)
 4020cbc:	9027883a 	mov	r19,r18
 4020cc0:	81c00215 	stw	r7,8(r16)
 4020cc4:	902f883a 	mov	r23,r18
 4020cc8:	003f3806 	br	40209ac <__flash_rwdata_start+0xffffaec0>
 4020ccc:	800b883a 	mov	r5,r16
 4020cd0:	a809883a 	mov	r4,r21
 4020cd4:	40227980 	call	4022798 <_fflush_r>
 4020cd8:	103fb926 	beq	r2,zero,4020bc0 <__flash_rwdata_start+0xffffb0d4>
 4020cdc:	003f6506 	br	4020a74 <__flash_rwdata_start+0xffffaf88>
 4020ce0:	a809883a 	mov	r4,r21
 4020ce4:	4021b7c0 	call	4021b7c <_realloc_r>
 4020ce8:	102f883a 	mov	r23,r2
 4020cec:	103fee1e 	bne	r2,zero,4020ca8 <__flash_rwdata_start+0xffffb1bc>
 4020cf0:	81400417 	ldw	r5,16(r16)
 4020cf4:	a809883a 	mov	r4,r21
 4020cf8:	40229480 	call	4022948 <_free_r>
 4020cfc:	8080030b 	ldhu	r2,12(r16)
 4020d00:	00ffdfc4 	movi	r3,-129
 4020d04:	1884703a 	and	r2,r3,r2
 4020d08:	00c00304 	movi	r3,12
 4020d0c:	a8c00015 	stw	r3,0(r21)
 4020d10:	003f5906 	br	4020a78 <__flash_rwdata_start+0xffffaf8c>
 4020d14:	94c00044 	addi	r19,r18,1
 4020d18:	02000044 	movi	r8,1
 4020d1c:	003f6006 	br	4020aa0 <__flash_rwdata_start+0xffffafb4>
 4020d20:	00bfffc4 	movi	r2,-1
 4020d24:	003f0006 	br	4020928 <__flash_rwdata_start+0xffffae3c>
 4020d28:	00800304 	movi	r2,12
 4020d2c:	a8800015 	stw	r2,0(r21)
 4020d30:	8080030b 	ldhu	r2,12(r16)
 4020d34:	003f5006 	br	4020a78 <__flash_rwdata_start+0xffffaf8c>

04020d38 <_fwalk>:
 4020d38:	defff704 	addi	sp,sp,-36
 4020d3c:	dd000415 	stw	r20,16(sp)
 4020d40:	dfc00815 	stw	ra,32(sp)
 4020d44:	ddc00715 	stw	r23,28(sp)
 4020d48:	dd800615 	stw	r22,24(sp)
 4020d4c:	dd400515 	stw	r21,20(sp)
 4020d50:	dcc00315 	stw	r19,12(sp)
 4020d54:	dc800215 	stw	r18,8(sp)
 4020d58:	dc400115 	stw	r17,4(sp)
 4020d5c:	dc000015 	stw	r16,0(sp)
 4020d60:	2500b804 	addi	r20,r4,736
 4020d64:	a0002326 	beq	r20,zero,4020df4 <_fwalk+0xbc>
 4020d68:	282b883a 	mov	r21,r5
 4020d6c:	002f883a 	mov	r23,zero
 4020d70:	05800044 	movi	r22,1
 4020d74:	04ffffc4 	movi	r19,-1
 4020d78:	a4400117 	ldw	r17,4(r20)
 4020d7c:	a4800217 	ldw	r18,8(r20)
 4020d80:	8c7fffc4 	addi	r17,r17,-1
 4020d84:	88000d16 	blt	r17,zero,4020dbc <_fwalk+0x84>
 4020d88:	94000304 	addi	r16,r18,12
 4020d8c:	94800384 	addi	r18,r18,14
 4020d90:	8080000b 	ldhu	r2,0(r16)
 4020d94:	8c7fffc4 	addi	r17,r17,-1
 4020d98:	813ffd04 	addi	r4,r16,-12
 4020d9c:	b080042e 	bgeu	r22,r2,4020db0 <_fwalk+0x78>
 4020da0:	9080000f 	ldh	r2,0(r18)
 4020da4:	14c00226 	beq	r2,r19,4020db0 <_fwalk+0x78>
 4020da8:	a83ee83a 	callr	r21
 4020dac:	b8aeb03a 	or	r23,r23,r2
 4020db0:	84001a04 	addi	r16,r16,104
 4020db4:	94801a04 	addi	r18,r18,104
 4020db8:	8cfff51e 	bne	r17,r19,4020d90 <__flash_rwdata_start+0xffffb2a4>
 4020dbc:	a5000017 	ldw	r20,0(r20)
 4020dc0:	a03fed1e 	bne	r20,zero,4020d78 <__flash_rwdata_start+0xffffb28c>
 4020dc4:	b805883a 	mov	r2,r23
 4020dc8:	dfc00817 	ldw	ra,32(sp)
 4020dcc:	ddc00717 	ldw	r23,28(sp)
 4020dd0:	dd800617 	ldw	r22,24(sp)
 4020dd4:	dd400517 	ldw	r21,20(sp)
 4020dd8:	dd000417 	ldw	r20,16(sp)
 4020ddc:	dcc00317 	ldw	r19,12(sp)
 4020de0:	dc800217 	ldw	r18,8(sp)
 4020de4:	dc400117 	ldw	r17,4(sp)
 4020de8:	dc000017 	ldw	r16,0(sp)
 4020dec:	dec00904 	addi	sp,sp,36
 4020df0:	f800283a 	ret
 4020df4:	002f883a 	mov	r23,zero
 4020df8:	003ff206 	br	4020dc4 <__flash_rwdata_start+0xffffb2d8>

04020dfc <_fwalk_reent>:
 4020dfc:	defff704 	addi	sp,sp,-36
 4020e00:	dd000415 	stw	r20,16(sp)
 4020e04:	dfc00815 	stw	ra,32(sp)
 4020e08:	ddc00715 	stw	r23,28(sp)
 4020e0c:	dd800615 	stw	r22,24(sp)
 4020e10:	dd400515 	stw	r21,20(sp)
 4020e14:	dcc00315 	stw	r19,12(sp)
 4020e18:	dc800215 	stw	r18,8(sp)
 4020e1c:	dc400115 	stw	r17,4(sp)
 4020e20:	dc000015 	stw	r16,0(sp)
 4020e24:	2500b804 	addi	r20,r4,736
 4020e28:	a0002326 	beq	r20,zero,4020eb8 <_fwalk_reent+0xbc>
 4020e2c:	282b883a 	mov	r21,r5
 4020e30:	2027883a 	mov	r19,r4
 4020e34:	002f883a 	mov	r23,zero
 4020e38:	05800044 	movi	r22,1
 4020e3c:	04bfffc4 	movi	r18,-1
 4020e40:	a4400117 	ldw	r17,4(r20)
 4020e44:	a4000217 	ldw	r16,8(r20)
 4020e48:	8c7fffc4 	addi	r17,r17,-1
 4020e4c:	88000c16 	blt	r17,zero,4020e80 <_fwalk_reent+0x84>
 4020e50:	84000304 	addi	r16,r16,12
 4020e54:	8080000b 	ldhu	r2,0(r16)
 4020e58:	8c7fffc4 	addi	r17,r17,-1
 4020e5c:	817ffd04 	addi	r5,r16,-12
 4020e60:	b080052e 	bgeu	r22,r2,4020e78 <_fwalk_reent+0x7c>
 4020e64:	8080008f 	ldh	r2,2(r16)
 4020e68:	9809883a 	mov	r4,r19
 4020e6c:	14800226 	beq	r2,r18,4020e78 <_fwalk_reent+0x7c>
 4020e70:	a83ee83a 	callr	r21
 4020e74:	b8aeb03a 	or	r23,r23,r2
 4020e78:	84001a04 	addi	r16,r16,104
 4020e7c:	8cbff51e 	bne	r17,r18,4020e54 <__flash_rwdata_start+0xffffb368>
 4020e80:	a5000017 	ldw	r20,0(r20)
 4020e84:	a03fee1e 	bne	r20,zero,4020e40 <__flash_rwdata_start+0xffffb354>
 4020e88:	b805883a 	mov	r2,r23
 4020e8c:	dfc00817 	ldw	ra,32(sp)
 4020e90:	ddc00717 	ldw	r23,28(sp)
 4020e94:	dd800617 	ldw	r22,24(sp)
 4020e98:	dd400517 	ldw	r21,20(sp)
 4020e9c:	dd000417 	ldw	r20,16(sp)
 4020ea0:	dcc00317 	ldw	r19,12(sp)
 4020ea4:	dc800217 	ldw	r18,8(sp)
 4020ea8:	dc400117 	ldw	r17,4(sp)
 4020eac:	dc000017 	ldw	r16,0(sp)
 4020eb0:	dec00904 	addi	sp,sp,36
 4020eb4:	f800283a 	ret
 4020eb8:	002f883a 	mov	r23,zero
 4020ebc:	003ff206 	br	4020e88 <__flash_rwdata_start+0xffffb39c>

04020ec0 <_malloc_r>:
 4020ec0:	defff504 	addi	sp,sp,-44
 4020ec4:	dc800315 	stw	r18,12(sp)
 4020ec8:	dfc00a15 	stw	ra,40(sp)
 4020ecc:	df000915 	stw	fp,36(sp)
 4020ed0:	ddc00815 	stw	r23,32(sp)
 4020ed4:	dd800715 	stw	r22,28(sp)
 4020ed8:	dd400615 	stw	r21,24(sp)
 4020edc:	dd000515 	stw	r20,20(sp)
 4020ee0:	dcc00415 	stw	r19,16(sp)
 4020ee4:	dc400215 	stw	r17,8(sp)
 4020ee8:	dc000115 	stw	r16,4(sp)
 4020eec:	288002c4 	addi	r2,r5,11
 4020ef0:	00c00584 	movi	r3,22
 4020ef4:	2025883a 	mov	r18,r4
 4020ef8:	18807f2e 	bgeu	r3,r2,40210f8 <_malloc_r+0x238>
 4020efc:	047ffe04 	movi	r17,-8
 4020f00:	1462703a 	and	r17,r2,r17
 4020f04:	8800a316 	blt	r17,zero,4021194 <_malloc_r+0x2d4>
 4020f08:	8940a236 	bltu	r17,r5,4021194 <_malloc_r+0x2d4>
 4020f0c:	40236fc0 	call	40236fc <__malloc_lock>
 4020f10:	00807dc4 	movi	r2,503
 4020f14:	1441e92e 	bgeu	r2,r17,40216bc <_malloc_r+0x7fc>
 4020f18:	8804d27a 	srli	r2,r17,9
 4020f1c:	1000a126 	beq	r2,zero,40211a4 <_malloc_r+0x2e4>
 4020f20:	00c00104 	movi	r3,4
 4020f24:	18811e36 	bltu	r3,r2,40213a0 <_malloc_r+0x4e0>
 4020f28:	8804d1ba 	srli	r2,r17,6
 4020f2c:	12000e44 	addi	r8,r2,57
 4020f30:	11c00e04 	addi	r7,r2,56
 4020f34:	4209883a 	add	r4,r8,r8
 4020f38:	04c00034 	movhi	r19,0
 4020f3c:	2109883a 	add	r4,r4,r4
 4020f40:	9cc12b04 	addi	r19,r19,1196
 4020f44:	2109883a 	add	r4,r4,r4
 4020f48:	9909883a 	add	r4,r19,r4
 4020f4c:	24000117 	ldw	r16,4(r4)
 4020f50:	213ffe04 	addi	r4,r4,-8
 4020f54:	24009726 	beq	r4,r16,40211b4 <_malloc_r+0x2f4>
 4020f58:	80800117 	ldw	r2,4(r16)
 4020f5c:	01bfff04 	movi	r6,-4
 4020f60:	014003c4 	movi	r5,15
 4020f64:	1184703a 	and	r2,r2,r6
 4020f68:	1447c83a 	sub	r3,r2,r17
 4020f6c:	28c00716 	blt	r5,r3,4020f8c <_malloc_r+0xcc>
 4020f70:	1800920e 	bge	r3,zero,40211bc <_malloc_r+0x2fc>
 4020f74:	84000317 	ldw	r16,12(r16)
 4020f78:	24008e26 	beq	r4,r16,40211b4 <_malloc_r+0x2f4>
 4020f7c:	80800117 	ldw	r2,4(r16)
 4020f80:	1184703a 	and	r2,r2,r6
 4020f84:	1447c83a 	sub	r3,r2,r17
 4020f88:	28fff90e 	bge	r5,r3,4020f70 <__flash_rwdata_start+0xffffb484>
 4020f8c:	3809883a 	mov	r4,r7
 4020f90:	01800034 	movhi	r6,0
 4020f94:	9c000417 	ldw	r16,16(r19)
 4020f98:	31812b04 	addi	r6,r6,1196
 4020f9c:	32000204 	addi	r8,r6,8
 4020fa0:	82013426 	beq	r16,r8,4021474 <_malloc_r+0x5b4>
 4020fa4:	80c00117 	ldw	r3,4(r16)
 4020fa8:	00bfff04 	movi	r2,-4
 4020fac:	188e703a 	and	r7,r3,r2
 4020fb0:	3c45c83a 	sub	r2,r7,r17
 4020fb4:	00c003c4 	movi	r3,15
 4020fb8:	18811f16 	blt	r3,r2,4021438 <_malloc_r+0x578>
 4020fbc:	32000515 	stw	r8,20(r6)
 4020fc0:	32000415 	stw	r8,16(r6)
 4020fc4:	10007f0e 	bge	r2,zero,40211c4 <_malloc_r+0x304>
 4020fc8:	00807fc4 	movi	r2,511
 4020fcc:	11c0fd36 	bltu	r2,r7,40213c4 <_malloc_r+0x504>
 4020fd0:	3806d0fa 	srli	r3,r7,3
 4020fd4:	01c00044 	movi	r7,1
 4020fd8:	30800117 	ldw	r2,4(r6)
 4020fdc:	19400044 	addi	r5,r3,1
 4020fe0:	294b883a 	add	r5,r5,r5
 4020fe4:	1807d0ba 	srai	r3,r3,2
 4020fe8:	294b883a 	add	r5,r5,r5
 4020fec:	294b883a 	add	r5,r5,r5
 4020ff0:	298b883a 	add	r5,r5,r6
 4020ff4:	38c6983a 	sll	r3,r7,r3
 4020ff8:	29c00017 	ldw	r7,0(r5)
 4020ffc:	2a7ffe04 	addi	r9,r5,-8
 4021000:	1886b03a 	or	r3,r3,r2
 4021004:	82400315 	stw	r9,12(r16)
 4021008:	81c00215 	stw	r7,8(r16)
 402100c:	30c00115 	stw	r3,4(r6)
 4021010:	2c000015 	stw	r16,0(r5)
 4021014:	3c000315 	stw	r16,12(r7)
 4021018:	2005d0ba 	srai	r2,r4,2
 402101c:	01400044 	movi	r5,1
 4021020:	288a983a 	sll	r5,r5,r2
 4021024:	19406f36 	bltu	r3,r5,40211e4 <_malloc_r+0x324>
 4021028:	28c4703a 	and	r2,r5,r3
 402102c:	10000a1e 	bne	r2,zero,4021058 <_malloc_r+0x198>
 4021030:	00bfff04 	movi	r2,-4
 4021034:	294b883a 	add	r5,r5,r5
 4021038:	2088703a 	and	r4,r4,r2
 402103c:	28c4703a 	and	r2,r5,r3
 4021040:	21000104 	addi	r4,r4,4
 4021044:	1000041e 	bne	r2,zero,4021058 <_malloc_r+0x198>
 4021048:	294b883a 	add	r5,r5,r5
 402104c:	28c4703a 	and	r2,r5,r3
 4021050:	21000104 	addi	r4,r4,4
 4021054:	103ffc26 	beq	r2,zero,4021048 <__flash_rwdata_start+0xffffb55c>
 4021058:	02bfff04 	movi	r10,-4
 402105c:	024003c4 	movi	r9,15
 4021060:	21800044 	addi	r6,r4,1
 4021064:	318d883a 	add	r6,r6,r6
 4021068:	318d883a 	add	r6,r6,r6
 402106c:	318d883a 	add	r6,r6,r6
 4021070:	998d883a 	add	r6,r19,r6
 4021074:	333ffe04 	addi	r12,r6,-8
 4021078:	2017883a 	mov	r11,r4
 402107c:	31800104 	addi	r6,r6,4
 4021080:	34000017 	ldw	r16,0(r6)
 4021084:	31fffd04 	addi	r7,r6,-12
 4021088:	81c0041e 	bne	r16,r7,402109c <_malloc_r+0x1dc>
 402108c:	0000fb06 	br	402147c <_malloc_r+0x5bc>
 4021090:	1801030e 	bge	r3,zero,40214a0 <_malloc_r+0x5e0>
 4021094:	84000317 	ldw	r16,12(r16)
 4021098:	81c0f826 	beq	r16,r7,402147c <_malloc_r+0x5bc>
 402109c:	80800117 	ldw	r2,4(r16)
 40210a0:	1284703a 	and	r2,r2,r10
 40210a4:	1447c83a 	sub	r3,r2,r17
 40210a8:	48fff90e 	bge	r9,r3,4021090 <__flash_rwdata_start+0xffffb5a4>
 40210ac:	80800317 	ldw	r2,12(r16)
 40210b0:	81000217 	ldw	r4,8(r16)
 40210b4:	89400054 	ori	r5,r17,1
 40210b8:	81400115 	stw	r5,4(r16)
 40210bc:	20800315 	stw	r2,12(r4)
 40210c0:	11000215 	stw	r4,8(r2)
 40210c4:	8463883a 	add	r17,r16,r17
 40210c8:	9c400515 	stw	r17,20(r19)
 40210cc:	9c400415 	stw	r17,16(r19)
 40210d0:	18800054 	ori	r2,r3,1
 40210d4:	88800115 	stw	r2,4(r17)
 40210d8:	8a000315 	stw	r8,12(r17)
 40210dc:	8a000215 	stw	r8,8(r17)
 40210e0:	88e3883a 	add	r17,r17,r3
 40210e4:	88c00015 	stw	r3,0(r17)
 40210e8:	9009883a 	mov	r4,r18
 40210ec:	40237200 	call	4023720 <__malloc_unlock>
 40210f0:	80800204 	addi	r2,r16,8
 40210f4:	00001b06 	br	4021164 <_malloc_r+0x2a4>
 40210f8:	04400404 	movi	r17,16
 40210fc:	89402536 	bltu	r17,r5,4021194 <_malloc_r+0x2d4>
 4021100:	40236fc0 	call	40236fc <__malloc_lock>
 4021104:	00800184 	movi	r2,6
 4021108:	01000084 	movi	r4,2
 402110c:	04c00034 	movhi	r19,0
 4021110:	1085883a 	add	r2,r2,r2
 4021114:	9cc12b04 	addi	r19,r19,1196
 4021118:	1085883a 	add	r2,r2,r2
 402111c:	9885883a 	add	r2,r19,r2
 4021120:	14000117 	ldw	r16,4(r2)
 4021124:	10fffe04 	addi	r3,r2,-8
 4021128:	80c0d926 	beq	r16,r3,4021490 <_malloc_r+0x5d0>
 402112c:	80c00117 	ldw	r3,4(r16)
 4021130:	81000317 	ldw	r4,12(r16)
 4021134:	00bfff04 	movi	r2,-4
 4021138:	1884703a 	and	r2,r3,r2
 402113c:	81400217 	ldw	r5,8(r16)
 4021140:	8085883a 	add	r2,r16,r2
 4021144:	10c00117 	ldw	r3,4(r2)
 4021148:	29000315 	stw	r4,12(r5)
 402114c:	21400215 	stw	r5,8(r4)
 4021150:	18c00054 	ori	r3,r3,1
 4021154:	10c00115 	stw	r3,4(r2)
 4021158:	9009883a 	mov	r4,r18
 402115c:	40237200 	call	4023720 <__malloc_unlock>
 4021160:	80800204 	addi	r2,r16,8
 4021164:	dfc00a17 	ldw	ra,40(sp)
 4021168:	df000917 	ldw	fp,36(sp)
 402116c:	ddc00817 	ldw	r23,32(sp)
 4021170:	dd800717 	ldw	r22,28(sp)
 4021174:	dd400617 	ldw	r21,24(sp)
 4021178:	dd000517 	ldw	r20,20(sp)
 402117c:	dcc00417 	ldw	r19,16(sp)
 4021180:	dc800317 	ldw	r18,12(sp)
 4021184:	dc400217 	ldw	r17,8(sp)
 4021188:	dc000117 	ldw	r16,4(sp)
 402118c:	dec00b04 	addi	sp,sp,44
 4021190:	f800283a 	ret
 4021194:	00800304 	movi	r2,12
 4021198:	90800015 	stw	r2,0(r18)
 402119c:	0005883a 	mov	r2,zero
 40211a0:	003ff006 	br	4021164 <__flash_rwdata_start+0xffffb678>
 40211a4:	01002004 	movi	r4,128
 40211a8:	02001004 	movi	r8,64
 40211ac:	01c00fc4 	movi	r7,63
 40211b0:	003f6106 	br	4020f38 <__flash_rwdata_start+0xffffb44c>
 40211b4:	4009883a 	mov	r4,r8
 40211b8:	003f7506 	br	4020f90 <__flash_rwdata_start+0xffffb4a4>
 40211bc:	81000317 	ldw	r4,12(r16)
 40211c0:	003fde06 	br	402113c <__flash_rwdata_start+0xffffb650>
 40211c4:	81c5883a 	add	r2,r16,r7
 40211c8:	11400117 	ldw	r5,4(r2)
 40211cc:	9009883a 	mov	r4,r18
 40211d0:	29400054 	ori	r5,r5,1
 40211d4:	11400115 	stw	r5,4(r2)
 40211d8:	40237200 	call	4023720 <__malloc_unlock>
 40211dc:	80800204 	addi	r2,r16,8
 40211e0:	003fe006 	br	4021164 <__flash_rwdata_start+0xffffb678>
 40211e4:	9c000217 	ldw	r16,8(r19)
 40211e8:	00bfff04 	movi	r2,-4
 40211ec:	85800117 	ldw	r22,4(r16)
 40211f0:	b0ac703a 	and	r22,r22,r2
 40211f4:	b4400336 	bltu	r22,r17,4021204 <_malloc_r+0x344>
 40211f8:	b445c83a 	sub	r2,r22,r17
 40211fc:	00c003c4 	movi	r3,15
 4021200:	18805d16 	blt	r3,r2,4021378 <_malloc_r+0x4b8>
 4021204:	05c00034 	movhi	r23,0
 4021208:	00800034 	movhi	r2,0
 402120c:	1086bf04 	addi	r2,r2,6908
 4021210:	bdc6b104 	addi	r23,r23,6852
 4021214:	15400017 	ldw	r21,0(r2)
 4021218:	b8c00017 	ldw	r3,0(r23)
 402121c:	00bfffc4 	movi	r2,-1
 4021220:	858d883a 	add	r6,r16,r22
 4021224:	8d6b883a 	add	r21,r17,r21
 4021228:	1880ea26 	beq	r3,r2,40215d4 <_malloc_r+0x714>
 402122c:	ad4403c4 	addi	r21,r21,4111
 4021230:	00bc0004 	movi	r2,-4096
 4021234:	a8aa703a 	and	r21,r21,r2
 4021238:	a80b883a 	mov	r5,r21
 402123c:	9009883a 	mov	r4,r18
 4021240:	d9800015 	stw	r6,0(sp)
 4021244:	40220e00 	call	40220e0 <_sbrk_r>
 4021248:	1029883a 	mov	r20,r2
 402124c:	00bfffc4 	movi	r2,-1
 4021250:	d9800017 	ldw	r6,0(sp)
 4021254:	a080e826 	beq	r20,r2,40215f8 <_malloc_r+0x738>
 4021258:	a180a636 	bltu	r20,r6,40214f4 <_malloc_r+0x634>
 402125c:	07000034 	movhi	fp,0
 4021260:	e706c804 	addi	fp,fp,6944
 4021264:	e0800017 	ldw	r2,0(fp)
 4021268:	a887883a 	add	r3,r21,r2
 402126c:	e0c00015 	stw	r3,0(fp)
 4021270:	3500e626 	beq	r6,r20,402160c <_malloc_r+0x74c>
 4021274:	b9000017 	ldw	r4,0(r23)
 4021278:	00bfffc4 	movi	r2,-1
 402127c:	2080ee26 	beq	r4,r2,4021638 <_malloc_r+0x778>
 4021280:	a185c83a 	sub	r2,r20,r6
 4021284:	10c5883a 	add	r2,r2,r3
 4021288:	e0800015 	stw	r2,0(fp)
 402128c:	a0c001cc 	andi	r3,r20,7
 4021290:	1800bc26 	beq	r3,zero,4021584 <_malloc_r+0x6c4>
 4021294:	a0e9c83a 	sub	r20,r20,r3
 4021298:	00840204 	movi	r2,4104
 402129c:	a5000204 	addi	r20,r20,8
 40212a0:	10c7c83a 	sub	r3,r2,r3
 40212a4:	a545883a 	add	r2,r20,r21
 40212a8:	1083ffcc 	andi	r2,r2,4095
 40212ac:	18abc83a 	sub	r21,r3,r2
 40212b0:	a80b883a 	mov	r5,r21
 40212b4:	9009883a 	mov	r4,r18
 40212b8:	40220e00 	call	40220e0 <_sbrk_r>
 40212bc:	00ffffc4 	movi	r3,-1
 40212c0:	10c0e126 	beq	r2,r3,4021648 <_malloc_r+0x788>
 40212c4:	1505c83a 	sub	r2,r2,r20
 40212c8:	1545883a 	add	r2,r2,r21
 40212cc:	10800054 	ori	r2,r2,1
 40212d0:	e0c00017 	ldw	r3,0(fp)
 40212d4:	9d000215 	stw	r20,8(r19)
 40212d8:	a0800115 	stw	r2,4(r20)
 40212dc:	a8c7883a 	add	r3,r21,r3
 40212e0:	e0c00015 	stw	r3,0(fp)
 40212e4:	84c00e26 	beq	r16,r19,4021320 <_malloc_r+0x460>
 40212e8:	018003c4 	movi	r6,15
 40212ec:	3580a72e 	bgeu	r6,r22,402158c <_malloc_r+0x6cc>
 40212f0:	81400117 	ldw	r5,4(r16)
 40212f4:	013ffe04 	movi	r4,-8
 40212f8:	b0bffd04 	addi	r2,r22,-12
 40212fc:	1104703a 	and	r2,r2,r4
 4021300:	2900004c 	andi	r4,r5,1
 4021304:	2088b03a 	or	r4,r4,r2
 4021308:	81000115 	stw	r4,4(r16)
 402130c:	01400144 	movi	r5,5
 4021310:	8089883a 	add	r4,r16,r2
 4021314:	21400115 	stw	r5,4(r4)
 4021318:	21400215 	stw	r5,8(r4)
 402131c:	3080cd36 	bltu	r6,r2,4021654 <_malloc_r+0x794>
 4021320:	00800034 	movhi	r2,0
 4021324:	1086be04 	addi	r2,r2,6904
 4021328:	11000017 	ldw	r4,0(r2)
 402132c:	20c0012e 	bgeu	r4,r3,4021334 <_malloc_r+0x474>
 4021330:	10c00015 	stw	r3,0(r2)
 4021334:	00800034 	movhi	r2,0
 4021338:	1086bd04 	addi	r2,r2,6900
 402133c:	11000017 	ldw	r4,0(r2)
 4021340:	9c000217 	ldw	r16,8(r19)
 4021344:	20c0012e 	bgeu	r4,r3,402134c <_malloc_r+0x48c>
 4021348:	10c00015 	stw	r3,0(r2)
 402134c:	80c00117 	ldw	r3,4(r16)
 4021350:	00bfff04 	movi	r2,-4
 4021354:	1886703a 	and	r3,r3,r2
 4021358:	1c45c83a 	sub	r2,r3,r17
 402135c:	1c400236 	bltu	r3,r17,4021368 <_malloc_r+0x4a8>
 4021360:	00c003c4 	movi	r3,15
 4021364:	18800416 	blt	r3,r2,4021378 <_malloc_r+0x4b8>
 4021368:	9009883a 	mov	r4,r18
 402136c:	40237200 	call	4023720 <__malloc_unlock>
 4021370:	0005883a 	mov	r2,zero
 4021374:	003f7b06 	br	4021164 <__flash_rwdata_start+0xffffb678>
 4021378:	88c00054 	ori	r3,r17,1
 402137c:	80c00115 	stw	r3,4(r16)
 4021380:	8463883a 	add	r17,r16,r17
 4021384:	10800054 	ori	r2,r2,1
 4021388:	9c400215 	stw	r17,8(r19)
 402138c:	88800115 	stw	r2,4(r17)
 4021390:	9009883a 	mov	r4,r18
 4021394:	40237200 	call	4023720 <__malloc_unlock>
 4021398:	80800204 	addi	r2,r16,8
 402139c:	003f7106 	br	4021164 <__flash_rwdata_start+0xffffb678>
 40213a0:	00c00504 	movi	r3,20
 40213a4:	18804a2e 	bgeu	r3,r2,40214d0 <_malloc_r+0x610>
 40213a8:	00c01504 	movi	r3,84
 40213ac:	18806e36 	bltu	r3,r2,4021568 <_malloc_r+0x6a8>
 40213b0:	8804d33a 	srli	r2,r17,12
 40213b4:	12001bc4 	addi	r8,r2,111
 40213b8:	11c01b84 	addi	r7,r2,110
 40213bc:	4209883a 	add	r4,r8,r8
 40213c0:	003edd06 	br	4020f38 <__flash_rwdata_start+0xffffb44c>
 40213c4:	3804d27a 	srli	r2,r7,9
 40213c8:	00c00104 	movi	r3,4
 40213cc:	1880442e 	bgeu	r3,r2,40214e0 <_malloc_r+0x620>
 40213d0:	00c00504 	movi	r3,20
 40213d4:	18808136 	bltu	r3,r2,40215dc <_malloc_r+0x71c>
 40213d8:	11401704 	addi	r5,r2,92
 40213dc:	10c016c4 	addi	r3,r2,91
 40213e0:	294b883a 	add	r5,r5,r5
 40213e4:	294b883a 	add	r5,r5,r5
 40213e8:	294b883a 	add	r5,r5,r5
 40213ec:	994b883a 	add	r5,r19,r5
 40213f0:	28800017 	ldw	r2,0(r5)
 40213f4:	01800034 	movhi	r6,0
 40213f8:	297ffe04 	addi	r5,r5,-8
 40213fc:	31812b04 	addi	r6,r6,1196
 4021400:	28806526 	beq	r5,r2,4021598 <_malloc_r+0x6d8>
 4021404:	01bfff04 	movi	r6,-4
 4021408:	10c00117 	ldw	r3,4(r2)
 402140c:	1986703a 	and	r3,r3,r6
 4021410:	38c0022e 	bgeu	r7,r3,402141c <_malloc_r+0x55c>
 4021414:	10800217 	ldw	r2,8(r2)
 4021418:	28bffb1e 	bne	r5,r2,4021408 <__flash_rwdata_start+0xffffb91c>
 402141c:	11400317 	ldw	r5,12(r2)
 4021420:	98c00117 	ldw	r3,4(r19)
 4021424:	81400315 	stw	r5,12(r16)
 4021428:	80800215 	stw	r2,8(r16)
 402142c:	2c000215 	stw	r16,8(r5)
 4021430:	14000315 	stw	r16,12(r2)
 4021434:	003ef806 	br	4021018 <__flash_rwdata_start+0xffffb52c>
 4021438:	88c00054 	ori	r3,r17,1
 402143c:	80c00115 	stw	r3,4(r16)
 4021440:	8463883a 	add	r17,r16,r17
 4021444:	34400515 	stw	r17,20(r6)
 4021448:	34400415 	stw	r17,16(r6)
 402144c:	10c00054 	ori	r3,r2,1
 4021450:	8a000315 	stw	r8,12(r17)
 4021454:	8a000215 	stw	r8,8(r17)
 4021458:	88c00115 	stw	r3,4(r17)
 402145c:	88a3883a 	add	r17,r17,r2
 4021460:	88800015 	stw	r2,0(r17)
 4021464:	9009883a 	mov	r4,r18
 4021468:	40237200 	call	4023720 <__malloc_unlock>
 402146c:	80800204 	addi	r2,r16,8
 4021470:	003f3c06 	br	4021164 <__flash_rwdata_start+0xffffb678>
 4021474:	30c00117 	ldw	r3,4(r6)
 4021478:	003ee706 	br	4021018 <__flash_rwdata_start+0xffffb52c>
 402147c:	5ac00044 	addi	r11,r11,1
 4021480:	588000cc 	andi	r2,r11,3
 4021484:	31800204 	addi	r6,r6,8
 4021488:	103efd1e 	bne	r2,zero,4021080 <__flash_rwdata_start+0xffffb594>
 402148c:	00002406 	br	4021520 <_malloc_r+0x660>
 4021490:	14000317 	ldw	r16,12(r2)
 4021494:	143f251e 	bne	r2,r16,402112c <__flash_rwdata_start+0xffffb640>
 4021498:	21000084 	addi	r4,r4,2
 402149c:	003ebc06 	br	4020f90 <__flash_rwdata_start+0xffffb4a4>
 40214a0:	8085883a 	add	r2,r16,r2
 40214a4:	10c00117 	ldw	r3,4(r2)
 40214a8:	81000317 	ldw	r4,12(r16)
 40214ac:	81400217 	ldw	r5,8(r16)
 40214b0:	18c00054 	ori	r3,r3,1
 40214b4:	10c00115 	stw	r3,4(r2)
 40214b8:	29000315 	stw	r4,12(r5)
 40214bc:	21400215 	stw	r5,8(r4)
 40214c0:	9009883a 	mov	r4,r18
 40214c4:	40237200 	call	4023720 <__malloc_unlock>
 40214c8:	80800204 	addi	r2,r16,8
 40214cc:	003f2506 	br	4021164 <__flash_rwdata_start+0xffffb678>
 40214d0:	12001704 	addi	r8,r2,92
 40214d4:	11c016c4 	addi	r7,r2,91
 40214d8:	4209883a 	add	r4,r8,r8
 40214dc:	003e9606 	br	4020f38 <__flash_rwdata_start+0xffffb44c>
 40214e0:	3804d1ba 	srli	r2,r7,6
 40214e4:	11400e44 	addi	r5,r2,57
 40214e8:	10c00e04 	addi	r3,r2,56
 40214ec:	294b883a 	add	r5,r5,r5
 40214f0:	003fbc06 	br	40213e4 <__flash_rwdata_start+0xffffb8f8>
 40214f4:	84ff5926 	beq	r16,r19,402125c <__flash_rwdata_start+0xffffb770>
 40214f8:	00800034 	movhi	r2,0
 40214fc:	10812b04 	addi	r2,r2,1196
 4021500:	14000217 	ldw	r16,8(r2)
 4021504:	00bfff04 	movi	r2,-4
 4021508:	80c00117 	ldw	r3,4(r16)
 402150c:	1886703a 	and	r3,r3,r2
 4021510:	003f9106 	br	4021358 <__flash_rwdata_start+0xffffb86c>
 4021514:	60800217 	ldw	r2,8(r12)
 4021518:	213fffc4 	addi	r4,r4,-1
 402151c:	1300651e 	bne	r2,r12,40216b4 <_malloc_r+0x7f4>
 4021520:	208000cc 	andi	r2,r4,3
 4021524:	633ffe04 	addi	r12,r12,-8
 4021528:	103ffa1e 	bne	r2,zero,4021514 <__flash_rwdata_start+0xffffba28>
 402152c:	98800117 	ldw	r2,4(r19)
 4021530:	0146303a 	nor	r3,zero,r5
 4021534:	1884703a 	and	r2,r3,r2
 4021538:	98800115 	stw	r2,4(r19)
 402153c:	294b883a 	add	r5,r5,r5
 4021540:	117f2836 	bltu	r2,r5,40211e4 <__flash_rwdata_start+0xffffb6f8>
 4021544:	283f2726 	beq	r5,zero,40211e4 <__flash_rwdata_start+0xffffb6f8>
 4021548:	2886703a 	and	r3,r5,r2
 402154c:	5809883a 	mov	r4,r11
 4021550:	183ec31e 	bne	r3,zero,4021060 <__flash_rwdata_start+0xffffb574>
 4021554:	294b883a 	add	r5,r5,r5
 4021558:	2886703a 	and	r3,r5,r2
 402155c:	21000104 	addi	r4,r4,4
 4021560:	183ffc26 	beq	r3,zero,4021554 <__flash_rwdata_start+0xffffba68>
 4021564:	003ebe06 	br	4021060 <__flash_rwdata_start+0xffffb574>
 4021568:	00c05504 	movi	r3,340
 402156c:	18801236 	bltu	r3,r2,40215b8 <_malloc_r+0x6f8>
 4021570:	8804d3fa 	srli	r2,r17,15
 4021574:	12001e04 	addi	r8,r2,120
 4021578:	11c01dc4 	addi	r7,r2,119
 402157c:	4209883a 	add	r4,r8,r8
 4021580:	003e6d06 	br	4020f38 <__flash_rwdata_start+0xffffb44c>
 4021584:	00c40004 	movi	r3,4096
 4021588:	003f4606 	br	40212a4 <__flash_rwdata_start+0xffffb7b8>
 402158c:	00800044 	movi	r2,1
 4021590:	a0800115 	stw	r2,4(r20)
 4021594:	003f7406 	br	4021368 <__flash_rwdata_start+0xffffb87c>
 4021598:	1805d0ba 	srai	r2,r3,2
 402159c:	01c00044 	movi	r7,1
 40215a0:	30c00117 	ldw	r3,4(r6)
 40215a4:	388e983a 	sll	r7,r7,r2
 40215a8:	2805883a 	mov	r2,r5
 40215ac:	38c6b03a 	or	r3,r7,r3
 40215b0:	30c00115 	stw	r3,4(r6)
 40215b4:	003f9b06 	br	4021424 <__flash_rwdata_start+0xffffb938>
 40215b8:	00c15504 	movi	r3,1364
 40215bc:	18801a36 	bltu	r3,r2,4021628 <_malloc_r+0x768>
 40215c0:	8804d4ba 	srli	r2,r17,18
 40215c4:	12001f44 	addi	r8,r2,125
 40215c8:	11c01f04 	addi	r7,r2,124
 40215cc:	4209883a 	add	r4,r8,r8
 40215d0:	003e5906 	br	4020f38 <__flash_rwdata_start+0xffffb44c>
 40215d4:	ad400404 	addi	r21,r21,16
 40215d8:	003f1706 	br	4021238 <__flash_rwdata_start+0xffffb74c>
 40215dc:	00c01504 	movi	r3,84
 40215e0:	18802336 	bltu	r3,r2,4021670 <_malloc_r+0x7b0>
 40215e4:	3804d33a 	srli	r2,r7,12
 40215e8:	11401bc4 	addi	r5,r2,111
 40215ec:	10c01b84 	addi	r3,r2,110
 40215f0:	294b883a 	add	r5,r5,r5
 40215f4:	003f7b06 	br	40213e4 <__flash_rwdata_start+0xffffb8f8>
 40215f8:	9c000217 	ldw	r16,8(r19)
 40215fc:	00bfff04 	movi	r2,-4
 4021600:	80c00117 	ldw	r3,4(r16)
 4021604:	1886703a 	and	r3,r3,r2
 4021608:	003f5306 	br	4021358 <__flash_rwdata_start+0xffffb86c>
 402160c:	3083ffcc 	andi	r2,r6,4095
 4021610:	103f181e 	bne	r2,zero,4021274 <__flash_rwdata_start+0xffffb788>
 4021614:	99000217 	ldw	r4,8(r19)
 4021618:	b545883a 	add	r2,r22,r21
 402161c:	10800054 	ori	r2,r2,1
 4021620:	20800115 	stw	r2,4(r4)
 4021624:	003f3e06 	br	4021320 <__flash_rwdata_start+0xffffb834>
 4021628:	01003f84 	movi	r4,254
 402162c:	02001fc4 	movi	r8,127
 4021630:	01c01f84 	movi	r7,126
 4021634:	003e4006 	br	4020f38 <__flash_rwdata_start+0xffffb44c>
 4021638:	00800034 	movhi	r2,0
 402163c:	1086b104 	addi	r2,r2,6852
 4021640:	15000015 	stw	r20,0(r2)
 4021644:	003f1106 	br	402128c <__flash_rwdata_start+0xffffb7a0>
 4021648:	00800044 	movi	r2,1
 402164c:	002b883a 	mov	r21,zero
 4021650:	003f1f06 	br	40212d0 <__flash_rwdata_start+0xffffb7e4>
 4021654:	81400204 	addi	r5,r16,8
 4021658:	9009883a 	mov	r4,r18
 402165c:	40229480 	call	4022948 <_free_r>
 4021660:	00800034 	movhi	r2,0
 4021664:	1086c804 	addi	r2,r2,6944
 4021668:	10c00017 	ldw	r3,0(r2)
 402166c:	003f2c06 	br	4021320 <__flash_rwdata_start+0xffffb834>
 4021670:	00c05504 	movi	r3,340
 4021674:	18800536 	bltu	r3,r2,402168c <_malloc_r+0x7cc>
 4021678:	3804d3fa 	srli	r2,r7,15
 402167c:	11401e04 	addi	r5,r2,120
 4021680:	10c01dc4 	addi	r3,r2,119
 4021684:	294b883a 	add	r5,r5,r5
 4021688:	003f5606 	br	40213e4 <__flash_rwdata_start+0xffffb8f8>
 402168c:	00c15504 	movi	r3,1364
 4021690:	18800536 	bltu	r3,r2,40216a8 <_malloc_r+0x7e8>
 4021694:	3804d4ba 	srli	r2,r7,18
 4021698:	11401f44 	addi	r5,r2,125
 402169c:	10c01f04 	addi	r3,r2,124
 40216a0:	294b883a 	add	r5,r5,r5
 40216a4:	003f4f06 	br	40213e4 <__flash_rwdata_start+0xffffb8f8>
 40216a8:	01403f84 	movi	r5,254
 40216ac:	00c01f84 	movi	r3,126
 40216b0:	003f4c06 	br	40213e4 <__flash_rwdata_start+0xffffb8f8>
 40216b4:	98800117 	ldw	r2,4(r19)
 40216b8:	003fa006 	br	402153c <__flash_rwdata_start+0xffffba50>
 40216bc:	8808d0fa 	srli	r4,r17,3
 40216c0:	20800044 	addi	r2,r4,1
 40216c4:	1085883a 	add	r2,r2,r2
 40216c8:	003e9006 	br	402110c <__flash_rwdata_start+0xffffb620>

040216cc <memchr>:
 40216cc:	208000cc 	andi	r2,r4,3
 40216d0:	280f883a 	mov	r7,r5
 40216d4:	10003426 	beq	r2,zero,40217a8 <memchr+0xdc>
 40216d8:	30bfffc4 	addi	r2,r6,-1
 40216dc:	30001a26 	beq	r6,zero,4021748 <memchr+0x7c>
 40216e0:	20c00003 	ldbu	r3,0(r4)
 40216e4:	29803fcc 	andi	r6,r5,255
 40216e8:	30c0051e 	bne	r6,r3,4021700 <memchr+0x34>
 40216ec:	00001806 	br	4021750 <memchr+0x84>
 40216f0:	10001526 	beq	r2,zero,4021748 <memchr+0x7c>
 40216f4:	20c00003 	ldbu	r3,0(r4)
 40216f8:	10bfffc4 	addi	r2,r2,-1
 40216fc:	30c01426 	beq	r6,r3,4021750 <memchr+0x84>
 4021700:	21000044 	addi	r4,r4,1
 4021704:	20c000cc 	andi	r3,r4,3
 4021708:	183ff91e 	bne	r3,zero,40216f0 <__flash_rwdata_start+0xffffbc04>
 402170c:	020000c4 	movi	r8,3
 4021710:	40801136 	bltu	r8,r2,4021758 <memchr+0x8c>
 4021714:	10000c26 	beq	r2,zero,4021748 <memchr+0x7c>
 4021718:	20c00003 	ldbu	r3,0(r4)
 402171c:	29403fcc 	andi	r5,r5,255
 4021720:	28c00b26 	beq	r5,r3,4021750 <memchr+0x84>
 4021724:	20c00044 	addi	r3,r4,1
 4021728:	39803fcc 	andi	r6,r7,255
 402172c:	2089883a 	add	r4,r4,r2
 4021730:	00000306 	br	4021740 <memchr+0x74>
 4021734:	18c00044 	addi	r3,r3,1
 4021738:	197fffc3 	ldbu	r5,-1(r3)
 402173c:	31400526 	beq	r6,r5,4021754 <memchr+0x88>
 4021740:	1805883a 	mov	r2,r3
 4021744:	20fffb1e 	bne	r4,r3,4021734 <__flash_rwdata_start+0xffffbc48>
 4021748:	0005883a 	mov	r2,zero
 402174c:	f800283a 	ret
 4021750:	2005883a 	mov	r2,r4
 4021754:	f800283a 	ret
 4021758:	28c03fcc 	andi	r3,r5,255
 402175c:	1812923a 	slli	r9,r3,8
 4021760:	02ffbff4 	movhi	r11,65279
 4021764:	02a02074 	movhi	r10,32897
 4021768:	48d2b03a 	or	r9,r9,r3
 402176c:	4806943a 	slli	r3,r9,16
 4021770:	5affbfc4 	addi	r11,r11,-257
 4021774:	52a02004 	addi	r10,r10,-32640
 4021778:	48d2b03a 	or	r9,r9,r3
 402177c:	20c00017 	ldw	r3,0(r4)
 4021780:	48c6f03a 	xor	r3,r9,r3
 4021784:	1acd883a 	add	r6,r3,r11
 4021788:	00c6303a 	nor	r3,zero,r3
 402178c:	30c6703a 	and	r3,r6,r3
 4021790:	1a86703a 	and	r3,r3,r10
 4021794:	183fe01e 	bne	r3,zero,4021718 <__flash_rwdata_start+0xffffbc2c>
 4021798:	10bfff04 	addi	r2,r2,-4
 402179c:	21000104 	addi	r4,r4,4
 40217a0:	40bff636 	bltu	r8,r2,402177c <__flash_rwdata_start+0xffffbc90>
 40217a4:	003fdb06 	br	4021714 <__flash_rwdata_start+0xffffbc28>
 40217a8:	3005883a 	mov	r2,r6
 40217ac:	003fd706 	br	402170c <__flash_rwdata_start+0xffffbc20>

040217b0 <memcpy>:
 40217b0:	defffd04 	addi	sp,sp,-12
 40217b4:	dfc00215 	stw	ra,8(sp)
 40217b8:	dc400115 	stw	r17,4(sp)
 40217bc:	dc000015 	stw	r16,0(sp)
 40217c0:	00c003c4 	movi	r3,15
 40217c4:	2005883a 	mov	r2,r4
 40217c8:	1980452e 	bgeu	r3,r6,40218e0 <memcpy+0x130>
 40217cc:	2906b03a 	or	r3,r5,r4
 40217d0:	18c000cc 	andi	r3,r3,3
 40217d4:	1800441e 	bne	r3,zero,40218e8 <memcpy+0x138>
 40217d8:	347ffc04 	addi	r17,r6,-16
 40217dc:	8822d13a 	srli	r17,r17,4
 40217e0:	28c00104 	addi	r3,r5,4
 40217e4:	23400104 	addi	r13,r4,4
 40217e8:	8820913a 	slli	r16,r17,4
 40217ec:	2b000204 	addi	r12,r5,8
 40217f0:	22c00204 	addi	r11,r4,8
 40217f4:	84000504 	addi	r16,r16,20
 40217f8:	2a800304 	addi	r10,r5,12
 40217fc:	22400304 	addi	r9,r4,12
 4021800:	2c21883a 	add	r16,r5,r16
 4021804:	2811883a 	mov	r8,r5
 4021808:	200f883a 	mov	r7,r4
 402180c:	41000017 	ldw	r4,0(r8)
 4021810:	1fc00017 	ldw	ra,0(r3)
 4021814:	63c00017 	ldw	r15,0(r12)
 4021818:	39000015 	stw	r4,0(r7)
 402181c:	53800017 	ldw	r14,0(r10)
 4021820:	6fc00015 	stw	ra,0(r13)
 4021824:	5bc00015 	stw	r15,0(r11)
 4021828:	4b800015 	stw	r14,0(r9)
 402182c:	18c00404 	addi	r3,r3,16
 4021830:	39c00404 	addi	r7,r7,16
 4021834:	42000404 	addi	r8,r8,16
 4021838:	6b400404 	addi	r13,r13,16
 402183c:	63000404 	addi	r12,r12,16
 4021840:	5ac00404 	addi	r11,r11,16
 4021844:	52800404 	addi	r10,r10,16
 4021848:	4a400404 	addi	r9,r9,16
 402184c:	1c3fef1e 	bne	r3,r16,402180c <__flash_rwdata_start+0xffffbd20>
 4021850:	89c00044 	addi	r7,r17,1
 4021854:	380e913a 	slli	r7,r7,4
 4021858:	310003cc 	andi	r4,r6,15
 402185c:	02c000c4 	movi	r11,3
 4021860:	11c7883a 	add	r3,r2,r7
 4021864:	29cb883a 	add	r5,r5,r7
 4021868:	5900212e 	bgeu	r11,r4,40218f0 <memcpy+0x140>
 402186c:	1813883a 	mov	r9,r3
 4021870:	2811883a 	mov	r8,r5
 4021874:	200f883a 	mov	r7,r4
 4021878:	42800017 	ldw	r10,0(r8)
 402187c:	4a400104 	addi	r9,r9,4
 4021880:	39ffff04 	addi	r7,r7,-4
 4021884:	4abfff15 	stw	r10,-4(r9)
 4021888:	42000104 	addi	r8,r8,4
 402188c:	59fffa36 	bltu	r11,r7,4021878 <__flash_rwdata_start+0xffffbd8c>
 4021890:	213fff04 	addi	r4,r4,-4
 4021894:	2008d0ba 	srli	r4,r4,2
 4021898:	318000cc 	andi	r6,r6,3
 402189c:	21000044 	addi	r4,r4,1
 40218a0:	2109883a 	add	r4,r4,r4
 40218a4:	2109883a 	add	r4,r4,r4
 40218a8:	1907883a 	add	r3,r3,r4
 40218ac:	290b883a 	add	r5,r5,r4
 40218b0:	30000626 	beq	r6,zero,40218cc <memcpy+0x11c>
 40218b4:	198d883a 	add	r6,r3,r6
 40218b8:	29c00003 	ldbu	r7,0(r5)
 40218bc:	18c00044 	addi	r3,r3,1
 40218c0:	29400044 	addi	r5,r5,1
 40218c4:	19ffffc5 	stb	r7,-1(r3)
 40218c8:	19bffb1e 	bne	r3,r6,40218b8 <__flash_rwdata_start+0xffffbdcc>
 40218cc:	dfc00217 	ldw	ra,8(sp)
 40218d0:	dc400117 	ldw	r17,4(sp)
 40218d4:	dc000017 	ldw	r16,0(sp)
 40218d8:	dec00304 	addi	sp,sp,12
 40218dc:	f800283a 	ret
 40218e0:	2007883a 	mov	r3,r4
 40218e4:	003ff206 	br	40218b0 <__flash_rwdata_start+0xffffbdc4>
 40218e8:	2007883a 	mov	r3,r4
 40218ec:	003ff106 	br	40218b4 <__flash_rwdata_start+0xffffbdc8>
 40218f0:	200d883a 	mov	r6,r4
 40218f4:	003fee06 	br	40218b0 <__flash_rwdata_start+0xffffbdc4>

040218f8 <memmove>:
 40218f8:	2005883a 	mov	r2,r4
 40218fc:	29000b2e 	bgeu	r5,r4,402192c <memmove+0x34>
 4021900:	298f883a 	add	r7,r5,r6
 4021904:	21c0092e 	bgeu	r4,r7,402192c <memmove+0x34>
 4021908:	2187883a 	add	r3,r4,r6
 402190c:	198bc83a 	sub	r5,r3,r6
 4021910:	30004826 	beq	r6,zero,4021a34 <memmove+0x13c>
 4021914:	39ffffc4 	addi	r7,r7,-1
 4021918:	39000003 	ldbu	r4,0(r7)
 402191c:	18ffffc4 	addi	r3,r3,-1
 4021920:	19000005 	stb	r4,0(r3)
 4021924:	28fffb1e 	bne	r5,r3,4021914 <__flash_rwdata_start+0xffffbe28>
 4021928:	f800283a 	ret
 402192c:	00c003c4 	movi	r3,15
 4021930:	1980412e 	bgeu	r3,r6,4021a38 <memmove+0x140>
 4021934:	2886b03a 	or	r3,r5,r2
 4021938:	18c000cc 	andi	r3,r3,3
 402193c:	1800401e 	bne	r3,zero,4021a40 <memmove+0x148>
 4021940:	33fffc04 	addi	r15,r6,-16
 4021944:	781ed13a 	srli	r15,r15,4
 4021948:	28c00104 	addi	r3,r5,4
 402194c:	13400104 	addi	r13,r2,4
 4021950:	781c913a 	slli	r14,r15,4
 4021954:	2b000204 	addi	r12,r5,8
 4021958:	12c00204 	addi	r11,r2,8
 402195c:	73800504 	addi	r14,r14,20
 4021960:	2a800304 	addi	r10,r5,12
 4021964:	12400304 	addi	r9,r2,12
 4021968:	2b9d883a 	add	r14,r5,r14
 402196c:	2811883a 	mov	r8,r5
 4021970:	100f883a 	mov	r7,r2
 4021974:	41000017 	ldw	r4,0(r8)
 4021978:	39c00404 	addi	r7,r7,16
 402197c:	18c00404 	addi	r3,r3,16
 4021980:	393ffc15 	stw	r4,-16(r7)
 4021984:	193ffc17 	ldw	r4,-16(r3)
 4021988:	6b400404 	addi	r13,r13,16
 402198c:	5ac00404 	addi	r11,r11,16
 4021990:	693ffc15 	stw	r4,-16(r13)
 4021994:	61000017 	ldw	r4,0(r12)
 4021998:	4a400404 	addi	r9,r9,16
 402199c:	42000404 	addi	r8,r8,16
 40219a0:	593ffc15 	stw	r4,-16(r11)
 40219a4:	51000017 	ldw	r4,0(r10)
 40219a8:	63000404 	addi	r12,r12,16
 40219ac:	52800404 	addi	r10,r10,16
 40219b0:	493ffc15 	stw	r4,-16(r9)
 40219b4:	1bbfef1e 	bne	r3,r14,4021974 <__flash_rwdata_start+0xffffbe88>
 40219b8:	79000044 	addi	r4,r15,1
 40219bc:	2008913a 	slli	r4,r4,4
 40219c0:	328003cc 	andi	r10,r6,15
 40219c4:	02c000c4 	movi	r11,3
 40219c8:	1107883a 	add	r3,r2,r4
 40219cc:	290b883a 	add	r5,r5,r4
 40219d0:	5a801e2e 	bgeu	r11,r10,4021a4c <memmove+0x154>
 40219d4:	1813883a 	mov	r9,r3
 40219d8:	2811883a 	mov	r8,r5
 40219dc:	500f883a 	mov	r7,r10
 40219e0:	41000017 	ldw	r4,0(r8)
 40219e4:	4a400104 	addi	r9,r9,4
 40219e8:	39ffff04 	addi	r7,r7,-4
 40219ec:	493fff15 	stw	r4,-4(r9)
 40219f0:	42000104 	addi	r8,r8,4
 40219f4:	59fffa36 	bltu	r11,r7,40219e0 <__flash_rwdata_start+0xffffbef4>
 40219f8:	513fff04 	addi	r4,r10,-4
 40219fc:	2008d0ba 	srli	r4,r4,2
 4021a00:	318000cc 	andi	r6,r6,3
 4021a04:	21000044 	addi	r4,r4,1
 4021a08:	2109883a 	add	r4,r4,r4
 4021a0c:	2109883a 	add	r4,r4,r4
 4021a10:	1907883a 	add	r3,r3,r4
 4021a14:	290b883a 	add	r5,r5,r4
 4021a18:	30000b26 	beq	r6,zero,4021a48 <memmove+0x150>
 4021a1c:	198d883a 	add	r6,r3,r6
 4021a20:	29c00003 	ldbu	r7,0(r5)
 4021a24:	18c00044 	addi	r3,r3,1
 4021a28:	29400044 	addi	r5,r5,1
 4021a2c:	19ffffc5 	stb	r7,-1(r3)
 4021a30:	19bffb1e 	bne	r3,r6,4021a20 <__flash_rwdata_start+0xffffbf34>
 4021a34:	f800283a 	ret
 4021a38:	1007883a 	mov	r3,r2
 4021a3c:	003ff606 	br	4021a18 <__flash_rwdata_start+0xffffbf2c>
 4021a40:	1007883a 	mov	r3,r2
 4021a44:	003ff506 	br	4021a1c <__flash_rwdata_start+0xffffbf30>
 4021a48:	f800283a 	ret
 4021a4c:	500d883a 	mov	r6,r10
 4021a50:	003ff106 	br	4021a18 <__flash_rwdata_start+0xffffbf2c>

04021a54 <memset>:
 4021a54:	20c000cc 	andi	r3,r4,3
 4021a58:	2005883a 	mov	r2,r4
 4021a5c:	18004426 	beq	r3,zero,4021b70 <memset+0x11c>
 4021a60:	31ffffc4 	addi	r7,r6,-1
 4021a64:	30004026 	beq	r6,zero,4021b68 <memset+0x114>
 4021a68:	2813883a 	mov	r9,r5
 4021a6c:	200d883a 	mov	r6,r4
 4021a70:	2007883a 	mov	r3,r4
 4021a74:	00000406 	br	4021a88 <memset+0x34>
 4021a78:	3a3fffc4 	addi	r8,r7,-1
 4021a7c:	31800044 	addi	r6,r6,1
 4021a80:	38003926 	beq	r7,zero,4021b68 <memset+0x114>
 4021a84:	400f883a 	mov	r7,r8
 4021a88:	18c00044 	addi	r3,r3,1
 4021a8c:	32400005 	stb	r9,0(r6)
 4021a90:	1a0000cc 	andi	r8,r3,3
 4021a94:	403ff81e 	bne	r8,zero,4021a78 <__flash_rwdata_start+0xffffbf8c>
 4021a98:	010000c4 	movi	r4,3
 4021a9c:	21c02d2e 	bgeu	r4,r7,4021b54 <memset+0x100>
 4021aa0:	29003fcc 	andi	r4,r5,255
 4021aa4:	200c923a 	slli	r6,r4,8
 4021aa8:	3108b03a 	or	r4,r6,r4
 4021aac:	200c943a 	slli	r6,r4,16
 4021ab0:	218cb03a 	or	r6,r4,r6
 4021ab4:	010003c4 	movi	r4,15
 4021ab8:	21c0182e 	bgeu	r4,r7,4021b1c <memset+0xc8>
 4021abc:	3b3ffc04 	addi	r12,r7,-16
 4021ac0:	6018d13a 	srli	r12,r12,4
 4021ac4:	1a000104 	addi	r8,r3,4
 4021ac8:	1ac00204 	addi	r11,r3,8
 4021acc:	6008913a 	slli	r4,r12,4
 4021ad0:	1a800304 	addi	r10,r3,12
 4021ad4:	1813883a 	mov	r9,r3
 4021ad8:	21000504 	addi	r4,r4,20
 4021adc:	1909883a 	add	r4,r3,r4
 4021ae0:	49800015 	stw	r6,0(r9)
 4021ae4:	41800015 	stw	r6,0(r8)
 4021ae8:	59800015 	stw	r6,0(r11)
 4021aec:	51800015 	stw	r6,0(r10)
 4021af0:	42000404 	addi	r8,r8,16
 4021af4:	4a400404 	addi	r9,r9,16
 4021af8:	5ac00404 	addi	r11,r11,16
 4021afc:	52800404 	addi	r10,r10,16
 4021b00:	413ff71e 	bne	r8,r4,4021ae0 <__flash_rwdata_start+0xffffbff4>
 4021b04:	63000044 	addi	r12,r12,1
 4021b08:	6018913a 	slli	r12,r12,4
 4021b0c:	39c003cc 	andi	r7,r7,15
 4021b10:	010000c4 	movi	r4,3
 4021b14:	1b07883a 	add	r3,r3,r12
 4021b18:	21c00e2e 	bgeu	r4,r7,4021b54 <memset+0x100>
 4021b1c:	1813883a 	mov	r9,r3
 4021b20:	3811883a 	mov	r8,r7
 4021b24:	010000c4 	movi	r4,3
 4021b28:	49800015 	stw	r6,0(r9)
 4021b2c:	423fff04 	addi	r8,r8,-4
 4021b30:	4a400104 	addi	r9,r9,4
 4021b34:	223ffc36 	bltu	r4,r8,4021b28 <__flash_rwdata_start+0xffffc03c>
 4021b38:	393fff04 	addi	r4,r7,-4
 4021b3c:	2008d0ba 	srli	r4,r4,2
 4021b40:	39c000cc 	andi	r7,r7,3
 4021b44:	21000044 	addi	r4,r4,1
 4021b48:	2109883a 	add	r4,r4,r4
 4021b4c:	2109883a 	add	r4,r4,r4
 4021b50:	1907883a 	add	r3,r3,r4
 4021b54:	38000526 	beq	r7,zero,4021b6c <memset+0x118>
 4021b58:	19cf883a 	add	r7,r3,r7
 4021b5c:	19400005 	stb	r5,0(r3)
 4021b60:	18c00044 	addi	r3,r3,1
 4021b64:	38fffd1e 	bne	r7,r3,4021b5c <__flash_rwdata_start+0xffffc070>
 4021b68:	f800283a 	ret
 4021b6c:	f800283a 	ret
 4021b70:	2007883a 	mov	r3,r4
 4021b74:	300f883a 	mov	r7,r6
 4021b78:	003fc706 	br	4021a98 <__flash_rwdata_start+0xffffbfac>

04021b7c <_realloc_r>:
 4021b7c:	defff604 	addi	sp,sp,-40
 4021b80:	dc800215 	stw	r18,8(sp)
 4021b84:	dfc00915 	stw	ra,36(sp)
 4021b88:	df000815 	stw	fp,32(sp)
 4021b8c:	ddc00715 	stw	r23,28(sp)
 4021b90:	dd800615 	stw	r22,24(sp)
 4021b94:	dd400515 	stw	r21,20(sp)
 4021b98:	dd000415 	stw	r20,16(sp)
 4021b9c:	dcc00315 	stw	r19,12(sp)
 4021ba0:	dc400115 	stw	r17,4(sp)
 4021ba4:	dc000015 	stw	r16,0(sp)
 4021ba8:	3025883a 	mov	r18,r6
 4021bac:	2800b726 	beq	r5,zero,4021e8c <_realloc_r+0x310>
 4021bb0:	282b883a 	mov	r21,r5
 4021bb4:	2029883a 	mov	r20,r4
 4021bb8:	40236fc0 	call	40236fc <__malloc_lock>
 4021bbc:	a8bfff17 	ldw	r2,-4(r21)
 4021bc0:	043fff04 	movi	r16,-4
 4021bc4:	90c002c4 	addi	r3,r18,11
 4021bc8:	01000584 	movi	r4,22
 4021bcc:	acfffe04 	addi	r19,r21,-8
 4021bd0:	1420703a 	and	r16,r2,r16
 4021bd4:	20c0332e 	bgeu	r4,r3,4021ca4 <_realloc_r+0x128>
 4021bd8:	047ffe04 	movi	r17,-8
 4021bdc:	1c62703a 	and	r17,r3,r17
 4021be0:	8807883a 	mov	r3,r17
 4021be4:	88005816 	blt	r17,zero,4021d48 <_realloc_r+0x1cc>
 4021be8:	8c805736 	bltu	r17,r18,4021d48 <_realloc_r+0x1cc>
 4021bec:	80c0300e 	bge	r16,r3,4021cb0 <_realloc_r+0x134>
 4021bf0:	07000034 	movhi	fp,0
 4021bf4:	e7012b04 	addi	fp,fp,1196
 4021bf8:	e1c00217 	ldw	r7,8(fp)
 4021bfc:	9c09883a 	add	r4,r19,r16
 4021c00:	22000117 	ldw	r8,4(r4)
 4021c04:	21c06326 	beq	r4,r7,4021d94 <_realloc_r+0x218>
 4021c08:	017fff84 	movi	r5,-2
 4021c0c:	414a703a 	and	r5,r8,r5
 4021c10:	214b883a 	add	r5,r4,r5
 4021c14:	29800117 	ldw	r6,4(r5)
 4021c18:	3180004c 	andi	r6,r6,1
 4021c1c:	30003f26 	beq	r6,zero,4021d1c <_realloc_r+0x1a0>
 4021c20:	1080004c 	andi	r2,r2,1
 4021c24:	10008326 	beq	r2,zero,4021e34 <_realloc_r+0x2b8>
 4021c28:	900b883a 	mov	r5,r18
 4021c2c:	a009883a 	mov	r4,r20
 4021c30:	4020ec00 	call	4020ec0 <_malloc_r>
 4021c34:	1025883a 	mov	r18,r2
 4021c38:	10011e26 	beq	r2,zero,40220b4 <_realloc_r+0x538>
 4021c3c:	a93fff17 	ldw	r4,-4(r21)
 4021c40:	10fffe04 	addi	r3,r2,-8
 4021c44:	00bfff84 	movi	r2,-2
 4021c48:	2084703a 	and	r2,r4,r2
 4021c4c:	9885883a 	add	r2,r19,r2
 4021c50:	1880ee26 	beq	r3,r2,402200c <_realloc_r+0x490>
 4021c54:	81bfff04 	addi	r6,r16,-4
 4021c58:	00800904 	movi	r2,36
 4021c5c:	1180b836 	bltu	r2,r6,4021f40 <_realloc_r+0x3c4>
 4021c60:	00c004c4 	movi	r3,19
 4021c64:	19809636 	bltu	r3,r6,4021ec0 <_realloc_r+0x344>
 4021c68:	9005883a 	mov	r2,r18
 4021c6c:	a807883a 	mov	r3,r21
 4021c70:	19000017 	ldw	r4,0(r3)
 4021c74:	11000015 	stw	r4,0(r2)
 4021c78:	19000117 	ldw	r4,4(r3)
 4021c7c:	11000115 	stw	r4,4(r2)
 4021c80:	18c00217 	ldw	r3,8(r3)
 4021c84:	10c00215 	stw	r3,8(r2)
 4021c88:	a80b883a 	mov	r5,r21
 4021c8c:	a009883a 	mov	r4,r20
 4021c90:	40229480 	call	4022948 <_free_r>
 4021c94:	a009883a 	mov	r4,r20
 4021c98:	40237200 	call	4023720 <__malloc_unlock>
 4021c9c:	9005883a 	mov	r2,r18
 4021ca0:	00001206 	br	4021cec <_realloc_r+0x170>
 4021ca4:	00c00404 	movi	r3,16
 4021ca8:	1823883a 	mov	r17,r3
 4021cac:	003fce06 	br	4021be8 <__flash_rwdata_start+0xffffc0fc>
 4021cb0:	a825883a 	mov	r18,r21
 4021cb4:	8445c83a 	sub	r2,r16,r17
 4021cb8:	00c003c4 	movi	r3,15
 4021cbc:	18802636 	bltu	r3,r2,4021d58 <_realloc_r+0x1dc>
 4021cc0:	99800117 	ldw	r6,4(r19)
 4021cc4:	9c07883a 	add	r3,r19,r16
 4021cc8:	3180004c 	andi	r6,r6,1
 4021ccc:	3420b03a 	or	r16,r6,r16
 4021cd0:	9c000115 	stw	r16,4(r19)
 4021cd4:	18800117 	ldw	r2,4(r3)
 4021cd8:	10800054 	ori	r2,r2,1
 4021cdc:	18800115 	stw	r2,4(r3)
 4021ce0:	a009883a 	mov	r4,r20
 4021ce4:	40237200 	call	4023720 <__malloc_unlock>
 4021ce8:	9005883a 	mov	r2,r18
 4021cec:	dfc00917 	ldw	ra,36(sp)
 4021cf0:	df000817 	ldw	fp,32(sp)
 4021cf4:	ddc00717 	ldw	r23,28(sp)
 4021cf8:	dd800617 	ldw	r22,24(sp)
 4021cfc:	dd400517 	ldw	r21,20(sp)
 4021d00:	dd000417 	ldw	r20,16(sp)
 4021d04:	dcc00317 	ldw	r19,12(sp)
 4021d08:	dc800217 	ldw	r18,8(sp)
 4021d0c:	dc400117 	ldw	r17,4(sp)
 4021d10:	dc000017 	ldw	r16,0(sp)
 4021d14:	dec00a04 	addi	sp,sp,40
 4021d18:	f800283a 	ret
 4021d1c:	017fff04 	movi	r5,-4
 4021d20:	414a703a 	and	r5,r8,r5
 4021d24:	814d883a 	add	r6,r16,r5
 4021d28:	30c01f16 	blt	r6,r3,4021da8 <_realloc_r+0x22c>
 4021d2c:	20800317 	ldw	r2,12(r4)
 4021d30:	20c00217 	ldw	r3,8(r4)
 4021d34:	a825883a 	mov	r18,r21
 4021d38:	3021883a 	mov	r16,r6
 4021d3c:	18800315 	stw	r2,12(r3)
 4021d40:	10c00215 	stw	r3,8(r2)
 4021d44:	003fdb06 	br	4021cb4 <__flash_rwdata_start+0xffffc1c8>
 4021d48:	00800304 	movi	r2,12
 4021d4c:	a0800015 	stw	r2,0(r20)
 4021d50:	0005883a 	mov	r2,zero
 4021d54:	003fe506 	br	4021cec <__flash_rwdata_start+0xffffc200>
 4021d58:	98c00117 	ldw	r3,4(r19)
 4021d5c:	9c4b883a 	add	r5,r19,r17
 4021d60:	11000054 	ori	r4,r2,1
 4021d64:	18c0004c 	andi	r3,r3,1
 4021d68:	1c62b03a 	or	r17,r3,r17
 4021d6c:	9c400115 	stw	r17,4(r19)
 4021d70:	29000115 	stw	r4,4(r5)
 4021d74:	2885883a 	add	r2,r5,r2
 4021d78:	10c00117 	ldw	r3,4(r2)
 4021d7c:	29400204 	addi	r5,r5,8
 4021d80:	a009883a 	mov	r4,r20
 4021d84:	18c00054 	ori	r3,r3,1
 4021d88:	10c00115 	stw	r3,4(r2)
 4021d8c:	40229480 	call	4022948 <_free_r>
 4021d90:	003fd306 	br	4021ce0 <__flash_rwdata_start+0xffffc1f4>
 4021d94:	017fff04 	movi	r5,-4
 4021d98:	414a703a 	and	r5,r8,r5
 4021d9c:	89800404 	addi	r6,r17,16
 4021da0:	8151883a 	add	r8,r16,r5
 4021da4:	4180590e 	bge	r8,r6,4021f0c <_realloc_r+0x390>
 4021da8:	1080004c 	andi	r2,r2,1
 4021dac:	103f9e1e 	bne	r2,zero,4021c28 <__flash_rwdata_start+0xffffc13c>
 4021db0:	adbffe17 	ldw	r22,-8(r21)
 4021db4:	00bfff04 	movi	r2,-4
 4021db8:	9dadc83a 	sub	r22,r19,r22
 4021dbc:	b1800117 	ldw	r6,4(r22)
 4021dc0:	3084703a 	and	r2,r6,r2
 4021dc4:	20002026 	beq	r4,zero,4021e48 <_realloc_r+0x2cc>
 4021dc8:	80af883a 	add	r23,r16,r2
 4021dcc:	b96f883a 	add	r23,r23,r5
 4021dd0:	21c05f26 	beq	r4,r7,4021f50 <_realloc_r+0x3d4>
 4021dd4:	b8c01c16 	blt	r23,r3,4021e48 <_realloc_r+0x2cc>
 4021dd8:	20800317 	ldw	r2,12(r4)
 4021ddc:	20c00217 	ldw	r3,8(r4)
 4021de0:	81bfff04 	addi	r6,r16,-4
 4021de4:	01000904 	movi	r4,36
 4021de8:	18800315 	stw	r2,12(r3)
 4021dec:	10c00215 	stw	r3,8(r2)
 4021df0:	b0c00217 	ldw	r3,8(r22)
 4021df4:	b0800317 	ldw	r2,12(r22)
 4021df8:	b4800204 	addi	r18,r22,8
 4021dfc:	18800315 	stw	r2,12(r3)
 4021e00:	10c00215 	stw	r3,8(r2)
 4021e04:	21801b36 	bltu	r4,r6,4021e74 <_realloc_r+0x2f8>
 4021e08:	008004c4 	movi	r2,19
 4021e0c:	1180352e 	bgeu	r2,r6,4021ee4 <_realloc_r+0x368>
 4021e10:	a8800017 	ldw	r2,0(r21)
 4021e14:	b0800215 	stw	r2,8(r22)
 4021e18:	a8800117 	ldw	r2,4(r21)
 4021e1c:	b0800315 	stw	r2,12(r22)
 4021e20:	008006c4 	movi	r2,27
 4021e24:	11807f36 	bltu	r2,r6,4022024 <_realloc_r+0x4a8>
 4021e28:	b0800404 	addi	r2,r22,16
 4021e2c:	ad400204 	addi	r21,r21,8
 4021e30:	00002d06 	br	4021ee8 <_realloc_r+0x36c>
 4021e34:	adbffe17 	ldw	r22,-8(r21)
 4021e38:	00bfff04 	movi	r2,-4
 4021e3c:	9dadc83a 	sub	r22,r19,r22
 4021e40:	b1000117 	ldw	r4,4(r22)
 4021e44:	2084703a 	and	r2,r4,r2
 4021e48:	b03f7726 	beq	r22,zero,4021c28 <__flash_rwdata_start+0xffffc13c>
 4021e4c:	80af883a 	add	r23,r16,r2
 4021e50:	b8ff7516 	blt	r23,r3,4021c28 <__flash_rwdata_start+0xffffc13c>
 4021e54:	b0800317 	ldw	r2,12(r22)
 4021e58:	b0c00217 	ldw	r3,8(r22)
 4021e5c:	81bfff04 	addi	r6,r16,-4
 4021e60:	01000904 	movi	r4,36
 4021e64:	18800315 	stw	r2,12(r3)
 4021e68:	10c00215 	stw	r3,8(r2)
 4021e6c:	b4800204 	addi	r18,r22,8
 4021e70:	21bfe52e 	bgeu	r4,r6,4021e08 <__flash_rwdata_start+0xffffc31c>
 4021e74:	a80b883a 	mov	r5,r21
 4021e78:	9009883a 	mov	r4,r18
 4021e7c:	40218f80 	call	40218f8 <memmove>
 4021e80:	b821883a 	mov	r16,r23
 4021e84:	b027883a 	mov	r19,r22
 4021e88:	003f8a06 	br	4021cb4 <__flash_rwdata_start+0xffffc1c8>
 4021e8c:	300b883a 	mov	r5,r6
 4021e90:	dfc00917 	ldw	ra,36(sp)
 4021e94:	df000817 	ldw	fp,32(sp)
 4021e98:	ddc00717 	ldw	r23,28(sp)
 4021e9c:	dd800617 	ldw	r22,24(sp)
 4021ea0:	dd400517 	ldw	r21,20(sp)
 4021ea4:	dd000417 	ldw	r20,16(sp)
 4021ea8:	dcc00317 	ldw	r19,12(sp)
 4021eac:	dc800217 	ldw	r18,8(sp)
 4021eb0:	dc400117 	ldw	r17,4(sp)
 4021eb4:	dc000017 	ldw	r16,0(sp)
 4021eb8:	dec00a04 	addi	sp,sp,40
 4021ebc:	4020ec01 	jmpi	4020ec0 <_malloc_r>
 4021ec0:	a8c00017 	ldw	r3,0(r21)
 4021ec4:	90c00015 	stw	r3,0(r18)
 4021ec8:	a8c00117 	ldw	r3,4(r21)
 4021ecc:	90c00115 	stw	r3,4(r18)
 4021ed0:	00c006c4 	movi	r3,27
 4021ed4:	19804536 	bltu	r3,r6,4021fec <_realloc_r+0x470>
 4021ed8:	90800204 	addi	r2,r18,8
 4021edc:	a8c00204 	addi	r3,r21,8
 4021ee0:	003f6306 	br	4021c70 <__flash_rwdata_start+0xffffc184>
 4021ee4:	9005883a 	mov	r2,r18
 4021ee8:	a8c00017 	ldw	r3,0(r21)
 4021eec:	b821883a 	mov	r16,r23
 4021ef0:	b027883a 	mov	r19,r22
 4021ef4:	10c00015 	stw	r3,0(r2)
 4021ef8:	a8c00117 	ldw	r3,4(r21)
 4021efc:	10c00115 	stw	r3,4(r2)
 4021f00:	a8c00217 	ldw	r3,8(r21)
 4021f04:	10c00215 	stw	r3,8(r2)
 4021f08:	003f6a06 	br	4021cb4 <__flash_rwdata_start+0xffffc1c8>
 4021f0c:	9c67883a 	add	r19,r19,r17
 4021f10:	4445c83a 	sub	r2,r8,r17
 4021f14:	e4c00215 	stw	r19,8(fp)
 4021f18:	10800054 	ori	r2,r2,1
 4021f1c:	98800115 	stw	r2,4(r19)
 4021f20:	a8bfff17 	ldw	r2,-4(r21)
 4021f24:	a009883a 	mov	r4,r20
 4021f28:	1080004c 	andi	r2,r2,1
 4021f2c:	1462b03a 	or	r17,r2,r17
 4021f30:	ac7fff15 	stw	r17,-4(r21)
 4021f34:	40237200 	call	4023720 <__malloc_unlock>
 4021f38:	a805883a 	mov	r2,r21
 4021f3c:	003f6b06 	br	4021cec <__flash_rwdata_start+0xffffc200>
 4021f40:	a80b883a 	mov	r5,r21
 4021f44:	9009883a 	mov	r4,r18
 4021f48:	40218f80 	call	40218f8 <memmove>
 4021f4c:	003f4e06 	br	4021c88 <__flash_rwdata_start+0xffffc19c>
 4021f50:	89000404 	addi	r4,r17,16
 4021f54:	b93fbc16 	blt	r23,r4,4021e48 <__flash_rwdata_start+0xffffc35c>
 4021f58:	b0800317 	ldw	r2,12(r22)
 4021f5c:	b0c00217 	ldw	r3,8(r22)
 4021f60:	81bfff04 	addi	r6,r16,-4
 4021f64:	01000904 	movi	r4,36
 4021f68:	18800315 	stw	r2,12(r3)
 4021f6c:	10c00215 	stw	r3,8(r2)
 4021f70:	b4800204 	addi	r18,r22,8
 4021f74:	21804336 	bltu	r4,r6,4022084 <_realloc_r+0x508>
 4021f78:	008004c4 	movi	r2,19
 4021f7c:	11803f2e 	bgeu	r2,r6,402207c <_realloc_r+0x500>
 4021f80:	a8800017 	ldw	r2,0(r21)
 4021f84:	b0800215 	stw	r2,8(r22)
 4021f88:	a8800117 	ldw	r2,4(r21)
 4021f8c:	b0800315 	stw	r2,12(r22)
 4021f90:	008006c4 	movi	r2,27
 4021f94:	11803f36 	bltu	r2,r6,4022094 <_realloc_r+0x518>
 4021f98:	b0800404 	addi	r2,r22,16
 4021f9c:	ad400204 	addi	r21,r21,8
 4021fa0:	a8c00017 	ldw	r3,0(r21)
 4021fa4:	10c00015 	stw	r3,0(r2)
 4021fa8:	a8c00117 	ldw	r3,4(r21)
 4021fac:	10c00115 	stw	r3,4(r2)
 4021fb0:	a8c00217 	ldw	r3,8(r21)
 4021fb4:	10c00215 	stw	r3,8(r2)
 4021fb8:	b447883a 	add	r3,r22,r17
 4021fbc:	bc45c83a 	sub	r2,r23,r17
 4021fc0:	e0c00215 	stw	r3,8(fp)
 4021fc4:	10800054 	ori	r2,r2,1
 4021fc8:	18800115 	stw	r2,4(r3)
 4021fcc:	b0800117 	ldw	r2,4(r22)
 4021fd0:	a009883a 	mov	r4,r20
 4021fd4:	1080004c 	andi	r2,r2,1
 4021fd8:	1462b03a 	or	r17,r2,r17
 4021fdc:	b4400115 	stw	r17,4(r22)
 4021fe0:	40237200 	call	4023720 <__malloc_unlock>
 4021fe4:	9005883a 	mov	r2,r18
 4021fe8:	003f4006 	br	4021cec <__flash_rwdata_start+0xffffc200>
 4021fec:	a8c00217 	ldw	r3,8(r21)
 4021ff0:	90c00215 	stw	r3,8(r18)
 4021ff4:	a8c00317 	ldw	r3,12(r21)
 4021ff8:	90c00315 	stw	r3,12(r18)
 4021ffc:	30801126 	beq	r6,r2,4022044 <_realloc_r+0x4c8>
 4022000:	90800404 	addi	r2,r18,16
 4022004:	a8c00404 	addi	r3,r21,16
 4022008:	003f1906 	br	4021c70 <__flash_rwdata_start+0xffffc184>
 402200c:	90ffff17 	ldw	r3,-4(r18)
 4022010:	00bfff04 	movi	r2,-4
 4022014:	a825883a 	mov	r18,r21
 4022018:	1884703a 	and	r2,r3,r2
 402201c:	80a1883a 	add	r16,r16,r2
 4022020:	003f2406 	br	4021cb4 <__flash_rwdata_start+0xffffc1c8>
 4022024:	a8800217 	ldw	r2,8(r21)
 4022028:	b0800415 	stw	r2,16(r22)
 402202c:	a8800317 	ldw	r2,12(r21)
 4022030:	b0800515 	stw	r2,20(r22)
 4022034:	31000a26 	beq	r6,r4,4022060 <_realloc_r+0x4e4>
 4022038:	b0800604 	addi	r2,r22,24
 402203c:	ad400404 	addi	r21,r21,16
 4022040:	003fa906 	br	4021ee8 <__flash_rwdata_start+0xffffc3fc>
 4022044:	a9000417 	ldw	r4,16(r21)
 4022048:	90800604 	addi	r2,r18,24
 402204c:	a8c00604 	addi	r3,r21,24
 4022050:	91000415 	stw	r4,16(r18)
 4022054:	a9000517 	ldw	r4,20(r21)
 4022058:	91000515 	stw	r4,20(r18)
 402205c:	003f0406 	br	4021c70 <__flash_rwdata_start+0xffffc184>
 4022060:	a8c00417 	ldw	r3,16(r21)
 4022064:	ad400604 	addi	r21,r21,24
 4022068:	b0800804 	addi	r2,r22,32
 402206c:	b0c00615 	stw	r3,24(r22)
 4022070:	a8ffff17 	ldw	r3,-4(r21)
 4022074:	b0c00715 	stw	r3,28(r22)
 4022078:	003f9b06 	br	4021ee8 <__flash_rwdata_start+0xffffc3fc>
 402207c:	9005883a 	mov	r2,r18
 4022080:	003fc706 	br	4021fa0 <__flash_rwdata_start+0xffffc4b4>
 4022084:	a80b883a 	mov	r5,r21
 4022088:	9009883a 	mov	r4,r18
 402208c:	40218f80 	call	40218f8 <memmove>
 4022090:	003fc906 	br	4021fb8 <__flash_rwdata_start+0xffffc4cc>
 4022094:	a8800217 	ldw	r2,8(r21)
 4022098:	b0800415 	stw	r2,16(r22)
 402209c:	a8800317 	ldw	r2,12(r21)
 40220a0:	b0800515 	stw	r2,20(r22)
 40220a4:	31000726 	beq	r6,r4,40220c4 <_realloc_r+0x548>
 40220a8:	b0800604 	addi	r2,r22,24
 40220ac:	ad400404 	addi	r21,r21,16
 40220b0:	003fbb06 	br	4021fa0 <__flash_rwdata_start+0xffffc4b4>
 40220b4:	a009883a 	mov	r4,r20
 40220b8:	40237200 	call	4023720 <__malloc_unlock>
 40220bc:	0005883a 	mov	r2,zero
 40220c0:	003f0a06 	br	4021cec <__flash_rwdata_start+0xffffc200>
 40220c4:	a8c00417 	ldw	r3,16(r21)
 40220c8:	ad400604 	addi	r21,r21,24
 40220cc:	b0800804 	addi	r2,r22,32
 40220d0:	b0c00615 	stw	r3,24(r22)
 40220d4:	a8ffff17 	ldw	r3,-4(r21)
 40220d8:	b0c00715 	stw	r3,28(r22)
 40220dc:	003fb006 	br	4021fa0 <__flash_rwdata_start+0xffffc4b4>

040220e0 <_sbrk_r>:
 40220e0:	defffd04 	addi	sp,sp,-12
 40220e4:	dc000015 	stw	r16,0(sp)
 40220e8:	04000034 	movhi	r16,0
 40220ec:	dc400115 	stw	r17,4(sp)
 40220f0:	8406c004 	addi	r16,r16,6912
 40220f4:	2023883a 	mov	r17,r4
 40220f8:	2809883a 	mov	r4,r5
 40220fc:	dfc00215 	stw	ra,8(sp)
 4022100:	80000015 	stw	zero,0(r16)
 4022104:	40239080 	call	4023908 <sbrk>
 4022108:	00ffffc4 	movi	r3,-1
 402210c:	10c00526 	beq	r2,r3,4022124 <_sbrk_r+0x44>
 4022110:	dfc00217 	ldw	ra,8(sp)
 4022114:	dc400117 	ldw	r17,4(sp)
 4022118:	dc000017 	ldw	r16,0(sp)
 402211c:	dec00304 	addi	sp,sp,12
 4022120:	f800283a 	ret
 4022124:	80c00017 	ldw	r3,0(r16)
 4022128:	183ff926 	beq	r3,zero,4022110 <__flash_rwdata_start+0xffffc624>
 402212c:	88c00015 	stw	r3,0(r17)
 4022130:	003ff706 	br	4022110 <__flash_rwdata_start+0xffffc624>

04022134 <__sread>:
 4022134:	defffe04 	addi	sp,sp,-8
 4022138:	dc000015 	stw	r16,0(sp)
 402213c:	2821883a 	mov	r16,r5
 4022140:	2940038f 	ldh	r5,14(r5)
 4022144:	dfc00115 	stw	ra,4(sp)
 4022148:	4022e740 	call	4022e74 <_read_r>
 402214c:	10000716 	blt	r2,zero,402216c <__sread+0x38>
 4022150:	80c01417 	ldw	r3,80(r16)
 4022154:	1887883a 	add	r3,r3,r2
 4022158:	80c01415 	stw	r3,80(r16)
 402215c:	dfc00117 	ldw	ra,4(sp)
 4022160:	dc000017 	ldw	r16,0(sp)
 4022164:	dec00204 	addi	sp,sp,8
 4022168:	f800283a 	ret
 402216c:	80c0030b 	ldhu	r3,12(r16)
 4022170:	18fbffcc 	andi	r3,r3,61439
 4022174:	80c0030d 	sth	r3,12(r16)
 4022178:	dfc00117 	ldw	ra,4(sp)
 402217c:	dc000017 	ldw	r16,0(sp)
 4022180:	dec00204 	addi	sp,sp,8
 4022184:	f800283a 	ret

04022188 <__seofread>:
 4022188:	0005883a 	mov	r2,zero
 402218c:	f800283a 	ret

04022190 <__swrite>:
 4022190:	2880030b 	ldhu	r2,12(r5)
 4022194:	defffb04 	addi	sp,sp,-20
 4022198:	dcc00315 	stw	r19,12(sp)
 402219c:	dc800215 	stw	r18,8(sp)
 40221a0:	dc400115 	stw	r17,4(sp)
 40221a4:	dc000015 	stw	r16,0(sp)
 40221a8:	dfc00415 	stw	ra,16(sp)
 40221ac:	10c0400c 	andi	r3,r2,256
 40221b0:	2821883a 	mov	r16,r5
 40221b4:	2023883a 	mov	r17,r4
 40221b8:	3025883a 	mov	r18,r6
 40221bc:	3827883a 	mov	r19,r7
 40221c0:	18000526 	beq	r3,zero,40221d8 <__swrite+0x48>
 40221c4:	2940038f 	ldh	r5,14(r5)
 40221c8:	01c00084 	movi	r7,2
 40221cc:	000d883a 	mov	r6,zero
 40221d0:	4022c580 	call	4022c58 <_lseek_r>
 40221d4:	8080030b 	ldhu	r2,12(r16)
 40221d8:	8140038f 	ldh	r5,14(r16)
 40221dc:	10bbffcc 	andi	r2,r2,61439
 40221e0:	980f883a 	mov	r7,r19
 40221e4:	900d883a 	mov	r6,r18
 40221e8:	8809883a 	mov	r4,r17
 40221ec:	8080030d 	sth	r2,12(r16)
 40221f0:	dfc00417 	ldw	ra,16(sp)
 40221f4:	dcc00317 	ldw	r19,12(sp)
 40221f8:	dc800217 	ldw	r18,8(sp)
 40221fc:	dc400117 	ldw	r17,4(sp)
 4022200:	dc000017 	ldw	r16,0(sp)
 4022204:	dec00504 	addi	sp,sp,20
 4022208:	40222701 	jmpi	4022270 <_write_r>

0402220c <__sseek>:
 402220c:	defffe04 	addi	sp,sp,-8
 4022210:	dc000015 	stw	r16,0(sp)
 4022214:	2821883a 	mov	r16,r5
 4022218:	2940038f 	ldh	r5,14(r5)
 402221c:	dfc00115 	stw	ra,4(sp)
 4022220:	4022c580 	call	4022c58 <_lseek_r>
 4022224:	00ffffc4 	movi	r3,-1
 4022228:	10c00826 	beq	r2,r3,402224c <__sseek+0x40>
 402222c:	80c0030b 	ldhu	r3,12(r16)
 4022230:	80801415 	stw	r2,80(r16)
 4022234:	18c40014 	ori	r3,r3,4096
 4022238:	80c0030d 	sth	r3,12(r16)
 402223c:	dfc00117 	ldw	ra,4(sp)
 4022240:	dc000017 	ldw	r16,0(sp)
 4022244:	dec00204 	addi	sp,sp,8
 4022248:	f800283a 	ret
 402224c:	80c0030b 	ldhu	r3,12(r16)
 4022250:	18fbffcc 	andi	r3,r3,61439
 4022254:	80c0030d 	sth	r3,12(r16)
 4022258:	dfc00117 	ldw	ra,4(sp)
 402225c:	dc000017 	ldw	r16,0(sp)
 4022260:	dec00204 	addi	sp,sp,8
 4022264:	f800283a 	ret

04022268 <__sclose>:
 4022268:	2940038f 	ldh	r5,14(r5)
 402226c:	40224241 	jmpi	4022424 <_close_r>

04022270 <_write_r>:
 4022270:	defffd04 	addi	sp,sp,-12
 4022274:	2805883a 	mov	r2,r5
 4022278:	dc000015 	stw	r16,0(sp)
 402227c:	04000034 	movhi	r16,0
 4022280:	dc400115 	stw	r17,4(sp)
 4022284:	300b883a 	mov	r5,r6
 4022288:	8406c004 	addi	r16,r16,6912
 402228c:	2023883a 	mov	r17,r4
 4022290:	380d883a 	mov	r6,r7
 4022294:	1009883a 	mov	r4,r2
 4022298:	dfc00215 	stw	ra,8(sp)
 402229c:	80000015 	stw	zero,0(r16)
 40222a0:	4023a240 	call	4023a24 <write>
 40222a4:	00ffffc4 	movi	r3,-1
 40222a8:	10c00526 	beq	r2,r3,40222c0 <_write_r+0x50>
 40222ac:	dfc00217 	ldw	ra,8(sp)
 40222b0:	dc400117 	ldw	r17,4(sp)
 40222b4:	dc000017 	ldw	r16,0(sp)
 40222b8:	dec00304 	addi	sp,sp,12
 40222bc:	f800283a 	ret
 40222c0:	80c00017 	ldw	r3,0(r16)
 40222c4:	183ff926 	beq	r3,zero,40222ac <__flash_rwdata_start+0xffffc7c0>
 40222c8:	88c00015 	stw	r3,0(r17)
 40222cc:	003ff706 	br	40222ac <__flash_rwdata_start+0xffffc7c0>

040222d0 <__swsetup_r>:
 40222d0:	00800034 	movhi	r2,0
 40222d4:	defffd04 	addi	sp,sp,-12
 40222d8:	1086b004 	addi	r2,r2,6848
 40222dc:	dc400115 	stw	r17,4(sp)
 40222e0:	2023883a 	mov	r17,r4
 40222e4:	11000017 	ldw	r4,0(r2)
 40222e8:	dc000015 	stw	r16,0(sp)
 40222ec:	dfc00215 	stw	ra,8(sp)
 40222f0:	2821883a 	mov	r16,r5
 40222f4:	20000226 	beq	r4,zero,4022300 <__swsetup_r+0x30>
 40222f8:	20800e17 	ldw	r2,56(r4)
 40222fc:	10003126 	beq	r2,zero,40223c4 <__swsetup_r+0xf4>
 4022300:	8080030b 	ldhu	r2,12(r16)
 4022304:	10c0020c 	andi	r3,r2,8
 4022308:	1009883a 	mov	r4,r2
 402230c:	18000f26 	beq	r3,zero,402234c <__swsetup_r+0x7c>
 4022310:	80c00417 	ldw	r3,16(r16)
 4022314:	18001526 	beq	r3,zero,402236c <__swsetup_r+0x9c>
 4022318:	1100004c 	andi	r4,r2,1
 402231c:	20001c1e 	bne	r4,zero,4022390 <__swsetup_r+0xc0>
 4022320:	1080008c 	andi	r2,r2,2
 4022324:	1000291e 	bne	r2,zero,40223cc <__swsetup_r+0xfc>
 4022328:	80800517 	ldw	r2,20(r16)
 402232c:	80800215 	stw	r2,8(r16)
 4022330:	18001c26 	beq	r3,zero,40223a4 <__swsetup_r+0xd4>
 4022334:	0005883a 	mov	r2,zero
 4022338:	dfc00217 	ldw	ra,8(sp)
 402233c:	dc400117 	ldw	r17,4(sp)
 4022340:	dc000017 	ldw	r16,0(sp)
 4022344:	dec00304 	addi	sp,sp,12
 4022348:	f800283a 	ret
 402234c:	2080040c 	andi	r2,r4,16
 4022350:	10002e26 	beq	r2,zero,402240c <__swsetup_r+0x13c>
 4022354:	2080010c 	andi	r2,r4,4
 4022358:	10001e1e 	bne	r2,zero,40223d4 <__swsetup_r+0x104>
 402235c:	80c00417 	ldw	r3,16(r16)
 4022360:	20800214 	ori	r2,r4,8
 4022364:	8080030d 	sth	r2,12(r16)
 4022368:	183feb1e 	bne	r3,zero,4022318 <__flash_rwdata_start+0xffffc82c>
 402236c:	1100a00c 	andi	r4,r2,640
 4022370:	01408004 	movi	r5,512
 4022374:	217fe826 	beq	r4,r5,4022318 <__flash_rwdata_start+0xffffc82c>
 4022378:	800b883a 	mov	r5,r16
 402237c:	8809883a 	mov	r4,r17
 4022380:	4022cb80 	call	4022cb8 <__smakebuf_r>
 4022384:	8080030b 	ldhu	r2,12(r16)
 4022388:	80c00417 	ldw	r3,16(r16)
 402238c:	003fe206 	br	4022318 <__flash_rwdata_start+0xffffc82c>
 4022390:	80800517 	ldw	r2,20(r16)
 4022394:	80000215 	stw	zero,8(r16)
 4022398:	0085c83a 	sub	r2,zero,r2
 402239c:	80800615 	stw	r2,24(r16)
 40223a0:	183fe41e 	bne	r3,zero,4022334 <__flash_rwdata_start+0xffffc848>
 40223a4:	80c0030b 	ldhu	r3,12(r16)
 40223a8:	0005883a 	mov	r2,zero
 40223ac:	1900200c 	andi	r4,r3,128
 40223b0:	203fe126 	beq	r4,zero,4022338 <__flash_rwdata_start+0xffffc84c>
 40223b4:	18c01014 	ori	r3,r3,64
 40223b8:	80c0030d 	sth	r3,12(r16)
 40223bc:	00bfffc4 	movi	r2,-1
 40223c0:	003fdd06 	br	4022338 <__flash_rwdata_start+0xffffc84c>
 40223c4:	40208200 	call	4020820 <__sinit>
 40223c8:	003fcd06 	br	4022300 <__flash_rwdata_start+0xffffc814>
 40223cc:	0005883a 	mov	r2,zero
 40223d0:	003fd606 	br	402232c <__flash_rwdata_start+0xffffc840>
 40223d4:	81400c17 	ldw	r5,48(r16)
 40223d8:	28000626 	beq	r5,zero,40223f4 <__swsetup_r+0x124>
 40223dc:	80801004 	addi	r2,r16,64
 40223e0:	28800326 	beq	r5,r2,40223f0 <__swsetup_r+0x120>
 40223e4:	8809883a 	mov	r4,r17
 40223e8:	40229480 	call	4022948 <_free_r>
 40223ec:	8100030b 	ldhu	r4,12(r16)
 40223f0:	80000c15 	stw	zero,48(r16)
 40223f4:	80c00417 	ldw	r3,16(r16)
 40223f8:	00bff6c4 	movi	r2,-37
 40223fc:	1108703a 	and	r4,r2,r4
 4022400:	80000115 	stw	zero,4(r16)
 4022404:	80c00015 	stw	r3,0(r16)
 4022408:	003fd506 	br	4022360 <__flash_rwdata_start+0xffffc874>
 402240c:	00800244 	movi	r2,9
 4022410:	88800015 	stw	r2,0(r17)
 4022414:	20801014 	ori	r2,r4,64
 4022418:	8080030d 	sth	r2,12(r16)
 402241c:	00bfffc4 	movi	r2,-1
 4022420:	003fc506 	br	4022338 <__flash_rwdata_start+0xffffc84c>

04022424 <_close_r>:
 4022424:	defffd04 	addi	sp,sp,-12
 4022428:	dc000015 	stw	r16,0(sp)
 402242c:	04000034 	movhi	r16,0
 4022430:	dc400115 	stw	r17,4(sp)
 4022434:	8406c004 	addi	r16,r16,6912
 4022438:	2023883a 	mov	r17,r4
 402243c:	2809883a 	mov	r4,r5
 4022440:	dfc00215 	stw	ra,8(sp)
 4022444:	80000015 	stw	zero,0(r16)
 4022448:	402319c0 	call	402319c <close>
 402244c:	00ffffc4 	movi	r3,-1
 4022450:	10c00526 	beq	r2,r3,4022468 <_close_r+0x44>
 4022454:	dfc00217 	ldw	ra,8(sp)
 4022458:	dc400117 	ldw	r17,4(sp)
 402245c:	dc000017 	ldw	r16,0(sp)
 4022460:	dec00304 	addi	sp,sp,12
 4022464:	f800283a 	ret
 4022468:	80c00017 	ldw	r3,0(r16)
 402246c:	183ff926 	beq	r3,zero,4022454 <__flash_rwdata_start+0xffffc968>
 4022470:	88c00015 	stw	r3,0(r17)
 4022474:	003ff706 	br	4022454 <__flash_rwdata_start+0xffffc968>

04022478 <_fclose_r>:
 4022478:	28003926 	beq	r5,zero,4022560 <_fclose_r+0xe8>
 402247c:	defffc04 	addi	sp,sp,-16
 4022480:	dc400115 	stw	r17,4(sp)
 4022484:	dc000015 	stw	r16,0(sp)
 4022488:	dfc00315 	stw	ra,12(sp)
 402248c:	dc800215 	stw	r18,8(sp)
 4022490:	2023883a 	mov	r17,r4
 4022494:	2821883a 	mov	r16,r5
 4022498:	20000226 	beq	r4,zero,40224a4 <_fclose_r+0x2c>
 402249c:	20800e17 	ldw	r2,56(r4)
 40224a0:	10002726 	beq	r2,zero,4022540 <_fclose_r+0xc8>
 40224a4:	8080030f 	ldh	r2,12(r16)
 40224a8:	1000071e 	bne	r2,zero,40224c8 <_fclose_r+0x50>
 40224ac:	0005883a 	mov	r2,zero
 40224b0:	dfc00317 	ldw	ra,12(sp)
 40224b4:	dc800217 	ldw	r18,8(sp)
 40224b8:	dc400117 	ldw	r17,4(sp)
 40224bc:	dc000017 	ldw	r16,0(sp)
 40224c0:	dec00404 	addi	sp,sp,16
 40224c4:	f800283a 	ret
 40224c8:	800b883a 	mov	r5,r16
 40224cc:	8809883a 	mov	r4,r17
 40224d0:	402257c0 	call	402257c <__sflush_r>
 40224d4:	1025883a 	mov	r18,r2
 40224d8:	80800b17 	ldw	r2,44(r16)
 40224dc:	10000426 	beq	r2,zero,40224f0 <_fclose_r+0x78>
 40224e0:	81400717 	ldw	r5,28(r16)
 40224e4:	8809883a 	mov	r4,r17
 40224e8:	103ee83a 	callr	r2
 40224ec:	10001616 	blt	r2,zero,4022548 <_fclose_r+0xd0>
 40224f0:	8080030b 	ldhu	r2,12(r16)
 40224f4:	1080200c 	andi	r2,r2,128
 40224f8:	1000151e 	bne	r2,zero,4022550 <_fclose_r+0xd8>
 40224fc:	81400c17 	ldw	r5,48(r16)
 4022500:	28000526 	beq	r5,zero,4022518 <_fclose_r+0xa0>
 4022504:	80801004 	addi	r2,r16,64
 4022508:	28800226 	beq	r5,r2,4022514 <_fclose_r+0x9c>
 402250c:	8809883a 	mov	r4,r17
 4022510:	40229480 	call	4022948 <_free_r>
 4022514:	80000c15 	stw	zero,48(r16)
 4022518:	81401117 	ldw	r5,68(r16)
 402251c:	28000326 	beq	r5,zero,402252c <_fclose_r+0xb4>
 4022520:	8809883a 	mov	r4,r17
 4022524:	40229480 	call	4022948 <_free_r>
 4022528:	80001115 	stw	zero,68(r16)
 402252c:	40208300 	call	4020830 <__sfp_lock_acquire>
 4022530:	8000030d 	sth	zero,12(r16)
 4022534:	40208340 	call	4020834 <__sfp_lock_release>
 4022538:	9005883a 	mov	r2,r18
 402253c:	003fdc06 	br	40224b0 <__flash_rwdata_start+0xffffc9c4>
 4022540:	40208200 	call	4020820 <__sinit>
 4022544:	003fd706 	br	40224a4 <__flash_rwdata_start+0xffffc9b8>
 4022548:	04bfffc4 	movi	r18,-1
 402254c:	003fe806 	br	40224f0 <__flash_rwdata_start+0xffffca04>
 4022550:	81400417 	ldw	r5,16(r16)
 4022554:	8809883a 	mov	r4,r17
 4022558:	40229480 	call	4022948 <_free_r>
 402255c:	003fe706 	br	40224fc <__flash_rwdata_start+0xffffca10>
 4022560:	0005883a 	mov	r2,zero
 4022564:	f800283a 	ret

04022568 <fclose>:
 4022568:	00800034 	movhi	r2,0
 402256c:	1086b004 	addi	r2,r2,6848
 4022570:	200b883a 	mov	r5,r4
 4022574:	11000017 	ldw	r4,0(r2)
 4022578:	40224781 	jmpi	4022478 <_fclose_r>

0402257c <__sflush_r>:
 402257c:	2880030b 	ldhu	r2,12(r5)
 4022580:	defffb04 	addi	sp,sp,-20
 4022584:	dcc00315 	stw	r19,12(sp)
 4022588:	dc400115 	stw	r17,4(sp)
 402258c:	dfc00415 	stw	ra,16(sp)
 4022590:	dc800215 	stw	r18,8(sp)
 4022594:	dc000015 	stw	r16,0(sp)
 4022598:	10c0020c 	andi	r3,r2,8
 402259c:	2823883a 	mov	r17,r5
 40225a0:	2027883a 	mov	r19,r4
 40225a4:	1800311e 	bne	r3,zero,402266c <__sflush_r+0xf0>
 40225a8:	28c00117 	ldw	r3,4(r5)
 40225ac:	10820014 	ori	r2,r2,2048
 40225b0:	2880030d 	sth	r2,12(r5)
 40225b4:	00c04b0e 	bge	zero,r3,40226e4 <__sflush_r+0x168>
 40225b8:	8a000a17 	ldw	r8,40(r17)
 40225bc:	40002326 	beq	r8,zero,402264c <__sflush_r+0xd0>
 40225c0:	9c000017 	ldw	r16,0(r19)
 40225c4:	10c4000c 	andi	r3,r2,4096
 40225c8:	98000015 	stw	zero,0(r19)
 40225cc:	18004826 	beq	r3,zero,40226f0 <__sflush_r+0x174>
 40225d0:	89801417 	ldw	r6,80(r17)
 40225d4:	10c0010c 	andi	r3,r2,4
 40225d8:	18000626 	beq	r3,zero,40225f4 <__sflush_r+0x78>
 40225dc:	88c00117 	ldw	r3,4(r17)
 40225e0:	88800c17 	ldw	r2,48(r17)
 40225e4:	30cdc83a 	sub	r6,r6,r3
 40225e8:	10000226 	beq	r2,zero,40225f4 <__sflush_r+0x78>
 40225ec:	88800f17 	ldw	r2,60(r17)
 40225f0:	308dc83a 	sub	r6,r6,r2
 40225f4:	89400717 	ldw	r5,28(r17)
 40225f8:	000f883a 	mov	r7,zero
 40225fc:	9809883a 	mov	r4,r19
 4022600:	403ee83a 	callr	r8
 4022604:	00ffffc4 	movi	r3,-1
 4022608:	10c04426 	beq	r2,r3,402271c <__sflush_r+0x1a0>
 402260c:	88c0030b 	ldhu	r3,12(r17)
 4022610:	89000417 	ldw	r4,16(r17)
 4022614:	88000115 	stw	zero,4(r17)
 4022618:	197dffcc 	andi	r5,r3,63487
 402261c:	8940030d 	sth	r5,12(r17)
 4022620:	89000015 	stw	r4,0(r17)
 4022624:	18c4000c 	andi	r3,r3,4096
 4022628:	18002c1e 	bne	r3,zero,40226dc <__sflush_r+0x160>
 402262c:	89400c17 	ldw	r5,48(r17)
 4022630:	9c000015 	stw	r16,0(r19)
 4022634:	28000526 	beq	r5,zero,402264c <__sflush_r+0xd0>
 4022638:	88801004 	addi	r2,r17,64
 402263c:	28800226 	beq	r5,r2,4022648 <__sflush_r+0xcc>
 4022640:	9809883a 	mov	r4,r19
 4022644:	40229480 	call	4022948 <_free_r>
 4022648:	88000c15 	stw	zero,48(r17)
 402264c:	0005883a 	mov	r2,zero
 4022650:	dfc00417 	ldw	ra,16(sp)
 4022654:	dcc00317 	ldw	r19,12(sp)
 4022658:	dc800217 	ldw	r18,8(sp)
 402265c:	dc400117 	ldw	r17,4(sp)
 4022660:	dc000017 	ldw	r16,0(sp)
 4022664:	dec00504 	addi	sp,sp,20
 4022668:	f800283a 	ret
 402266c:	2c800417 	ldw	r18,16(r5)
 4022670:	903ff626 	beq	r18,zero,402264c <__flash_rwdata_start+0xffffcb60>
 4022674:	2c000017 	ldw	r16,0(r5)
 4022678:	108000cc 	andi	r2,r2,3
 402267c:	2c800015 	stw	r18,0(r5)
 4022680:	84a1c83a 	sub	r16,r16,r18
 4022684:	1000131e 	bne	r2,zero,40226d4 <__sflush_r+0x158>
 4022688:	28800517 	ldw	r2,20(r5)
 402268c:	88800215 	stw	r2,8(r17)
 4022690:	04000316 	blt	zero,r16,40226a0 <__sflush_r+0x124>
 4022694:	003fed06 	br	402264c <__flash_rwdata_start+0xffffcb60>
 4022698:	90a5883a 	add	r18,r18,r2
 402269c:	043feb0e 	bge	zero,r16,402264c <__flash_rwdata_start+0xffffcb60>
 40226a0:	88800917 	ldw	r2,36(r17)
 40226a4:	89400717 	ldw	r5,28(r17)
 40226a8:	800f883a 	mov	r7,r16
 40226ac:	900d883a 	mov	r6,r18
 40226b0:	9809883a 	mov	r4,r19
 40226b4:	103ee83a 	callr	r2
 40226b8:	80a1c83a 	sub	r16,r16,r2
 40226bc:	00bff616 	blt	zero,r2,4022698 <__flash_rwdata_start+0xffffcbac>
 40226c0:	88c0030b 	ldhu	r3,12(r17)
 40226c4:	00bfffc4 	movi	r2,-1
 40226c8:	18c01014 	ori	r3,r3,64
 40226cc:	88c0030d 	sth	r3,12(r17)
 40226d0:	003fdf06 	br	4022650 <__flash_rwdata_start+0xffffcb64>
 40226d4:	0005883a 	mov	r2,zero
 40226d8:	003fec06 	br	402268c <__flash_rwdata_start+0xffffcba0>
 40226dc:	88801415 	stw	r2,80(r17)
 40226e0:	003fd206 	br	402262c <__flash_rwdata_start+0xffffcb40>
 40226e4:	28c00f17 	ldw	r3,60(r5)
 40226e8:	00ffb316 	blt	zero,r3,40225b8 <__flash_rwdata_start+0xffffcacc>
 40226ec:	003fd706 	br	402264c <__flash_rwdata_start+0xffffcb60>
 40226f0:	89400717 	ldw	r5,28(r17)
 40226f4:	000d883a 	mov	r6,zero
 40226f8:	01c00044 	movi	r7,1
 40226fc:	9809883a 	mov	r4,r19
 4022700:	403ee83a 	callr	r8
 4022704:	100d883a 	mov	r6,r2
 4022708:	00bfffc4 	movi	r2,-1
 402270c:	30801426 	beq	r6,r2,4022760 <__sflush_r+0x1e4>
 4022710:	8880030b 	ldhu	r2,12(r17)
 4022714:	8a000a17 	ldw	r8,40(r17)
 4022718:	003fae06 	br	40225d4 <__flash_rwdata_start+0xffffcae8>
 402271c:	98c00017 	ldw	r3,0(r19)
 4022720:	183fba26 	beq	r3,zero,402260c <__flash_rwdata_start+0xffffcb20>
 4022724:	01000744 	movi	r4,29
 4022728:	19000626 	beq	r3,r4,4022744 <__sflush_r+0x1c8>
 402272c:	01000584 	movi	r4,22
 4022730:	19000426 	beq	r3,r4,4022744 <__sflush_r+0x1c8>
 4022734:	88c0030b 	ldhu	r3,12(r17)
 4022738:	18c01014 	ori	r3,r3,64
 402273c:	88c0030d 	sth	r3,12(r17)
 4022740:	003fc306 	br	4022650 <__flash_rwdata_start+0xffffcb64>
 4022744:	8880030b 	ldhu	r2,12(r17)
 4022748:	88c00417 	ldw	r3,16(r17)
 402274c:	88000115 	stw	zero,4(r17)
 4022750:	10bdffcc 	andi	r2,r2,63487
 4022754:	8880030d 	sth	r2,12(r17)
 4022758:	88c00015 	stw	r3,0(r17)
 402275c:	003fb306 	br	402262c <__flash_rwdata_start+0xffffcb40>
 4022760:	98800017 	ldw	r2,0(r19)
 4022764:	103fea26 	beq	r2,zero,4022710 <__flash_rwdata_start+0xffffcc24>
 4022768:	00c00744 	movi	r3,29
 402276c:	10c00226 	beq	r2,r3,4022778 <__sflush_r+0x1fc>
 4022770:	00c00584 	movi	r3,22
 4022774:	10c0031e 	bne	r2,r3,4022784 <__sflush_r+0x208>
 4022778:	9c000015 	stw	r16,0(r19)
 402277c:	0005883a 	mov	r2,zero
 4022780:	003fb306 	br	4022650 <__flash_rwdata_start+0xffffcb64>
 4022784:	88c0030b 	ldhu	r3,12(r17)
 4022788:	3005883a 	mov	r2,r6
 402278c:	18c01014 	ori	r3,r3,64
 4022790:	88c0030d 	sth	r3,12(r17)
 4022794:	003fae06 	br	4022650 <__flash_rwdata_start+0xffffcb64>

04022798 <_fflush_r>:
 4022798:	defffd04 	addi	sp,sp,-12
 402279c:	dc000115 	stw	r16,4(sp)
 40227a0:	dfc00215 	stw	ra,8(sp)
 40227a4:	2021883a 	mov	r16,r4
 40227a8:	20000226 	beq	r4,zero,40227b4 <_fflush_r+0x1c>
 40227ac:	20800e17 	ldw	r2,56(r4)
 40227b0:	10000c26 	beq	r2,zero,40227e4 <_fflush_r+0x4c>
 40227b4:	2880030f 	ldh	r2,12(r5)
 40227b8:	1000051e 	bne	r2,zero,40227d0 <_fflush_r+0x38>
 40227bc:	0005883a 	mov	r2,zero
 40227c0:	dfc00217 	ldw	ra,8(sp)
 40227c4:	dc000117 	ldw	r16,4(sp)
 40227c8:	dec00304 	addi	sp,sp,12
 40227cc:	f800283a 	ret
 40227d0:	8009883a 	mov	r4,r16
 40227d4:	dfc00217 	ldw	ra,8(sp)
 40227d8:	dc000117 	ldw	r16,4(sp)
 40227dc:	dec00304 	addi	sp,sp,12
 40227e0:	402257c1 	jmpi	402257c <__sflush_r>
 40227e4:	d9400015 	stw	r5,0(sp)
 40227e8:	40208200 	call	4020820 <__sinit>
 40227ec:	d9400017 	ldw	r5,0(sp)
 40227f0:	003ff006 	br	40227b4 <__flash_rwdata_start+0xffffccc8>

040227f4 <fflush>:
 40227f4:	20000526 	beq	r4,zero,402280c <fflush+0x18>
 40227f8:	00800034 	movhi	r2,0
 40227fc:	1086b004 	addi	r2,r2,6848
 4022800:	200b883a 	mov	r5,r4
 4022804:	11000017 	ldw	r4,0(r2)
 4022808:	40227981 	jmpi	4022798 <_fflush_r>
 402280c:	00800034 	movhi	r2,0
 4022810:	1086af04 	addi	r2,r2,6844
 4022814:	11000017 	ldw	r4,0(r2)
 4022818:	014100b4 	movhi	r5,1026
 402281c:	2949e604 	addi	r5,r5,10136
 4022820:	4020dfc1 	jmpi	4020dfc <_fwalk_reent>

04022824 <_malloc_trim_r>:
 4022824:	defffb04 	addi	sp,sp,-20
 4022828:	dcc00315 	stw	r19,12(sp)
 402282c:	04c00034 	movhi	r19,0
 4022830:	dc800215 	stw	r18,8(sp)
 4022834:	dc400115 	stw	r17,4(sp)
 4022838:	dc000015 	stw	r16,0(sp)
 402283c:	dfc00415 	stw	ra,16(sp)
 4022840:	2821883a 	mov	r16,r5
 4022844:	9cc12b04 	addi	r19,r19,1196
 4022848:	2025883a 	mov	r18,r4
 402284c:	40236fc0 	call	40236fc <__malloc_lock>
 4022850:	98800217 	ldw	r2,8(r19)
 4022854:	14400117 	ldw	r17,4(r2)
 4022858:	00bfff04 	movi	r2,-4
 402285c:	88a2703a 	and	r17,r17,r2
 4022860:	8c21c83a 	sub	r16,r17,r16
 4022864:	8403fbc4 	addi	r16,r16,4079
 4022868:	8020d33a 	srli	r16,r16,12
 402286c:	0083ffc4 	movi	r2,4095
 4022870:	843fffc4 	addi	r16,r16,-1
 4022874:	8020933a 	slli	r16,r16,12
 4022878:	1400060e 	bge	r2,r16,4022894 <_malloc_trim_r+0x70>
 402287c:	000b883a 	mov	r5,zero
 4022880:	9009883a 	mov	r4,r18
 4022884:	40220e00 	call	40220e0 <_sbrk_r>
 4022888:	98c00217 	ldw	r3,8(r19)
 402288c:	1c47883a 	add	r3,r3,r17
 4022890:	10c00a26 	beq	r2,r3,40228bc <_malloc_trim_r+0x98>
 4022894:	9009883a 	mov	r4,r18
 4022898:	40237200 	call	4023720 <__malloc_unlock>
 402289c:	0005883a 	mov	r2,zero
 40228a0:	dfc00417 	ldw	ra,16(sp)
 40228a4:	dcc00317 	ldw	r19,12(sp)
 40228a8:	dc800217 	ldw	r18,8(sp)
 40228ac:	dc400117 	ldw	r17,4(sp)
 40228b0:	dc000017 	ldw	r16,0(sp)
 40228b4:	dec00504 	addi	sp,sp,20
 40228b8:	f800283a 	ret
 40228bc:	040bc83a 	sub	r5,zero,r16
 40228c0:	9009883a 	mov	r4,r18
 40228c4:	40220e00 	call	40220e0 <_sbrk_r>
 40228c8:	00ffffc4 	movi	r3,-1
 40228cc:	10c00d26 	beq	r2,r3,4022904 <_malloc_trim_r+0xe0>
 40228d0:	00c00034 	movhi	r3,0
 40228d4:	18c6c804 	addi	r3,r3,6944
 40228d8:	18800017 	ldw	r2,0(r3)
 40228dc:	99000217 	ldw	r4,8(r19)
 40228e0:	8c23c83a 	sub	r17,r17,r16
 40228e4:	8c400054 	ori	r17,r17,1
 40228e8:	1421c83a 	sub	r16,r2,r16
 40228ec:	24400115 	stw	r17,4(r4)
 40228f0:	9009883a 	mov	r4,r18
 40228f4:	1c000015 	stw	r16,0(r3)
 40228f8:	40237200 	call	4023720 <__malloc_unlock>
 40228fc:	00800044 	movi	r2,1
 4022900:	003fe706 	br	40228a0 <__flash_rwdata_start+0xffffcdb4>
 4022904:	000b883a 	mov	r5,zero
 4022908:	9009883a 	mov	r4,r18
 402290c:	40220e00 	call	40220e0 <_sbrk_r>
 4022910:	99000217 	ldw	r4,8(r19)
 4022914:	014003c4 	movi	r5,15
 4022918:	1107c83a 	sub	r3,r2,r4
 402291c:	28ffdd0e 	bge	r5,r3,4022894 <__flash_rwdata_start+0xffffcda8>
 4022920:	01400034 	movhi	r5,0
 4022924:	2946b104 	addi	r5,r5,6852
 4022928:	29400017 	ldw	r5,0(r5)
 402292c:	18c00054 	ori	r3,r3,1
 4022930:	20c00115 	stw	r3,4(r4)
 4022934:	00c00034 	movhi	r3,0
 4022938:	1145c83a 	sub	r2,r2,r5
 402293c:	18c6c804 	addi	r3,r3,6944
 4022940:	18800015 	stw	r2,0(r3)
 4022944:	003fd306 	br	4022894 <__flash_rwdata_start+0xffffcda8>

04022948 <_free_r>:
 4022948:	28004126 	beq	r5,zero,4022a50 <_free_r+0x108>
 402294c:	defffd04 	addi	sp,sp,-12
 4022950:	dc400115 	stw	r17,4(sp)
 4022954:	dc000015 	stw	r16,0(sp)
 4022958:	2023883a 	mov	r17,r4
 402295c:	2821883a 	mov	r16,r5
 4022960:	dfc00215 	stw	ra,8(sp)
 4022964:	40236fc0 	call	40236fc <__malloc_lock>
 4022968:	81ffff17 	ldw	r7,-4(r16)
 402296c:	00bfff84 	movi	r2,-2
 4022970:	01000034 	movhi	r4,0
 4022974:	81bffe04 	addi	r6,r16,-8
 4022978:	3884703a 	and	r2,r7,r2
 402297c:	21012b04 	addi	r4,r4,1196
 4022980:	308b883a 	add	r5,r6,r2
 4022984:	2a400117 	ldw	r9,4(r5)
 4022988:	22000217 	ldw	r8,8(r4)
 402298c:	00ffff04 	movi	r3,-4
 4022990:	48c6703a 	and	r3,r9,r3
 4022994:	2a005726 	beq	r5,r8,4022af4 <_free_r+0x1ac>
 4022998:	28c00115 	stw	r3,4(r5)
 402299c:	39c0004c 	andi	r7,r7,1
 40229a0:	3800091e 	bne	r7,zero,40229c8 <_free_r+0x80>
 40229a4:	823ffe17 	ldw	r8,-8(r16)
 40229a8:	22400204 	addi	r9,r4,8
 40229ac:	320dc83a 	sub	r6,r6,r8
 40229b0:	31c00217 	ldw	r7,8(r6)
 40229b4:	1205883a 	add	r2,r2,r8
 40229b8:	3a406526 	beq	r7,r9,4022b50 <_free_r+0x208>
 40229bc:	32000317 	ldw	r8,12(r6)
 40229c0:	3a000315 	stw	r8,12(r7)
 40229c4:	41c00215 	stw	r7,8(r8)
 40229c8:	28cf883a 	add	r7,r5,r3
 40229cc:	39c00117 	ldw	r7,4(r7)
 40229d0:	39c0004c 	andi	r7,r7,1
 40229d4:	38003a26 	beq	r7,zero,4022ac0 <_free_r+0x178>
 40229d8:	10c00054 	ori	r3,r2,1
 40229dc:	30c00115 	stw	r3,4(r6)
 40229e0:	3087883a 	add	r3,r6,r2
 40229e4:	18800015 	stw	r2,0(r3)
 40229e8:	00c07fc4 	movi	r3,511
 40229ec:	18801936 	bltu	r3,r2,4022a54 <_free_r+0x10c>
 40229f0:	1004d0fa 	srli	r2,r2,3
 40229f4:	01c00044 	movi	r7,1
 40229f8:	21400117 	ldw	r5,4(r4)
 40229fc:	10c00044 	addi	r3,r2,1
 4022a00:	18c7883a 	add	r3,r3,r3
 4022a04:	1005d0ba 	srai	r2,r2,2
 4022a08:	18c7883a 	add	r3,r3,r3
 4022a0c:	18c7883a 	add	r3,r3,r3
 4022a10:	1907883a 	add	r3,r3,r4
 4022a14:	3884983a 	sll	r2,r7,r2
 4022a18:	19c00017 	ldw	r7,0(r3)
 4022a1c:	1a3ffe04 	addi	r8,r3,-8
 4022a20:	1144b03a 	or	r2,r2,r5
 4022a24:	32000315 	stw	r8,12(r6)
 4022a28:	31c00215 	stw	r7,8(r6)
 4022a2c:	20800115 	stw	r2,4(r4)
 4022a30:	19800015 	stw	r6,0(r3)
 4022a34:	39800315 	stw	r6,12(r7)
 4022a38:	8809883a 	mov	r4,r17
 4022a3c:	dfc00217 	ldw	ra,8(sp)
 4022a40:	dc400117 	ldw	r17,4(sp)
 4022a44:	dc000017 	ldw	r16,0(sp)
 4022a48:	dec00304 	addi	sp,sp,12
 4022a4c:	40237201 	jmpi	4023720 <__malloc_unlock>
 4022a50:	f800283a 	ret
 4022a54:	100ad27a 	srli	r5,r2,9
 4022a58:	00c00104 	movi	r3,4
 4022a5c:	19404a36 	bltu	r3,r5,4022b88 <_free_r+0x240>
 4022a60:	100ad1ba 	srli	r5,r2,6
 4022a64:	28c00e44 	addi	r3,r5,57
 4022a68:	18c7883a 	add	r3,r3,r3
 4022a6c:	29400e04 	addi	r5,r5,56
 4022a70:	18c7883a 	add	r3,r3,r3
 4022a74:	18c7883a 	add	r3,r3,r3
 4022a78:	1909883a 	add	r4,r3,r4
 4022a7c:	20c00017 	ldw	r3,0(r4)
 4022a80:	01c00034 	movhi	r7,0
 4022a84:	213ffe04 	addi	r4,r4,-8
 4022a88:	39c12b04 	addi	r7,r7,1196
 4022a8c:	20c04426 	beq	r4,r3,4022ba0 <_free_r+0x258>
 4022a90:	01ffff04 	movi	r7,-4
 4022a94:	19400117 	ldw	r5,4(r3)
 4022a98:	29ca703a 	and	r5,r5,r7
 4022a9c:	1140022e 	bgeu	r2,r5,4022aa8 <_free_r+0x160>
 4022aa0:	18c00217 	ldw	r3,8(r3)
 4022aa4:	20fffb1e 	bne	r4,r3,4022a94 <__flash_rwdata_start+0xffffcfa8>
 4022aa8:	19000317 	ldw	r4,12(r3)
 4022aac:	31000315 	stw	r4,12(r6)
 4022ab0:	30c00215 	stw	r3,8(r6)
 4022ab4:	21800215 	stw	r6,8(r4)
 4022ab8:	19800315 	stw	r6,12(r3)
 4022abc:	003fde06 	br	4022a38 <__flash_rwdata_start+0xffffcf4c>
 4022ac0:	29c00217 	ldw	r7,8(r5)
 4022ac4:	10c5883a 	add	r2,r2,r3
 4022ac8:	00c00034 	movhi	r3,0
 4022acc:	18c12d04 	addi	r3,r3,1204
 4022ad0:	38c03b26 	beq	r7,r3,4022bc0 <_free_r+0x278>
 4022ad4:	2a000317 	ldw	r8,12(r5)
 4022ad8:	11400054 	ori	r5,r2,1
 4022adc:	3087883a 	add	r3,r6,r2
 4022ae0:	3a000315 	stw	r8,12(r7)
 4022ae4:	41c00215 	stw	r7,8(r8)
 4022ae8:	31400115 	stw	r5,4(r6)
 4022aec:	18800015 	stw	r2,0(r3)
 4022af0:	003fbd06 	br	40229e8 <__flash_rwdata_start+0xffffcefc>
 4022af4:	39c0004c 	andi	r7,r7,1
 4022af8:	10c5883a 	add	r2,r2,r3
 4022afc:	3800071e 	bne	r7,zero,4022b1c <_free_r+0x1d4>
 4022b00:	81fffe17 	ldw	r7,-8(r16)
 4022b04:	31cdc83a 	sub	r6,r6,r7
 4022b08:	30c00317 	ldw	r3,12(r6)
 4022b0c:	31400217 	ldw	r5,8(r6)
 4022b10:	11c5883a 	add	r2,r2,r7
 4022b14:	28c00315 	stw	r3,12(r5)
 4022b18:	19400215 	stw	r5,8(r3)
 4022b1c:	10c00054 	ori	r3,r2,1
 4022b20:	30c00115 	stw	r3,4(r6)
 4022b24:	00c00034 	movhi	r3,0
 4022b28:	18c6b204 	addi	r3,r3,6856
 4022b2c:	18c00017 	ldw	r3,0(r3)
 4022b30:	21800215 	stw	r6,8(r4)
 4022b34:	10ffc036 	bltu	r2,r3,4022a38 <__flash_rwdata_start+0xffffcf4c>
 4022b38:	00800034 	movhi	r2,0
 4022b3c:	1086bf04 	addi	r2,r2,6908
 4022b40:	11400017 	ldw	r5,0(r2)
 4022b44:	8809883a 	mov	r4,r17
 4022b48:	40228240 	call	4022824 <_malloc_trim_r>
 4022b4c:	003fba06 	br	4022a38 <__flash_rwdata_start+0xffffcf4c>
 4022b50:	28c9883a 	add	r4,r5,r3
 4022b54:	21000117 	ldw	r4,4(r4)
 4022b58:	2100004c 	andi	r4,r4,1
 4022b5c:	2000391e 	bne	r4,zero,4022c44 <_free_r+0x2fc>
 4022b60:	29c00217 	ldw	r7,8(r5)
 4022b64:	29000317 	ldw	r4,12(r5)
 4022b68:	1885883a 	add	r2,r3,r2
 4022b6c:	10c00054 	ori	r3,r2,1
 4022b70:	39000315 	stw	r4,12(r7)
 4022b74:	21c00215 	stw	r7,8(r4)
 4022b78:	30c00115 	stw	r3,4(r6)
 4022b7c:	308d883a 	add	r6,r6,r2
 4022b80:	30800015 	stw	r2,0(r6)
 4022b84:	003fac06 	br	4022a38 <__flash_rwdata_start+0xffffcf4c>
 4022b88:	00c00504 	movi	r3,20
 4022b8c:	19401536 	bltu	r3,r5,4022be4 <_free_r+0x29c>
 4022b90:	28c01704 	addi	r3,r5,92
 4022b94:	18c7883a 	add	r3,r3,r3
 4022b98:	294016c4 	addi	r5,r5,91
 4022b9c:	003fb406 	br	4022a70 <__flash_rwdata_start+0xffffcf84>
 4022ba0:	280bd0ba 	srai	r5,r5,2
 4022ba4:	00c00044 	movi	r3,1
 4022ba8:	38800117 	ldw	r2,4(r7)
 4022bac:	194a983a 	sll	r5,r3,r5
 4022bb0:	2007883a 	mov	r3,r4
 4022bb4:	2884b03a 	or	r2,r5,r2
 4022bb8:	38800115 	stw	r2,4(r7)
 4022bbc:	003fbb06 	br	4022aac <__flash_rwdata_start+0xffffcfc0>
 4022bc0:	21800515 	stw	r6,20(r4)
 4022bc4:	21800415 	stw	r6,16(r4)
 4022bc8:	10c00054 	ori	r3,r2,1
 4022bcc:	31c00315 	stw	r7,12(r6)
 4022bd0:	31c00215 	stw	r7,8(r6)
 4022bd4:	30c00115 	stw	r3,4(r6)
 4022bd8:	308d883a 	add	r6,r6,r2
 4022bdc:	30800015 	stw	r2,0(r6)
 4022be0:	003f9506 	br	4022a38 <__flash_rwdata_start+0xffffcf4c>
 4022be4:	00c01504 	movi	r3,84
 4022be8:	19400536 	bltu	r3,r5,4022c00 <_free_r+0x2b8>
 4022bec:	100ad33a 	srli	r5,r2,12
 4022bf0:	28c01bc4 	addi	r3,r5,111
 4022bf4:	18c7883a 	add	r3,r3,r3
 4022bf8:	29401b84 	addi	r5,r5,110
 4022bfc:	003f9c06 	br	4022a70 <__flash_rwdata_start+0xffffcf84>
 4022c00:	00c05504 	movi	r3,340
 4022c04:	19400536 	bltu	r3,r5,4022c1c <_free_r+0x2d4>
 4022c08:	100ad3fa 	srli	r5,r2,15
 4022c0c:	28c01e04 	addi	r3,r5,120
 4022c10:	18c7883a 	add	r3,r3,r3
 4022c14:	29401dc4 	addi	r5,r5,119
 4022c18:	003f9506 	br	4022a70 <__flash_rwdata_start+0xffffcf84>
 4022c1c:	00c15504 	movi	r3,1364
 4022c20:	19400536 	bltu	r3,r5,4022c38 <_free_r+0x2f0>
 4022c24:	100ad4ba 	srli	r5,r2,18
 4022c28:	28c01f44 	addi	r3,r5,125
 4022c2c:	18c7883a 	add	r3,r3,r3
 4022c30:	29401f04 	addi	r5,r5,124
 4022c34:	003f8e06 	br	4022a70 <__flash_rwdata_start+0xffffcf84>
 4022c38:	00c03f84 	movi	r3,254
 4022c3c:	01401f84 	movi	r5,126
 4022c40:	003f8b06 	br	4022a70 <__flash_rwdata_start+0xffffcf84>
 4022c44:	10c00054 	ori	r3,r2,1
 4022c48:	30c00115 	stw	r3,4(r6)
 4022c4c:	308d883a 	add	r6,r6,r2
 4022c50:	30800015 	stw	r2,0(r6)
 4022c54:	003f7806 	br	4022a38 <__flash_rwdata_start+0xffffcf4c>

04022c58 <_lseek_r>:
 4022c58:	defffd04 	addi	sp,sp,-12
 4022c5c:	2805883a 	mov	r2,r5
 4022c60:	dc000015 	stw	r16,0(sp)
 4022c64:	04000034 	movhi	r16,0
 4022c68:	dc400115 	stw	r17,4(sp)
 4022c6c:	300b883a 	mov	r5,r6
 4022c70:	8406c004 	addi	r16,r16,6912
 4022c74:	2023883a 	mov	r17,r4
 4022c78:	380d883a 	mov	r6,r7
 4022c7c:	1009883a 	mov	r4,r2
 4022c80:	dfc00215 	stw	ra,8(sp)
 4022c84:	80000015 	stw	zero,0(r16)
 4022c88:	40235a40 	call	40235a4 <lseek>
 4022c8c:	00ffffc4 	movi	r3,-1
 4022c90:	10c00526 	beq	r2,r3,4022ca8 <_lseek_r+0x50>
 4022c94:	dfc00217 	ldw	ra,8(sp)
 4022c98:	dc400117 	ldw	r17,4(sp)
 4022c9c:	dc000017 	ldw	r16,0(sp)
 4022ca0:	dec00304 	addi	sp,sp,12
 4022ca4:	f800283a 	ret
 4022ca8:	80c00017 	ldw	r3,0(r16)
 4022cac:	183ff926 	beq	r3,zero,4022c94 <__flash_rwdata_start+0xffffd1a8>
 4022cb0:	88c00015 	stw	r3,0(r17)
 4022cb4:	003ff706 	br	4022c94 <__flash_rwdata_start+0xffffd1a8>

04022cb8 <__smakebuf_r>:
 4022cb8:	2880030b 	ldhu	r2,12(r5)
 4022cbc:	10c0008c 	andi	r3,r2,2
 4022cc0:	1800411e 	bne	r3,zero,4022dc8 <__smakebuf_r+0x110>
 4022cc4:	deffec04 	addi	sp,sp,-80
 4022cc8:	dc000f15 	stw	r16,60(sp)
 4022ccc:	2821883a 	mov	r16,r5
 4022cd0:	2940038f 	ldh	r5,14(r5)
 4022cd4:	dc401015 	stw	r17,64(sp)
 4022cd8:	dfc01315 	stw	ra,76(sp)
 4022cdc:	dcc01215 	stw	r19,72(sp)
 4022ce0:	dc801115 	stw	r18,68(sp)
 4022ce4:	2023883a 	mov	r17,r4
 4022ce8:	28001c16 	blt	r5,zero,4022d5c <__smakebuf_r+0xa4>
 4022cec:	d80d883a 	mov	r6,sp
 4022cf0:	4022ed40 	call	4022ed4 <_fstat_r>
 4022cf4:	10001816 	blt	r2,zero,4022d58 <__smakebuf_r+0xa0>
 4022cf8:	d8800117 	ldw	r2,4(sp)
 4022cfc:	00e00014 	movui	r3,32768
 4022d00:	10bc000c 	andi	r2,r2,61440
 4022d04:	14c80020 	cmpeqi	r19,r2,8192
 4022d08:	10c03726 	beq	r2,r3,4022de8 <__smakebuf_r+0x130>
 4022d0c:	80c0030b 	ldhu	r3,12(r16)
 4022d10:	18c20014 	ori	r3,r3,2048
 4022d14:	80c0030d 	sth	r3,12(r16)
 4022d18:	00c80004 	movi	r3,8192
 4022d1c:	10c0521e 	bne	r2,r3,4022e68 <__smakebuf_r+0x1b0>
 4022d20:	8140038f 	ldh	r5,14(r16)
 4022d24:	8809883a 	mov	r4,r17
 4022d28:	4022f300 	call	4022f30 <_isatty_r>
 4022d2c:	10004c26 	beq	r2,zero,4022e60 <__smakebuf_r+0x1a8>
 4022d30:	8080030b 	ldhu	r2,12(r16)
 4022d34:	80c010c4 	addi	r3,r16,67
 4022d38:	80c00015 	stw	r3,0(r16)
 4022d3c:	10800054 	ori	r2,r2,1
 4022d40:	8080030d 	sth	r2,12(r16)
 4022d44:	00800044 	movi	r2,1
 4022d48:	80c00415 	stw	r3,16(r16)
 4022d4c:	80800515 	stw	r2,20(r16)
 4022d50:	04810004 	movi	r18,1024
 4022d54:	00000706 	br	4022d74 <__smakebuf_r+0xbc>
 4022d58:	8080030b 	ldhu	r2,12(r16)
 4022d5c:	10c0200c 	andi	r3,r2,128
 4022d60:	18001f1e 	bne	r3,zero,4022de0 <__smakebuf_r+0x128>
 4022d64:	04810004 	movi	r18,1024
 4022d68:	10820014 	ori	r2,r2,2048
 4022d6c:	8080030d 	sth	r2,12(r16)
 4022d70:	0027883a 	mov	r19,zero
 4022d74:	900b883a 	mov	r5,r18
 4022d78:	8809883a 	mov	r4,r17
 4022d7c:	4020ec00 	call	4020ec0 <_malloc_r>
 4022d80:	10002c26 	beq	r2,zero,4022e34 <__smakebuf_r+0x17c>
 4022d84:	80c0030b 	ldhu	r3,12(r16)
 4022d88:	010100b4 	movhi	r4,1026
 4022d8c:	21013204 	addi	r4,r4,1224
 4022d90:	89000f15 	stw	r4,60(r17)
 4022d94:	18c02014 	ori	r3,r3,128
 4022d98:	80c0030d 	sth	r3,12(r16)
 4022d9c:	80800015 	stw	r2,0(r16)
 4022da0:	80800415 	stw	r2,16(r16)
 4022da4:	84800515 	stw	r18,20(r16)
 4022da8:	98001a1e 	bne	r19,zero,4022e14 <__smakebuf_r+0x15c>
 4022dac:	dfc01317 	ldw	ra,76(sp)
 4022db0:	dcc01217 	ldw	r19,72(sp)
 4022db4:	dc801117 	ldw	r18,68(sp)
 4022db8:	dc401017 	ldw	r17,64(sp)
 4022dbc:	dc000f17 	ldw	r16,60(sp)
 4022dc0:	dec01404 	addi	sp,sp,80
 4022dc4:	f800283a 	ret
 4022dc8:	288010c4 	addi	r2,r5,67
 4022dcc:	28800015 	stw	r2,0(r5)
 4022dd0:	28800415 	stw	r2,16(r5)
 4022dd4:	00800044 	movi	r2,1
 4022dd8:	28800515 	stw	r2,20(r5)
 4022ddc:	f800283a 	ret
 4022de0:	04801004 	movi	r18,64
 4022de4:	003fe006 	br	4022d68 <__flash_rwdata_start+0xffffd27c>
 4022de8:	81000a17 	ldw	r4,40(r16)
 4022dec:	00c100b4 	movhi	r3,1026
 4022df0:	18c88304 	addi	r3,r3,8716
 4022df4:	20ffc51e 	bne	r4,r3,4022d0c <__flash_rwdata_start+0xffffd220>
 4022df8:	8080030b 	ldhu	r2,12(r16)
 4022dfc:	04810004 	movi	r18,1024
 4022e00:	84801315 	stw	r18,76(r16)
 4022e04:	1484b03a 	or	r2,r2,r18
 4022e08:	8080030d 	sth	r2,12(r16)
 4022e0c:	0027883a 	mov	r19,zero
 4022e10:	003fd806 	br	4022d74 <__flash_rwdata_start+0xffffd288>
 4022e14:	8140038f 	ldh	r5,14(r16)
 4022e18:	8809883a 	mov	r4,r17
 4022e1c:	4022f300 	call	4022f30 <_isatty_r>
 4022e20:	103fe226 	beq	r2,zero,4022dac <__flash_rwdata_start+0xffffd2c0>
 4022e24:	8080030b 	ldhu	r2,12(r16)
 4022e28:	10800054 	ori	r2,r2,1
 4022e2c:	8080030d 	sth	r2,12(r16)
 4022e30:	003fde06 	br	4022dac <__flash_rwdata_start+0xffffd2c0>
 4022e34:	8080030b 	ldhu	r2,12(r16)
 4022e38:	10c0800c 	andi	r3,r2,512
 4022e3c:	183fdb1e 	bne	r3,zero,4022dac <__flash_rwdata_start+0xffffd2c0>
 4022e40:	10800094 	ori	r2,r2,2
 4022e44:	80c010c4 	addi	r3,r16,67
 4022e48:	8080030d 	sth	r2,12(r16)
 4022e4c:	00800044 	movi	r2,1
 4022e50:	80c00015 	stw	r3,0(r16)
 4022e54:	80c00415 	stw	r3,16(r16)
 4022e58:	80800515 	stw	r2,20(r16)
 4022e5c:	003fd306 	br	4022dac <__flash_rwdata_start+0xffffd2c0>
 4022e60:	04810004 	movi	r18,1024
 4022e64:	003fc306 	br	4022d74 <__flash_rwdata_start+0xffffd288>
 4022e68:	0027883a 	mov	r19,zero
 4022e6c:	04810004 	movi	r18,1024
 4022e70:	003fc006 	br	4022d74 <__flash_rwdata_start+0xffffd288>

04022e74 <_read_r>:
 4022e74:	defffd04 	addi	sp,sp,-12
 4022e78:	2805883a 	mov	r2,r5
 4022e7c:	dc000015 	stw	r16,0(sp)
 4022e80:	04000034 	movhi	r16,0
 4022e84:	dc400115 	stw	r17,4(sp)
 4022e88:	300b883a 	mov	r5,r6
 4022e8c:	8406c004 	addi	r16,r16,6912
 4022e90:	2023883a 	mov	r17,r4
 4022e94:	380d883a 	mov	r6,r7
 4022e98:	1009883a 	mov	r4,r2
 4022e9c:	dfc00215 	stw	ra,8(sp)
 4022ea0:	80000015 	stw	zero,0(r16)
 4022ea4:	40237800 	call	4023780 <read>
 4022ea8:	00ffffc4 	movi	r3,-1
 4022eac:	10c00526 	beq	r2,r3,4022ec4 <_read_r+0x50>
 4022eb0:	dfc00217 	ldw	ra,8(sp)
 4022eb4:	dc400117 	ldw	r17,4(sp)
 4022eb8:	dc000017 	ldw	r16,0(sp)
 4022ebc:	dec00304 	addi	sp,sp,12
 4022ec0:	f800283a 	ret
 4022ec4:	80c00017 	ldw	r3,0(r16)
 4022ec8:	183ff926 	beq	r3,zero,4022eb0 <__flash_rwdata_start+0xffffd3c4>
 4022ecc:	88c00015 	stw	r3,0(r17)
 4022ed0:	003ff706 	br	4022eb0 <__flash_rwdata_start+0xffffd3c4>

04022ed4 <_fstat_r>:
 4022ed4:	defffd04 	addi	sp,sp,-12
 4022ed8:	2805883a 	mov	r2,r5
 4022edc:	dc000015 	stw	r16,0(sp)
 4022ee0:	04000034 	movhi	r16,0
 4022ee4:	dc400115 	stw	r17,4(sp)
 4022ee8:	8406c004 	addi	r16,r16,6912
 4022eec:	2023883a 	mov	r17,r4
 4022ef0:	300b883a 	mov	r5,r6
 4022ef4:	1009883a 	mov	r4,r2
 4022ef8:	dfc00215 	stw	ra,8(sp)
 4022efc:	80000015 	stw	zero,0(r16)
 4022f00:	40232dc0 	call	40232dc <fstat>
 4022f04:	00ffffc4 	movi	r3,-1
 4022f08:	10c00526 	beq	r2,r3,4022f20 <_fstat_r+0x4c>
 4022f0c:	dfc00217 	ldw	ra,8(sp)
 4022f10:	dc400117 	ldw	r17,4(sp)
 4022f14:	dc000017 	ldw	r16,0(sp)
 4022f18:	dec00304 	addi	sp,sp,12
 4022f1c:	f800283a 	ret
 4022f20:	80c00017 	ldw	r3,0(r16)
 4022f24:	183ff926 	beq	r3,zero,4022f0c <__flash_rwdata_start+0xffffd420>
 4022f28:	88c00015 	stw	r3,0(r17)
 4022f2c:	003ff706 	br	4022f0c <__flash_rwdata_start+0xffffd420>

04022f30 <_isatty_r>:
 4022f30:	defffd04 	addi	sp,sp,-12
 4022f34:	dc000015 	stw	r16,0(sp)
 4022f38:	04000034 	movhi	r16,0
 4022f3c:	dc400115 	stw	r17,4(sp)
 4022f40:	8406c004 	addi	r16,r16,6912
 4022f44:	2023883a 	mov	r17,r4
 4022f48:	2809883a 	mov	r4,r5
 4022f4c:	dfc00215 	stw	ra,8(sp)
 4022f50:	80000015 	stw	zero,0(r16)
 4022f54:	40233d00 	call	40233d0 <isatty>
 4022f58:	00ffffc4 	movi	r3,-1
 4022f5c:	10c00526 	beq	r2,r3,4022f74 <_isatty_r+0x44>
 4022f60:	dfc00217 	ldw	ra,8(sp)
 4022f64:	dc400117 	ldw	r17,4(sp)
 4022f68:	dc000017 	ldw	r16,0(sp)
 4022f6c:	dec00304 	addi	sp,sp,12
 4022f70:	f800283a 	ret
 4022f74:	80c00017 	ldw	r3,0(r16)
 4022f78:	183ff926 	beq	r3,zero,4022f60 <__flash_rwdata_start+0xffffd474>
 4022f7c:	88c00015 	stw	r3,0(r17)
 4022f80:	003ff706 	br	4022f60 <__flash_rwdata_start+0xffffd474>

04022f84 <__divsi3>:
 4022f84:	20001b16 	blt	r4,zero,4022ff4 <__divsi3+0x70>
 4022f88:	000f883a 	mov	r7,zero
 4022f8c:	28001616 	blt	r5,zero,4022fe8 <__divsi3+0x64>
 4022f90:	200d883a 	mov	r6,r4
 4022f94:	29001a2e 	bgeu	r5,r4,4023000 <__divsi3+0x7c>
 4022f98:	00800804 	movi	r2,32
 4022f9c:	00c00044 	movi	r3,1
 4022fa0:	00000106 	br	4022fa8 <__divsi3+0x24>
 4022fa4:	10000d26 	beq	r2,zero,4022fdc <__divsi3+0x58>
 4022fa8:	294b883a 	add	r5,r5,r5
 4022fac:	10bfffc4 	addi	r2,r2,-1
 4022fb0:	18c7883a 	add	r3,r3,r3
 4022fb4:	293ffb36 	bltu	r5,r4,4022fa4 <__flash_rwdata_start+0xffffd4b8>
 4022fb8:	0005883a 	mov	r2,zero
 4022fbc:	18000726 	beq	r3,zero,4022fdc <__divsi3+0x58>
 4022fc0:	0005883a 	mov	r2,zero
 4022fc4:	31400236 	bltu	r6,r5,4022fd0 <__divsi3+0x4c>
 4022fc8:	314dc83a 	sub	r6,r6,r5
 4022fcc:	10c4b03a 	or	r2,r2,r3
 4022fd0:	1806d07a 	srli	r3,r3,1
 4022fd4:	280ad07a 	srli	r5,r5,1
 4022fd8:	183ffa1e 	bne	r3,zero,4022fc4 <__flash_rwdata_start+0xffffd4d8>
 4022fdc:	38000126 	beq	r7,zero,4022fe4 <__divsi3+0x60>
 4022fe0:	0085c83a 	sub	r2,zero,r2
 4022fe4:	f800283a 	ret
 4022fe8:	014bc83a 	sub	r5,zero,r5
 4022fec:	39c0005c 	xori	r7,r7,1
 4022ff0:	003fe706 	br	4022f90 <__flash_rwdata_start+0xffffd4a4>
 4022ff4:	0109c83a 	sub	r4,zero,r4
 4022ff8:	01c00044 	movi	r7,1
 4022ffc:	003fe306 	br	4022f8c <__flash_rwdata_start+0xffffd4a0>
 4023000:	00c00044 	movi	r3,1
 4023004:	003fee06 	br	4022fc0 <__flash_rwdata_start+0xffffd4d4>

04023008 <__modsi3>:
 4023008:	20001716 	blt	r4,zero,4023068 <__modsi3+0x60>
 402300c:	000f883a 	mov	r7,zero
 4023010:	2005883a 	mov	r2,r4
 4023014:	28001216 	blt	r5,zero,4023060 <__modsi3+0x58>
 4023018:	2900162e 	bgeu	r5,r4,4023074 <__modsi3+0x6c>
 402301c:	01800804 	movi	r6,32
 4023020:	00c00044 	movi	r3,1
 4023024:	00000106 	br	402302c <__modsi3+0x24>
 4023028:	30000a26 	beq	r6,zero,4023054 <__modsi3+0x4c>
 402302c:	294b883a 	add	r5,r5,r5
 4023030:	31bfffc4 	addi	r6,r6,-1
 4023034:	18c7883a 	add	r3,r3,r3
 4023038:	293ffb36 	bltu	r5,r4,4023028 <__flash_rwdata_start+0xffffd53c>
 402303c:	18000526 	beq	r3,zero,4023054 <__modsi3+0x4c>
 4023040:	1806d07a 	srli	r3,r3,1
 4023044:	11400136 	bltu	r2,r5,402304c <__modsi3+0x44>
 4023048:	1145c83a 	sub	r2,r2,r5
 402304c:	280ad07a 	srli	r5,r5,1
 4023050:	183ffb1e 	bne	r3,zero,4023040 <__flash_rwdata_start+0xffffd554>
 4023054:	38000126 	beq	r7,zero,402305c <__modsi3+0x54>
 4023058:	0085c83a 	sub	r2,zero,r2
 402305c:	f800283a 	ret
 4023060:	014bc83a 	sub	r5,zero,r5
 4023064:	003fec06 	br	4023018 <__flash_rwdata_start+0xffffd52c>
 4023068:	0109c83a 	sub	r4,zero,r4
 402306c:	01c00044 	movi	r7,1
 4023070:	003fe706 	br	4023010 <__flash_rwdata_start+0xffffd524>
 4023074:	00c00044 	movi	r3,1
 4023078:	003ff106 	br	4023040 <__flash_rwdata_start+0xffffd554>

0402307c <__udivsi3>:
 402307c:	200d883a 	mov	r6,r4
 4023080:	2900152e 	bgeu	r5,r4,40230d8 <__udivsi3+0x5c>
 4023084:	28001416 	blt	r5,zero,40230d8 <__udivsi3+0x5c>
 4023088:	00800804 	movi	r2,32
 402308c:	00c00044 	movi	r3,1
 4023090:	00000206 	br	402309c <__udivsi3+0x20>
 4023094:	10000e26 	beq	r2,zero,40230d0 <__udivsi3+0x54>
 4023098:	28000516 	blt	r5,zero,40230b0 <__udivsi3+0x34>
 402309c:	294b883a 	add	r5,r5,r5
 40230a0:	10bfffc4 	addi	r2,r2,-1
 40230a4:	18c7883a 	add	r3,r3,r3
 40230a8:	293ffa36 	bltu	r5,r4,4023094 <__flash_rwdata_start+0xffffd5a8>
 40230ac:	18000826 	beq	r3,zero,40230d0 <__udivsi3+0x54>
 40230b0:	0005883a 	mov	r2,zero
 40230b4:	31400236 	bltu	r6,r5,40230c0 <__udivsi3+0x44>
 40230b8:	314dc83a 	sub	r6,r6,r5
 40230bc:	10c4b03a 	or	r2,r2,r3
 40230c0:	1806d07a 	srli	r3,r3,1
 40230c4:	280ad07a 	srli	r5,r5,1
 40230c8:	183ffa1e 	bne	r3,zero,40230b4 <__flash_rwdata_start+0xffffd5c8>
 40230cc:	f800283a 	ret
 40230d0:	0005883a 	mov	r2,zero
 40230d4:	f800283a 	ret
 40230d8:	00c00044 	movi	r3,1
 40230dc:	003ff406 	br	40230b0 <__flash_rwdata_start+0xffffd5c4>

040230e0 <__umodsi3>:
 40230e0:	2005883a 	mov	r2,r4
 40230e4:	2900122e 	bgeu	r5,r4,4023130 <__umodsi3+0x50>
 40230e8:	28001116 	blt	r5,zero,4023130 <__umodsi3+0x50>
 40230ec:	01800804 	movi	r6,32
 40230f0:	00c00044 	movi	r3,1
 40230f4:	00000206 	br	4023100 <__umodsi3+0x20>
 40230f8:	30000c26 	beq	r6,zero,402312c <__umodsi3+0x4c>
 40230fc:	28000516 	blt	r5,zero,4023114 <__umodsi3+0x34>
 4023100:	294b883a 	add	r5,r5,r5
 4023104:	31bfffc4 	addi	r6,r6,-1
 4023108:	18c7883a 	add	r3,r3,r3
 402310c:	293ffa36 	bltu	r5,r4,40230f8 <__flash_rwdata_start+0xffffd60c>
 4023110:	18000626 	beq	r3,zero,402312c <__umodsi3+0x4c>
 4023114:	1806d07a 	srli	r3,r3,1
 4023118:	11400136 	bltu	r2,r5,4023120 <__umodsi3+0x40>
 402311c:	1145c83a 	sub	r2,r2,r5
 4023120:	280ad07a 	srli	r5,r5,1
 4023124:	183ffb1e 	bne	r3,zero,4023114 <__flash_rwdata_start+0xffffd628>
 4023128:	f800283a 	ret
 402312c:	f800283a 	ret
 4023130:	00c00044 	movi	r3,1
 4023134:	003ff706 	br	4023114 <__flash_rwdata_start+0xffffd628>

04023138 <__mulsi3>:
 4023138:	0005883a 	mov	r2,zero
 402313c:	20000726 	beq	r4,zero,402315c <__mulsi3+0x24>
 4023140:	20c0004c 	andi	r3,r4,1
 4023144:	2008d07a 	srli	r4,r4,1
 4023148:	18000126 	beq	r3,zero,4023150 <__mulsi3+0x18>
 402314c:	1145883a 	add	r2,r2,r5
 4023150:	294b883a 	add	r5,r5,r5
 4023154:	203ffa1e 	bne	r4,zero,4023140 <__flash_rwdata_start+0xffffd654>
 4023158:	f800283a 	ret
 402315c:	f800283a 	ret

04023160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023160:	defffe04 	addi	sp,sp,-8
 4023164:	dfc00115 	stw	ra,4(sp)
 4023168:	df000015 	stw	fp,0(sp)
 402316c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4023170:	d0a00917 	ldw	r2,-32732(gp)
 4023174:	10000326 	beq	r2,zero,4023184 <alt_get_errno+0x24>
 4023178:	d0a00917 	ldw	r2,-32732(gp)
 402317c:	103ee83a 	callr	r2
 4023180:	00000106 	br	4023188 <alt_get_errno+0x28>
 4023184:	d0a01104 	addi	r2,gp,-32700
}
 4023188:	e037883a 	mov	sp,fp
 402318c:	dfc00117 	ldw	ra,4(sp)
 4023190:	df000017 	ldw	fp,0(sp)
 4023194:	dec00204 	addi	sp,sp,8
 4023198:	f800283a 	ret

0402319c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 402319c:	defffb04 	addi	sp,sp,-20
 40231a0:	dfc00415 	stw	ra,16(sp)
 40231a4:	df000315 	stw	fp,12(sp)
 40231a8:	df000304 	addi	fp,sp,12
 40231ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40231b0:	e0bfff17 	ldw	r2,-4(fp)
 40231b4:	10000816 	blt	r2,zero,40231d8 <close+0x3c>
 40231b8:	01400304 	movi	r5,12
 40231bc:	e13fff17 	ldw	r4,-4(fp)
 40231c0:	40231380 	call	4023138 <__mulsi3>
 40231c4:	1007883a 	mov	r3,r2
 40231c8:	00800034 	movhi	r2,0
 40231cc:	10823704 	addi	r2,r2,2268
 40231d0:	1885883a 	add	r2,r3,r2
 40231d4:	00000106 	br	40231dc <close+0x40>
 40231d8:	0005883a 	mov	r2,zero
 40231dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40231e0:	e0bffd17 	ldw	r2,-12(fp)
 40231e4:	10001926 	beq	r2,zero,402324c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40231e8:	e0bffd17 	ldw	r2,-12(fp)
 40231ec:	10800017 	ldw	r2,0(r2)
 40231f0:	10800417 	ldw	r2,16(r2)
 40231f4:	10000626 	beq	r2,zero,4023210 <close+0x74>
 40231f8:	e0bffd17 	ldw	r2,-12(fp)
 40231fc:	10800017 	ldw	r2,0(r2)
 4023200:	10800417 	ldw	r2,16(r2)
 4023204:	e13ffd17 	ldw	r4,-12(fp)
 4023208:	103ee83a 	callr	r2
 402320c:	00000106 	br	4023214 <close+0x78>
 4023210:	0005883a 	mov	r2,zero
 4023214:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4023218:	e13fff17 	ldw	r4,-4(fp)
 402321c:	40238840 	call	4023884 <alt_release_fd>
    if (rval < 0)
 4023220:	e0bffe17 	ldw	r2,-8(fp)
 4023224:	1000070e 	bge	r2,zero,4023244 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4023228:	40231600 	call	4023160 <alt_get_errno>
 402322c:	1007883a 	mov	r3,r2
 4023230:	e0bffe17 	ldw	r2,-8(fp)
 4023234:	0085c83a 	sub	r2,zero,r2
 4023238:	18800015 	stw	r2,0(r3)
      return -1;
 402323c:	00bfffc4 	movi	r2,-1
 4023240:	00000706 	br	4023260 <close+0xc4>
    }
    return 0;
 4023244:	0005883a 	mov	r2,zero
 4023248:	00000506 	br	4023260 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402324c:	40231600 	call	4023160 <alt_get_errno>
 4023250:	1007883a 	mov	r3,r2
 4023254:	00801444 	movi	r2,81
 4023258:	18800015 	stw	r2,0(r3)
    return -1;
 402325c:	00bfffc4 	movi	r2,-1
  }
}
 4023260:	e037883a 	mov	sp,fp
 4023264:	dfc00117 	ldw	ra,4(sp)
 4023268:	df000017 	ldw	fp,0(sp)
 402326c:	dec00204 	addi	sp,sp,8
 4023270:	f800283a 	ret

04023274 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4023274:	defffc04 	addi	sp,sp,-16
 4023278:	df000315 	stw	fp,12(sp)
 402327c:	df000304 	addi	fp,sp,12
 4023280:	e13ffd15 	stw	r4,-12(fp)
 4023284:	e17ffe15 	stw	r5,-8(fp)
 4023288:	e1bfff15 	stw	r6,-4(fp)
  return len;
 402328c:	e0bfff17 	ldw	r2,-4(fp)
}
 4023290:	e037883a 	mov	sp,fp
 4023294:	df000017 	ldw	fp,0(sp)
 4023298:	dec00104 	addi	sp,sp,4
 402329c:	f800283a 	ret

040232a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40232a0:	defffe04 	addi	sp,sp,-8
 40232a4:	dfc00115 	stw	ra,4(sp)
 40232a8:	df000015 	stw	fp,0(sp)
 40232ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40232b0:	d0a00917 	ldw	r2,-32732(gp)
 40232b4:	10000326 	beq	r2,zero,40232c4 <alt_get_errno+0x24>
 40232b8:	d0a00917 	ldw	r2,-32732(gp)
 40232bc:	103ee83a 	callr	r2
 40232c0:	00000106 	br	40232c8 <alt_get_errno+0x28>
 40232c4:	d0a01104 	addi	r2,gp,-32700
}
 40232c8:	e037883a 	mov	sp,fp
 40232cc:	dfc00117 	ldw	ra,4(sp)
 40232d0:	df000017 	ldw	fp,0(sp)
 40232d4:	dec00204 	addi	sp,sp,8
 40232d8:	f800283a 	ret

040232dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40232dc:	defffb04 	addi	sp,sp,-20
 40232e0:	dfc00415 	stw	ra,16(sp)
 40232e4:	df000315 	stw	fp,12(sp)
 40232e8:	df000304 	addi	fp,sp,12
 40232ec:	e13ffe15 	stw	r4,-8(fp)
 40232f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40232f4:	e0bffe17 	ldw	r2,-8(fp)
 40232f8:	10000816 	blt	r2,zero,402331c <fstat+0x40>
 40232fc:	01400304 	movi	r5,12
 4023300:	e13ffe17 	ldw	r4,-8(fp)
 4023304:	40231380 	call	4023138 <__mulsi3>
 4023308:	1007883a 	mov	r3,r2
 402330c:	00800034 	movhi	r2,0
 4023310:	10823704 	addi	r2,r2,2268
 4023314:	1885883a 	add	r2,r3,r2
 4023318:	00000106 	br	4023320 <fstat+0x44>
 402331c:	0005883a 	mov	r2,zero
 4023320:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4023324:	e0bffd17 	ldw	r2,-12(fp)
 4023328:	10001026 	beq	r2,zero,402336c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 402332c:	e0bffd17 	ldw	r2,-12(fp)
 4023330:	10800017 	ldw	r2,0(r2)
 4023334:	10800817 	ldw	r2,32(r2)
 4023338:	10000726 	beq	r2,zero,4023358 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 402333c:	e0bffd17 	ldw	r2,-12(fp)
 4023340:	10800017 	ldw	r2,0(r2)
 4023344:	10800817 	ldw	r2,32(r2)
 4023348:	e17fff17 	ldw	r5,-4(fp)
 402334c:	e13ffd17 	ldw	r4,-12(fp)
 4023350:	103ee83a 	callr	r2
 4023354:	00000a06 	br	4023380 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4023358:	e0bfff17 	ldw	r2,-4(fp)
 402335c:	00c80004 	movi	r3,8192
 4023360:	10c00115 	stw	r3,4(r2)
      return 0;
 4023364:	0005883a 	mov	r2,zero
 4023368:	00000506 	br	4023380 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402336c:	40232a00 	call	40232a0 <alt_get_errno>
 4023370:	1007883a 	mov	r3,r2
 4023374:	00801444 	movi	r2,81
 4023378:	18800015 	stw	r2,0(r3)
    return -1;
 402337c:	00bfffc4 	movi	r2,-1
  }
}
 4023380:	e037883a 	mov	sp,fp
 4023384:	dfc00117 	ldw	ra,4(sp)
 4023388:	df000017 	ldw	fp,0(sp)
 402338c:	dec00204 	addi	sp,sp,8
 4023390:	f800283a 	ret

04023394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023394:	defffe04 	addi	sp,sp,-8
 4023398:	dfc00115 	stw	ra,4(sp)
 402339c:	df000015 	stw	fp,0(sp)
 40233a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40233a4:	d0a00917 	ldw	r2,-32732(gp)
 40233a8:	10000326 	beq	r2,zero,40233b8 <alt_get_errno+0x24>
 40233ac:	d0a00917 	ldw	r2,-32732(gp)
 40233b0:	103ee83a 	callr	r2
 40233b4:	00000106 	br	40233bc <alt_get_errno+0x28>
 40233b8:	d0a01104 	addi	r2,gp,-32700
}
 40233bc:	e037883a 	mov	sp,fp
 40233c0:	dfc00117 	ldw	ra,4(sp)
 40233c4:	df000017 	ldw	fp,0(sp)
 40233c8:	dec00204 	addi	sp,sp,8
 40233cc:	f800283a 	ret

040233d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40233d0:	deffed04 	addi	sp,sp,-76
 40233d4:	dfc01215 	stw	ra,72(sp)
 40233d8:	df001115 	stw	fp,68(sp)
 40233dc:	df001104 	addi	fp,sp,68
 40233e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40233e4:	e0bfff17 	ldw	r2,-4(fp)
 40233e8:	10000816 	blt	r2,zero,402340c <isatty+0x3c>
 40233ec:	01400304 	movi	r5,12
 40233f0:	e13fff17 	ldw	r4,-4(fp)
 40233f4:	40231380 	call	4023138 <__mulsi3>
 40233f8:	1007883a 	mov	r3,r2
 40233fc:	00800034 	movhi	r2,0
 4023400:	10823704 	addi	r2,r2,2268
 4023404:	1885883a 	add	r2,r3,r2
 4023408:	00000106 	br	4023410 <isatty+0x40>
 402340c:	0005883a 	mov	r2,zero
 4023410:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4023414:	e0bfef17 	ldw	r2,-68(fp)
 4023418:	10000e26 	beq	r2,zero,4023454 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 402341c:	e0bfef17 	ldw	r2,-68(fp)
 4023420:	10800017 	ldw	r2,0(r2)
 4023424:	10800817 	ldw	r2,32(r2)
 4023428:	1000021e 	bne	r2,zero,4023434 <isatty+0x64>
    {
      return 1;
 402342c:	00800044 	movi	r2,1
 4023430:	00000d06 	br	4023468 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4023434:	e0bff004 	addi	r2,fp,-64
 4023438:	100b883a 	mov	r5,r2
 402343c:	e13fff17 	ldw	r4,-4(fp)
 4023440:	40232dc0 	call	40232dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4023444:	e0bff117 	ldw	r2,-60(fp)
 4023448:	10880020 	cmpeqi	r2,r2,8192
 402344c:	10803fcc 	andi	r2,r2,255
 4023450:	00000506 	br	4023468 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4023454:	40233940 	call	4023394 <alt_get_errno>
 4023458:	1007883a 	mov	r3,r2
 402345c:	00801444 	movi	r2,81
 4023460:	18800015 	stw	r2,0(r3)
    return 0;
 4023464:	0005883a 	mov	r2,zero
  }
}
 4023468:	e037883a 	mov	sp,fp
 402346c:	dfc00117 	ldw	ra,4(sp)
 4023470:	df000017 	ldw	fp,0(sp)
 4023474:	dec00204 	addi	sp,sp,8
 4023478:	f800283a 	ret

0402347c <alt_load_section>:
 402347c:	defffc04 	addi	sp,sp,-16
 4023480:	df000315 	stw	fp,12(sp)
 4023484:	df000304 	addi	fp,sp,12
 4023488:	e13ffd15 	stw	r4,-12(fp)
 402348c:	e17ffe15 	stw	r5,-8(fp)
 4023490:	e1bfff15 	stw	r6,-4(fp)
 4023494:	e0fffe17 	ldw	r3,-8(fp)
 4023498:	e0bffd17 	ldw	r2,-12(fp)
 402349c:	18800c26 	beq	r3,r2,40234d0 <alt_load_section+0x54>
 40234a0:	00000806 	br	40234c4 <alt_load_section+0x48>
 40234a4:	e0bffe17 	ldw	r2,-8(fp)
 40234a8:	10c00104 	addi	r3,r2,4
 40234ac:	e0fffe15 	stw	r3,-8(fp)
 40234b0:	e0fffd17 	ldw	r3,-12(fp)
 40234b4:	19000104 	addi	r4,r3,4
 40234b8:	e13ffd15 	stw	r4,-12(fp)
 40234bc:	18c00017 	ldw	r3,0(r3)
 40234c0:	10c00015 	stw	r3,0(r2)
 40234c4:	e0fffe17 	ldw	r3,-8(fp)
 40234c8:	e0bfff17 	ldw	r2,-4(fp)
 40234cc:	18bff51e 	bne	r3,r2,40234a4 <__flash_rwdata_start+0xffffd9b8>
 40234d0:	0001883a 	nop
 40234d4:	e037883a 	mov	sp,fp
 40234d8:	df000017 	ldw	fp,0(sp)
 40234dc:	dec00104 	addi	sp,sp,4
 40234e0:	f800283a 	ret

040234e4 <alt_load>:
 40234e4:	defffe04 	addi	sp,sp,-8
 40234e8:	dfc00115 	stw	ra,4(sp)
 40234ec:	df000015 	stw	fp,0(sp)
 40234f0:	d839883a 	mov	fp,sp
 40234f4:	01800034 	movhi	r6,0
 40234f8:	3186bd04 	addi	r6,r6,6900
 40234fc:	01400034 	movhi	r5,0
 4023500:	29401804 	addi	r5,r5,96
 4023504:	010100b4 	movhi	r4,1026
 4023508:	2116bb04 	addi	r4,r4,23276
 402350c:	402347c0 	call	402347c <alt_load_section>
 4023510:	018100b4 	movhi	r6,1026
 4023514:	31808c04 	addi	r6,r6,560
 4023518:	014100b4 	movhi	r5,1026
 402351c:	29400804 	addi	r5,r5,32
 4023520:	010100b4 	movhi	r4,1026
 4023524:	21000804 	addi	r4,r4,32
 4023528:	402347c0 	call	402347c <alt_load_section>
 402352c:	01800034 	movhi	r6,0
 4023530:	31801804 	addi	r6,r6,96
 4023534:	01400034 	movhi	r5,0
 4023538:	29400004 	addi	r5,r5,0
 402353c:	010100b4 	movhi	r4,1026
 4023540:	2116a304 	addi	r4,r4,23180
 4023544:	402347c0 	call	402347c <alt_load_section>
 4023548:	40249d40 	call	40249d4 <alt_dcache_flush_all>
 402354c:	4024b940 	call	4024b94 <alt_icache_flush_all>
 4023550:	0001883a 	nop
 4023554:	e037883a 	mov	sp,fp
 4023558:	dfc00117 	ldw	ra,4(sp)
 402355c:	df000017 	ldw	fp,0(sp)
 4023560:	dec00204 	addi	sp,sp,8
 4023564:	f800283a 	ret

04023568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023568:	defffe04 	addi	sp,sp,-8
 402356c:	dfc00115 	stw	ra,4(sp)
 4023570:	df000015 	stw	fp,0(sp)
 4023574:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4023578:	d0a00917 	ldw	r2,-32732(gp)
 402357c:	10000326 	beq	r2,zero,402358c <alt_get_errno+0x24>
 4023580:	d0a00917 	ldw	r2,-32732(gp)
 4023584:	103ee83a 	callr	r2
 4023588:	00000106 	br	4023590 <alt_get_errno+0x28>
 402358c:	d0a01104 	addi	r2,gp,-32700
}
 4023590:	e037883a 	mov	sp,fp
 4023594:	dfc00117 	ldw	ra,4(sp)
 4023598:	df000017 	ldw	fp,0(sp)
 402359c:	dec00204 	addi	sp,sp,8
 40235a0:	f800283a 	ret

040235a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40235a4:	defff904 	addi	sp,sp,-28
 40235a8:	dfc00615 	stw	ra,24(sp)
 40235ac:	df000515 	stw	fp,20(sp)
 40235b0:	df000504 	addi	fp,sp,20
 40235b4:	e13ffd15 	stw	r4,-12(fp)
 40235b8:	e17ffe15 	stw	r5,-8(fp)
 40235bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40235c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40235c4:	e0bffd17 	ldw	r2,-12(fp)
 40235c8:	10000816 	blt	r2,zero,40235ec <lseek+0x48>
 40235cc:	01400304 	movi	r5,12
 40235d0:	e13ffd17 	ldw	r4,-12(fp)
 40235d4:	40231380 	call	4023138 <__mulsi3>
 40235d8:	1007883a 	mov	r3,r2
 40235dc:	00800034 	movhi	r2,0
 40235e0:	10823704 	addi	r2,r2,2268
 40235e4:	1885883a 	add	r2,r3,r2
 40235e8:	00000106 	br	40235f0 <lseek+0x4c>
 40235ec:	0005883a 	mov	r2,zero
 40235f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40235f4:	e0bffc17 	ldw	r2,-16(fp)
 40235f8:	10001026 	beq	r2,zero,402363c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40235fc:	e0bffc17 	ldw	r2,-16(fp)
 4023600:	10800017 	ldw	r2,0(r2)
 4023604:	10800717 	ldw	r2,28(r2)
 4023608:	10000926 	beq	r2,zero,4023630 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 402360c:	e0bffc17 	ldw	r2,-16(fp)
 4023610:	10800017 	ldw	r2,0(r2)
 4023614:	10800717 	ldw	r2,28(r2)
 4023618:	e1bfff17 	ldw	r6,-4(fp)
 402361c:	e17ffe17 	ldw	r5,-8(fp)
 4023620:	e13ffc17 	ldw	r4,-16(fp)
 4023624:	103ee83a 	callr	r2
 4023628:	e0bffb15 	stw	r2,-20(fp)
 402362c:	00000506 	br	4023644 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4023630:	00bfde84 	movi	r2,-134
 4023634:	e0bffb15 	stw	r2,-20(fp)
 4023638:	00000206 	br	4023644 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 402363c:	00bfebc4 	movi	r2,-81
 4023640:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4023644:	e0bffb17 	ldw	r2,-20(fp)
 4023648:	1000070e 	bge	r2,zero,4023668 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 402364c:	40235680 	call	4023568 <alt_get_errno>
 4023650:	1007883a 	mov	r3,r2
 4023654:	e0bffb17 	ldw	r2,-20(fp)
 4023658:	0085c83a 	sub	r2,zero,r2
 402365c:	18800015 	stw	r2,0(r3)
    rc = -1;
 4023660:	00bfffc4 	movi	r2,-1
 4023664:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4023668:	e0bffb17 	ldw	r2,-20(fp)
}
 402366c:	e037883a 	mov	sp,fp
 4023670:	dfc00117 	ldw	ra,4(sp)
 4023674:	df000017 	ldw	fp,0(sp)
 4023678:	dec00204 	addi	sp,sp,8
 402367c:	f800283a 	ret

04023680 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4023680:	defffd04 	addi	sp,sp,-12
 4023684:	dfc00215 	stw	ra,8(sp)
 4023688:	df000115 	stw	fp,4(sp)
 402368c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4023690:	0009883a 	mov	r4,zero
 4023694:	4023b580 	call	4023b58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4023698:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 402369c:	4023b900 	call	4023b90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40236a0:	01800034 	movhi	r6,0
 40236a4:	31801004 	addi	r6,r6,64
 40236a8:	01400034 	movhi	r5,0
 40236ac:	29401004 	addi	r5,r5,64
 40236b0:	01000034 	movhi	r4,0
 40236b4:	21001004 	addi	r4,r4,64
 40236b8:	4024f380 	call	4024f38 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40236bc:	4024ad40 	call	4024ad4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40236c0:	010100b4 	movhi	r4,1026
 40236c4:	2112cd04 	addi	r4,r4,19252
 40236c8:	40256f80 	call	40256f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40236cc:	d0a01217 	ldw	r2,-32696(gp)
 40236d0:	d0e01317 	ldw	r3,-32692(gp)
 40236d4:	d1201417 	ldw	r4,-32688(gp)
 40236d8:	200d883a 	mov	r6,r4
 40236dc:	180b883a 	mov	r5,r3
 40236e0:	1009883a 	mov	r4,r2
 40236e4:	402026c0 	call	402026c <main>
 40236e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40236ec:	01000044 	movi	r4,1
 40236f0:	402319c0 	call	402319c <close>
  exit (result);
 40236f4:	e13fff17 	ldw	r4,-4(fp)
 40236f8:	402570c0 	call	402570c <exit>

040236fc <__malloc_lock>:
 40236fc:	defffe04 	addi	sp,sp,-8
 4023700:	df000115 	stw	fp,4(sp)
 4023704:	df000104 	addi	fp,sp,4
 4023708:	e13fff15 	stw	r4,-4(fp)
 402370c:	0001883a 	nop
 4023710:	e037883a 	mov	sp,fp
 4023714:	df000017 	ldw	fp,0(sp)
 4023718:	dec00104 	addi	sp,sp,4
 402371c:	f800283a 	ret

04023720 <__malloc_unlock>:
 4023720:	defffe04 	addi	sp,sp,-8
 4023724:	df000115 	stw	fp,4(sp)
 4023728:	df000104 	addi	fp,sp,4
 402372c:	e13fff15 	stw	r4,-4(fp)
 4023730:	0001883a 	nop
 4023734:	e037883a 	mov	sp,fp
 4023738:	df000017 	ldw	fp,0(sp)
 402373c:	dec00104 	addi	sp,sp,4
 4023740:	f800283a 	ret

04023744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023744:	defffe04 	addi	sp,sp,-8
 4023748:	dfc00115 	stw	ra,4(sp)
 402374c:	df000015 	stw	fp,0(sp)
 4023750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4023754:	d0a00917 	ldw	r2,-32732(gp)
 4023758:	10000326 	beq	r2,zero,4023768 <alt_get_errno+0x24>
 402375c:	d0a00917 	ldw	r2,-32732(gp)
 4023760:	103ee83a 	callr	r2
 4023764:	00000106 	br	402376c <alt_get_errno+0x28>
 4023768:	d0a01104 	addi	r2,gp,-32700
}
 402376c:	e037883a 	mov	sp,fp
 4023770:	dfc00117 	ldw	ra,4(sp)
 4023774:	df000017 	ldw	fp,0(sp)
 4023778:	dec00204 	addi	sp,sp,8
 402377c:	f800283a 	ret

04023780 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4023780:	defff904 	addi	sp,sp,-28
 4023784:	dfc00615 	stw	ra,24(sp)
 4023788:	df000515 	stw	fp,20(sp)
 402378c:	df000504 	addi	fp,sp,20
 4023790:	e13ffd15 	stw	r4,-12(fp)
 4023794:	e17ffe15 	stw	r5,-8(fp)
 4023798:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402379c:	e0bffd17 	ldw	r2,-12(fp)
 40237a0:	10000816 	blt	r2,zero,40237c4 <read+0x44>
 40237a4:	01400304 	movi	r5,12
 40237a8:	e13ffd17 	ldw	r4,-12(fp)
 40237ac:	40231380 	call	4023138 <__mulsi3>
 40237b0:	1007883a 	mov	r3,r2
 40237b4:	00800034 	movhi	r2,0
 40237b8:	10823704 	addi	r2,r2,2268
 40237bc:	1885883a 	add	r2,r3,r2
 40237c0:	00000106 	br	40237c8 <read+0x48>
 40237c4:	0005883a 	mov	r2,zero
 40237c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40237cc:	e0bffb17 	ldw	r2,-20(fp)
 40237d0:	10002226 	beq	r2,zero,402385c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40237d4:	e0bffb17 	ldw	r2,-20(fp)
 40237d8:	10800217 	ldw	r2,8(r2)
 40237dc:	108000cc 	andi	r2,r2,3
 40237e0:	10800060 	cmpeqi	r2,r2,1
 40237e4:	1000181e 	bne	r2,zero,4023848 <read+0xc8>
        (fd->dev->read))
 40237e8:	e0bffb17 	ldw	r2,-20(fp)
 40237ec:	10800017 	ldw	r2,0(r2)
 40237f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40237f4:	10001426 	beq	r2,zero,4023848 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40237f8:	e0bffb17 	ldw	r2,-20(fp)
 40237fc:	10800017 	ldw	r2,0(r2)
 4023800:	10800517 	ldw	r2,20(r2)
 4023804:	e0ffff17 	ldw	r3,-4(fp)
 4023808:	180d883a 	mov	r6,r3
 402380c:	e17ffe17 	ldw	r5,-8(fp)
 4023810:	e13ffb17 	ldw	r4,-20(fp)
 4023814:	103ee83a 	callr	r2
 4023818:	e0bffc15 	stw	r2,-16(fp)
 402381c:	e0bffc17 	ldw	r2,-16(fp)
 4023820:	1000070e 	bge	r2,zero,4023840 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 4023824:	40237440 	call	4023744 <alt_get_errno>
 4023828:	1007883a 	mov	r3,r2
 402382c:	e0bffc17 	ldw	r2,-16(fp)
 4023830:	0085c83a 	sub	r2,zero,r2
 4023834:	18800015 	stw	r2,0(r3)
          return -1;
 4023838:	00bfffc4 	movi	r2,-1
 402383c:	00000c06 	br	4023870 <read+0xf0>
        }
        return rval;
 4023840:	e0bffc17 	ldw	r2,-16(fp)
 4023844:	00000a06 	br	4023870 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4023848:	40237440 	call	4023744 <alt_get_errno>
 402384c:	1007883a 	mov	r3,r2
 4023850:	00800344 	movi	r2,13
 4023854:	18800015 	stw	r2,0(r3)
 4023858:	00000406 	br	402386c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 402385c:	40237440 	call	4023744 <alt_get_errno>
 4023860:	1007883a 	mov	r3,r2
 4023864:	00801444 	movi	r2,81
 4023868:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402386c:	00bfffc4 	movi	r2,-1
}
 4023870:	e037883a 	mov	sp,fp
 4023874:	dfc00117 	ldw	ra,4(sp)
 4023878:	df000017 	ldw	fp,0(sp)
 402387c:	dec00204 	addi	sp,sp,8
 4023880:	f800283a 	ret

04023884 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4023884:	defffc04 	addi	sp,sp,-16
 4023888:	dfc00315 	stw	ra,12(sp)
 402388c:	df000215 	stw	fp,8(sp)
 4023890:	dc000115 	stw	r16,4(sp)
 4023894:	df000204 	addi	fp,sp,8
 4023898:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 402389c:	e0bffe17 	ldw	r2,-8(fp)
 40238a0:	108000d0 	cmplti	r2,r2,3
 40238a4:	1000111e 	bne	r2,zero,40238ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 40238a8:	04000034 	movhi	r16,0
 40238ac:	84023704 	addi	r16,r16,2268
 40238b0:	e0bffe17 	ldw	r2,-8(fp)
 40238b4:	01400304 	movi	r5,12
 40238b8:	1009883a 	mov	r4,r2
 40238bc:	40231380 	call	4023138 <__mulsi3>
 40238c0:	8085883a 	add	r2,r16,r2
 40238c4:	10800204 	addi	r2,r2,8
 40238c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40238cc:	04000034 	movhi	r16,0
 40238d0:	84023704 	addi	r16,r16,2268
 40238d4:	e0bffe17 	ldw	r2,-8(fp)
 40238d8:	01400304 	movi	r5,12
 40238dc:	1009883a 	mov	r4,r2
 40238e0:	40231380 	call	4023138 <__mulsi3>
 40238e4:	8085883a 	add	r2,r16,r2
 40238e8:	10000015 	stw	zero,0(r2)
  }
}
 40238ec:	0001883a 	nop
 40238f0:	e6ffff04 	addi	sp,fp,-4
 40238f4:	dfc00217 	ldw	ra,8(sp)
 40238f8:	df000117 	ldw	fp,4(sp)
 40238fc:	dc000017 	ldw	r16,0(sp)
 4023900:	dec00304 	addi	sp,sp,12
 4023904:	f800283a 	ret

04023908 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4023908:	defff904 	addi	sp,sp,-28
 402390c:	df000615 	stw	fp,24(sp)
 4023910:	df000604 	addi	fp,sp,24
 4023914:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4023918:	0005303a 	rdctl	r2,status
 402391c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4023920:	e0fffe17 	ldw	r3,-8(fp)
 4023924:	00bfff84 	movi	r2,-2
 4023928:	1884703a 	and	r2,r3,r2
 402392c:	1001703a 	wrctl	status,r2
  
  return context;
 4023930:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4023934:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4023938:	d0a00a17 	ldw	r2,-32728(gp)
 402393c:	10c000c4 	addi	r3,r2,3
 4023940:	00bfff04 	movi	r2,-4
 4023944:	1884703a 	and	r2,r3,r2
 4023948:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 402394c:	d0e00a17 	ldw	r3,-32728(gp)
 4023950:	e0bfff17 	ldw	r2,-4(fp)
 4023954:	1887883a 	add	r3,r3,r2
 4023958:	00810034 	movhi	r2,1024
 402395c:	10800004 	addi	r2,r2,0
 4023960:	10c0062e 	bgeu	r2,r3,402397c <sbrk+0x74>
 4023964:	e0bffb17 	ldw	r2,-20(fp)
 4023968:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402396c:	e0bffa17 	ldw	r2,-24(fp)
 4023970:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4023974:	00bfffc4 	movi	r2,-1
 4023978:	00000b06 	br	40239a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 402397c:	d0a00a17 	ldw	r2,-32728(gp)
 4023980:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4023984:	d0e00a17 	ldw	r3,-32728(gp)
 4023988:	e0bfff17 	ldw	r2,-4(fp)
 402398c:	1885883a 	add	r2,r3,r2
 4023990:	d0a00a15 	stw	r2,-32728(gp)
 4023994:	e0bffb17 	ldw	r2,-20(fp)
 4023998:	e0bffc15 	stw	r2,-16(fp)
 402399c:	e0bffc17 	ldw	r2,-16(fp)
 40239a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 40239a4:	e0bffd17 	ldw	r2,-12(fp)
} 
 40239a8:	e037883a 	mov	sp,fp
 40239ac:	df000017 	ldw	fp,0(sp)
 40239b0:	dec00104 	addi	sp,sp,4
 40239b4:	f800283a 	ret

040239b8 <usleep>:
 40239b8:	defffd04 	addi	sp,sp,-12
 40239bc:	dfc00215 	stw	ra,8(sp)
 40239c0:	df000115 	stw	fp,4(sp)
 40239c4:	df000104 	addi	fp,sp,4
 40239c8:	e13fff15 	stw	r4,-4(fp)
 40239cc:	e13fff17 	ldw	r4,-4(fp)
 40239d0:	402487c0 	call	402487c <alt_busy_sleep>
 40239d4:	e037883a 	mov	sp,fp
 40239d8:	dfc00117 	ldw	ra,4(sp)
 40239dc:	df000017 	ldw	fp,0(sp)
 40239e0:	dec00204 	addi	sp,sp,8
 40239e4:	f800283a 	ret

040239e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40239e8:	defffe04 	addi	sp,sp,-8
 40239ec:	dfc00115 	stw	ra,4(sp)
 40239f0:	df000015 	stw	fp,0(sp)
 40239f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40239f8:	d0a00917 	ldw	r2,-32732(gp)
 40239fc:	10000326 	beq	r2,zero,4023a0c <alt_get_errno+0x24>
 4023a00:	d0a00917 	ldw	r2,-32732(gp)
 4023a04:	103ee83a 	callr	r2
 4023a08:	00000106 	br	4023a10 <alt_get_errno+0x28>
 4023a0c:	d0a01104 	addi	r2,gp,-32700
}
 4023a10:	e037883a 	mov	sp,fp
 4023a14:	dfc00117 	ldw	ra,4(sp)
 4023a18:	df000017 	ldw	fp,0(sp)
 4023a1c:	dec00204 	addi	sp,sp,8
 4023a20:	f800283a 	ret

04023a24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4023a24:	defff904 	addi	sp,sp,-28
 4023a28:	dfc00615 	stw	ra,24(sp)
 4023a2c:	df000515 	stw	fp,20(sp)
 4023a30:	df000504 	addi	fp,sp,20
 4023a34:	e13ffd15 	stw	r4,-12(fp)
 4023a38:	e17ffe15 	stw	r5,-8(fp)
 4023a3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4023a40:	e0bffd17 	ldw	r2,-12(fp)
 4023a44:	10000816 	blt	r2,zero,4023a68 <write+0x44>
 4023a48:	01400304 	movi	r5,12
 4023a4c:	e13ffd17 	ldw	r4,-12(fp)
 4023a50:	40231380 	call	4023138 <__mulsi3>
 4023a54:	1007883a 	mov	r3,r2
 4023a58:	00800034 	movhi	r2,0
 4023a5c:	10823704 	addi	r2,r2,2268
 4023a60:	1885883a 	add	r2,r3,r2
 4023a64:	00000106 	br	4023a6c <write+0x48>
 4023a68:	0005883a 	mov	r2,zero
 4023a6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4023a70:	e0bffb17 	ldw	r2,-20(fp)
 4023a74:	10002126 	beq	r2,zero,4023afc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4023a78:	e0bffb17 	ldw	r2,-20(fp)
 4023a7c:	10800217 	ldw	r2,8(r2)
 4023a80:	108000cc 	andi	r2,r2,3
 4023a84:	10001826 	beq	r2,zero,4023ae8 <write+0xc4>
 4023a88:	e0bffb17 	ldw	r2,-20(fp)
 4023a8c:	10800017 	ldw	r2,0(r2)
 4023a90:	10800617 	ldw	r2,24(r2)
 4023a94:	10001426 	beq	r2,zero,4023ae8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4023a98:	e0bffb17 	ldw	r2,-20(fp)
 4023a9c:	10800017 	ldw	r2,0(r2)
 4023aa0:	10800617 	ldw	r2,24(r2)
 4023aa4:	e0ffff17 	ldw	r3,-4(fp)
 4023aa8:	180d883a 	mov	r6,r3
 4023aac:	e17ffe17 	ldw	r5,-8(fp)
 4023ab0:	e13ffb17 	ldw	r4,-20(fp)
 4023ab4:	103ee83a 	callr	r2
 4023ab8:	e0bffc15 	stw	r2,-16(fp)
 4023abc:	e0bffc17 	ldw	r2,-16(fp)
 4023ac0:	1000070e 	bge	r2,zero,4023ae0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4023ac4:	40239e80 	call	40239e8 <alt_get_errno>
 4023ac8:	1007883a 	mov	r3,r2
 4023acc:	e0bffc17 	ldw	r2,-16(fp)
 4023ad0:	0085c83a 	sub	r2,zero,r2
 4023ad4:	18800015 	stw	r2,0(r3)
        return -1;
 4023ad8:	00bfffc4 	movi	r2,-1
 4023adc:	00000c06 	br	4023b10 <write+0xec>
      }
      return rval;
 4023ae0:	e0bffc17 	ldw	r2,-16(fp)
 4023ae4:	00000a06 	br	4023b10 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4023ae8:	40239e80 	call	40239e8 <alt_get_errno>
 4023aec:	1007883a 	mov	r3,r2
 4023af0:	00800344 	movi	r2,13
 4023af4:	18800015 	stw	r2,0(r3)
 4023af8:	00000406 	br	4023b0c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4023afc:	40239e80 	call	40239e8 <alt_get_errno>
 4023b00:	1007883a 	mov	r3,r2
 4023b04:	00801444 	movi	r2,81
 4023b08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4023b0c:	00bfffc4 	movi	r2,-1
}
 4023b10:	e037883a 	mov	sp,fp
 4023b14:	dfc00117 	ldw	ra,4(sp)
 4023b18:	df000017 	ldw	fp,0(sp)
 4023b1c:	dec00204 	addi	sp,sp,8
 4023b20:	f800283a 	ret

04023b24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4023b24:	defffd04 	addi	sp,sp,-12
 4023b28:	dfc00215 	stw	ra,8(sp)
 4023b2c:	df000115 	stw	fp,4(sp)
 4023b30:	df000104 	addi	fp,sp,4
 4023b34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4023b38:	d1600604 	addi	r5,gp,-32744
 4023b3c:	e13fff17 	ldw	r4,-4(fp)
 4023b40:	4024a300 	call	4024a30 <alt_dev_llist_insert>
}
 4023b44:	e037883a 	mov	sp,fp
 4023b48:	dfc00117 	ldw	ra,4(sp)
 4023b4c:	df000017 	ldw	fp,0(sp)
 4023b50:	dec00204 	addi	sp,sp,8
 4023b54:	f800283a 	ret

04023b58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4023b58:	defffd04 	addi	sp,sp,-12
 4023b5c:	dfc00215 	stw	ra,8(sp)
 4023b60:	df000115 	stw	fp,4(sp)
 4023b64:	df000104 	addi	fp,sp,4
 4023b68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4023b6c:	40253dc0 	call	40253dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4023b70:	00800044 	movi	r2,1
 4023b74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4023b78:	0001883a 	nop
 4023b7c:	e037883a 	mov	sp,fp
 4023b80:	dfc00117 	ldw	ra,4(sp)
 4023b84:	df000017 	ldw	fp,0(sp)
 4023b88:	dec00204 	addi	sp,sp,8
 4023b8c:	f800283a 	ret

04023b90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4023b90:	defffe04 	addi	sp,sp,-8
 4023b94:	dfc00115 	stw	ra,4(sp)
 4023b98:	df000015 	stw	fp,0(sp)
 4023b9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4023ba0:	01c0fa04 	movi	r7,1000
 4023ba4:	01800084 	movi	r6,2
 4023ba8:	000b883a 	mov	r5,zero
 4023bac:	01010134 	movhi	r4,1028
 4023bb0:	21040004 	addi	r4,r4,4096
 4023bb4:	40246d40 	call	40246d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4023bb8:	01800044 	movi	r6,1
 4023bbc:	000b883a 	mov	r5,zero
 4023bc0:	01000034 	movhi	r4,0
 4023bc4:	2102a104 	addi	r4,r4,2692
 4023bc8:	4023d580 	call	4023d58 <altera_avalon_jtag_uart_init>
 4023bcc:	01000034 	movhi	r4,0
 4023bd0:	21029704 	addi	r4,r4,2652
 4023bd4:	4023b240 	call	4023b24 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 4023bd8:	0001883a 	nop
}
 4023bdc:	0001883a 	nop
 4023be0:	e037883a 	mov	sp,fp
 4023be4:	dfc00117 	ldw	ra,4(sp)
 4023be8:	df000017 	ldw	fp,0(sp)
 4023bec:	dec00204 	addi	sp,sp,8
 4023bf0:	f800283a 	ret

04023bf4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4023bf4:	defffa04 	addi	sp,sp,-24
 4023bf8:	dfc00515 	stw	ra,20(sp)
 4023bfc:	df000415 	stw	fp,16(sp)
 4023c00:	df000404 	addi	fp,sp,16
 4023c04:	e13ffd15 	stw	r4,-12(fp)
 4023c08:	e17ffe15 	stw	r5,-8(fp)
 4023c0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4023c10:	e0bffd17 	ldw	r2,-12(fp)
 4023c14:	10800017 	ldw	r2,0(r2)
 4023c18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4023c1c:	e0bffc17 	ldw	r2,-16(fp)
 4023c20:	10c00a04 	addi	r3,r2,40
 4023c24:	e0bffd17 	ldw	r2,-12(fp)
 4023c28:	10800217 	ldw	r2,8(r2)
 4023c2c:	100f883a 	mov	r7,r2
 4023c30:	e1bfff17 	ldw	r6,-4(fp)
 4023c34:	e17ffe17 	ldw	r5,-8(fp)
 4023c38:	1809883a 	mov	r4,r3
 4023c3c:	402421c0 	call	402421c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4023c40:	e037883a 	mov	sp,fp
 4023c44:	dfc00117 	ldw	ra,4(sp)
 4023c48:	df000017 	ldw	fp,0(sp)
 4023c4c:	dec00204 	addi	sp,sp,8
 4023c50:	f800283a 	ret

04023c54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4023c54:	defffa04 	addi	sp,sp,-24
 4023c58:	dfc00515 	stw	ra,20(sp)
 4023c5c:	df000415 	stw	fp,16(sp)
 4023c60:	df000404 	addi	fp,sp,16
 4023c64:	e13ffd15 	stw	r4,-12(fp)
 4023c68:	e17ffe15 	stw	r5,-8(fp)
 4023c6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4023c70:	e0bffd17 	ldw	r2,-12(fp)
 4023c74:	10800017 	ldw	r2,0(r2)
 4023c78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4023c7c:	e0bffc17 	ldw	r2,-16(fp)
 4023c80:	10c00a04 	addi	r3,r2,40
 4023c84:	e0bffd17 	ldw	r2,-12(fp)
 4023c88:	10800217 	ldw	r2,8(r2)
 4023c8c:	100f883a 	mov	r7,r2
 4023c90:	e1bfff17 	ldw	r6,-4(fp)
 4023c94:	e17ffe17 	ldw	r5,-8(fp)
 4023c98:	1809883a 	mov	r4,r3
 4023c9c:	40244380 	call	4024438 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4023ca0:	e037883a 	mov	sp,fp
 4023ca4:	dfc00117 	ldw	ra,4(sp)
 4023ca8:	df000017 	ldw	fp,0(sp)
 4023cac:	dec00204 	addi	sp,sp,8
 4023cb0:	f800283a 	ret

04023cb4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4023cb4:	defffc04 	addi	sp,sp,-16
 4023cb8:	dfc00315 	stw	ra,12(sp)
 4023cbc:	df000215 	stw	fp,8(sp)
 4023cc0:	df000204 	addi	fp,sp,8
 4023cc4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4023cc8:	e0bfff17 	ldw	r2,-4(fp)
 4023ccc:	10800017 	ldw	r2,0(r2)
 4023cd0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4023cd4:	e0bffe17 	ldw	r2,-8(fp)
 4023cd8:	10c00a04 	addi	r3,r2,40
 4023cdc:	e0bfff17 	ldw	r2,-4(fp)
 4023ce0:	10800217 	ldw	r2,8(r2)
 4023ce4:	100b883a 	mov	r5,r2
 4023ce8:	1809883a 	mov	r4,r3
 4023cec:	40240c40 	call	40240c4 <altera_avalon_jtag_uart_close>
}
 4023cf0:	e037883a 	mov	sp,fp
 4023cf4:	dfc00117 	ldw	ra,4(sp)
 4023cf8:	df000017 	ldw	fp,0(sp)
 4023cfc:	dec00204 	addi	sp,sp,8
 4023d00:	f800283a 	ret

04023d04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4023d04:	defffa04 	addi	sp,sp,-24
 4023d08:	dfc00515 	stw	ra,20(sp)
 4023d0c:	df000415 	stw	fp,16(sp)
 4023d10:	df000404 	addi	fp,sp,16
 4023d14:	e13ffd15 	stw	r4,-12(fp)
 4023d18:	e17ffe15 	stw	r5,-8(fp)
 4023d1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4023d20:	e0bffd17 	ldw	r2,-12(fp)
 4023d24:	10800017 	ldw	r2,0(r2)
 4023d28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4023d2c:	e0bffc17 	ldw	r2,-16(fp)
 4023d30:	10800a04 	addi	r2,r2,40
 4023d34:	e1bfff17 	ldw	r6,-4(fp)
 4023d38:	e17ffe17 	ldw	r5,-8(fp)
 4023d3c:	1009883a 	mov	r4,r2
 4023d40:	402412c0 	call	402412c <altera_avalon_jtag_uart_ioctl>
}
 4023d44:	e037883a 	mov	sp,fp
 4023d48:	dfc00117 	ldw	ra,4(sp)
 4023d4c:	df000017 	ldw	fp,0(sp)
 4023d50:	dec00204 	addi	sp,sp,8
 4023d54:	f800283a 	ret

04023d58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4023d58:	defffa04 	addi	sp,sp,-24
 4023d5c:	dfc00515 	stw	ra,20(sp)
 4023d60:	df000415 	stw	fp,16(sp)
 4023d64:	df000404 	addi	fp,sp,16
 4023d68:	e13ffd15 	stw	r4,-12(fp)
 4023d6c:	e17ffe15 	stw	r5,-8(fp)
 4023d70:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4023d74:	e0bffd17 	ldw	r2,-12(fp)
 4023d78:	00c00044 	movi	r3,1
 4023d7c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4023d80:	e0bffd17 	ldw	r2,-12(fp)
 4023d84:	10800017 	ldw	r2,0(r2)
 4023d88:	10800104 	addi	r2,r2,4
 4023d8c:	1007883a 	mov	r3,r2
 4023d90:	e0bffd17 	ldw	r2,-12(fp)
 4023d94:	10800817 	ldw	r2,32(r2)
 4023d98:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4023d9c:	e0bffe17 	ldw	r2,-8(fp)
 4023da0:	e0ffff17 	ldw	r3,-4(fp)
 4023da4:	d8000015 	stw	zero,0(sp)
 4023da8:	e1fffd17 	ldw	r7,-12(fp)
 4023dac:	018100b4 	movhi	r6,1026
 4023db0:	318f8604 	addi	r6,r6,15896
 4023db4:	180b883a 	mov	r5,r3
 4023db8:	1009883a 	mov	r4,r2
 4023dbc:	4024bb40 	call	4024bb4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4023dc0:	e0bffd17 	ldw	r2,-12(fp)
 4023dc4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4023dc8:	e0bffd17 	ldw	r2,-12(fp)
 4023dcc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4023dd0:	d0e01617 	ldw	r3,-32680(gp)
 4023dd4:	e1fffd17 	ldw	r7,-12(fp)
 4023dd8:	018100b4 	movhi	r6,1026
 4023ddc:	31900904 	addi	r6,r6,16420
 4023de0:	180b883a 	mov	r5,r3
 4023de4:	1009883a 	mov	r4,r2
 4023de8:	40247500 	call	4024750 <alt_alarm_start>
 4023dec:	1000040e 	bge	r2,zero,4023e00 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4023df0:	e0fffd17 	ldw	r3,-12(fp)
 4023df4:	00a00034 	movhi	r2,32768
 4023df8:	10bfffc4 	addi	r2,r2,-1
 4023dfc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4023e00:	0001883a 	nop
 4023e04:	e037883a 	mov	sp,fp
 4023e08:	dfc00117 	ldw	ra,4(sp)
 4023e0c:	df000017 	ldw	fp,0(sp)
 4023e10:	dec00204 	addi	sp,sp,8
 4023e14:	f800283a 	ret

04023e18 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4023e18:	defff804 	addi	sp,sp,-32
 4023e1c:	df000715 	stw	fp,28(sp)
 4023e20:	df000704 	addi	fp,sp,28
 4023e24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4023e28:	e0bfff17 	ldw	r2,-4(fp)
 4023e2c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4023e30:	e0bffb17 	ldw	r2,-20(fp)
 4023e34:	10800017 	ldw	r2,0(r2)
 4023e38:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4023e3c:	e0bffc17 	ldw	r2,-16(fp)
 4023e40:	10800104 	addi	r2,r2,4
 4023e44:	10800037 	ldwio	r2,0(r2)
 4023e48:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4023e4c:	e0bffd17 	ldw	r2,-12(fp)
 4023e50:	1080c00c 	andi	r2,r2,768
 4023e54:	10006d26 	beq	r2,zero,402400c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4023e58:	e0bffd17 	ldw	r2,-12(fp)
 4023e5c:	1080400c 	andi	r2,r2,256
 4023e60:	10003526 	beq	r2,zero,4023f38 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4023e64:	00800074 	movhi	r2,1
 4023e68:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4023e6c:	e0bffb17 	ldw	r2,-20(fp)
 4023e70:	10800a17 	ldw	r2,40(r2)
 4023e74:	10800044 	addi	r2,r2,1
 4023e78:	1081ffcc 	andi	r2,r2,2047
 4023e7c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4023e80:	e0bffb17 	ldw	r2,-20(fp)
 4023e84:	10c00b17 	ldw	r3,44(r2)
 4023e88:	e0bffe17 	ldw	r2,-8(fp)
 4023e8c:	18801526 	beq	r3,r2,4023ee4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4023e90:	e0bffc17 	ldw	r2,-16(fp)
 4023e94:	10800037 	ldwio	r2,0(r2)
 4023e98:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4023e9c:	e0bff917 	ldw	r2,-28(fp)
 4023ea0:	10a0000c 	andi	r2,r2,32768
 4023ea4:	10001126 	beq	r2,zero,4023eec <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4023ea8:	e0bffb17 	ldw	r2,-20(fp)
 4023eac:	10800a17 	ldw	r2,40(r2)
 4023eb0:	e0fff917 	ldw	r3,-28(fp)
 4023eb4:	1809883a 	mov	r4,r3
 4023eb8:	e0fffb17 	ldw	r3,-20(fp)
 4023ebc:	1885883a 	add	r2,r3,r2
 4023ec0:	10800e04 	addi	r2,r2,56
 4023ec4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4023ec8:	e0bffb17 	ldw	r2,-20(fp)
 4023ecc:	10800a17 	ldw	r2,40(r2)
 4023ed0:	10800044 	addi	r2,r2,1
 4023ed4:	10c1ffcc 	andi	r3,r2,2047
 4023ed8:	e0bffb17 	ldw	r2,-20(fp)
 4023edc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4023ee0:	003fe206 	br	4023e6c <__flash_rwdata_start+0xffffe380>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4023ee4:	0001883a 	nop
 4023ee8:	00000106 	br	4023ef0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4023eec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4023ef0:	e0bff917 	ldw	r2,-28(fp)
 4023ef4:	10bfffec 	andhi	r2,r2,65535
 4023ef8:	10000f26 	beq	r2,zero,4023f38 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4023efc:	e0bffb17 	ldw	r2,-20(fp)
 4023f00:	10c00817 	ldw	r3,32(r2)
 4023f04:	00bfff84 	movi	r2,-2
 4023f08:	1886703a 	and	r3,r3,r2
 4023f0c:	e0bffb17 	ldw	r2,-20(fp)
 4023f10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4023f14:	e0bffc17 	ldw	r2,-16(fp)
 4023f18:	10800104 	addi	r2,r2,4
 4023f1c:	1007883a 	mov	r3,r2
 4023f20:	e0bffb17 	ldw	r2,-20(fp)
 4023f24:	10800817 	ldw	r2,32(r2)
 4023f28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4023f2c:	e0bffc17 	ldw	r2,-16(fp)
 4023f30:	10800104 	addi	r2,r2,4
 4023f34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4023f38:	e0bffd17 	ldw	r2,-12(fp)
 4023f3c:	1080800c 	andi	r2,r2,512
 4023f40:	103fbe26 	beq	r2,zero,4023e3c <__flash_rwdata_start+0xffffe350>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4023f44:	e0bffd17 	ldw	r2,-12(fp)
 4023f48:	1004d43a 	srli	r2,r2,16
 4023f4c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4023f50:	00001406 	br	4023fa4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4023f54:	e0bffc17 	ldw	r2,-16(fp)
 4023f58:	e0fffb17 	ldw	r3,-20(fp)
 4023f5c:	18c00d17 	ldw	r3,52(r3)
 4023f60:	e13ffb17 	ldw	r4,-20(fp)
 4023f64:	20c7883a 	add	r3,r4,r3
 4023f68:	18c20e04 	addi	r3,r3,2104
 4023f6c:	18c00003 	ldbu	r3,0(r3)
 4023f70:	18c03fcc 	andi	r3,r3,255
 4023f74:	18c0201c 	xori	r3,r3,128
 4023f78:	18ffe004 	addi	r3,r3,-128
 4023f7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4023f80:	e0bffb17 	ldw	r2,-20(fp)
 4023f84:	10800d17 	ldw	r2,52(r2)
 4023f88:	10800044 	addi	r2,r2,1
 4023f8c:	10c1ffcc 	andi	r3,r2,2047
 4023f90:	e0bffb17 	ldw	r2,-20(fp)
 4023f94:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4023f98:	e0bffa17 	ldw	r2,-24(fp)
 4023f9c:	10bfffc4 	addi	r2,r2,-1
 4023fa0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4023fa4:	e0bffa17 	ldw	r2,-24(fp)
 4023fa8:	10000526 	beq	r2,zero,4023fc0 <altera_avalon_jtag_uart_irq+0x1a8>
 4023fac:	e0bffb17 	ldw	r2,-20(fp)
 4023fb0:	10c00d17 	ldw	r3,52(r2)
 4023fb4:	e0bffb17 	ldw	r2,-20(fp)
 4023fb8:	10800c17 	ldw	r2,48(r2)
 4023fbc:	18bfe51e 	bne	r3,r2,4023f54 <__flash_rwdata_start+0xffffe468>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4023fc0:	e0bffa17 	ldw	r2,-24(fp)
 4023fc4:	103f9d26 	beq	r2,zero,4023e3c <__flash_rwdata_start+0xffffe350>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4023fc8:	e0bffb17 	ldw	r2,-20(fp)
 4023fcc:	10c00817 	ldw	r3,32(r2)
 4023fd0:	00bfff44 	movi	r2,-3
 4023fd4:	1886703a 	and	r3,r3,r2
 4023fd8:	e0bffb17 	ldw	r2,-20(fp)
 4023fdc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4023fe0:	e0bffb17 	ldw	r2,-20(fp)
 4023fe4:	10800017 	ldw	r2,0(r2)
 4023fe8:	10800104 	addi	r2,r2,4
 4023fec:	1007883a 	mov	r3,r2
 4023ff0:	e0bffb17 	ldw	r2,-20(fp)
 4023ff4:	10800817 	ldw	r2,32(r2)
 4023ff8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4023ffc:	e0bffc17 	ldw	r2,-16(fp)
 4024000:	10800104 	addi	r2,r2,4
 4024004:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4024008:	003f8c06 	br	4023e3c <__flash_rwdata_start+0xffffe350>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 402400c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4024010:	0001883a 	nop
 4024014:	e037883a 	mov	sp,fp
 4024018:	df000017 	ldw	fp,0(sp)
 402401c:	dec00104 	addi	sp,sp,4
 4024020:	f800283a 	ret

04024024 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4024024:	defff804 	addi	sp,sp,-32
 4024028:	df000715 	stw	fp,28(sp)
 402402c:	df000704 	addi	fp,sp,28
 4024030:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4024034:	e0bffb17 	ldw	r2,-20(fp)
 4024038:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 402403c:	e0bff917 	ldw	r2,-28(fp)
 4024040:	10800017 	ldw	r2,0(r2)
 4024044:	10800104 	addi	r2,r2,4
 4024048:	10800037 	ldwio	r2,0(r2)
 402404c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4024050:	e0bffa17 	ldw	r2,-24(fp)
 4024054:	1081000c 	andi	r2,r2,1024
 4024058:	10000b26 	beq	r2,zero,4024088 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 402405c:	e0bff917 	ldw	r2,-28(fp)
 4024060:	10800017 	ldw	r2,0(r2)
 4024064:	10800104 	addi	r2,r2,4
 4024068:	1007883a 	mov	r3,r2
 402406c:	e0bff917 	ldw	r2,-28(fp)
 4024070:	10800817 	ldw	r2,32(r2)
 4024074:	10810014 	ori	r2,r2,1024
 4024078:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 402407c:	e0bff917 	ldw	r2,-28(fp)
 4024080:	10000915 	stw	zero,36(r2)
 4024084:	00000a06 	br	40240b0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4024088:	e0bff917 	ldw	r2,-28(fp)
 402408c:	10c00917 	ldw	r3,36(r2)
 4024090:	00a00034 	movhi	r2,32768
 4024094:	10bfff04 	addi	r2,r2,-4
 4024098:	10c00536 	bltu	r2,r3,40240b0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 402409c:	e0bff917 	ldw	r2,-28(fp)
 40240a0:	10800917 	ldw	r2,36(r2)
 40240a4:	10c00044 	addi	r3,r2,1
 40240a8:	e0bff917 	ldw	r2,-28(fp)
 40240ac:	10c00915 	stw	r3,36(r2)
 40240b0:	d0a01617 	ldw	r2,-32680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40240b4:	e037883a 	mov	sp,fp
 40240b8:	df000017 	ldw	fp,0(sp)
 40240bc:	dec00104 	addi	sp,sp,4
 40240c0:	f800283a 	ret

040240c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40240c4:	defffd04 	addi	sp,sp,-12
 40240c8:	df000215 	stw	fp,8(sp)
 40240cc:	df000204 	addi	fp,sp,8
 40240d0:	e13ffe15 	stw	r4,-8(fp)
 40240d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40240d8:	00000506 	br	40240f0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40240dc:	e0bfff17 	ldw	r2,-4(fp)
 40240e0:	1090000c 	andi	r2,r2,16384
 40240e4:	10000226 	beq	r2,zero,40240f0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40240e8:	00bffd44 	movi	r2,-11
 40240ec:	00000b06 	br	402411c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40240f0:	e0bffe17 	ldw	r2,-8(fp)
 40240f4:	10c00d17 	ldw	r3,52(r2)
 40240f8:	e0bffe17 	ldw	r2,-8(fp)
 40240fc:	10800c17 	ldw	r2,48(r2)
 4024100:	18800526 	beq	r3,r2,4024118 <altera_avalon_jtag_uart_close+0x54>
 4024104:	e0bffe17 	ldw	r2,-8(fp)
 4024108:	10c00917 	ldw	r3,36(r2)
 402410c:	e0bffe17 	ldw	r2,-8(fp)
 4024110:	10800117 	ldw	r2,4(r2)
 4024114:	18bff136 	bltu	r3,r2,40240dc <__flash_rwdata_start+0xffffe5f0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4024118:	0005883a 	mov	r2,zero
}
 402411c:	e037883a 	mov	sp,fp
 4024120:	df000017 	ldw	fp,0(sp)
 4024124:	dec00104 	addi	sp,sp,4
 4024128:	f800283a 	ret

0402412c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 402412c:	defffa04 	addi	sp,sp,-24
 4024130:	df000515 	stw	fp,20(sp)
 4024134:	df000504 	addi	fp,sp,20
 4024138:	e13ffd15 	stw	r4,-12(fp)
 402413c:	e17ffe15 	stw	r5,-8(fp)
 4024140:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4024144:	00bff9c4 	movi	r2,-25
 4024148:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 402414c:	e0bffe17 	ldw	r2,-8(fp)
 4024150:	10da8060 	cmpeqi	r3,r2,27137
 4024154:	1800031e 	bne	r3,zero,4024164 <altera_avalon_jtag_uart_ioctl+0x38>
 4024158:	109a80a0 	cmpeqi	r2,r2,27138
 402415c:	1000181e 	bne	r2,zero,40241c0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4024160:	00002906 	br	4024208 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4024164:	e0bffd17 	ldw	r2,-12(fp)
 4024168:	10c00117 	ldw	r3,4(r2)
 402416c:	00a00034 	movhi	r2,32768
 4024170:	10bfffc4 	addi	r2,r2,-1
 4024174:	18802126 	beq	r3,r2,40241fc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4024178:	e0bfff17 	ldw	r2,-4(fp)
 402417c:	10800017 	ldw	r2,0(r2)
 4024180:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4024184:	e0bffc17 	ldw	r2,-16(fp)
 4024188:	10800090 	cmplti	r2,r2,2
 402418c:	1000061e 	bne	r2,zero,40241a8 <altera_avalon_jtag_uart_ioctl+0x7c>
 4024190:	e0fffc17 	ldw	r3,-16(fp)
 4024194:	00a00034 	movhi	r2,32768
 4024198:	10bfffc4 	addi	r2,r2,-1
 402419c:	18800226 	beq	r3,r2,40241a8 <altera_avalon_jtag_uart_ioctl+0x7c>
 40241a0:	e0bffc17 	ldw	r2,-16(fp)
 40241a4:	00000206 	br	40241b0 <altera_avalon_jtag_uart_ioctl+0x84>
 40241a8:	00a00034 	movhi	r2,32768
 40241ac:	10bfff84 	addi	r2,r2,-2
 40241b0:	e0fffd17 	ldw	r3,-12(fp)
 40241b4:	18800115 	stw	r2,4(r3)
      rc = 0;
 40241b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40241bc:	00000f06 	br	40241fc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40241c0:	e0bffd17 	ldw	r2,-12(fp)
 40241c4:	10c00117 	ldw	r3,4(r2)
 40241c8:	00a00034 	movhi	r2,32768
 40241cc:	10bfffc4 	addi	r2,r2,-1
 40241d0:	18800c26 	beq	r3,r2,4024204 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40241d4:	e0bffd17 	ldw	r2,-12(fp)
 40241d8:	10c00917 	ldw	r3,36(r2)
 40241dc:	e0bffd17 	ldw	r2,-12(fp)
 40241e0:	10800117 	ldw	r2,4(r2)
 40241e4:	1885803a 	cmpltu	r2,r3,r2
 40241e8:	10c03fcc 	andi	r3,r2,255
 40241ec:	e0bfff17 	ldw	r2,-4(fp)
 40241f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40241f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40241f8:	00000206 	br	4024204 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40241fc:	0001883a 	nop
 4024200:	00000106 	br	4024208 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4024204:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4024208:	e0bffb17 	ldw	r2,-20(fp)
}
 402420c:	e037883a 	mov	sp,fp
 4024210:	df000017 	ldw	fp,0(sp)
 4024214:	dec00104 	addi	sp,sp,4
 4024218:	f800283a 	ret

0402421c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 402421c:	defff304 	addi	sp,sp,-52
 4024220:	dfc00c15 	stw	ra,48(sp)
 4024224:	df000b15 	stw	fp,44(sp)
 4024228:	df000b04 	addi	fp,sp,44
 402422c:	e13ffc15 	stw	r4,-16(fp)
 4024230:	e17ffd15 	stw	r5,-12(fp)
 4024234:	e1bffe15 	stw	r6,-8(fp)
 4024238:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 402423c:	e0bffd17 	ldw	r2,-12(fp)
 4024240:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4024244:	00004706 	br	4024364 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4024248:	e0bffc17 	ldw	r2,-16(fp)
 402424c:	10800a17 	ldw	r2,40(r2)
 4024250:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4024254:	e0bffc17 	ldw	r2,-16(fp)
 4024258:	10800b17 	ldw	r2,44(r2)
 402425c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4024260:	e0fff717 	ldw	r3,-36(fp)
 4024264:	e0bff817 	ldw	r2,-32(fp)
 4024268:	18800536 	bltu	r3,r2,4024280 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 402426c:	e0fff717 	ldw	r3,-36(fp)
 4024270:	e0bff817 	ldw	r2,-32(fp)
 4024274:	1885c83a 	sub	r2,r3,r2
 4024278:	e0bff615 	stw	r2,-40(fp)
 402427c:	00000406 	br	4024290 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4024280:	00c20004 	movi	r3,2048
 4024284:	e0bff817 	ldw	r2,-32(fp)
 4024288:	1885c83a 	sub	r2,r3,r2
 402428c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4024290:	e0bff617 	ldw	r2,-40(fp)
 4024294:	10001e26 	beq	r2,zero,4024310 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4024298:	e0fffe17 	ldw	r3,-8(fp)
 402429c:	e0bff617 	ldw	r2,-40(fp)
 40242a0:	1880022e 	bgeu	r3,r2,40242ac <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40242a4:	e0bffe17 	ldw	r2,-8(fp)
 40242a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40242ac:	e0bffc17 	ldw	r2,-16(fp)
 40242b0:	10c00e04 	addi	r3,r2,56
 40242b4:	e0bff817 	ldw	r2,-32(fp)
 40242b8:	1885883a 	add	r2,r3,r2
 40242bc:	e1bff617 	ldw	r6,-40(fp)
 40242c0:	100b883a 	mov	r5,r2
 40242c4:	e13ff517 	ldw	r4,-44(fp)
 40242c8:	40217b00 	call	40217b0 <memcpy>
      ptr   += n;
 40242cc:	e0fff517 	ldw	r3,-44(fp)
 40242d0:	e0bff617 	ldw	r2,-40(fp)
 40242d4:	1885883a 	add	r2,r3,r2
 40242d8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40242dc:	e0fffe17 	ldw	r3,-8(fp)
 40242e0:	e0bff617 	ldw	r2,-40(fp)
 40242e4:	1885c83a 	sub	r2,r3,r2
 40242e8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40242ec:	e0fff817 	ldw	r3,-32(fp)
 40242f0:	e0bff617 	ldw	r2,-40(fp)
 40242f4:	1885883a 	add	r2,r3,r2
 40242f8:	10c1ffcc 	andi	r3,r2,2047
 40242fc:	e0bffc17 	ldw	r2,-16(fp)
 4024300:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4024304:	e0bffe17 	ldw	r2,-8(fp)
 4024308:	00bfcf16 	blt	zero,r2,4024248 <__flash_rwdata_start+0xffffe75c>
 402430c:	00000106 	br	4024314 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4024310:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4024314:	e0fff517 	ldw	r3,-44(fp)
 4024318:	e0bffd17 	ldw	r2,-12(fp)
 402431c:	1880141e 	bne	r3,r2,4024370 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4024320:	e0bfff17 	ldw	r2,-4(fp)
 4024324:	1090000c 	andi	r2,r2,16384
 4024328:	1000131e 	bne	r2,zero,4024378 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 402432c:	0001883a 	nop
 4024330:	e0bffc17 	ldw	r2,-16(fp)
 4024334:	10c00a17 	ldw	r3,40(r2)
 4024338:	e0bff717 	ldw	r2,-36(fp)
 402433c:	1880051e 	bne	r3,r2,4024354 <altera_avalon_jtag_uart_read+0x138>
 4024340:	e0bffc17 	ldw	r2,-16(fp)
 4024344:	10c00917 	ldw	r3,36(r2)
 4024348:	e0bffc17 	ldw	r2,-16(fp)
 402434c:	10800117 	ldw	r2,4(r2)
 4024350:	18bff736 	bltu	r3,r2,4024330 <__flash_rwdata_start+0xffffe844>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4024354:	e0bffc17 	ldw	r2,-16(fp)
 4024358:	10c00a17 	ldw	r3,40(r2)
 402435c:	e0bff717 	ldw	r2,-36(fp)
 4024360:	18800726 	beq	r3,r2,4024380 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4024364:	e0bffe17 	ldw	r2,-8(fp)
 4024368:	00bfb716 	blt	zero,r2,4024248 <__flash_rwdata_start+0xffffe75c>
 402436c:	00000506 	br	4024384 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4024370:	0001883a 	nop
 4024374:	00000306 	br	4024384 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4024378:	0001883a 	nop
 402437c:	00000106 	br	4024384 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4024380:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4024384:	e0fff517 	ldw	r3,-44(fp)
 4024388:	e0bffd17 	ldw	r2,-12(fp)
 402438c:	18801826 	beq	r3,r2,40243f0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024390:	0005303a 	rdctl	r2,status
 4024394:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024398:	e0fffb17 	ldw	r3,-20(fp)
 402439c:	00bfff84 	movi	r2,-2
 40243a0:	1884703a 	and	r2,r3,r2
 40243a4:	1001703a 	wrctl	status,r2
  
  return context;
 40243a8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40243ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40243b0:	e0bffc17 	ldw	r2,-16(fp)
 40243b4:	10800817 	ldw	r2,32(r2)
 40243b8:	10c00054 	ori	r3,r2,1
 40243bc:	e0bffc17 	ldw	r2,-16(fp)
 40243c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40243c4:	e0bffc17 	ldw	r2,-16(fp)
 40243c8:	10800017 	ldw	r2,0(r2)
 40243cc:	10800104 	addi	r2,r2,4
 40243d0:	1007883a 	mov	r3,r2
 40243d4:	e0bffc17 	ldw	r2,-16(fp)
 40243d8:	10800817 	ldw	r2,32(r2)
 40243dc:	18800035 	stwio	r2,0(r3)
 40243e0:	e0bffa17 	ldw	r2,-24(fp)
 40243e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40243e8:	e0bff917 	ldw	r2,-28(fp)
 40243ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40243f0:	e0fff517 	ldw	r3,-44(fp)
 40243f4:	e0bffd17 	ldw	r2,-12(fp)
 40243f8:	18800426 	beq	r3,r2,402440c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 40243fc:	e0fff517 	ldw	r3,-44(fp)
 4024400:	e0bffd17 	ldw	r2,-12(fp)
 4024404:	1885c83a 	sub	r2,r3,r2
 4024408:	00000606 	br	4024424 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 402440c:	e0bfff17 	ldw	r2,-4(fp)
 4024410:	1090000c 	andi	r2,r2,16384
 4024414:	10000226 	beq	r2,zero,4024420 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4024418:	00bffd44 	movi	r2,-11
 402441c:	00000106 	br	4024424 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4024420:	00bffec4 	movi	r2,-5
}
 4024424:	e037883a 	mov	sp,fp
 4024428:	dfc00117 	ldw	ra,4(sp)
 402442c:	df000017 	ldw	fp,0(sp)
 4024430:	dec00204 	addi	sp,sp,8
 4024434:	f800283a 	ret

04024438 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4024438:	defff304 	addi	sp,sp,-52
 402443c:	dfc00c15 	stw	ra,48(sp)
 4024440:	df000b15 	stw	fp,44(sp)
 4024444:	df000b04 	addi	fp,sp,44
 4024448:	e13ffc15 	stw	r4,-16(fp)
 402444c:	e17ffd15 	stw	r5,-12(fp)
 4024450:	e1bffe15 	stw	r6,-8(fp)
 4024454:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4024458:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 402445c:	e0bffd17 	ldw	r2,-12(fp)
 4024460:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4024464:	00003706 	br	4024544 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4024468:	e0bffc17 	ldw	r2,-16(fp)
 402446c:	10800c17 	ldw	r2,48(r2)
 4024470:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4024474:	e0bffc17 	ldw	r2,-16(fp)
 4024478:	10800d17 	ldw	r2,52(r2)
 402447c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4024480:	e0fff917 	ldw	r3,-28(fp)
 4024484:	e0bff517 	ldw	r2,-44(fp)
 4024488:	1880062e 	bgeu	r3,r2,40244a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 402448c:	e0fff517 	ldw	r3,-44(fp)
 4024490:	e0bff917 	ldw	r2,-28(fp)
 4024494:	1885c83a 	sub	r2,r3,r2
 4024498:	10bfffc4 	addi	r2,r2,-1
 402449c:	e0bff615 	stw	r2,-40(fp)
 40244a0:	00000b06 	br	40244d0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40244a4:	e0bff517 	ldw	r2,-44(fp)
 40244a8:	10000526 	beq	r2,zero,40244c0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40244ac:	00c20004 	movi	r3,2048
 40244b0:	e0bff917 	ldw	r2,-28(fp)
 40244b4:	1885c83a 	sub	r2,r3,r2
 40244b8:	e0bff615 	stw	r2,-40(fp)
 40244bc:	00000406 	br	40244d0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40244c0:	00c1ffc4 	movi	r3,2047
 40244c4:	e0bff917 	ldw	r2,-28(fp)
 40244c8:	1885c83a 	sub	r2,r3,r2
 40244cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40244d0:	e0bff617 	ldw	r2,-40(fp)
 40244d4:	10001e26 	beq	r2,zero,4024550 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40244d8:	e0fffe17 	ldw	r3,-8(fp)
 40244dc:	e0bff617 	ldw	r2,-40(fp)
 40244e0:	1880022e 	bgeu	r3,r2,40244ec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 40244e4:	e0bffe17 	ldw	r2,-8(fp)
 40244e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40244ec:	e0bffc17 	ldw	r2,-16(fp)
 40244f0:	10c20e04 	addi	r3,r2,2104
 40244f4:	e0bff917 	ldw	r2,-28(fp)
 40244f8:	1885883a 	add	r2,r3,r2
 40244fc:	e1bff617 	ldw	r6,-40(fp)
 4024500:	e17ffd17 	ldw	r5,-12(fp)
 4024504:	1009883a 	mov	r4,r2
 4024508:	40217b00 	call	40217b0 <memcpy>
      ptr   += n;
 402450c:	e0fffd17 	ldw	r3,-12(fp)
 4024510:	e0bff617 	ldw	r2,-40(fp)
 4024514:	1885883a 	add	r2,r3,r2
 4024518:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 402451c:	e0fffe17 	ldw	r3,-8(fp)
 4024520:	e0bff617 	ldw	r2,-40(fp)
 4024524:	1885c83a 	sub	r2,r3,r2
 4024528:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402452c:	e0fff917 	ldw	r3,-28(fp)
 4024530:	e0bff617 	ldw	r2,-40(fp)
 4024534:	1885883a 	add	r2,r3,r2
 4024538:	10c1ffcc 	andi	r3,r2,2047
 402453c:	e0bffc17 	ldw	r2,-16(fp)
 4024540:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4024544:	e0bffe17 	ldw	r2,-8(fp)
 4024548:	00bfc716 	blt	zero,r2,4024468 <__flash_rwdata_start+0xffffe97c>
 402454c:	00000106 	br	4024554 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4024550:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024554:	0005303a 	rdctl	r2,status
 4024558:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402455c:	e0fffb17 	ldw	r3,-20(fp)
 4024560:	00bfff84 	movi	r2,-2
 4024564:	1884703a 	and	r2,r3,r2
 4024568:	1001703a 	wrctl	status,r2
  
  return context;
 402456c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4024570:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4024574:	e0bffc17 	ldw	r2,-16(fp)
 4024578:	10800817 	ldw	r2,32(r2)
 402457c:	10c00094 	ori	r3,r2,2
 4024580:	e0bffc17 	ldw	r2,-16(fp)
 4024584:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4024588:	e0bffc17 	ldw	r2,-16(fp)
 402458c:	10800017 	ldw	r2,0(r2)
 4024590:	10800104 	addi	r2,r2,4
 4024594:	1007883a 	mov	r3,r2
 4024598:	e0bffc17 	ldw	r2,-16(fp)
 402459c:	10800817 	ldw	r2,32(r2)
 40245a0:	18800035 	stwio	r2,0(r3)
 40245a4:	e0bffa17 	ldw	r2,-24(fp)
 40245a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40245ac:	e0bff817 	ldw	r2,-32(fp)
 40245b0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40245b4:	e0bffe17 	ldw	r2,-8(fp)
 40245b8:	0080100e 	bge	zero,r2,40245fc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40245bc:	e0bfff17 	ldw	r2,-4(fp)
 40245c0:	1090000c 	andi	r2,r2,16384
 40245c4:	1000101e 	bne	r2,zero,4024608 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40245c8:	0001883a 	nop
 40245cc:	e0bffc17 	ldw	r2,-16(fp)
 40245d0:	10c00d17 	ldw	r3,52(r2)
 40245d4:	e0bff517 	ldw	r2,-44(fp)
 40245d8:	1880051e 	bne	r3,r2,40245f0 <altera_avalon_jtag_uart_write+0x1b8>
 40245dc:	e0bffc17 	ldw	r2,-16(fp)
 40245e0:	10c00917 	ldw	r3,36(r2)
 40245e4:	e0bffc17 	ldw	r2,-16(fp)
 40245e8:	10800117 	ldw	r2,4(r2)
 40245ec:	18bff736 	bltu	r3,r2,40245cc <__flash_rwdata_start+0xffffeae0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40245f0:	e0bffc17 	ldw	r2,-16(fp)
 40245f4:	10800917 	ldw	r2,36(r2)
 40245f8:	1000051e 	bne	r2,zero,4024610 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 40245fc:	e0bffe17 	ldw	r2,-8(fp)
 4024600:	00bfd016 	blt	zero,r2,4024544 <__flash_rwdata_start+0xffffea58>
 4024604:	00000306 	br	4024614 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4024608:	0001883a 	nop
 402460c:	00000106 	br	4024614 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4024610:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4024614:	e0fffd17 	ldw	r3,-12(fp)
 4024618:	e0bff717 	ldw	r2,-36(fp)
 402461c:	18800426 	beq	r3,r2,4024630 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4024620:	e0fffd17 	ldw	r3,-12(fp)
 4024624:	e0bff717 	ldw	r2,-36(fp)
 4024628:	1885c83a 	sub	r2,r3,r2
 402462c:	00000606 	br	4024648 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4024630:	e0bfff17 	ldw	r2,-4(fp)
 4024634:	1090000c 	andi	r2,r2,16384
 4024638:	10000226 	beq	r2,zero,4024644 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 402463c:	00bffd44 	movi	r2,-11
 4024640:	00000106 	br	4024648 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4024644:	00bffec4 	movi	r2,-5
}
 4024648:	e037883a 	mov	sp,fp
 402464c:	dfc00117 	ldw	ra,4(sp)
 4024650:	df000017 	ldw	fp,0(sp)
 4024654:	dec00204 	addi	sp,sp,8
 4024658:	f800283a 	ret

0402465c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 402465c:	defffa04 	addi	sp,sp,-24
 4024660:	dfc00515 	stw	ra,20(sp)
 4024664:	df000415 	stw	fp,16(sp)
 4024668:	df000404 	addi	fp,sp,16
 402466c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4024670:	0007883a 	mov	r3,zero
 4024674:	e0bfff17 	ldw	r2,-4(fp)
 4024678:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 402467c:	e0bfff17 	ldw	r2,-4(fp)
 4024680:	10800104 	addi	r2,r2,4
 4024684:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024688:	0005303a 	rdctl	r2,status
 402468c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024690:	e0fffd17 	ldw	r3,-12(fp)
 4024694:	00bfff84 	movi	r2,-2
 4024698:	1884703a 	and	r2,r3,r2
 402469c:	1001703a 	wrctl	status,r2
  
  return context;
 40246a0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40246a4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40246a8:	40252d40 	call	40252d4 <alt_tick>
 40246ac:	e0bffc17 	ldw	r2,-16(fp)
 40246b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40246b4:	e0bffe17 	ldw	r2,-8(fp)
 40246b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40246bc:	0001883a 	nop
 40246c0:	e037883a 	mov	sp,fp
 40246c4:	dfc00117 	ldw	ra,4(sp)
 40246c8:	df000017 	ldw	fp,0(sp)
 40246cc:	dec00204 	addi	sp,sp,8
 40246d0:	f800283a 	ret

040246d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40246d4:	defff804 	addi	sp,sp,-32
 40246d8:	dfc00715 	stw	ra,28(sp)
 40246dc:	df000615 	stw	fp,24(sp)
 40246e0:	df000604 	addi	fp,sp,24
 40246e4:	e13ffc15 	stw	r4,-16(fp)
 40246e8:	e17ffd15 	stw	r5,-12(fp)
 40246ec:	e1bffe15 	stw	r6,-8(fp)
 40246f0:	e1ffff15 	stw	r7,-4(fp)
 40246f4:	e0bfff17 	ldw	r2,-4(fp)
 40246f8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40246fc:	d0a01617 	ldw	r2,-32680(gp)
 4024700:	1000021e 	bne	r2,zero,402470c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4024704:	e0bffb17 	ldw	r2,-20(fp)
 4024708:	d0a01615 	stw	r2,-32680(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 402470c:	e0bffc17 	ldw	r2,-16(fp)
 4024710:	10800104 	addi	r2,r2,4
 4024714:	00c001c4 	movi	r3,7
 4024718:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 402471c:	d8000015 	stw	zero,0(sp)
 4024720:	e1fffc17 	ldw	r7,-16(fp)
 4024724:	018100b4 	movhi	r6,1026
 4024728:	31919704 	addi	r6,r6,18012
 402472c:	e17ffe17 	ldw	r5,-8(fp)
 4024730:	e13ffd17 	ldw	r4,-12(fp)
 4024734:	4024bb40 	call	4024bb4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4024738:	0001883a 	nop
 402473c:	e037883a 	mov	sp,fp
 4024740:	dfc00117 	ldw	ra,4(sp)
 4024744:	df000017 	ldw	fp,0(sp)
 4024748:	dec00204 	addi	sp,sp,8
 402474c:	f800283a 	ret

04024750 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4024750:	defff504 	addi	sp,sp,-44
 4024754:	df000a15 	stw	fp,40(sp)
 4024758:	df000a04 	addi	fp,sp,40
 402475c:	e13ffc15 	stw	r4,-16(fp)
 4024760:	e17ffd15 	stw	r5,-12(fp)
 4024764:	e1bffe15 	stw	r6,-8(fp)
 4024768:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 402476c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4024770:	d0a01617 	ldw	r2,-32680(gp)
  
  if (alt_ticks_per_second ())
 4024774:	10003c26 	beq	r2,zero,4024868 <alt_alarm_start+0x118>
  {
    if (alarm)
 4024778:	e0bffc17 	ldw	r2,-16(fp)
 402477c:	10003826 	beq	r2,zero,4024860 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4024780:	e0bffc17 	ldw	r2,-16(fp)
 4024784:	e0fffe17 	ldw	r3,-8(fp)
 4024788:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 402478c:	e0bffc17 	ldw	r2,-16(fp)
 4024790:	e0ffff17 	ldw	r3,-4(fp)
 4024794:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024798:	0005303a 	rdctl	r2,status
 402479c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40247a0:	e0fff917 	ldw	r3,-28(fp)
 40247a4:	00bfff84 	movi	r2,-2
 40247a8:	1884703a 	and	r2,r3,r2
 40247ac:	1001703a 	wrctl	status,r2
  
  return context;
 40247b0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 40247b4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40247b8:	d0a01717 	ldw	r2,-32676(gp)
      
      current_nticks = alt_nticks();
 40247bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 40247c0:	e0fffd17 	ldw	r3,-12(fp)
 40247c4:	e0bff617 	ldw	r2,-40(fp)
 40247c8:	1885883a 	add	r2,r3,r2
 40247cc:	10c00044 	addi	r3,r2,1
 40247d0:	e0bffc17 	ldw	r2,-16(fp)
 40247d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40247d8:	e0bffc17 	ldw	r2,-16(fp)
 40247dc:	10c00217 	ldw	r3,8(r2)
 40247e0:	e0bff617 	ldw	r2,-40(fp)
 40247e4:	1880042e 	bgeu	r3,r2,40247f8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 40247e8:	e0bffc17 	ldw	r2,-16(fp)
 40247ec:	00c00044 	movi	r3,1
 40247f0:	10c00405 	stb	r3,16(r2)
 40247f4:	00000206 	br	4024800 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 40247f8:	e0bffc17 	ldw	r2,-16(fp)
 40247fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4024800:	e0bffc17 	ldw	r2,-16(fp)
 4024804:	d0e00c04 	addi	r3,gp,-32720
 4024808:	e0fffa15 	stw	r3,-24(fp)
 402480c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4024810:	e0bffb17 	ldw	r2,-20(fp)
 4024814:	e0fffa17 	ldw	r3,-24(fp)
 4024818:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402481c:	e0bffa17 	ldw	r2,-24(fp)
 4024820:	10c00017 	ldw	r3,0(r2)
 4024824:	e0bffb17 	ldw	r2,-20(fp)
 4024828:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402482c:	e0bffa17 	ldw	r2,-24(fp)
 4024830:	10800017 	ldw	r2,0(r2)
 4024834:	e0fffb17 	ldw	r3,-20(fp)
 4024838:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402483c:	e0bffa17 	ldw	r2,-24(fp)
 4024840:	e0fffb17 	ldw	r3,-20(fp)
 4024844:	10c00015 	stw	r3,0(r2)
 4024848:	e0bff817 	ldw	r2,-32(fp)
 402484c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024850:	e0bff717 	ldw	r2,-36(fp)
 4024854:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4024858:	0005883a 	mov	r2,zero
 402485c:	00000306 	br	402486c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4024860:	00bffa84 	movi	r2,-22
 4024864:	00000106 	br	402486c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4024868:	00bfde84 	movi	r2,-134
  }
}
 402486c:	e037883a 	mov	sp,fp
 4024870:	df000017 	ldw	fp,0(sp)
 4024874:	dec00104 	addi	sp,sp,4
 4024878:	f800283a 	ret

0402487c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 402487c:	defffa04 	addi	sp,sp,-24
 4024880:	dfc00515 	stw	ra,20(sp)
 4024884:	df000415 	stw	fp,16(sp)
 4024888:	df000404 	addi	fp,sp,16
 402488c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4024890:	00800244 	movi	r2,9
 4024894:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4024898:	014003f4 	movhi	r5,15
 402489c:	29509004 	addi	r5,r5,16960
 40248a0:	e13ffd17 	ldw	r4,-12(fp)
 40248a4:	40231380 	call	4023138 <__mulsi3>
 40248a8:	100b883a 	mov	r5,r2
 40248ac:	01017db4 	movhi	r4,1526
 40248b0:	21384004 	addi	r4,r4,-7936
 40248b4:	402307c0 	call	402307c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40248b8:	100b883a 	mov	r5,r2
 40248bc:	01200034 	movhi	r4,32768
 40248c0:	213fffc4 	addi	r4,r4,-1
 40248c4:	402307c0 	call	402307c <__udivsi3>
 40248c8:	100b883a 	mov	r5,r2
 40248cc:	e13fff17 	ldw	r4,-4(fp)
 40248d0:	402307c0 	call	402307c <__udivsi3>
 40248d4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40248d8:	e0bffe17 	ldw	r2,-8(fp)
 40248dc:	10002a26 	beq	r2,zero,4024988 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40248e0:	e03ffc15 	stw	zero,-16(fp)
 40248e4:	00001706 	br	4024944 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40248e8:	00a00034 	movhi	r2,32768
 40248ec:	10bfffc4 	addi	r2,r2,-1
 40248f0:	10bfffc4 	addi	r2,r2,-1
 40248f4:	103ffe1e 	bne	r2,zero,40248f0 <__flash_rwdata_start+0xffffee04>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40248f8:	014003f4 	movhi	r5,15
 40248fc:	29509004 	addi	r5,r5,16960
 4024900:	e13ffd17 	ldw	r4,-12(fp)
 4024904:	40231380 	call	4023138 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4024908:	100b883a 	mov	r5,r2
 402490c:	01017db4 	movhi	r4,1526
 4024910:	21384004 	addi	r4,r4,-7936
 4024914:	402307c0 	call	402307c <__udivsi3>
 4024918:	100b883a 	mov	r5,r2
 402491c:	01200034 	movhi	r4,32768
 4024920:	213fffc4 	addi	r4,r4,-1
 4024924:	402307c0 	call	402307c <__udivsi3>
 4024928:	1007883a 	mov	r3,r2
 402492c:	e0bfff17 	ldw	r2,-4(fp)
 4024930:	10c5c83a 	sub	r2,r2,r3
 4024934:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4024938:	e0bffc17 	ldw	r2,-16(fp)
 402493c:	10800044 	addi	r2,r2,1
 4024940:	e0bffc15 	stw	r2,-16(fp)
 4024944:	e0fffc17 	ldw	r3,-16(fp)
 4024948:	e0bffe17 	ldw	r2,-8(fp)
 402494c:	18bfe616 	blt	r3,r2,40248e8 <__flash_rwdata_start+0xffffedfc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4024950:	014003f4 	movhi	r5,15
 4024954:	29509004 	addi	r5,r5,16960
 4024958:	e13ffd17 	ldw	r4,-12(fp)
 402495c:	40231380 	call	4023138 <__mulsi3>
 4024960:	100b883a 	mov	r5,r2
 4024964:	01017db4 	movhi	r4,1526
 4024968:	21384004 	addi	r4,r4,-7936
 402496c:	402307c0 	call	402307c <__udivsi3>
 4024970:	e17fff17 	ldw	r5,-4(fp)
 4024974:	1009883a 	mov	r4,r2
 4024978:	40231380 	call	4023138 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402497c:	10bfffc4 	addi	r2,r2,-1
 4024980:	103ffe1e 	bne	r2,zero,402497c <__flash_rwdata_start+0xffffee90>
 4024984:	00000d06 	br	40249bc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4024988:	014003f4 	movhi	r5,15
 402498c:	29509004 	addi	r5,r5,16960
 4024990:	e13ffd17 	ldw	r4,-12(fp)
 4024994:	40231380 	call	4023138 <__mulsi3>
 4024998:	100b883a 	mov	r5,r2
 402499c:	01017db4 	movhi	r4,1526
 40249a0:	21384004 	addi	r4,r4,-7936
 40249a4:	402307c0 	call	402307c <__udivsi3>
 40249a8:	e17fff17 	ldw	r5,-4(fp)
 40249ac:	1009883a 	mov	r4,r2
 40249b0:	40231380 	call	4023138 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40249b4:	10bfffc4 	addi	r2,r2,-1
 40249b8:	00bffe16 	blt	zero,r2,40249b4 <__flash_rwdata_start+0xffffeec8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 40249bc:	0005883a 	mov	r2,zero
}
 40249c0:	e037883a 	mov	sp,fp
 40249c4:	dfc00117 	ldw	ra,4(sp)
 40249c8:	df000017 	ldw	fp,0(sp)
 40249cc:	dec00204 	addi	sp,sp,8
 40249d0:	f800283a 	ret

040249d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40249d4:	deffff04 	addi	sp,sp,-4
 40249d8:	df000015 	stw	fp,0(sp)
 40249dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40249e0:	0001883a 	nop
 40249e4:	e037883a 	mov	sp,fp
 40249e8:	df000017 	ldw	fp,0(sp)
 40249ec:	dec00104 	addi	sp,sp,4
 40249f0:	f800283a 	ret

040249f4 <alt_get_errno>:
 40249f4:	defffe04 	addi	sp,sp,-8
 40249f8:	dfc00115 	stw	ra,4(sp)
 40249fc:	df000015 	stw	fp,0(sp)
 4024a00:	d839883a 	mov	fp,sp
 4024a04:	d0a00917 	ldw	r2,-32732(gp)
 4024a08:	10000326 	beq	r2,zero,4024a18 <alt_get_errno+0x24>
 4024a0c:	d0a00917 	ldw	r2,-32732(gp)
 4024a10:	103ee83a 	callr	r2
 4024a14:	00000106 	br	4024a1c <alt_get_errno+0x28>
 4024a18:	d0a01104 	addi	r2,gp,-32700
 4024a1c:	e037883a 	mov	sp,fp
 4024a20:	dfc00117 	ldw	ra,4(sp)
 4024a24:	df000017 	ldw	fp,0(sp)
 4024a28:	dec00204 	addi	sp,sp,8
 4024a2c:	f800283a 	ret

04024a30 <alt_dev_llist_insert>:
 4024a30:	defffa04 	addi	sp,sp,-24
 4024a34:	dfc00515 	stw	ra,20(sp)
 4024a38:	df000415 	stw	fp,16(sp)
 4024a3c:	df000404 	addi	fp,sp,16
 4024a40:	e13ffe15 	stw	r4,-8(fp)
 4024a44:	e17fff15 	stw	r5,-4(fp)
 4024a48:	e0bffe17 	ldw	r2,-8(fp)
 4024a4c:	10000326 	beq	r2,zero,4024a5c <alt_dev_llist_insert+0x2c>
 4024a50:	e0bffe17 	ldw	r2,-8(fp)
 4024a54:	10800217 	ldw	r2,8(r2)
 4024a58:	1000061e 	bne	r2,zero,4024a74 <alt_dev_llist_insert+0x44>
 4024a5c:	40249f40 	call	40249f4 <alt_get_errno>
 4024a60:	1007883a 	mov	r3,r2
 4024a64:	00800584 	movi	r2,22
 4024a68:	18800015 	stw	r2,0(r3)
 4024a6c:	00bffa84 	movi	r2,-22
 4024a70:	00001306 	br	4024ac0 <alt_dev_llist_insert+0x90>
 4024a74:	e0bffe17 	ldw	r2,-8(fp)
 4024a78:	e0ffff17 	ldw	r3,-4(fp)
 4024a7c:	e0fffc15 	stw	r3,-16(fp)
 4024a80:	e0bffd15 	stw	r2,-12(fp)
 4024a84:	e0bffd17 	ldw	r2,-12(fp)
 4024a88:	e0fffc17 	ldw	r3,-16(fp)
 4024a8c:	10c00115 	stw	r3,4(r2)
 4024a90:	e0bffc17 	ldw	r2,-16(fp)
 4024a94:	10c00017 	ldw	r3,0(r2)
 4024a98:	e0bffd17 	ldw	r2,-12(fp)
 4024a9c:	10c00015 	stw	r3,0(r2)
 4024aa0:	e0bffc17 	ldw	r2,-16(fp)
 4024aa4:	10800017 	ldw	r2,0(r2)
 4024aa8:	e0fffd17 	ldw	r3,-12(fp)
 4024aac:	10c00115 	stw	r3,4(r2)
 4024ab0:	e0bffc17 	ldw	r2,-16(fp)
 4024ab4:	e0fffd17 	ldw	r3,-12(fp)
 4024ab8:	10c00015 	stw	r3,0(r2)
 4024abc:	0005883a 	mov	r2,zero
 4024ac0:	e037883a 	mov	sp,fp
 4024ac4:	dfc00117 	ldw	ra,4(sp)
 4024ac8:	df000017 	ldw	fp,0(sp)
 4024acc:	dec00204 	addi	sp,sp,8
 4024ad0:	f800283a 	ret

04024ad4 <_do_ctors>:
 4024ad4:	defffd04 	addi	sp,sp,-12
 4024ad8:	dfc00215 	stw	ra,8(sp)
 4024adc:	df000115 	stw	fp,4(sp)
 4024ae0:	df000104 	addi	fp,sp,4
 4024ae4:	008100b4 	movhi	r2,1026
 4024ae8:	1096a204 	addi	r2,r2,23176
 4024aec:	e0bfff15 	stw	r2,-4(fp)
 4024af0:	00000606 	br	4024b0c <_do_ctors+0x38>
 4024af4:	e0bfff17 	ldw	r2,-4(fp)
 4024af8:	10800017 	ldw	r2,0(r2)
 4024afc:	103ee83a 	callr	r2
 4024b00:	e0bfff17 	ldw	r2,-4(fp)
 4024b04:	10bfff04 	addi	r2,r2,-4
 4024b08:	e0bfff15 	stw	r2,-4(fp)
 4024b0c:	e0ffff17 	ldw	r3,-4(fp)
 4024b10:	008100b4 	movhi	r2,1026
 4024b14:	1096a304 	addi	r2,r2,23180
 4024b18:	18bff62e 	bgeu	r3,r2,4024af4 <__flash_rwdata_start+0xfffff008>
 4024b1c:	0001883a 	nop
 4024b20:	e037883a 	mov	sp,fp
 4024b24:	dfc00117 	ldw	ra,4(sp)
 4024b28:	df000017 	ldw	fp,0(sp)
 4024b2c:	dec00204 	addi	sp,sp,8
 4024b30:	f800283a 	ret

04024b34 <_do_dtors>:
 4024b34:	defffd04 	addi	sp,sp,-12
 4024b38:	dfc00215 	stw	ra,8(sp)
 4024b3c:	df000115 	stw	fp,4(sp)
 4024b40:	df000104 	addi	fp,sp,4
 4024b44:	008100b4 	movhi	r2,1026
 4024b48:	1096a204 	addi	r2,r2,23176
 4024b4c:	e0bfff15 	stw	r2,-4(fp)
 4024b50:	00000606 	br	4024b6c <_do_dtors+0x38>
 4024b54:	e0bfff17 	ldw	r2,-4(fp)
 4024b58:	10800017 	ldw	r2,0(r2)
 4024b5c:	103ee83a 	callr	r2
 4024b60:	e0bfff17 	ldw	r2,-4(fp)
 4024b64:	10bfff04 	addi	r2,r2,-4
 4024b68:	e0bfff15 	stw	r2,-4(fp)
 4024b6c:	e0ffff17 	ldw	r3,-4(fp)
 4024b70:	008100b4 	movhi	r2,1026
 4024b74:	1096a304 	addi	r2,r2,23180
 4024b78:	18bff62e 	bgeu	r3,r2,4024b54 <__flash_rwdata_start+0xfffff068>
 4024b7c:	0001883a 	nop
 4024b80:	e037883a 	mov	sp,fp
 4024b84:	dfc00117 	ldw	ra,4(sp)
 4024b88:	df000017 	ldw	fp,0(sp)
 4024b8c:	dec00204 	addi	sp,sp,8
 4024b90:	f800283a 	ret

04024b94 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4024b94:	deffff04 	addi	sp,sp,-4
 4024b98:	df000015 	stw	fp,0(sp)
 4024b9c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4024ba0:	0001883a 	nop
 4024ba4:	e037883a 	mov	sp,fp
 4024ba8:	df000017 	ldw	fp,0(sp)
 4024bac:	dec00104 	addi	sp,sp,4
 4024bb0:	f800283a 	ret

04024bb4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4024bb4:	defff904 	addi	sp,sp,-28
 4024bb8:	dfc00615 	stw	ra,24(sp)
 4024bbc:	df000515 	stw	fp,20(sp)
 4024bc0:	df000504 	addi	fp,sp,20
 4024bc4:	e13ffc15 	stw	r4,-16(fp)
 4024bc8:	e17ffd15 	stw	r5,-12(fp)
 4024bcc:	e1bffe15 	stw	r6,-8(fp)
 4024bd0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4024bd4:	e0800217 	ldw	r2,8(fp)
 4024bd8:	d8800015 	stw	r2,0(sp)
 4024bdc:	e1ffff17 	ldw	r7,-4(fp)
 4024be0:	e1bffe17 	ldw	r6,-8(fp)
 4024be4:	e17ffd17 	ldw	r5,-12(fp)
 4024be8:	e13ffc17 	ldw	r4,-16(fp)
 4024bec:	4024d640 	call	4024d64 <alt_iic_isr_register>
}  
 4024bf0:	e037883a 	mov	sp,fp
 4024bf4:	dfc00117 	ldw	ra,4(sp)
 4024bf8:	df000017 	ldw	fp,0(sp)
 4024bfc:	dec00204 	addi	sp,sp,8
 4024c00:	f800283a 	ret

04024c04 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4024c04:	defff904 	addi	sp,sp,-28
 4024c08:	df000615 	stw	fp,24(sp)
 4024c0c:	df000604 	addi	fp,sp,24
 4024c10:	e13ffe15 	stw	r4,-8(fp)
 4024c14:	e17fff15 	stw	r5,-4(fp)
 4024c18:	e0bfff17 	ldw	r2,-4(fp)
 4024c1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024c20:	0005303a 	rdctl	r2,status
 4024c24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024c28:	e0fffb17 	ldw	r3,-20(fp)
 4024c2c:	00bfff84 	movi	r2,-2
 4024c30:	1884703a 	and	r2,r3,r2
 4024c34:	1001703a 	wrctl	status,r2
  
  return context;
 4024c38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4024c3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4024c40:	00c00044 	movi	r3,1
 4024c44:	e0bffa17 	ldw	r2,-24(fp)
 4024c48:	1884983a 	sll	r2,r3,r2
 4024c4c:	1007883a 	mov	r3,r2
 4024c50:	d0a01517 	ldw	r2,-32684(gp)
 4024c54:	1884b03a 	or	r2,r3,r2
 4024c58:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4024c5c:	d0a01517 	ldw	r2,-32684(gp)
 4024c60:	100170fa 	wrctl	ienable,r2
 4024c64:	e0bffc17 	ldw	r2,-16(fp)
 4024c68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024c6c:	e0bffd17 	ldw	r2,-12(fp)
 4024c70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4024c74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4024c78:	0001883a 	nop
}
 4024c7c:	e037883a 	mov	sp,fp
 4024c80:	df000017 	ldw	fp,0(sp)
 4024c84:	dec00104 	addi	sp,sp,4
 4024c88:	f800283a 	ret

04024c8c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4024c8c:	defff904 	addi	sp,sp,-28
 4024c90:	df000615 	stw	fp,24(sp)
 4024c94:	df000604 	addi	fp,sp,24
 4024c98:	e13ffe15 	stw	r4,-8(fp)
 4024c9c:	e17fff15 	stw	r5,-4(fp)
 4024ca0:	e0bfff17 	ldw	r2,-4(fp)
 4024ca4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024ca8:	0005303a 	rdctl	r2,status
 4024cac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024cb0:	e0fffb17 	ldw	r3,-20(fp)
 4024cb4:	00bfff84 	movi	r2,-2
 4024cb8:	1884703a 	and	r2,r3,r2
 4024cbc:	1001703a 	wrctl	status,r2
  
  return context;
 4024cc0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4024cc4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4024cc8:	00c00044 	movi	r3,1
 4024ccc:	e0bffa17 	ldw	r2,-24(fp)
 4024cd0:	1884983a 	sll	r2,r3,r2
 4024cd4:	0084303a 	nor	r2,zero,r2
 4024cd8:	1007883a 	mov	r3,r2
 4024cdc:	d0a01517 	ldw	r2,-32684(gp)
 4024ce0:	1884703a 	and	r2,r3,r2
 4024ce4:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4024ce8:	d0a01517 	ldw	r2,-32684(gp)
 4024cec:	100170fa 	wrctl	ienable,r2
 4024cf0:	e0bffc17 	ldw	r2,-16(fp)
 4024cf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024cf8:	e0bffd17 	ldw	r2,-12(fp)
 4024cfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4024d00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4024d04:	0001883a 	nop
}
 4024d08:	e037883a 	mov	sp,fp
 4024d0c:	df000017 	ldw	fp,0(sp)
 4024d10:	dec00104 	addi	sp,sp,4
 4024d14:	f800283a 	ret

04024d18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4024d18:	defffc04 	addi	sp,sp,-16
 4024d1c:	df000315 	stw	fp,12(sp)
 4024d20:	df000304 	addi	fp,sp,12
 4024d24:	e13ffe15 	stw	r4,-8(fp)
 4024d28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4024d2c:	000530fa 	rdctl	r2,ienable
 4024d30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4024d34:	00c00044 	movi	r3,1
 4024d38:	e0bfff17 	ldw	r2,-4(fp)
 4024d3c:	1884983a 	sll	r2,r3,r2
 4024d40:	1007883a 	mov	r3,r2
 4024d44:	e0bffd17 	ldw	r2,-12(fp)
 4024d48:	1884703a 	and	r2,r3,r2
 4024d4c:	1004c03a 	cmpne	r2,r2,zero
 4024d50:	10803fcc 	andi	r2,r2,255
}
 4024d54:	e037883a 	mov	sp,fp
 4024d58:	df000017 	ldw	fp,0(sp)
 4024d5c:	dec00104 	addi	sp,sp,4
 4024d60:	f800283a 	ret

04024d64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4024d64:	defff504 	addi	sp,sp,-44
 4024d68:	dfc00a15 	stw	ra,40(sp)
 4024d6c:	df000915 	stw	fp,36(sp)
 4024d70:	df000904 	addi	fp,sp,36
 4024d74:	e13ffc15 	stw	r4,-16(fp)
 4024d78:	e17ffd15 	stw	r5,-12(fp)
 4024d7c:	e1bffe15 	stw	r6,-8(fp)
 4024d80:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4024d84:	00bffa84 	movi	r2,-22
 4024d88:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4024d8c:	e0bffd17 	ldw	r2,-12(fp)
 4024d90:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4024d94:	e0bff817 	ldw	r2,-32(fp)
 4024d98:	10800808 	cmpgei	r2,r2,32
 4024d9c:	1000271e 	bne	r2,zero,4024e3c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4024da0:	0005303a 	rdctl	r2,status
 4024da4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4024da8:	e0fffb17 	ldw	r3,-20(fp)
 4024dac:	00bfff84 	movi	r2,-2
 4024db0:	1884703a 	and	r2,r3,r2
 4024db4:	1001703a 	wrctl	status,r2
  
  return context;
 4024db8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4024dbc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4024dc0:	00800034 	movhi	r2,0
 4024dc4:	1086d204 	addi	r2,r2,6984
 4024dc8:	e0fff817 	ldw	r3,-32(fp)
 4024dcc:	180690fa 	slli	r3,r3,3
 4024dd0:	10c5883a 	add	r2,r2,r3
 4024dd4:	e0fffe17 	ldw	r3,-8(fp)
 4024dd8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4024ddc:	00800034 	movhi	r2,0
 4024de0:	1086d204 	addi	r2,r2,6984
 4024de4:	e0fff817 	ldw	r3,-32(fp)
 4024de8:	180690fa 	slli	r3,r3,3
 4024dec:	10c5883a 	add	r2,r2,r3
 4024df0:	10800104 	addi	r2,r2,4
 4024df4:	e0ffff17 	ldw	r3,-4(fp)
 4024df8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4024dfc:	e0bffe17 	ldw	r2,-8(fp)
 4024e00:	10000526 	beq	r2,zero,4024e18 <alt_iic_isr_register+0xb4>
 4024e04:	e0bff817 	ldw	r2,-32(fp)
 4024e08:	100b883a 	mov	r5,r2
 4024e0c:	e13ffc17 	ldw	r4,-16(fp)
 4024e10:	4024c040 	call	4024c04 <alt_ic_irq_enable>
 4024e14:	00000406 	br	4024e28 <alt_iic_isr_register+0xc4>
 4024e18:	e0bff817 	ldw	r2,-32(fp)
 4024e1c:	100b883a 	mov	r5,r2
 4024e20:	e13ffc17 	ldw	r4,-16(fp)
 4024e24:	4024c8c0 	call	4024c8c <alt_ic_irq_disable>
 4024e28:	e0bff715 	stw	r2,-36(fp)
 4024e2c:	e0bffa17 	ldw	r2,-24(fp)
 4024e30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024e34:	e0bff917 	ldw	r2,-28(fp)
 4024e38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4024e3c:	e0bff717 	ldw	r2,-36(fp)
}
 4024e40:	e037883a 	mov	sp,fp
 4024e44:	dfc00117 	ldw	ra,4(sp)
 4024e48:	df000017 	ldw	fp,0(sp)
 4024e4c:	dec00204 	addi	sp,sp,8
 4024e50:	f800283a 	ret

04024e54 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4024e54:	defff804 	addi	sp,sp,-32
 4024e58:	dfc00715 	stw	ra,28(sp)
 4024e5c:	df000615 	stw	fp,24(sp)
 4024e60:	dc000515 	stw	r16,20(sp)
 4024e64:	df000604 	addi	fp,sp,24
 4024e68:	e13ffb15 	stw	r4,-20(fp)
 4024e6c:	e17ffc15 	stw	r5,-16(fp)
 4024e70:	e1bffd15 	stw	r6,-12(fp)
 4024e74:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4024e78:	e1bffe17 	ldw	r6,-8(fp)
 4024e7c:	e17ffd17 	ldw	r5,-12(fp)
 4024e80:	e13ffc17 	ldw	r4,-16(fp)
 4024e84:	40250dc0 	call	40250dc <open>
 4024e88:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4024e8c:	e0bffa17 	ldw	r2,-24(fp)
 4024e90:	10002216 	blt	r2,zero,4024f1c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4024e94:	04000034 	movhi	r16,0
 4024e98:	84023704 	addi	r16,r16,2268
 4024e9c:	e0bffa17 	ldw	r2,-24(fp)
 4024ea0:	01400304 	movi	r5,12
 4024ea4:	1009883a 	mov	r4,r2
 4024ea8:	40231380 	call	4023138 <__mulsi3>
 4024eac:	8085883a 	add	r2,r16,r2
 4024eb0:	10c00017 	ldw	r3,0(r2)
 4024eb4:	e0bffb17 	ldw	r2,-20(fp)
 4024eb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4024ebc:	04000034 	movhi	r16,0
 4024ec0:	84023704 	addi	r16,r16,2268
 4024ec4:	e0bffa17 	ldw	r2,-24(fp)
 4024ec8:	01400304 	movi	r5,12
 4024ecc:	1009883a 	mov	r4,r2
 4024ed0:	40231380 	call	4023138 <__mulsi3>
 4024ed4:	8085883a 	add	r2,r16,r2
 4024ed8:	10800104 	addi	r2,r2,4
 4024edc:	10c00017 	ldw	r3,0(r2)
 4024ee0:	e0bffb17 	ldw	r2,-20(fp)
 4024ee4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4024ee8:	04000034 	movhi	r16,0
 4024eec:	84023704 	addi	r16,r16,2268
 4024ef0:	e0bffa17 	ldw	r2,-24(fp)
 4024ef4:	01400304 	movi	r5,12
 4024ef8:	1009883a 	mov	r4,r2
 4024efc:	40231380 	call	4023138 <__mulsi3>
 4024f00:	8085883a 	add	r2,r16,r2
 4024f04:	10800204 	addi	r2,r2,8
 4024f08:	10c00017 	ldw	r3,0(r2)
 4024f0c:	e0bffb17 	ldw	r2,-20(fp)
 4024f10:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4024f14:	e13ffa17 	ldw	r4,-24(fp)
 4024f18:	40238840 	call	4023884 <alt_release_fd>
  }
} 
 4024f1c:	0001883a 	nop
 4024f20:	e6ffff04 	addi	sp,fp,-4
 4024f24:	dfc00217 	ldw	ra,8(sp)
 4024f28:	df000117 	ldw	fp,4(sp)
 4024f2c:	dc000017 	ldw	r16,0(sp)
 4024f30:	dec00304 	addi	sp,sp,12
 4024f34:	f800283a 	ret

04024f38 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4024f38:	defffb04 	addi	sp,sp,-20
 4024f3c:	dfc00415 	stw	ra,16(sp)
 4024f40:	df000315 	stw	fp,12(sp)
 4024f44:	df000304 	addi	fp,sp,12
 4024f48:	e13ffd15 	stw	r4,-12(fp)
 4024f4c:	e17ffe15 	stw	r5,-8(fp)
 4024f50:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4024f54:	01c07fc4 	movi	r7,511
 4024f58:	01800044 	movi	r6,1
 4024f5c:	e17ffd17 	ldw	r5,-12(fp)
 4024f60:	01000034 	movhi	r4,0
 4024f64:	21023a04 	addi	r4,r4,2280
 4024f68:	4024e540 	call	4024e54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4024f6c:	01c07fc4 	movi	r7,511
 4024f70:	000d883a 	mov	r6,zero
 4024f74:	e17ffe17 	ldw	r5,-8(fp)
 4024f78:	01000034 	movhi	r4,0
 4024f7c:	21023704 	addi	r4,r4,2268
 4024f80:	4024e540 	call	4024e54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4024f84:	01c07fc4 	movi	r7,511
 4024f88:	01800044 	movi	r6,1
 4024f8c:	e17fff17 	ldw	r5,-4(fp)
 4024f90:	01000034 	movhi	r4,0
 4024f94:	21023d04 	addi	r4,r4,2292
 4024f98:	4024e540 	call	4024e54 <alt_open_fd>
}  
 4024f9c:	0001883a 	nop
 4024fa0:	e037883a 	mov	sp,fp
 4024fa4:	dfc00117 	ldw	ra,4(sp)
 4024fa8:	df000017 	ldw	fp,0(sp)
 4024fac:	dec00204 	addi	sp,sp,8
 4024fb0:	f800283a 	ret

04024fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4024fb4:	defffe04 	addi	sp,sp,-8
 4024fb8:	dfc00115 	stw	ra,4(sp)
 4024fbc:	df000015 	stw	fp,0(sp)
 4024fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4024fc4:	d0a00917 	ldw	r2,-32732(gp)
 4024fc8:	10000326 	beq	r2,zero,4024fd8 <alt_get_errno+0x24>
 4024fcc:	d0a00917 	ldw	r2,-32732(gp)
 4024fd0:	103ee83a 	callr	r2
 4024fd4:	00000106 	br	4024fdc <alt_get_errno+0x28>
 4024fd8:	d0a01104 	addi	r2,gp,-32700
}
 4024fdc:	e037883a 	mov	sp,fp
 4024fe0:	dfc00117 	ldw	ra,4(sp)
 4024fe4:	df000017 	ldw	fp,0(sp)
 4024fe8:	dec00204 	addi	sp,sp,8
 4024fec:	f800283a 	ret

04024ff0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4024ff0:	defffb04 	addi	sp,sp,-20
 4024ff4:	dfc00415 	stw	ra,16(sp)
 4024ff8:	df000315 	stw	fp,12(sp)
 4024ffc:	dc000215 	stw	r16,8(sp)
 4025000:	df000304 	addi	fp,sp,12
 4025004:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4025008:	e0bffe17 	ldw	r2,-8(fp)
 402500c:	10800217 	ldw	r2,8(r2)
 4025010:	10d00034 	orhi	r3,r2,16384
 4025014:	e0bffe17 	ldw	r2,-8(fp)
 4025018:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402501c:	e03ffd15 	stw	zero,-12(fp)
 4025020:	00002306 	br	40250b0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4025024:	04000034 	movhi	r16,0
 4025028:	84023704 	addi	r16,r16,2268
 402502c:	e0bffd17 	ldw	r2,-12(fp)
 4025030:	01400304 	movi	r5,12
 4025034:	1009883a 	mov	r4,r2
 4025038:	40231380 	call	4023138 <__mulsi3>
 402503c:	8085883a 	add	r2,r16,r2
 4025040:	10c00017 	ldw	r3,0(r2)
 4025044:	e0bffe17 	ldw	r2,-8(fp)
 4025048:	10800017 	ldw	r2,0(r2)
 402504c:	1880151e 	bne	r3,r2,40250a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4025050:	04000034 	movhi	r16,0
 4025054:	84023704 	addi	r16,r16,2268
 4025058:	e0bffd17 	ldw	r2,-12(fp)
 402505c:	01400304 	movi	r5,12
 4025060:	1009883a 	mov	r4,r2
 4025064:	40231380 	call	4023138 <__mulsi3>
 4025068:	8085883a 	add	r2,r16,r2
 402506c:	10800204 	addi	r2,r2,8
 4025070:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4025074:	10000b0e 	bge	r2,zero,40250a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4025078:	01400304 	movi	r5,12
 402507c:	e13ffd17 	ldw	r4,-12(fp)
 4025080:	40231380 	call	4023138 <__mulsi3>
 4025084:	1007883a 	mov	r3,r2
 4025088:	00800034 	movhi	r2,0
 402508c:	10823704 	addi	r2,r2,2268
 4025090:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4025094:	e0bffe17 	ldw	r2,-8(fp)
 4025098:	18800226 	beq	r3,r2,40250a4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 402509c:	00bffcc4 	movi	r2,-13
 40250a0:	00000806 	br	40250c4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40250a4:	e0bffd17 	ldw	r2,-12(fp)
 40250a8:	10800044 	addi	r2,r2,1
 40250ac:	e0bffd15 	stw	r2,-12(fp)
 40250b0:	d0a00817 	ldw	r2,-32736(gp)
 40250b4:	1007883a 	mov	r3,r2
 40250b8:	e0bffd17 	ldw	r2,-12(fp)
 40250bc:	18bfd92e 	bgeu	r3,r2,4025024 <__flash_rwdata_start+0xfffff538>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40250c0:	0005883a 	mov	r2,zero
}
 40250c4:	e6ffff04 	addi	sp,fp,-4
 40250c8:	dfc00217 	ldw	ra,8(sp)
 40250cc:	df000117 	ldw	fp,4(sp)
 40250d0:	dc000017 	ldw	r16,0(sp)
 40250d4:	dec00304 	addi	sp,sp,12
 40250d8:	f800283a 	ret

040250dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40250dc:	defff604 	addi	sp,sp,-40
 40250e0:	dfc00915 	stw	ra,36(sp)
 40250e4:	df000815 	stw	fp,32(sp)
 40250e8:	df000804 	addi	fp,sp,32
 40250ec:	e13ffd15 	stw	r4,-12(fp)
 40250f0:	e17ffe15 	stw	r5,-8(fp)
 40250f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40250f8:	00bfffc4 	movi	r2,-1
 40250fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4025100:	00bffb44 	movi	r2,-19
 4025104:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4025108:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 402510c:	d1600604 	addi	r5,gp,-32744
 4025110:	e13ffd17 	ldw	r4,-12(fp)
 4025114:	40254000 	call	4025400 <alt_find_dev>
 4025118:	e0bff815 	stw	r2,-32(fp)
 402511c:	e0bff817 	ldw	r2,-32(fp)
 4025120:	1000051e 	bne	r2,zero,4025138 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4025124:	e13ffd17 	ldw	r4,-12(fp)
 4025128:	40254900 	call	4025490 <alt_find_file>
 402512c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4025130:	00800044 	movi	r2,1
 4025134:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4025138:	e0bff817 	ldw	r2,-32(fp)
 402513c:	10002b26 	beq	r2,zero,40251ec <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4025140:	e13ff817 	ldw	r4,-32(fp)
 4025144:	40255980 	call	4025598 <alt_get_fd>
 4025148:	e0bff915 	stw	r2,-28(fp)
 402514c:	e0bff917 	ldw	r2,-28(fp)
 4025150:	1000030e 	bge	r2,zero,4025160 <open+0x84>
    {
      status = index;
 4025154:	e0bff917 	ldw	r2,-28(fp)
 4025158:	e0bffa15 	stw	r2,-24(fp)
 402515c:	00002506 	br	40251f4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4025160:	01400304 	movi	r5,12
 4025164:	e13ff917 	ldw	r4,-28(fp)
 4025168:	40231380 	call	4023138 <__mulsi3>
 402516c:	1007883a 	mov	r3,r2
 4025170:	00800034 	movhi	r2,0
 4025174:	10823704 	addi	r2,r2,2268
 4025178:	1885883a 	add	r2,r3,r2
 402517c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4025180:	e0fffe17 	ldw	r3,-8(fp)
 4025184:	00900034 	movhi	r2,16384
 4025188:	10bfffc4 	addi	r2,r2,-1
 402518c:	1886703a 	and	r3,r3,r2
 4025190:	e0bffc17 	ldw	r2,-16(fp)
 4025194:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4025198:	e0bffb17 	ldw	r2,-20(fp)
 402519c:	1000051e 	bne	r2,zero,40251b4 <open+0xd8>
 40251a0:	e13ffc17 	ldw	r4,-16(fp)
 40251a4:	4024ff00 	call	4024ff0 <alt_file_locked>
 40251a8:	e0bffa15 	stw	r2,-24(fp)
 40251ac:	e0bffa17 	ldw	r2,-24(fp)
 40251b0:	10001016 	blt	r2,zero,40251f4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40251b4:	e0bff817 	ldw	r2,-32(fp)
 40251b8:	10800317 	ldw	r2,12(r2)
 40251bc:	10000826 	beq	r2,zero,40251e0 <open+0x104>
 40251c0:	e0bff817 	ldw	r2,-32(fp)
 40251c4:	10800317 	ldw	r2,12(r2)
 40251c8:	e1ffff17 	ldw	r7,-4(fp)
 40251cc:	e1bffe17 	ldw	r6,-8(fp)
 40251d0:	e17ffd17 	ldw	r5,-12(fp)
 40251d4:	e13ffc17 	ldw	r4,-16(fp)
 40251d8:	103ee83a 	callr	r2
 40251dc:	00000106 	br	40251e4 <open+0x108>
 40251e0:	0005883a 	mov	r2,zero
 40251e4:	e0bffa15 	stw	r2,-24(fp)
 40251e8:	00000206 	br	40251f4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40251ec:	00bffb44 	movi	r2,-19
 40251f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40251f4:	e0bffa17 	ldw	r2,-24(fp)
 40251f8:	1000090e 	bge	r2,zero,4025220 <open+0x144>
  {
    alt_release_fd (index);  
 40251fc:	e13ff917 	ldw	r4,-28(fp)
 4025200:	40238840 	call	4023884 <alt_release_fd>
    ALT_ERRNO = -status;
 4025204:	4024fb40 	call	4024fb4 <alt_get_errno>
 4025208:	1007883a 	mov	r3,r2
 402520c:	e0bffa17 	ldw	r2,-24(fp)
 4025210:	0085c83a 	sub	r2,zero,r2
 4025214:	18800015 	stw	r2,0(r3)
    return -1;
 4025218:	00bfffc4 	movi	r2,-1
 402521c:	00000106 	br	4025224 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4025220:	e0bff917 	ldw	r2,-28(fp)
}
 4025224:	e037883a 	mov	sp,fp
 4025228:	dfc00117 	ldw	ra,4(sp)
 402522c:	df000017 	ldw	fp,0(sp)
 4025230:	dec00204 	addi	sp,sp,8
 4025234:	f800283a 	ret

04025238 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4025238:	defffa04 	addi	sp,sp,-24
 402523c:	df000515 	stw	fp,20(sp)
 4025240:	df000504 	addi	fp,sp,20
 4025244:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4025248:	0005303a 	rdctl	r2,status
 402524c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4025250:	e0fffc17 	ldw	r3,-16(fp)
 4025254:	00bfff84 	movi	r2,-2
 4025258:	1884703a 	and	r2,r3,r2
 402525c:	1001703a 	wrctl	status,r2
  
  return context;
 4025260:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4025264:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4025268:	e0bfff17 	ldw	r2,-4(fp)
 402526c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4025270:	e0bffd17 	ldw	r2,-12(fp)
 4025274:	10800017 	ldw	r2,0(r2)
 4025278:	e0fffd17 	ldw	r3,-12(fp)
 402527c:	18c00117 	ldw	r3,4(r3)
 4025280:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4025284:	e0bffd17 	ldw	r2,-12(fp)
 4025288:	10800117 	ldw	r2,4(r2)
 402528c:	e0fffd17 	ldw	r3,-12(fp)
 4025290:	18c00017 	ldw	r3,0(r3)
 4025294:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4025298:	e0bffd17 	ldw	r2,-12(fp)
 402529c:	e0fffd17 	ldw	r3,-12(fp)
 40252a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40252a4:	e0bffd17 	ldw	r2,-12(fp)
 40252a8:	e0fffd17 	ldw	r3,-12(fp)
 40252ac:	10c00015 	stw	r3,0(r2)
 40252b0:	e0bffb17 	ldw	r2,-20(fp)
 40252b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40252b8:	e0bffe17 	ldw	r2,-8(fp)
 40252bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40252c0:	0001883a 	nop
 40252c4:	e037883a 	mov	sp,fp
 40252c8:	df000017 	ldw	fp,0(sp)
 40252cc:	dec00104 	addi	sp,sp,4
 40252d0:	f800283a 	ret

040252d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40252d4:	defffb04 	addi	sp,sp,-20
 40252d8:	dfc00415 	stw	ra,16(sp)
 40252dc:	df000315 	stw	fp,12(sp)
 40252e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40252e4:	d0a00c17 	ldw	r2,-32720(gp)
 40252e8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40252ec:	d0a01717 	ldw	r2,-32676(gp)
 40252f0:	10800044 	addi	r2,r2,1
 40252f4:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40252f8:	00002e06 	br	40253b4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40252fc:	e0bffd17 	ldw	r2,-12(fp)
 4025300:	10800017 	ldw	r2,0(r2)
 4025304:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4025308:	e0bffd17 	ldw	r2,-12(fp)
 402530c:	10800403 	ldbu	r2,16(r2)
 4025310:	10803fcc 	andi	r2,r2,255
 4025314:	10000426 	beq	r2,zero,4025328 <alt_tick+0x54>
 4025318:	d0a01717 	ldw	r2,-32676(gp)
 402531c:	1000021e 	bne	r2,zero,4025328 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4025320:	e0bffd17 	ldw	r2,-12(fp)
 4025324:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4025328:	e0bffd17 	ldw	r2,-12(fp)
 402532c:	10800217 	ldw	r2,8(r2)
 4025330:	d0e01717 	ldw	r3,-32676(gp)
 4025334:	18801d36 	bltu	r3,r2,40253ac <alt_tick+0xd8>
 4025338:	e0bffd17 	ldw	r2,-12(fp)
 402533c:	10800403 	ldbu	r2,16(r2)
 4025340:	10803fcc 	andi	r2,r2,255
 4025344:	1000191e 	bne	r2,zero,40253ac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4025348:	e0bffd17 	ldw	r2,-12(fp)
 402534c:	10800317 	ldw	r2,12(r2)
 4025350:	e0fffd17 	ldw	r3,-12(fp)
 4025354:	18c00517 	ldw	r3,20(r3)
 4025358:	1809883a 	mov	r4,r3
 402535c:	103ee83a 	callr	r2
 4025360:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4025364:	e0bfff17 	ldw	r2,-4(fp)
 4025368:	1000031e 	bne	r2,zero,4025378 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 402536c:	e13ffd17 	ldw	r4,-12(fp)
 4025370:	40252380 	call	4025238 <alt_alarm_stop>
 4025374:	00000d06 	br	40253ac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4025378:	e0bffd17 	ldw	r2,-12(fp)
 402537c:	10c00217 	ldw	r3,8(r2)
 4025380:	e0bfff17 	ldw	r2,-4(fp)
 4025384:	1887883a 	add	r3,r3,r2
 4025388:	e0bffd17 	ldw	r2,-12(fp)
 402538c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4025390:	e0bffd17 	ldw	r2,-12(fp)
 4025394:	10c00217 	ldw	r3,8(r2)
 4025398:	d0a01717 	ldw	r2,-32676(gp)
 402539c:	1880032e 	bgeu	r3,r2,40253ac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40253a0:	e0bffd17 	ldw	r2,-12(fp)
 40253a4:	00c00044 	movi	r3,1
 40253a8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40253ac:	e0bffe17 	ldw	r2,-8(fp)
 40253b0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40253b4:	e0fffd17 	ldw	r3,-12(fp)
 40253b8:	d0a00c04 	addi	r2,gp,-32720
 40253bc:	18bfcf1e 	bne	r3,r2,40252fc <__flash_rwdata_start+0xfffff810>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40253c0:	0001883a 	nop
}
 40253c4:	0001883a 	nop
 40253c8:	e037883a 	mov	sp,fp
 40253cc:	dfc00117 	ldw	ra,4(sp)
 40253d0:	df000017 	ldw	fp,0(sp)
 40253d4:	dec00204 	addi	sp,sp,8
 40253d8:	f800283a 	ret

040253dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40253dc:	deffff04 	addi	sp,sp,-4
 40253e0:	df000015 	stw	fp,0(sp)
 40253e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40253e8:	000170fa 	wrctl	ienable,zero
}
 40253ec:	0001883a 	nop
 40253f0:	e037883a 	mov	sp,fp
 40253f4:	df000017 	ldw	fp,0(sp)
 40253f8:	dec00104 	addi	sp,sp,4
 40253fc:	f800283a 	ret

04025400 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4025400:	defffa04 	addi	sp,sp,-24
 4025404:	dfc00515 	stw	ra,20(sp)
 4025408:	df000415 	stw	fp,16(sp)
 402540c:	df000404 	addi	fp,sp,16
 4025410:	e13ffe15 	stw	r4,-8(fp)
 4025414:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4025418:	e0bfff17 	ldw	r2,-4(fp)
 402541c:	10800017 	ldw	r2,0(r2)
 4025420:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4025424:	e13ffe17 	ldw	r4,-8(fp)
 4025428:	40204280 	call	4020428 <strlen>
 402542c:	10800044 	addi	r2,r2,1
 4025430:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4025434:	00000d06 	br	402546c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4025438:	e0bffc17 	ldw	r2,-16(fp)
 402543c:	10800217 	ldw	r2,8(r2)
 4025440:	e0fffd17 	ldw	r3,-12(fp)
 4025444:	180d883a 	mov	r6,r3
 4025448:	e17ffe17 	ldw	r5,-8(fp)
 402544c:	1009883a 	mov	r4,r2
 4025450:	40257440 	call	4025744 <memcmp>
 4025454:	1000021e 	bne	r2,zero,4025460 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4025458:	e0bffc17 	ldw	r2,-16(fp)
 402545c:	00000706 	br	402547c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4025460:	e0bffc17 	ldw	r2,-16(fp)
 4025464:	10800017 	ldw	r2,0(r2)
 4025468:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402546c:	e0fffc17 	ldw	r3,-16(fp)
 4025470:	e0bfff17 	ldw	r2,-4(fp)
 4025474:	18bff01e 	bne	r3,r2,4025438 <__flash_rwdata_start+0xfffff94c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4025478:	0005883a 	mov	r2,zero
}
 402547c:	e037883a 	mov	sp,fp
 4025480:	dfc00117 	ldw	ra,4(sp)
 4025484:	df000017 	ldw	fp,0(sp)
 4025488:	dec00204 	addi	sp,sp,8
 402548c:	f800283a 	ret

04025490 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4025490:	defffb04 	addi	sp,sp,-20
 4025494:	dfc00415 	stw	ra,16(sp)
 4025498:	df000315 	stw	fp,12(sp)
 402549c:	df000304 	addi	fp,sp,12
 40254a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40254a4:	d0a00417 	ldw	r2,-32752(gp)
 40254a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40254ac:	00003106 	br	4025574 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40254b0:	e0bffd17 	ldw	r2,-12(fp)
 40254b4:	10800217 	ldw	r2,8(r2)
 40254b8:	1009883a 	mov	r4,r2
 40254bc:	40204280 	call	4020428 <strlen>
 40254c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40254c4:	e0bffd17 	ldw	r2,-12(fp)
 40254c8:	10c00217 	ldw	r3,8(r2)
 40254cc:	e0bffe17 	ldw	r2,-8(fp)
 40254d0:	10bfffc4 	addi	r2,r2,-1
 40254d4:	1885883a 	add	r2,r3,r2
 40254d8:	10800003 	ldbu	r2,0(r2)
 40254dc:	10803fcc 	andi	r2,r2,255
 40254e0:	1080201c 	xori	r2,r2,128
 40254e4:	10bfe004 	addi	r2,r2,-128
 40254e8:	10800bd8 	cmpnei	r2,r2,47
 40254ec:	1000031e 	bne	r2,zero,40254fc <alt_find_file+0x6c>
    {
      len -= 1;
 40254f0:	e0bffe17 	ldw	r2,-8(fp)
 40254f4:	10bfffc4 	addi	r2,r2,-1
 40254f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40254fc:	e0bffe17 	ldw	r2,-8(fp)
 4025500:	e0ffff17 	ldw	r3,-4(fp)
 4025504:	1885883a 	add	r2,r3,r2
 4025508:	10800003 	ldbu	r2,0(r2)
 402550c:	10803fcc 	andi	r2,r2,255
 4025510:	1080201c 	xori	r2,r2,128
 4025514:	10bfe004 	addi	r2,r2,-128
 4025518:	10800be0 	cmpeqi	r2,r2,47
 402551c:	1000081e 	bne	r2,zero,4025540 <alt_find_file+0xb0>
 4025520:	e0bffe17 	ldw	r2,-8(fp)
 4025524:	e0ffff17 	ldw	r3,-4(fp)
 4025528:	1885883a 	add	r2,r3,r2
 402552c:	10800003 	ldbu	r2,0(r2)
 4025530:	10803fcc 	andi	r2,r2,255
 4025534:	1080201c 	xori	r2,r2,128
 4025538:	10bfe004 	addi	r2,r2,-128
 402553c:	10000a1e 	bne	r2,zero,4025568 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4025540:	e0bffd17 	ldw	r2,-12(fp)
 4025544:	10800217 	ldw	r2,8(r2)
 4025548:	e0fffe17 	ldw	r3,-8(fp)
 402554c:	180d883a 	mov	r6,r3
 4025550:	e17fff17 	ldw	r5,-4(fp)
 4025554:	1009883a 	mov	r4,r2
 4025558:	40257440 	call	4025744 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402555c:	1000021e 	bne	r2,zero,4025568 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4025560:	e0bffd17 	ldw	r2,-12(fp)
 4025564:	00000706 	br	4025584 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4025568:	e0bffd17 	ldw	r2,-12(fp)
 402556c:	10800017 	ldw	r2,0(r2)
 4025570:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4025574:	e0fffd17 	ldw	r3,-12(fp)
 4025578:	d0a00404 	addi	r2,gp,-32752
 402557c:	18bfcc1e 	bne	r3,r2,40254b0 <__flash_rwdata_start+0xfffff9c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4025580:	0005883a 	mov	r2,zero
}
 4025584:	e037883a 	mov	sp,fp
 4025588:	dfc00117 	ldw	ra,4(sp)
 402558c:	df000017 	ldw	fp,0(sp)
 4025590:	dec00204 	addi	sp,sp,8
 4025594:	f800283a 	ret

04025598 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4025598:	defffa04 	addi	sp,sp,-24
 402559c:	dfc00515 	stw	ra,20(sp)
 40255a0:	df000415 	stw	fp,16(sp)
 40255a4:	dc000315 	stw	r16,12(sp)
 40255a8:	df000404 	addi	fp,sp,16
 40255ac:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 40255b0:	00bffa04 	movi	r2,-24
 40255b4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40255b8:	e03ffc15 	stw	zero,-16(fp)
 40255bc:	00001d06 	br	4025634 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 40255c0:	04000034 	movhi	r16,0
 40255c4:	84023704 	addi	r16,r16,2268
 40255c8:	e0bffc17 	ldw	r2,-16(fp)
 40255cc:	01400304 	movi	r5,12
 40255d0:	1009883a 	mov	r4,r2
 40255d4:	40231380 	call	4023138 <__mulsi3>
 40255d8:	8085883a 	add	r2,r16,r2
 40255dc:	10800017 	ldw	r2,0(r2)
 40255e0:	1000111e 	bne	r2,zero,4025628 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 40255e4:	04000034 	movhi	r16,0
 40255e8:	84023704 	addi	r16,r16,2268
 40255ec:	e0bffc17 	ldw	r2,-16(fp)
 40255f0:	01400304 	movi	r5,12
 40255f4:	1009883a 	mov	r4,r2
 40255f8:	40231380 	call	4023138 <__mulsi3>
 40255fc:	8085883a 	add	r2,r16,r2
 4025600:	e0fffe17 	ldw	r3,-8(fp)
 4025604:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4025608:	d0e00817 	ldw	r3,-32736(gp)
 402560c:	e0bffc17 	ldw	r2,-16(fp)
 4025610:	1880020e 	bge	r3,r2,402561c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4025614:	e0bffc17 	ldw	r2,-16(fp)
 4025618:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 402561c:	e0bffc17 	ldw	r2,-16(fp)
 4025620:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4025624:	00000606 	br	4025640 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4025628:	e0bffc17 	ldw	r2,-16(fp)
 402562c:	10800044 	addi	r2,r2,1
 4025630:	e0bffc15 	stw	r2,-16(fp)
 4025634:	e0bffc17 	ldw	r2,-16(fp)
 4025638:	10800810 	cmplti	r2,r2,32
 402563c:	103fe01e 	bne	r2,zero,40255c0 <__flash_rwdata_start+0xfffffad4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4025640:	e0bffd17 	ldw	r2,-12(fp)
}
 4025644:	e6ffff04 	addi	sp,fp,-4
 4025648:	dfc00217 	ldw	ra,8(sp)
 402564c:	df000117 	ldw	fp,4(sp)
 4025650:	dc000017 	ldw	r16,0(sp)
 4025654:	dec00304 	addi	sp,sp,12
 4025658:	f800283a 	ret

0402565c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 402565c:	defffe04 	addi	sp,sp,-8
 4025660:	df000115 	stw	fp,4(sp)
 4025664:	df000104 	addi	fp,sp,4
 4025668:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 402566c:	e0bfff17 	ldw	r2,-4(fp)
 4025670:	10bffe84 	addi	r2,r2,-6
 4025674:	10c00428 	cmpgeui	r3,r2,16
 4025678:	18001a1e 	bne	r3,zero,40256e4 <alt_exception_cause_generated_bad_addr+0x88>
 402567c:	100690ba 	slli	r3,r2,2
 4025680:	008100b4 	movhi	r2,1026
 4025684:	1095a504 	addi	r2,r2,22164
 4025688:	1885883a 	add	r2,r3,r2
 402568c:	10800017 	ldw	r2,0(r2)
 4025690:	1000683a 	jmp	r2
 4025694:	040256d4 	movui	r16,2395
 4025698:	040256d4 	movui	r16,2395
 402569c:	040256e4 	muli	r16,zero,2395
 40256a0:	040256e4 	muli	r16,zero,2395
 40256a4:	040256e4 	muli	r16,zero,2395
 40256a8:	040256d4 	movui	r16,2395
 40256ac:	040256dc 	xori	r16,zero,2395
 40256b0:	040256e4 	muli	r16,zero,2395
 40256b4:	040256d4 	movui	r16,2395
 40256b8:	040256d4 	movui	r16,2395
 40256bc:	040256e4 	muli	r16,zero,2395
 40256c0:	040256d4 	movui	r16,2395
 40256c4:	040256dc 	xori	r16,zero,2395
 40256c8:	040256e4 	muli	r16,zero,2395
 40256cc:	040256e4 	muli	r16,zero,2395
 40256d0:	040256d4 	movui	r16,2395
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 40256d4:	00800044 	movi	r2,1
 40256d8:	00000306 	br	40256e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 40256dc:	0005883a 	mov	r2,zero
 40256e0:	00000106 	br	40256e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40256e4:	0005883a 	mov	r2,zero
  }
}
 40256e8:	e037883a 	mov	sp,fp
 40256ec:	df000017 	ldw	fp,0(sp)
 40256f0:	dec00104 	addi	sp,sp,4
 40256f4:	f800283a 	ret

040256f8 <atexit>:
 40256f8:	200b883a 	mov	r5,r4
 40256fc:	000f883a 	mov	r7,zero
 4025700:	000d883a 	mov	r6,zero
 4025704:	0009883a 	mov	r4,zero
 4025708:	40257c01 	jmpi	40257c0 <__register_exitproc>

0402570c <exit>:
 402570c:	defffe04 	addi	sp,sp,-8
 4025710:	000b883a 	mov	r5,zero
 4025714:	dc000015 	stw	r16,0(sp)
 4025718:	dfc00115 	stw	ra,4(sp)
 402571c:	2021883a 	mov	r16,r4
 4025720:	40258d80 	call	40258d8 <__call_exitprocs>
 4025724:	00800034 	movhi	r2,0
 4025728:	1086af04 	addi	r2,r2,6844
 402572c:	11000017 	ldw	r4,0(r2)
 4025730:	20800f17 	ldw	r2,60(r4)
 4025734:	10000126 	beq	r2,zero,402573c <exit+0x30>
 4025738:	103ee83a 	callr	r2
 402573c:	8009883a 	mov	r4,r16
 4025740:	4025a580 	call	4025a58 <_exit>

04025744 <memcmp>:
 4025744:	01c000c4 	movi	r7,3
 4025748:	3980192e 	bgeu	r7,r6,40257b0 <memcmp+0x6c>
 402574c:	2144b03a 	or	r2,r4,r5
 4025750:	11c4703a 	and	r2,r2,r7
 4025754:	10000f26 	beq	r2,zero,4025794 <memcmp+0x50>
 4025758:	20800003 	ldbu	r2,0(r4)
 402575c:	28c00003 	ldbu	r3,0(r5)
 4025760:	10c0151e 	bne	r2,r3,40257b8 <memcmp+0x74>
 4025764:	31bfff84 	addi	r6,r6,-2
 4025768:	01ffffc4 	movi	r7,-1
 402576c:	00000406 	br	4025780 <memcmp+0x3c>
 4025770:	20800003 	ldbu	r2,0(r4)
 4025774:	28c00003 	ldbu	r3,0(r5)
 4025778:	31bfffc4 	addi	r6,r6,-1
 402577c:	10c00e1e 	bne	r2,r3,40257b8 <memcmp+0x74>
 4025780:	21000044 	addi	r4,r4,1
 4025784:	29400044 	addi	r5,r5,1
 4025788:	31fff91e 	bne	r6,r7,4025770 <__flash_rwdata_start+0xfffffc84>
 402578c:	0005883a 	mov	r2,zero
 4025790:	f800283a 	ret
 4025794:	20c00017 	ldw	r3,0(r4)
 4025798:	28800017 	ldw	r2,0(r5)
 402579c:	18bfee1e 	bne	r3,r2,4025758 <__flash_rwdata_start+0xfffffc6c>
 40257a0:	31bfff04 	addi	r6,r6,-4
 40257a4:	21000104 	addi	r4,r4,4
 40257a8:	29400104 	addi	r5,r5,4
 40257ac:	39bff936 	bltu	r7,r6,4025794 <__flash_rwdata_start+0xfffffca8>
 40257b0:	303fe91e 	bne	r6,zero,4025758 <__flash_rwdata_start+0xfffffc6c>
 40257b4:	003ff506 	br	402578c <__flash_rwdata_start+0xfffffca0>
 40257b8:	10c5c83a 	sub	r2,r2,r3
 40257bc:	f800283a 	ret

040257c0 <__register_exitproc>:
 40257c0:	defffa04 	addi	sp,sp,-24
 40257c4:	dc000315 	stw	r16,12(sp)
 40257c8:	04000034 	movhi	r16,0
 40257cc:	8406af04 	addi	r16,r16,6844
 40257d0:	80c00017 	ldw	r3,0(r16)
 40257d4:	dc400415 	stw	r17,16(sp)
 40257d8:	dfc00515 	stw	ra,20(sp)
 40257dc:	18805217 	ldw	r2,328(r3)
 40257e0:	2023883a 	mov	r17,r4
 40257e4:	10003726 	beq	r2,zero,40258c4 <__register_exitproc+0x104>
 40257e8:	10c00117 	ldw	r3,4(r2)
 40257ec:	010007c4 	movi	r4,31
 40257f0:	20c00e16 	blt	r4,r3,402582c <__register_exitproc+0x6c>
 40257f4:	1a000044 	addi	r8,r3,1
 40257f8:	8800221e 	bne	r17,zero,4025884 <__register_exitproc+0xc4>
 40257fc:	18c00084 	addi	r3,r3,2
 4025800:	18c7883a 	add	r3,r3,r3
 4025804:	18c7883a 	add	r3,r3,r3
 4025808:	12000115 	stw	r8,4(r2)
 402580c:	10c7883a 	add	r3,r2,r3
 4025810:	19400015 	stw	r5,0(r3)
 4025814:	0005883a 	mov	r2,zero
 4025818:	dfc00517 	ldw	ra,20(sp)
 402581c:	dc400417 	ldw	r17,16(sp)
 4025820:	dc000317 	ldw	r16,12(sp)
 4025824:	dec00604 	addi	sp,sp,24
 4025828:	f800283a 	ret
 402582c:	00800034 	movhi	r2,0
 4025830:	10800004 	addi	r2,r2,0
 4025834:	10002626 	beq	r2,zero,40258d0 <__register_exitproc+0x110>
 4025838:	01006404 	movi	r4,400
 402583c:	d9400015 	stw	r5,0(sp)
 4025840:	d9800115 	stw	r6,4(sp)
 4025844:	d9c00215 	stw	r7,8(sp)
 4025848:	00000000 	call	0 <__alt_mem_sdram>
 402584c:	d9400017 	ldw	r5,0(sp)
 4025850:	d9800117 	ldw	r6,4(sp)
 4025854:	d9c00217 	ldw	r7,8(sp)
 4025858:	10001d26 	beq	r2,zero,40258d0 <__register_exitproc+0x110>
 402585c:	81000017 	ldw	r4,0(r16)
 4025860:	10000115 	stw	zero,4(r2)
 4025864:	02000044 	movi	r8,1
 4025868:	22405217 	ldw	r9,328(r4)
 402586c:	0007883a 	mov	r3,zero
 4025870:	12400015 	stw	r9,0(r2)
 4025874:	20805215 	stw	r2,328(r4)
 4025878:	10006215 	stw	zero,392(r2)
 402587c:	10006315 	stw	zero,396(r2)
 4025880:	883fde26 	beq	r17,zero,40257fc <__flash_rwdata_start+0xfffffd10>
 4025884:	18c9883a 	add	r4,r3,r3
 4025888:	2109883a 	add	r4,r4,r4
 402588c:	1109883a 	add	r4,r2,r4
 4025890:	21802215 	stw	r6,136(r4)
 4025894:	01800044 	movi	r6,1
 4025898:	12406217 	ldw	r9,392(r2)
 402589c:	30cc983a 	sll	r6,r6,r3
 40258a0:	4992b03a 	or	r9,r9,r6
 40258a4:	12406215 	stw	r9,392(r2)
 40258a8:	21c04215 	stw	r7,264(r4)
 40258ac:	01000084 	movi	r4,2
 40258b0:	893fd21e 	bne	r17,r4,40257fc <__flash_rwdata_start+0xfffffd10>
 40258b4:	11006317 	ldw	r4,396(r2)
 40258b8:	218cb03a 	or	r6,r4,r6
 40258bc:	11806315 	stw	r6,396(r2)
 40258c0:	003fce06 	br	40257fc <__flash_rwdata_start+0xfffffd10>
 40258c4:	18805304 	addi	r2,r3,332
 40258c8:	18805215 	stw	r2,328(r3)
 40258cc:	003fc606 	br	40257e8 <__flash_rwdata_start+0xfffffcfc>
 40258d0:	00bfffc4 	movi	r2,-1
 40258d4:	003fd006 	br	4025818 <__flash_rwdata_start+0xfffffd2c>

040258d8 <__call_exitprocs>:
 40258d8:	defff504 	addi	sp,sp,-44
 40258dc:	df000915 	stw	fp,36(sp)
 40258e0:	dd400615 	stw	r21,24(sp)
 40258e4:	dc800315 	stw	r18,12(sp)
 40258e8:	dfc00a15 	stw	ra,40(sp)
 40258ec:	ddc00815 	stw	r23,32(sp)
 40258f0:	dd800715 	stw	r22,28(sp)
 40258f4:	dd000515 	stw	r20,20(sp)
 40258f8:	dcc00415 	stw	r19,16(sp)
 40258fc:	dc400215 	stw	r17,8(sp)
 4025900:	dc000115 	stw	r16,4(sp)
 4025904:	d9000015 	stw	r4,0(sp)
 4025908:	2839883a 	mov	fp,r5
 402590c:	04800044 	movi	r18,1
 4025910:	057fffc4 	movi	r21,-1
 4025914:	00800034 	movhi	r2,0
 4025918:	1086af04 	addi	r2,r2,6844
 402591c:	12000017 	ldw	r8,0(r2)
 4025920:	45005217 	ldw	r20,328(r8)
 4025924:	44c05204 	addi	r19,r8,328
 4025928:	a0001c26 	beq	r20,zero,402599c <__call_exitprocs+0xc4>
 402592c:	a0800117 	ldw	r2,4(r20)
 4025930:	15ffffc4 	addi	r23,r2,-1
 4025934:	b8000d16 	blt	r23,zero,402596c <__call_exitprocs+0x94>
 4025938:	14000044 	addi	r16,r2,1
 402593c:	8421883a 	add	r16,r16,r16
 4025940:	8421883a 	add	r16,r16,r16
 4025944:	84402004 	addi	r17,r16,128
 4025948:	a463883a 	add	r17,r20,r17
 402594c:	a421883a 	add	r16,r20,r16
 4025950:	e0001e26 	beq	fp,zero,40259cc <__call_exitprocs+0xf4>
 4025954:	80804017 	ldw	r2,256(r16)
 4025958:	e0801c26 	beq	fp,r2,40259cc <__call_exitprocs+0xf4>
 402595c:	bdffffc4 	addi	r23,r23,-1
 4025960:	843fff04 	addi	r16,r16,-4
 4025964:	8c7fff04 	addi	r17,r17,-4
 4025968:	bd7ff91e 	bne	r23,r21,4025950 <__flash_rwdata_start+0xfffffe64>
 402596c:	00800034 	movhi	r2,0
 4025970:	10800004 	addi	r2,r2,0
 4025974:	10000926 	beq	r2,zero,402599c <__call_exitprocs+0xc4>
 4025978:	a0800117 	ldw	r2,4(r20)
 402597c:	1000301e 	bne	r2,zero,4025a40 <__call_exitprocs+0x168>
 4025980:	a0800017 	ldw	r2,0(r20)
 4025984:	10003226 	beq	r2,zero,4025a50 <__call_exitprocs+0x178>
 4025988:	a009883a 	mov	r4,r20
 402598c:	98800015 	stw	r2,0(r19)
 4025990:	00000000 	call	0 <__alt_mem_sdram>
 4025994:	9d000017 	ldw	r20,0(r19)
 4025998:	a03fe41e 	bne	r20,zero,402592c <__flash_rwdata_start+0xfffffe40>
 402599c:	dfc00a17 	ldw	ra,40(sp)
 40259a0:	df000917 	ldw	fp,36(sp)
 40259a4:	ddc00817 	ldw	r23,32(sp)
 40259a8:	dd800717 	ldw	r22,28(sp)
 40259ac:	dd400617 	ldw	r21,24(sp)
 40259b0:	dd000517 	ldw	r20,20(sp)
 40259b4:	dcc00417 	ldw	r19,16(sp)
 40259b8:	dc800317 	ldw	r18,12(sp)
 40259bc:	dc400217 	ldw	r17,8(sp)
 40259c0:	dc000117 	ldw	r16,4(sp)
 40259c4:	dec00b04 	addi	sp,sp,44
 40259c8:	f800283a 	ret
 40259cc:	a0800117 	ldw	r2,4(r20)
 40259d0:	80c00017 	ldw	r3,0(r16)
 40259d4:	10bfffc4 	addi	r2,r2,-1
 40259d8:	15c01426 	beq	r2,r23,4025a2c <__call_exitprocs+0x154>
 40259dc:	80000015 	stw	zero,0(r16)
 40259e0:	183fde26 	beq	r3,zero,402595c <__flash_rwdata_start+0xfffffe70>
 40259e4:	95c8983a 	sll	r4,r18,r23
 40259e8:	a0806217 	ldw	r2,392(r20)
 40259ec:	a5800117 	ldw	r22,4(r20)
 40259f0:	2084703a 	and	r2,r4,r2
 40259f4:	10000b26 	beq	r2,zero,4025a24 <__call_exitprocs+0x14c>
 40259f8:	a0806317 	ldw	r2,396(r20)
 40259fc:	2088703a 	and	r4,r4,r2
 4025a00:	20000c1e 	bne	r4,zero,4025a34 <__call_exitprocs+0x15c>
 4025a04:	89400017 	ldw	r5,0(r17)
 4025a08:	d9000017 	ldw	r4,0(sp)
 4025a0c:	183ee83a 	callr	r3
 4025a10:	a0800117 	ldw	r2,4(r20)
 4025a14:	15bfbf1e 	bne	r2,r22,4025914 <__flash_rwdata_start+0xfffffe28>
 4025a18:	98800017 	ldw	r2,0(r19)
 4025a1c:	153fcf26 	beq	r2,r20,402595c <__flash_rwdata_start+0xfffffe70>
 4025a20:	003fbc06 	br	4025914 <__flash_rwdata_start+0xfffffe28>
 4025a24:	183ee83a 	callr	r3
 4025a28:	003ff906 	br	4025a10 <__flash_rwdata_start+0xffffff24>
 4025a2c:	a5c00115 	stw	r23,4(r20)
 4025a30:	003feb06 	br	40259e0 <__flash_rwdata_start+0xfffffef4>
 4025a34:	89000017 	ldw	r4,0(r17)
 4025a38:	183ee83a 	callr	r3
 4025a3c:	003ff406 	br	4025a10 <__flash_rwdata_start+0xffffff24>
 4025a40:	a0800017 	ldw	r2,0(r20)
 4025a44:	a027883a 	mov	r19,r20
 4025a48:	1029883a 	mov	r20,r2
 4025a4c:	003fb606 	br	4025928 <__flash_rwdata_start+0xfffffe3c>
 4025a50:	0005883a 	mov	r2,zero
 4025a54:	003ffb06 	br	4025a44 <__flash_rwdata_start+0xffffff58>

04025a58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4025a58:	defffd04 	addi	sp,sp,-12
 4025a5c:	df000215 	stw	fp,8(sp)
 4025a60:	df000204 	addi	fp,sp,8
 4025a64:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4025a68:	0001883a 	nop
 4025a6c:	e0bfff17 	ldw	r2,-4(fp)
 4025a70:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4025a74:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4025a78:	10000226 	beq	r2,zero,4025a84 <_exit+0x2c>
    ALT_SIM_FAIL();
 4025a7c:	002af070 	cmpltui	zero,zero,43969
 4025a80:	00000106 	br	4025a88 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4025a84:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4025a88:	003fff06 	br	4025a88 <__flash_rwdata_start+0xffffff9c>
